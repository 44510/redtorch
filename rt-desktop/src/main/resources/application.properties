# 0为随机端口
# server.port=9111
# 只允许本机访问
server.address=127.0.0.1


# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
# 不要设置过大，如果过大，启动项目会报错：打开文件数过多
server.undertow.threads.io=4

# 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
# 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
server.undertow.threads.worker=16

# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
server.undertow.buffer-size=10240

# 是否分配的直接内存(NIO直接分配的堆外内存)
server.undertow.direct-buffers=true

spring.pid.fail-on-write-error=true
logging.config=classpath:logback-spring.xml

#BlockingWaitStrategy 低效 低CPU
#SleepingWaitStrategy 对生产者影响较小
#YieldingWaitStrategy 高性能 ,适当CPU占用，建议开启BIOS超线程
#BusySpinWaitStrategy 高性能,高CPU占用,需要CPU实际物理核心数量高于FastEventDynamicHandler数量。建议最低使用多核物理机,关闭BIOS超线程!
xyz.redtorch.common.service.impl.FastEventServiceImpl.waitStrategy=BlockingWaitStrategy
xyz.redtorch.common.service.impl.RpcRspHandlerServiceImpl.defaultRpcTimeoutSeconds=30


rt.desktop.apiBasePath=/api

rt.desktop.masterServerHostPortSet=127.0.0.1:9099
rt.desktop.websocketPath=/websocket
rt.desktop.rpcPath=/api/rpc
rt.desktop.loginPath=/api/login
rt.desktop.rpcProcessNormalThreadsNum=10













































