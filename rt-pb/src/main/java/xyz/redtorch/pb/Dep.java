// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xyz/redtorch/pb/dep.proto

package xyz.redtorch.pb;

public final class Dep {
  private Dep() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DataExchangeProtocolOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xyz.redtorch.pb.DataExchangeProtocol)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 报文类型
     * </pre>
     *
     * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
     * @return The enum numeric value on the wire for contentType.
     */
    int getContentTypeValue();
    /**
     * <pre>
     * 报文类型
     * </pre>
     *
     * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
     * @return The contentType.
     */
    xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType getContentType();

    /**
     * <pre>
     * RPC ID
     * </pre>
     *
     * <code>fixed32 rpcId = 2;</code>
     * @return The rpcId.
     */
    int getRpcId();

    /**
     * <pre>
     * 数据内容
     * </pre>
     *
     * <code>bytes contentBytes = 3;</code>
     * @return The contentBytes.
     */
    com.google.protobuf.ByteString getContentBytes();

    /**
     * <pre>
     * 时间戳
     * </pre>
     *
     * <code>fixed64 timestamp = 4;</code>
     * @return The timestamp.
     */
    long getTimestamp();
  }
  /**
   * <pre>
   * 数据交换协议
   * </pre>
   *
   * Protobuf type {@code xyz.redtorch.pb.DataExchangeProtocol}
   */
  public static final class DataExchangeProtocol extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:xyz.redtorch.pb.DataExchangeProtocol)
      DataExchangeProtocolOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DataExchangeProtocol.newBuilder() to construct.
    private DataExchangeProtocol(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataExchangeProtocol() {
      contentType_ = 0;
      contentBytes_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DataExchangeProtocol();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DataExchangeProtocol(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              contentType_ = rawValue;
              break;
            }
            case 21: {

              rpcId_ = input.readFixed32();
              break;
            }
            case 26: {

              contentBytes_ = input.readBytes();
              break;
            }
            case 33: {

              timestamp_ = input.readFixed64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return xyz.redtorch.pb.Dep.internal_static_xyz_redtorch_pb_DataExchangeProtocol_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return xyz.redtorch.pb.Dep.internal_static_xyz_redtorch_pb_DataExchangeProtocol_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              xyz.redtorch.pb.Dep.DataExchangeProtocol.class, xyz.redtorch.pb.Dep.DataExchangeProtocol.Builder.class);
    }

    /**
     * <pre>
     * 报文类型
     * </pre>
     *
     * Protobuf enum {@code xyz.redtorch.pb.DataExchangeProtocol.ContentType}
     */
    public enum ContentType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * 常规
       * </pre>
       *
       * <code>ROUTINE = 0;</code>
       */
      ROUTINE(0),
      /**
       * <pre>
       * LZ4压缩
       * </pre>
       *
       * <code>COMPRESSED_LZ4 = 1;</code>
       */
      COMPRESSED_LZ4(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * 常规
       * </pre>
       *
       * <code>ROUTINE = 0;</code>
       */
      public static final int ROUTINE_VALUE = 0;
      /**
       * <pre>
       * LZ4压缩
       * </pre>
       *
       * <code>COMPRESSED_LZ4 = 1;</code>
       */
      public static final int COMPRESSED_LZ4_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ContentType forNumber(int value) {
        switch (value) {
          case 0: return ROUTINE;
          case 1: return COMPRESSED_LZ4;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ContentType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ContentType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ContentType>() {
              public ContentType findValueByNumber(int number) {
                return ContentType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return xyz.redtorch.pb.Dep.DataExchangeProtocol.getDescriptor().getEnumTypes().get(0);
      }

      private static final ContentType[] VALUES = values();

      public static ContentType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ContentType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.DataExchangeProtocol.ContentType)
    }

    public static final int CONTENTTYPE_FIELD_NUMBER = 1;
    private int contentType_;
    /**
     * <pre>
     * 报文类型
     * </pre>
     *
     * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
     * @return The enum numeric value on the wire for contentType.
     */
    @java.lang.Override public int getContentTypeValue() {
      return contentType_;
    }
    /**
     * <pre>
     * 报文类型
     * </pre>
     *
     * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
     * @return The contentType.
     */
    @java.lang.Override public xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType getContentType() {
      @SuppressWarnings("deprecation")
      xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType result = xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType.valueOf(contentType_);
      return result == null ? xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType.UNRECOGNIZED : result;
    }

    public static final int RPCID_FIELD_NUMBER = 2;
    private int rpcId_;
    /**
     * <pre>
     * RPC ID
     * </pre>
     *
     * <code>fixed32 rpcId = 2;</code>
     * @return The rpcId.
     */
    @java.lang.Override
    public int getRpcId() {
      return rpcId_;
    }

    public static final int CONTENTBYTES_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString contentBytes_;
    /**
     * <pre>
     * 数据内容
     * </pre>
     *
     * <code>bytes contentBytes = 3;</code>
     * @return The contentBytes.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getContentBytes() {
      return contentBytes_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private long timestamp_;
    /**
     * <pre>
     * 时间戳
     * </pre>
     *
     * <code>fixed64 timestamp = 4;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (contentType_ != xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType.ROUTINE.getNumber()) {
        output.writeEnum(1, contentType_);
      }
      if (rpcId_ != 0) {
        output.writeFixed32(2, rpcId_);
      }
      if (!contentBytes_.isEmpty()) {
        output.writeBytes(3, contentBytes_);
      }
      if (timestamp_ != 0L) {
        output.writeFixed64(4, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (contentType_ != xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType.ROUTINE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, contentType_);
      }
      if (rpcId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, rpcId_);
      }
      if (!contentBytes_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, contentBytes_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof xyz.redtorch.pb.Dep.DataExchangeProtocol)) {
        return super.equals(obj);
      }
      xyz.redtorch.pb.Dep.DataExchangeProtocol other = (xyz.redtorch.pb.Dep.DataExchangeProtocol) obj;

      if (contentType_ != other.contentType_) return false;
      if (getRpcId()
          != other.getRpcId()) return false;
      if (!getContentBytes()
          .equals(other.getContentBytes())) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTENTTYPE_FIELD_NUMBER;
      hash = (53 * hash) + contentType_;
      hash = (37 * hash) + RPCID_FIELD_NUMBER;
      hash = (53 * hash) + getRpcId();
      hash = (37 * hash) + CONTENTBYTES_FIELD_NUMBER;
      hash = (53 * hash) + getContentBytes().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static xyz.redtorch.pb.Dep.DataExchangeProtocol parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(xyz.redtorch.pb.Dep.DataExchangeProtocol prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 数据交换协议
     * </pre>
     *
     * Protobuf type {@code xyz.redtorch.pb.DataExchangeProtocol}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xyz.redtorch.pb.DataExchangeProtocol)
        xyz.redtorch.pb.Dep.DataExchangeProtocolOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return xyz.redtorch.pb.Dep.internal_static_xyz_redtorch_pb_DataExchangeProtocol_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return xyz.redtorch.pb.Dep.internal_static_xyz_redtorch_pb_DataExchangeProtocol_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                xyz.redtorch.pb.Dep.DataExchangeProtocol.class, xyz.redtorch.pb.Dep.DataExchangeProtocol.Builder.class);
      }

      // Construct using xyz.redtorch.pb.Dep.DataExchangeProtocol.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        contentType_ = 0;

        rpcId_ = 0;

        contentBytes_ = com.google.protobuf.ByteString.EMPTY;

        timestamp_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return xyz.redtorch.pb.Dep.internal_static_xyz_redtorch_pb_DataExchangeProtocol_descriptor;
      }

      @java.lang.Override
      public xyz.redtorch.pb.Dep.DataExchangeProtocol getDefaultInstanceForType() {
        return xyz.redtorch.pb.Dep.DataExchangeProtocol.getDefaultInstance();
      }

      @java.lang.Override
      public xyz.redtorch.pb.Dep.DataExchangeProtocol build() {
        xyz.redtorch.pb.Dep.DataExchangeProtocol result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public xyz.redtorch.pb.Dep.DataExchangeProtocol buildPartial() {
        xyz.redtorch.pb.Dep.DataExchangeProtocol result = new xyz.redtorch.pb.Dep.DataExchangeProtocol(this);
        result.contentType_ = contentType_;
        result.rpcId_ = rpcId_;
        result.contentBytes_ = contentBytes_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof xyz.redtorch.pb.Dep.DataExchangeProtocol) {
          return mergeFrom((xyz.redtorch.pb.Dep.DataExchangeProtocol)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(xyz.redtorch.pb.Dep.DataExchangeProtocol other) {
        if (other == xyz.redtorch.pb.Dep.DataExchangeProtocol.getDefaultInstance()) return this;
        if (other.contentType_ != 0) {
          setContentTypeValue(other.getContentTypeValue());
        }
        if (other.getRpcId() != 0) {
          setRpcId(other.getRpcId());
        }
        if (other.getContentBytes() != com.google.protobuf.ByteString.EMPTY) {
          setContentBytes(other.getContentBytes());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        xyz.redtorch.pb.Dep.DataExchangeProtocol parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (xyz.redtorch.pb.Dep.DataExchangeProtocol) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int contentType_ = 0;
      /**
       * <pre>
       * 报文类型
       * </pre>
       *
       * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
       * @return The enum numeric value on the wire for contentType.
       */
      @java.lang.Override public int getContentTypeValue() {
        return contentType_;
      }
      /**
       * <pre>
       * 报文类型
       * </pre>
       *
       * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
       * @param value The enum numeric value on the wire for contentType to set.
       * @return This builder for chaining.
       */
      public Builder setContentTypeValue(int value) {
        
        contentType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 报文类型
       * </pre>
       *
       * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
       * @return The contentType.
       */
      @java.lang.Override
      public xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType getContentType() {
        @SuppressWarnings("deprecation")
        xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType result = xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType.valueOf(contentType_);
        return result == null ? xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 报文类型
       * </pre>
       *
       * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
       * @param value The contentType to set.
       * @return This builder for chaining.
       */
      public Builder setContentType(xyz.redtorch.pb.Dep.DataExchangeProtocol.ContentType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        contentType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 报文类型
       * </pre>
       *
       * <code>.xyz.redtorch.pb.DataExchangeProtocol.ContentType contentType = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentType() {
        
        contentType_ = 0;
        onChanged();
        return this;
      }

      private int rpcId_ ;
      /**
       * <pre>
       * RPC ID
       * </pre>
       *
       * <code>fixed32 rpcId = 2;</code>
       * @return The rpcId.
       */
      @java.lang.Override
      public int getRpcId() {
        return rpcId_;
      }
      /**
       * <pre>
       * RPC ID
       * </pre>
       *
       * <code>fixed32 rpcId = 2;</code>
       * @param value The rpcId to set.
       * @return This builder for chaining.
       */
      public Builder setRpcId(int value) {
        
        rpcId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RPC ID
       * </pre>
       *
       * <code>fixed32 rpcId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRpcId() {
        
        rpcId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString contentBytes_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * 数据内容
       * </pre>
       *
       * <code>bytes contentBytes = 3;</code>
       * @return The contentBytes.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getContentBytes() {
        return contentBytes_;
      }
      /**
       * <pre>
       * 数据内容
       * </pre>
       *
       * <code>bytes contentBytes = 3;</code>
       * @param value The contentBytes to set.
       * @return This builder for chaining.
       */
      public Builder setContentBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        contentBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 数据内容
       * </pre>
       *
       * <code>bytes contentBytes = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentBytes() {
        
        contentBytes_ = getDefaultInstance().getContentBytes();
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * 时间戳
       * </pre>
       *
       * <code>fixed64 timestamp = 4;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * 时间戳
       * </pre>
       *
       * <code>fixed64 timestamp = 4;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 时间戳
       * </pre>
       *
       * <code>fixed64 timestamp = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:xyz.redtorch.pb.DataExchangeProtocol)
    }

    // @@protoc_insertion_point(class_scope:xyz.redtorch.pb.DataExchangeProtocol)
    private static final xyz.redtorch.pb.Dep.DataExchangeProtocol DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new xyz.redtorch.pb.Dep.DataExchangeProtocol();
    }

    public static xyz.redtorch.pb.Dep.DataExchangeProtocol getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataExchangeProtocol>
        PARSER = new com.google.protobuf.AbstractParser<DataExchangeProtocol>() {
      @java.lang.Override
      public DataExchangeProtocol parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DataExchangeProtocol(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DataExchangeProtocol> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataExchangeProtocol> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public xyz.redtorch.pb.Dep.DataExchangeProtocol getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xyz_redtorch_pb_DataExchangeProtocol_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xyz_redtorch_pb_DataExchangeProtocol_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031xyz/redtorch/pb/dep.proto\022\017xyz.redtorc" +
      "h.pb\"\306\001\n\024DataExchangeProtocol\022F\n\013content" +
      "Type\030\001 \001(\01621.xyz.redtorch.pb.DataExchang" +
      "eProtocol.ContentType\022\r\n\005rpcId\030\002 \001(\007\022\024\n\014" +
      "contentBytes\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\006\".\n" +
      "\013ContentType\022\013\n\007ROUTINE\020\000\022\022\n\016COMPRESSED_" +
      "LZ4\020\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_xyz_redtorch_pb_DataExchangeProtocol_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xyz_redtorch_pb_DataExchangeProtocol_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xyz_redtorch_pb_DataExchangeProtocol_descriptor,
        new java.lang.String[] { "ContentType", "RpcId", "ContentBytes", "Timestamp", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
