{"version":3,"sources":["stores/nodeStore.tsx","stores/gatewayStore.tsx","stores/userStore.tsx","stores/authenticationStore.tsx","stores/tradeContractStore.tsx","stores/tradeOrderStore.tsx","stores/tradePositionStore.tsx","stores/tradeAccountStore.tsx","stores/tradeTradeStore.tsx","stores/tradeActionStore.tsx","stores/tradeTickStore.tsx","stores/customizeStore.tsx","stores/marketDataRecordingStore.tsx","stores/operatorStore.tsx","stores/storesIndex.tsx","request.tsx","node/pb/pb.js","node/client/service/rpcClientApi.ts","pages/management/ManagementPage.tsx","pages/management/NodePage.tsx","pages/management/GatewayPage.tsx","pages/common/SettingPage.tsx","pages/LoginPage.tsx","pages/NotFoundPage.tsx","pages/management/UserPage.tsx","pages/common/RedirectToManagementPage.tsx","pages/common/RedirectToTradeMobilePage.tsx","pages/common/RedirectToTradePage.tsx","pages/trade/childcomponents/AccountDetailsPage.tsx","pages/trade/childcomponents/PositionDetailsPage.tsx","pages/trade/childcomponents/OrderDetailsPage.tsx","pages/trade/childcomponents/ContractDetailsPage.tsx","pages/trade/childcomponents/FavoriteContractDetailsPage.tsx","pages/trade/childcomponents/TradeDetailsPage.tsx","pages/trade/childcomponents/TradeBoardPage.tsx","pages/trade/childcomponents/MarketDetailsPage.tsx","pages/trade/TradeHomePage.tsx","pages/trade/TradePage.tsx","pages/tradeMobile/TradeMobileHomePage.tsx","pages/tradeMobile/TradeMobilePage.tsx","pages/management/OperatorPage.tsx","pages/management/MarketDataRecordingPage.tsx","router.tsx","index.tsx","node/client/service/rpcClientProcess.ts","node/client/service/rpcClientRtnHandler.ts","node/client/service/rpcClientRspHandler.ts","utils.tsx","node/client/websocket/webSocketClientHandler.ts"],"names":["nodeStore","constructor","nodeList","makeObservable","this","observable","getNodeList","action","createNode","deleteNodeByNodeId","resetNodeTokenByNodeId","updateNodeDescriptionByNodeId","setNodeList","request","then","res","status","Array","isArray","voData","toast","error","message","catch","err","console","log","nodeId","method","data","description","gatewayStore","gatewayList","getGatewayList","saveOrUpdateGateway","deleteGatewayByGatewayId","connectGatewayByGatewayId","disconnectGatewayByGatewayId","disconnectAllGateways","connectAllGateways","setGatewayList","gateway","gatewayId","userStore","userList","getUserList","addUser","deleteUserByUsername","updateUserDescriptionByUsername","updateUserPasswordByUsername","updateUserPermissionByUsername","setUserList","user","username","password","authenticationStore","isAuthenticated","userPo","saveLoginInfoState","operatorId","authToken","initStore","setUsername","setPassword","setSaveLoginInfoState","logout","getAuthToken","checkLoginStatus","login","setLoginSuccess","deleteLoginInfo","changePassword","window","setInterval","userPoJsonStr","sessionStorage","getItem","JSON","parse","randomAuthToken","webSocketClientHandler","setAuthToken","connect","localStorage","removeItem","disconnect","setItem","stringify","newPassword","success","tradeContractStore","mixContractList","mxiContractMap","Map","hasBeenChanged","startIntervalCheckChange","coverMapToList","setTimeout","getMixContractList","storeContract","clearAndStoreContractList","storeContractList","rpcClientApi","asyncGetMixContractList","contract","isDevEnv","debug","set","unifiedSymbol","newMixContractMap","i","length","values","tradeOrderStore","orderList","orderMap","getOrderList","storeOrder","clearAndStoreOrderList","storeOrderList","asyncGetOrderList","order","orderId","newOrderMap","tempOrderList","sortOrderListByDatetimeAndOrderId","sort","orderA","orderB","orderAKey","orderDate","orderTime","leftZeroPad","adapterOrderId","orderBKey","localeCompare","CurrencyEnum","xyz","redtorch","pb","tradePositionStore","positionList","positionMap","summaryMap","getPositionList","storePosition","clearAndStorePositionList","storePositionList","calcSummary","asyncGetPositionList","position","positionId","newPositionMap","tempPositionList","sortPositionListByAccountIdAndPositionId","allContractValue","allOpenPositionProfit","tradeAccountStore","selectedAccountIdSet","has","accountId","currency","CNY","openPositionProfit","contractValue","cnySummary","positionA","positionB","positionAKey","positionBKey","accountList","accountMap","Set","getAccountList","setSelectedAccountIdSet","storeAccount","clearAndStoreAccountList","storeAccountList","asyncGetAccountList","account","newAccountMap","tempAccountList","sortAccountListByAccountId","allBalance","allPreBalance","allCloseProfit","allTodayProfit","allPositionProfit","allMargin","allCommission","allDepositAndWithdraw","balance","preBalance","withdraw","deposit","closeProfit","positionProfit","margin","commission","accountA","accountB","tradeTradeStore","tradeList","tradeMap","getTradeList","storeTrade","clearAndStoreTradeList","storeTradeList","asyncGetTradeList","trade","tradeId","newTradeMap","tempTradeList","sortTradeListByDatetimeAndTradeId","tradeA","tradeB","tradeAKey","tradeDate","tradeTime","adapterTradeId","tradeBKey","SubmitOrderReqField","ContractField","OrderPriceTypeEnum","DirectionEnum","OffsetFlagEnum","TimeConditionEnum","VolumeConditionEnum","HedgeFlagEnum","AccountField","ContingentConditionEnum","ForceCloseReasonEnum","tradeActionStore","selectedContract","orderPriceType","OPT_LimitPrice","autoFillOrderPriceType","price","stopPrice","volume","timeCondition","TC_GFD","volumeCondition","VC_AV","minVolume","hedgeFlag","HF_Speculation","contingentCondition","CC_Immediately","setSelectedContract","fillPrice","setVolume","setMinVolume","setHedgeFlag","setPrice","setStopPrice","setTimeCondition","setContingentCondition","setVolumeCondition","setOrderPriceType","setAutoFillOrderPriceType","submitOrder","cancelOrder","reset","get","asyncSubscribe","warn","fullName","tradeTickStore","mixTickMap","tick","tmpPrice","lastPrice","upperLimit","lowerLimit","bidPrice","askPrice","Number","MAX_VALUE","parseInt","direction","offsetFlag","originOrderId","contractField","fromObject","submitOrderReqField","OPT_AnyPrice","OPT_FiveLevelPrice","OPT_BestPrice","OPT_LastPrice","OPT_LastPricePlusOneTicks","OPT_LastPricePlusThreeTicks","D_Buy","D_Sell","OF_Open","OF_Close","OF_CloseToday","OF_CloseYesterday","TC_GTC","TC_IOC","VC_MV","VC_CV","HF_Hedge","HF_MarketMaker","HF_Arbitrage","HF_SpecHedge","HF_HedgeSpec","CC_LastPriceGreaterEqualStopPrice","CC_LastPriceLesserEqualStopPrice","CC_LocalLastPriceGreaterEqualStopPrice","CC_LocalLastPriceLesserEqualStopPrice","accountField","accountCode","code","forceCloseReason","FCR_NotForceClose","asyncSubmitOrder","asyncCancelOrder","tickList","selectedTick","startIntervalUpdateSelectedTick","setSelectedTick","storeTick","clearAndStoreTickList","storeTickList","newMixTickMap","customizeStore","favoriteContractList","favoriteContractUnifiedSymbolSet","getFavoriteContractList","addFavoriteContractByUnifiedSymbol","deleteFavoriteContractByUnifiedSymbol","setFavoriteContractList","add","autoClose","type","marketDataRecordingStore","contractList","contractUnifiedSymbolSet","getContractList","addContractByUnifiedSymbol","deleteContractByUnifiedSymbol","setContractList","info","operatorStore","operatorList","operatorMap","getOperatorList","saveOrUpdateOperator","deleteOperatorByOperatorId","createOperator","setOperatorList","forEach","element","operator","browserHistory","createBrowserHistory","routingStore","location","history","push","state","replace","go","n","goBack","goForward","_updateLocation","bind","newState","store","handleLocationChange","unsubscribeFromHistory","listen","subscribe","listener","unsubscribeFromStore","observe","rawLocation","unsubscribe","syncHistoryWithStore","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","extend","errorHandler","response","errortext","statusText","url","credentials","interceptors","use","options","headers","$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","StrategyEngineTypeEnum","valuesById","Object","create","GatewayTypeEnum","GatewayAdapterTypeEnum","CommonStatusEnum","LogLevelEnum","MarketDataDBTypeEnum","BarPeriodEnum","ConnectStatusEnum","OrderActionStatusTyp","OrderStatusEnum","OrderSubmitStatusEnum","ProductClassEnum","PositionTypeEnum","PositionDirectionEnum","OrderTypeEnum","ActionFlagEnum","TradingRightEnum","OrderSourceEnum","TradeTypeEnum","PriceSourceEnum","ExchangeEnum","OptionsTypeEnum","StrikeModeEnum","CombinationTypeEnum","GatewayField","properties","keys","prototype","name","gatewayType","gatewayAdapterType","authErrorFlag","encode","writer","hasOwnProperty","uint32","string","int32","bool","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isString","object","String","Boolean","toObject","defaults","enums","toJSON","toJSONOptions","contractId","thirdPartyId","symbol","exchange","productClass","multiplier","priceTick","longMarginRatio","shortMarginRatio","maxMarginSideAlgorithm","underlyingSymbol","strikePrice","optionsType","underlyingMultiplier","lastTradeDateOrContractMonth","maxMarketOrderVolume","minMarketOrderVolume","maxLimitOrderVolume","minLimitOrderVolume","combinationType","double","fixed32","isInteger","json","isFinite","holder","available","localCreatedTimestamp","Long","fromBits","fixed64","low","high","fromValue","unsigned","LongBits","toNumber","long","longs","toString","call","OrderField","orderLocalId","brokerOrderSeq","orderSysId","sequenceNo","orderStatus","totalVolume","tradedVolume","gtdDate","autoSuspend","userForceClose","swapOrder","tradingDay","activeTime","suspendTime","cancelTime","updateTime","statusMsg","frontId","sessionId","orderSubmitStatus","fork","TypeError","TradeField","settlementId","tradeType","priceSource","tradeTimestamp","PositionField","positionDirection","frozen","ydPosition","ydFrozen","tdPosition","tdFrozen","priceDiff","openPrice","openPriceDiff","positionProfitRatio","openPositionProfitRatio","useMargin","exchangeMargin","TickField","bidVolume","askVolume","actionDay","actionTime","actionTimestamp","avgPrice","totalBidVol","totalAskVol","weightedAvgBidPrice","weightedAvgAskPrice","iopv","yieldToMaturity","volumeDelta","turnover","turnoverDelta","numTrades","numTradesDelta","openInterest","openInterestDelta","preOpenInterest","preClosePrice","settlePrice","preSettlePrice","highPrice","lowPrice","emptyArray","end2","arrays","j","BarField","closePrice","CommonReqField","transactionId","CommonRspField","errorId","errorMsg","CancelOrderReqField","GatewaySettingField","gatewayName","gatewayDescription","implementClassName","ctpApiSetting","ibApiSetting","version","autoConnectTimeRanges","CtpApiSettingField","IbApiSettingField","userId","brokerId","tdHost","tdPort","mdHost","mdPort","authCode","userProductInfo","appId","host","port","clientId","LogField","logLevel","timestamp","content","NoticeField","RpcSubscribeReq","commonReq","RpcSubscribeRsp","commonRsp","RpcUnsubscribeReq","RpcUnsubscribeRsp","RpcSubmitOrderReq","submitOrderReq","RpcSubmitOrderRsp","RpcCancelOrderReq","cancelOrderReq","RpcCancelOrderRsp","RpcSearchContractReq","RpcSearchContractRsp","RpcGetOrderListReq","RpcGetOrderListRsp","RpcGetWorkingOrderListReq","RpcGetWorkingOrderListRsp","RpcQueryOrderByOrderIdReq","RpcQueryOrderByOrderIdRsp","RpcQueryOrderByOriginOrderIdReq","RpcQueryOrderByOriginOrderIdRsp","RpcQueryOrderListByAccountIdReq","RpcQueryOrderListByAccountIdRsp","RpcQueryOrderListByUnifiedSymbolReq","RpcQueryOrderListByUnifiedSymbolRsp","RpcGetTradeListReq","RpcGetTradeListRsp","RpcQueryTradeByTradeIdReq","RpcQueryTradeByTradeIdRsp","RpcQueryTradeListByUnifiedSymbolReq","RpcQueryTradeListByUnifiedSymbolRsp","RpcQueryTradeListByAccountIdReq","RpcQueryTradeListByAccountIdRsp","RpcQueryTradeListByOrderIdReq","RpcQueryTradeListByOrderIdRsp","RpcQueryTradeListByOriginOrderIdReq","RpcQueryTradeListByOriginOrderIdRsp","RpcGetPositionListReq","RpcGetPositionListRsp","RpcQueryPositionByPositionIdReq","RpcQueryPositionByPositionIdRsp","RpcQueryPositionListByAccountIdReq","RpcQueryPositionListByAccountIdRsp","RpcQueryPositionListByUnifiedSymbolReq","RpcQueryPositionListByUnifiedSymbolRsp","RpcGetAccountListReq","RpcGetAccountListRsp","RpcQueryAccountByAccountIdReq","RpcQueryAccountByAccountIdRsp","RpcQueryAccountListByAccountCodeReq","RpcQueryAccountListByAccountCodeRsp","RpcGetContractListReq","RpcGetContractListRsp","RpcQueryContractByContractIdReq","RpcQueryContractByContractIdRsp","RpcQueryContractListByUnifiedSymbolReq","RpcQueryContractListByUnifiedSymbolRsp","RpcQueryContractListByGatewayIdReq","RpcQueryContractListByGatewayIdRsp","RpcSyncSlaveNodeRuntimeDataReq","RpcSyncSlaveNodeRuntimeDataRsp","gatewaySetting","subscribedContract","RpcGetMixContractListReq","RpcGetMixContractListRsp","RpcGetTickListReq","RpcGetTickListRsp","RpcQueryDBBarListReq","startTimestamp","endTimestamp","barPeriod","marketDataDBType","RpcQueryDBBarListRsp","bar","RpcQueryDBTickListReq","RpcQueryDBTickListRsp","RpcQueryVolumeBarListReq","RpcQueryVolumeBarListRsp","RpcExceptionRsp","originalRpcId","originalTransactionId","originalTimestamp","RpcOrderRtn","RpcTradeRtn","RpcContractRtn","RpcPositionRtn","RpcAccountRtn","RpcTickRtn","RpcOrderListRtn","RpcTradeListRtn","RpcContractListRtn","RpcPositionListRtn","RpcAccountListRtn","RpcTickListRtn","RpcNoticeRtn","notice","RpcId","DataExchangeProtocol","contentType","rpcId","contentBytes","newBuffer","bytes","base64","ContentType","slice","module","exports","RpcClientApi","generateCommonReq","uuidv4","rpcSubscribeReq","rpcClientProcess","sendRpc","SUBSCRIBE_REQ","finish","asyncUnsubscribe","rpcUnsubscribeReq","UNSUBSCRIBE_REQ","rpcSubmitOrderReq","SUBMIT_ORDER_REQ","rpcCancelOrderReq","CANCEL_ORDER_REQ","asyncSearchContract","rpcSearchContractReq","SEARCH_CONTRACT_REQ","rpcGetAccountListReq","sendAsyncHttpRpc","GET_ACCOUNT_LIST_REQ","rpcGetMixContractListReq","GET_MIX_CONTRACT_LIST_REQ","rpcGetPositionListReq","GET_POSITION_LIST_REQ","rpcGetOrderListReq","GET_ORDER_LIST_REQ","rpcGetTradeListReq","GET_TRADE_LIST_REQ","asyncGetTickList","rpcGetTickListReq","GET_TICK_LIST_REQ","getInstance","instance","ManagementPage","inject","observer","React","selectedKey","onLinkClick","item","props","itemKey","render","routes","defaultSelectedKey","map","route","pathname","startsWith","path","Pivot","styles","linkIsSelected","height","link","linkContent","root","text","lineHeight","PivotItem","headerText","withRouter","columnProps","tokens","childrenGap","width","NodePage","showTokenModal","tokenForShow","nodeIdForTokenShow","hiddenDeleteNodeDialog","nodeIdForDelete","hiddenResetNodeTokenDialog","nodeIdForReset","editNodeDescription","editNodeId","showUpdateNodeDescriptionModal","windowInnerWidth","innerWidth","windowInnerHeight","innerHeight","resize","setState","openShowTokenModal","token","closeShowTokenModal","openDeleteNodeDialog","closeDeleteNodeDialog","openResetNodeTokenDialog","closeResetNodeTokenDialog","openUpdateNodeDescriptionModal","closeUpdateNodeDescriptionModal","getCommandBarItems","key","iconProps","iconName","onClick","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","columns","minWidth","isResizable","isCollapsible","onRender","style","color","recentlySessionId","recentlyIpAddress","recentlyPort","recentlyLoginTime","recentlyLogoutTime","IconButton","menuIconProps","role","aria-haspopup","aria-label","float","menuProps","items","classNames","mergeStyleSets","wrapper","maxHeight","Stack","CommandBar","className","ScrollablePane","scrollbarVisibility","ScrollbarVisibility","auto","DetailsList","compact","selectionMode","SelectionMode","none","setKey","layoutMode","DetailsListLayoutMode","fixedColumns","constrainMode","ConstrainMode","unconstrained","onRenderDetailsHeader","detailsHeaderProps","defaultRender","Sticky","stickyPosition","StickyPositionType","Header","isScrollSynced","DetailsHeader","paddingTop","check","cellIsCheck","onRenderDetailsFooter","detailsFooterProps","Footer","Modal","isOpen","isBlocking","onDismiss","padding","Item","align","horizontal","overflowX","TextField","label","defaultValue","disabled","readOnly","Dialog","hidden","dialogContentProps","DialogType","normal","title","subText","modalProps","main","maxWidth","DialogFooter","PrimaryButton","DefaultButton","Separator","fontSize","FontSizes","xxLarge","multiline","resizable","onChange","event","newValue","editNodeDescriptionOnChange","target","value","theme","createTheme","fonts","medium","fontFamily","actionButtonStyles","dropdownStyles","dropdown","gatewayTypeOptions","gatewayAdapterTypeOptions","gatewayImplementClassNameOptions","GatewayPage","hiddenDisconnectGatewayDialog","gatewayIdForDisconnect","hiddenDeleteGatewayDialog","gatewayIdForDelete","hiddenConnectAllGatewaysDialog","hiddenDisconnectAllGatewaysDialog","showEditGatewayModal","editGatewayId","editGatewayName","editGatewayNameErrorMessage","editGatewayDescription","editGatewayTargetNodeId","editGatewayTargetNodeIdErrorMessage","editGatewayImplementClassName","editGatewayImplementClassNameErrorMessage","editGatewayType","editGatewayAdapterType","editAutoConnectTimeRanges","editGatewayCtpSettingUserId","editGatewayCtpSettingUserIdErrorMessage","editGatewayCtpSettingPassword","editGatewayCtpSettingPasswordErrorMessage","editGatewayCtpSettingMdHost","editGatewayCtpSettingMdHostErrorMessage","editGatewayCtpSettingMdPort","editGatewayCtpSettingMdPortErrorMessage","editGatewayCtpSettingTdHost","editGatewayCtpSettingTdHostErrorMessage","editGatewayCtpSettingTdPort","editGatewayCtpSettingTdPortErrorMessage","editGatewayCtpSettingUserProductInfo","editGatewayCtpSettingAuthCode","editGatewayCtpSettingBrokerId","editGatewayCtpSettingBrokerIdErrorMessage","editGatewayCtpSettingAppId","editGatewayIbSettingClientId","editGatewayIbSettingHost","editGatewayIbSettingHostErrorMessage","editGatewayIbSettingPort","editGatewayIbSettingPortErrorMessage","openConnectAllGatewaysDialog","closeConnectAllGatewaysDialog","openDisconnectAllGatewaysDialog","closeDisconnectAllGatewaysDialog","openDisconnectGatewayDialog","closeDisconnectGatewayDialog","openDeleteGatewayDialog","closeDeleteGatewayDialog","openEditGatewayModal","CS_Disconnected","CS_Connected","CS_Disconnecting","CS_Connecting","GTE_TradeAndMarketData","GTE_MarketData","GTE_Trade","GAT_CTP","GAT_IB","GAT_COMMON","targetNodeId","ActionButton","allowDisabledFocus","checked","id","errorMessage","commonHandleFieldChange","ComboBox","allowFreeform","autoComplete","option","index","onPendingValueChanged","Dropdown","saveEditGateway","closeEditGatewayModal","validateAllField","validateEditGatewayName","validateEditGatewayTargetNodeId","normalIntegerPattern","test","validateEditGatewayImplementClassName","validateEditGatewayCtpSettingUserId","validateEditGatewayCtpSettingBrokerId","validateEditGatewayCtpSettingPassword","validateEditGatewayCtpSettingMdHost","hostNamePattern","ipv4PattenPattern","validateEditGatewayCtpSettingMdPort","portPattern","validateEditGatewayCtpSettingTdHost","validateEditGatewayCtpSettingTdPort","validateEditGatewayIbSettingHost","validateEditGatewayIbSettingPort","result","errorMessateState","isValidated","ctpSetting","ibSetting","SettingPage","handlePasswordChange","handleNewPasswordChange","LoginPage","redirectToPah","handleUsernameChange","handleSaveLoginInfoChange","currentTarget","to","Checkbox","background","DefaultPalette","themeTertiary","white","themePrimary","NotFoundPage","synchronizedHistory","UserPage","hiddenDeleteUserDialog","usernameForDelete","editUserDescription","editUsername","editUserPassword","editCanReadGateway","editCanChangeGatewayStatus","editCanWriteGateway","editCanReadUser","editCanChangeUserStatus","editCanWriteUser","editCanReadOperator","editCanChangeOperatorStatus","editCanWriteOperator","editCanReadNode","editCanChangeNodeToken","editCanWriteNode","editCanReadLog","editCanReadMarketDataRecording","editCanWriteMarketDataRecording","showUpdateUserDescriptionModal","showUpdateUserPasswordModal","showEditPermissionModal","showAddUserModal","openAddUserModal","closeAddUserModal","canReadGateway","canChangeGatewayStatus","canWriteGateway","canReadUser","canChangeUserStatus","canWriteUser","canReadOperator","canChangeOperatorStatus","canWriteOperator","canReadNode","canChangeNodeToken","canWriteNode","canReadLog","canReadMarketDataRecording","canWriteMarketDataRecording","openEditPermissionModal","closeEditPermissionModal","openDeleteUserDialog","closeDeleteUserDialog","openUpdateUserPasswordModal","closeUpdateUserPasswordModal","openUpdateUserDescriptionModal","closeUpdateUserDescriptionModal","loginTimes","recentlyNodeId","editUserPasswordOnChange","editUserDescriptionOnChange","RedirectToManagementPage","RedirectToTradeMobilePage","RedirectToTradePage","AccountDetailsPage","accountSelection","Selection","onSelectionChanged","pAccountSelection","selectionList","getSelection","handleAccountSelectionChange","componentHeight","borderBottom","labelStyls","display","textAlign","paddingRight","TooltipHost","calloutProps","gapSpace","tooltipProps","onRenderContent","delay","TooltipDelay","directionalHint","DirectionalHint","bottomCenter","styleClasses","todayProfit","numberFormat","marginRate","xSmall","whiteSpace","borderLeft","MarqueeSelection","selection","multiple","selectionPreservedOnEmptyClick","tableLabelStyls","PositionDetailsPage","showMerged","showEmpty","tradePositionStorePositionList","mergedPositionMap","tmpKey","tmpPosition","tmpGateway","deepCopy","isNumber","tooltipLabelStyls","clazzNames","cursor","PD_Long","PD_Short","PD_Net","PD_Unknown","HF_Unknown","decimalsLen","split","marginRatio","marginTop","OrderDetailsPage","statusChoice","showRejected","tradeAccountStoreOrderList","OS_AllTraded","OS_Canceled","OS_Rejected","OF_Unknown","OPT_Unknown","OS_PartTradedQueueing","OS_PartTradedNotQueueing","OS_NoTradeQueueing","OS_NoTradeNotQueueing","OS_Touched","OS_NotTouched","OS_Unknown","TC_GFA","TC_GFS","TC_GTD","TC_Unknown","VC_Unknown","CC_Unknown","onItemInvoked","ChoiceGroup","ev","ContractDetailsPage","filterExchange","filterProductClass","filterCurrency","filterSymbol","filterUnderlyingSymbol","filterThirdPartyId","filterName","filterLastTradeDateOrContractMonth","flag","indexOf","O_CallOptions","O_PutOptions","O_Unknown","paddingLeft","exchangeOptions","productClassOptions","currencyOptions","FavoriteContractDetailsPage","TradeDetailsPage","directionChoice","tradeTradeStoreTradeList","mergedTradeMap","tmpTrade","TradeBoardPage","showSubmitOrderModal","confirmPrice","actionType","closeSubmitOrderModal","openSubmitOrderModal","size","counter","reuseVolume","resetVolume","shortName","generateAccountVolumeDom","isFinal","tmpAccountVolumeDomList","finalVolume","step","min","accountVolumeDomList","execOrders","submitFlag","buyButtonForModal","coverButtonForModal","shortButtonForModal","sellButtonForModal","borderRight","paddingBottom","overflowY","dragOptions","moveMenuItemText","closeMenuItemText","menu","ContextualMenu","large","MarketDetailsPage","askPrice1","askPrice1ClassName","askVolume1","askPrice2","askPrice2ClassName","askVolume2","askPrice3","askPrice3ClassName","askVolume3","askPrice4","askPrice4ClassName","askVolume4","askPrice5","askPrice5ClassName","askVolume5","bidPrice1","bidPrice1ClassName","bidVolume1","bidPrice2","bidPrice2ClassName","bidVolume2","bidPrice3","bidPrice3ClassName","bidVolume3","bidPrice4","bidPrice4ClassName","bidVolume4","bidPrice5","bidPrice5ClassName","bidVolume5","lastPriceClassName","pctChange","openPriceClassName","highPriceClassName","lowPriceClassName","settlePriceClassName","dayOpenInterestChange","time","preReferencePrice","numberOfDecimalDigits","tmpNumberOfDecimalDigits","getNumberOfDecimalDigits","checkEffectiveNumber","timestampFormat","xLarge","zero","TradeHomePage","TradePage","TradeMobileHomePage","TradeMobilePage","HomePage","hiddenDeleteOperatorDialog","showUpdateOperatorDescriptionModal","operatorIdForUpdateDescription","editOperatorDescription","operatorIdForDelete","selectedOperatorId","acceptReadSpecialAccountIdInput","denyReadSpecialAccountIdInput","acceptTradeSpecialAccountIdInput","denyTradeSpecialAccountIdInput","acceptTradeSpecialUnifiedSymbolInput","denyTradeSpecialUnifiedSymbolInput","acceptSubscribeSpecialUnifiedSymbolInput","denySubscribeSpecialUnifiedSymbolInput","operatorSelection","selectionCount","getSelectedCount","openUpdateOperatorDescriptionModal","closeUpdateOperatorDescriptionModal","updateOperatorDescriptionByOperatorId","operatorDescription","operatorItems","canReadAllAccounts","acceptReadSpecialAccountIdList","denyReadSpecialAccountIdList","canTradeAllAccounts","acceptTradeSpecialAccountIdList","denyTradeSpecialAccountIdList","canTradeAllContracts","acceptTradeSpecialUnifiedSymbolList","denyTradeSpecialUnifiedSymbolList","canSubscribeAllContracts","acceptSubscribeSpecialUnifiedSymbolList","denySubscribeSpecialUnifiedSymbolList","selectedOperator","acceptReadSpecialAccountIdSet","denyReadSpecialAccountIdSet","acceptTradeSpecialAccountIdSet","denyTradeSpecialAccountIdSet","acceptTradeSpecialUnifiedSymbolSet","denyTradeSpecialUnifiedSymbolSet","acceptSubscribeSpecialUnifiedSymbolSet","denySubscribeSpecialUnifiedSymbolSet","columnRightProps","operatorColumns","associatedToUser","openDeleteOperatorDialog","acceptReadSpecialAccountIdSetColumns","tmpSet","delete","denyReadSpecialAccountIdSetColumns","acceptTradeSpecialAccountIdSetColumns","denyTradeSpecialAccountIdSetColumns","acceptTradeSpecialUnifiedSymbolSetColumns","denyTradeSpecialUnifiedSymbolSetColumns","acceptSubscribeSpecialUnifiedSymbolSetColumns","denySubscribeSpecialUnifiedSymbolSetColumns","selectTableWrapper","childTableWrapper","isEnabled","single","small","placeholder","borderTop","closeDeleteOperatorDialog","deleteOperatorById","editOperatorDescriptionOnChange","setAllSelected","MarketDataRecordingPage","component","isPrivate","OperatorPage","RouteWithSubRoutes","from","configure","wordBreak","zIndex","initializeIcons","loadTheme","palette","themeLighterAlt","themeLighter","themeLight","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","stores","ReactDOM","document","getElementById","RpcClientProcess","intervalRefreshAllDataStarted","startIntervalRefreshAllData","checkConnected","onConnectd","processData","dep","Buffer","finalContentBytes","COMPRESSED_LZ4","lz4","ROUTINE","doCoreRpc","UNKNOWN_RPC_ID","SUBSCRIBE_RSP","rpcSubscribeRsp","checkCommonRsp","rpcClientRspHandler","onSubscribeRsp","UNSUBSCRIBE_RSP","rpcUnsubscribeRsp","onUnsubscribeRsp","SUBMIT_ORDER_RSP","rpcSubmitOrderRsp","onSubmitOrderRsp","CANCEL_ORDER_RSP","rpcCancelOrderRsp","onCancelOrderRsp","SEARCH_CONTRACT_RSP","rpcSearchContractRsp","GET_ACCOUNT_LIST_RSP","rpcGetAccountListRsp","onGetAccountListRsp","GET_MIX_CONTRACT_LIST_RSP","rpcGetMixContractListRsp","onGetMixContractListRsp","GET_POSITION_LIST_RSP","rpcGetPositionListRsp","onGetPositionListRsp","GET_TRADE_LIST_RSP","rpcGetTradeListRsp","onGetTradeListRsp","GET_ORDER_LIST_RSP","rpcGetOrderListRsp","onGetOrderListRsp","GET_TICK_LIST_RSP","rpcGetTickListRsp","onGetTickListRsp","EXCEPTION_RSP","rpcExceptionRsp","onExceptionRsp","ORDER_RTN","rpcOrderRtn","rpcClientRtnHandler","onOrderRtn","TRADE_RTN","rpcTradeRtn","onTradeRtn","POSITION_RTN","rpcPositionRtn","onPositionRtn","ACCOUNT_RTN","rpcAccountRtn","onAccountRtn","CONTRACT_RTN","rpcContractRtn","onContractRtn","TICK_RTN","rpcTickRtn","onTickRtn","ORDER_LIST_RTN","rpcOrderListRtn","onOrderListRtn","TRADE_LIST_RTN","rpcTradeListRtn","onTradeListRtn","POSITION_LIST_RTN","rpcPositionListRtn","onPositionListRtn","ACCOUNT_LIST_RTN","rpcAccountListRtn","onAccountListRtn","CONTRACT_LIST_RTN","rpcContractListRtn","onContractListRtn","TICK_LIST_RTN","rpcTickListRtn","onTickListRtn","NOTICE_RTN","rpcNoticeRtn","onNoticeRtn","generateRpcDep","resData","sendData","generateLz4RpcDep","generateRoutineRpcDep","encodeContent","Date","now","Error","RpcClientRtnHandler","commonStatus","COMS_INFO","COMS_WARN","COMS_ERROR","COMS_SUCCESS","RpcClientRspHandler","rpcTransactionId","onSearchContractRsp","accountListlength","decimals","comma","isNaN","Math","abs","toExponential","toFixed","reg","val","minLength","substring","formatDate","date","fmt","RegExp","$1","getFullYear","substr","o","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","keyList","k","str","toISOString","formatStr","x","y","WebSocketClientHandler","authFailedState","connectRetry","connectRetryTimes","connectStatus","closeCode","closeReason","ws","getStatus","STATUS_CONNECTED","STATUS_DISCONNECTED","STATUS_CONNECTING","WebSocket","hostname","binaryType","onopen","onclose","onerror","onmessage","STATUS_DISCONNECTING","close","send","e","verified","Uint8Array","reason","that","readyState"],"mappings":"isBAgHO,MAAMA,EAAY,IA5GzB,MAGIC,cAAe,KAFfC,SAAkB,GAGdC,YAAeC,KAAM,CACjBF,SAAUG,IACVC,YAAaC,IACbC,WAAYD,IACZE,mBAAoBF,IACpBG,uBAAwBH,IACxBI,8BAA+BJ,IAC/BK,YAAaL,MAIrBK,YAAYV,GACRE,KAAKF,SAAWA,EAGpBI,cACIO,YAAQ,oCAAoCC,MAAKC,IAC7C,GAAIA,EACA,GAAIA,EAAIC,OAAQ,CACZ,MAAMd,EAAWe,MAAMC,QAAQH,EAAII,QAAUJ,EAAII,OAAS,GAC1Df,KAAKQ,YAAYV,QAEjBkB,IAAMC,MAAO,6CAASN,EAAIO,cAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBhB,aACIK,YAAQ,mCAAmCC,MAAKC,IACxCA,IACIA,EAAIC,OACJZ,KAAKE,cAELc,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBf,mBAAmBkB,GACfd,YAAQ,0CAA2C,CAC/Ce,OAAQ,OACRC,KAAM,CACF,OAAUF,KAGfb,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKE,cAELc,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAGpBd,uBAAuBiB,GACnBd,YAAQ,8CAA+C,CACnDe,OAAQ,OACRC,KAAM,CACF,OAAUF,KAGfb,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKE,cAELc,IAAMC,MAAO,yDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBb,8BAA8BgB,EAAgBG,GAC1CjB,YAAQ,qDAAsD,CAC1De,OAAQ,OACRC,KAAM,CACF,OAAUF,EACV,YAAeG,KAGpBhB,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKE,cAELc,IAAMC,MAAO,yDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQC,IAAIF,QC0CjB,MAAMO,EAAe,IAlJ5B,MAGI9B,cAAe,KAFf+B,YAAqB,GAGjB7B,YAAeC,KAAM,CACjB4B,YAAa3B,IACb4B,eAAgB1B,IAChB2B,oBAAqB3B,IACrB4B,yBAA0B5B,IAC1B6B,0BAA2B7B,IAC3B8B,6BAA8B9B,IAC9B+B,sBAAuB/B,IACvBgC,mBAAoBhC,IACpBiC,eAAgBjC,MAIxBiC,eAAeR,GACX5B,KAAK4B,YAAcA,EAGvBC,iBACIpB,YAAQ,0CAA0CC,MAAKC,IACnD,GAAIA,EACA,GAAIA,EAAIC,OAAQ,CACZ,MAAMgB,EAAcf,MAAMC,QAAQH,EAAII,QAAUJ,EAAII,OAAS,GAC7Df,KAAKoC,eAAeR,QAEpBZ,IAAMC,MAAO,6CAASN,EAAIO,cAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBU,oBAAoBO,GAChB5B,YAAQ,8CAA+C,CACnDe,OAAQ,OACRC,KAAM,IACCY,KAER3B,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAK6B,iBAELb,IAAMC,MAAO,+DAAYN,EAAIO,eAGtCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBW,yBAAyBO,GACrB7B,YAAQ,mDAAoD,CACxDe,OAAQ,OACRC,KAAM,CACF,OAAUa,KAGf5B,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAK6B,iBAELb,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQJ,MAAMG,MAKtBY,0BAA0BM,GACtB7B,YAAQ,oDAAqD,CACzDe,OAAQ,OACRC,KAAM,CACF,OAAUa,KAGf5B,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAK6B,iBAELb,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQJ,MAAMG,MAKtBa,6BAA6BK,GACzB7B,YAAQ,uDAAwD,CAC5De,OAAQ,OACRC,KAAM,CACF,OAAUa,KAGf5B,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAK6B,iBAELb,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQJ,MAAMG,MAKtBc,wBACIzB,YAAQ,iDAAiDC,MAAKC,IACtDA,IACIA,EAAIC,OACJZ,KAAK6B,iBAELb,IAAMC,MAAO,oDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQJ,MAAMG,MAItBe,qBACI1B,YAAQ,8CAA8CC,MAAKC,IACnDA,IACIA,EAAIC,OACJZ,KAAK6B,iBAELb,IAAMC,MAAO,oDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQJ,MAAMG,QCDnB,MAAMmB,EAAY,IA7IzB,MAGI1C,cAAe,KAFf2C,SAAkB,GAGdzC,YAAeC,KAAM,CACjBwC,SAAUvC,IACVwC,YAAatC,IACbuC,QAASvC,IACTwC,qBAAsBxC,IACtByC,gCAAiCzC,IACjC0C,6BAA8B1C,IAC9B2C,+BAAgC3C,IAChC4C,YAAa5C,MAIrB4C,YAAYP,GACRxC,KAAKwC,SAAWA,EAGpBC,cACIhC,YAAQ,oCAAoCC,MAAKC,IAC7C,GAAIA,EACA,GAAIA,EAAIC,OAAQ,CACZ,MAAM4B,EAAW3B,MAAMC,QAAQH,EAAII,QAAUJ,EAAII,OAAS,GAC1Df,KAAK+C,YAAYP,QAEjBxB,IAAMC,MAAO,6CAASN,EAAIO,cAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBsB,QAAQM,GAEJvC,YAAQ,+BAAgC,CACpCe,OAAQ,OACRC,KAAM,IACCuB,KAERtC,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKyC,cAELzB,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBuB,qBAAqBM,GACjBxC,YAAQ,4CAA6C,CACjDe,OAAQ,OACRC,KAAM,CACF,OAAUwB,KAGfvC,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKyC,cAELzB,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQC,IAAIF,MAKpBwB,gCAAgCK,EAAkBvB,GAC9CjB,YAAQ,uDAAwD,CAC5De,OAAQ,OACRC,KAAM,CACF,SAAYwB,EACZ,YAAevB,KAGpBhB,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKyC,cAELzB,IAAMC,MAAO,yDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQC,IAAIF,MAKpByB,6BAA6BI,EAAkBC,GAC3CzC,YAAQ,oDAAqD,CACzDe,OAAQ,OACRC,KAAM,CACF,SAAYwB,EACZ,YAAeC,KAGpBxC,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKyC,cAELzB,IAAMC,MAAO,yDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQC,IAAIF,MAMpB0B,+BAA+BE,GAE3BvC,YAAQ,sDAAuD,CAC3De,OAAQ,OACRC,KAAM,IACCuB,KAERtC,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKyC,cAELzB,IAAMC,MAAO,yDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQC,IAAIF,Q,YCmBjB,MAAM+B,EAAsB,IA3JnC,MASItD,cAAe,KARfuD,iBAAkB,EAQJ,KAPdC,YAOc,OANdC,oBAA8B,EAMhB,KALdL,SAAmB,GAKL,KAJdC,SAAmB,GAIL,KAHdK,WAAqB,GAGP,KAFdC,UAAoB,GAGhBzD,YAAeC,KAAM,CACjBoD,gBAAiBnD,IACjBoD,OAAQpD,IACRqD,mBAAoBrD,IACpBgD,SAAUhD,IACViD,SAAUjD,IACVsD,WAAYtD,IACZuD,UAAWvD,IACXwD,UAAWtD,IACXuD,YAAavD,IACbwD,YAAaxD,IACbyD,sBAAuBzD,IACvB0D,OAAQ1D,IACR2D,aAAc3D,IACd4D,iBAAkB5D,IAClB6D,MAAO7D,IACP8D,gBAAiB9D,IACjB+D,gBAAiB/D,IACjBgE,eAAgBhE,MAGpBH,KAAKyD,YAELW,OAAOC,aAAY,KACXrE,KAAKoD,iBACLpD,KAAK+D,qBAEV,MAGPN,YACI,MAAMa,EAAgBC,eAAeC,QAAQ,gBAC7C,GAAIF,EACAtE,KAAKqD,OAASoB,KAAKC,MAAMJ,GACzBtE,KAAKwD,UAAYxD,KAAKqD,OAAOsB,gBAC7B3E,KAAKoD,iBAAkB,EACvBpD,KAAKuD,WAAavD,KAAKqD,OAAOE,WAC9BvD,KAAKiD,SAAWjD,KAAKqD,OAAOJ,SAC5B2B,IAAuBC,aAAa7E,KAAKwD,WACzCoB,IAAuBE,cACpB,CACH,MAAM7B,EAAW8B,aAAaP,QAAQ,YAClCvB,IACAjD,KAAKiD,SAAWA,EAChBjD,KAAKsD,oBAAqB,IAKtCI,YAAYT,GACRjD,KAAKiD,SAAWA,EAGpBU,YAAYT,GACRlD,KAAKkD,SAAWA,EAGpBU,sBAAsBN,GAClBtD,KAAKsD,mBAAqBA,EAI9BO,SACIU,eAAeS,WAAW,gBAC1BhF,KAAKqD,OAAS,KACdrD,KAAKoD,iBAAkB,EACvBpD,KAAKwD,UAAY,GACjBoB,IAAuBK,aACvBxE,YAAQ,eAGZqD,eACI,OAAO9D,KAAKwD,UAGhBO,mBACItD,YAAQ,yBAGZuD,QACIvD,YAAQ,aAAc,CAClBe,OAAQ,OACRC,KAAM,CACF,SAAYzB,KAAKiD,SACjB,SAAYjD,KAAKkD,YAEtBxC,MAAKC,IACAA,IACIA,EAAIC,QACJZ,KAAKqD,OAAS1C,EAAII,OAClBf,KAAKiE,gBAAgBjE,KAAKqD,SAE1BrC,IAAMC,MAAO,iCAAON,EAAIO,eAGjCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpB6C,gBAAgBZ,GACRrD,KAAKsD,mBACLyB,aAAaG,QAAQ,WAAYlF,KAAKiD,WAEtC8B,aAAaC,WAAW,YACxBhF,KAAKiD,SAAW,GAChBjD,KAAKsD,oBAAqB,GAE9BiB,eAAeW,QAAQ,eAAgBT,KAAKU,UAAUnF,KAAKqD,SAC3DrD,KAAKuD,WAAavD,KAAKqD,OAAOE,WAC9BvD,KAAKwD,UAAYxD,KAAKqD,OAAOsB,gBAC7B3E,KAAKoD,iBAAkB,EACvBwB,IAAuBC,aAAa7E,KAAKwD,WACzCoB,IAAuBE,UAG3BZ,kBAEIa,aAAaC,WAAW,YAExBhF,KAAKiD,SAAW,GAChBjD,KAAKsD,oBAAqB,EAG9Ba,eAAejB,EAAkBkC,GAC7B3E,YAAQ,sBAAuB,CAC3Be,OAAQ,OACRC,KAAM,CACF,SAAYyB,EACZ,YAAekC,KAEpB1E,MAAKC,IACAA,IACIA,EAAIC,OACJI,IAAMqE,QAAQ,wCAEdrE,IAAMC,MAAO,6CAASN,EAAIO,eAGnCC,OAAMC,IACLC,QAAQC,IAAIF,Q,mBC7EjB,MAAMkE,EAAqB,IA1ElC,MAMIzF,cAAe,KALf0F,gBAAyB,GAKX,KAJdC,eAAmC,IAAIC,IAIzB,KAFdC,gBAAiB,EAEH,KAadC,yBAA2B,KACvB,IACQ3F,KAAK0F,iBACL1F,KAAK4F,iBACL5F,KAAK0F,gBAAiB,GAE5B,MAAOzE,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK2F,yBAA0B,MArB1C5F,YAAeC,KAAM,CACjBuF,gBAAiBtF,IACjB6F,mBAAoB3F,IACpB4F,cAAe5F,IACf6F,0BAA2B7F,IAC3B8F,kBAAmB9F,IACnByF,eAAgBzF,MAGpB0F,WAAW7F,KAAK2F,yBAA0B,IAe9CG,qBACII,IAAaC,0BAGjBJ,cAAcK,GACNC,KACAhF,QAAQiF,MAAMF,GAElBpG,KAAKwF,eAAee,IAAIH,EAASI,cAAeJ,GAChDpG,KAAK0F,gBAAiB,EAG1BM,0BAA0BT,GAClBc,KACAhF,QAAQiF,MAAMf,GAElB,MAAMkB,EAAsC,IAAIhB,IAChD,IAAK,IAAIiB,EAAI,EAAGA,EAAKnB,EAAgBoB,OAAQD,IAAK,CAC9C,MAAMN,EAAWb,EAAgBmB,GACjCD,EAAkBF,IAAIH,EAASI,cAAeJ,GAElDpG,KAAKwF,eAAiBiB,EACtBzG,KAAK0F,gBAAiB,EAG1BO,kBAAkBV,GACVc,KACAhF,QAAQiF,MAAMf,GAElB,IAAK,IAAImB,EAAI,EAAGA,EAAInB,EAAgBoB,OAAQD,IAAK,CAC7C,MAAMN,EAAWb,EAAgBmB,GACjC1G,KAAKwF,eAAee,IAAIH,EAASI,cAAeJ,GAEpDpG,KAAK0F,gBAAiB,EAG1BE,iBACI5F,KAAKuF,gBAAkB,IAAIvF,KAAKwF,eAAeoB,YCuDhD,MAAMC,EAAkB,IA3H/B,MAOIhH,cAAe,KALfiH,UAAmB,GAKL,KAJdC,SAA6B,IAAItB,IAInB,KAFdC,gBAAiB,EAEH,KAadC,yBAA2B,KACvB,IACQ3F,KAAK0F,iBACL1F,KAAK4F,iBACL5F,KAAK0F,gBAAiB,GAE5B,MAAOzE,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK2F,yBAA0B,MArB1C5F,YAAeC,KAAM,CACjB8G,UAAW7G,IACX+G,aAAc7G,IACd8G,WAAY9G,IACZ+G,uBAAwB/G,IACxBgH,eAAgBhH,IAChByF,eAAgBzF,MAGpB0F,WAAW7F,KAAK2F,yBAA0B,IAe9CqB,eACId,IAAakB,oBAGjBH,WAAWI,GACHhB,KACAhF,QAAQiF,MAAMe,GAEdA,EAAMjB,UACNd,EAAmBS,cAAcsB,EAAMjB,UAE3CpG,KAAK+G,SAASR,IAAIc,EAAMC,QAASD,GACjCrH,KAAK0F,gBAAiB,EAG1BwB,uBAAuBJ,GACfT,KACAhF,QAAQiF,MAAMQ,GAElB,MAAMS,EAAgC,IAAI9B,IAC1C,IAAK,IAAIiB,EAAI,EAAGA,EAAII,EAAUH,OAAQD,IAAK,CACvC,MAAMW,EAAQP,EAAUJ,GACpBW,EAAMjB,UACNd,EAAmBS,cAAcsB,EAAMjB,UAE3CmB,EAAYhB,IAAIc,EAAMC,QAASD,GAEnCrH,KAAK+G,SAAWQ,EAChBvH,KAAK0F,gBAAiB,EAG1ByB,eAAeL,GACPT,KACAhF,QAAQiF,MAAMQ,GAGlB,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAUH,OAAQD,IAAK,CACvC,MAAMW,EAAQP,EAAUJ,GACpBW,EAAMjB,UACNd,EAAmBS,cAAcsB,EAAMjB,UAE3CpG,KAAK+G,SAASR,IAAIc,EAAMC,QAASD,GAErCrH,KAAK0F,gBAAiB,EAG1BE,iBACI,MAAM4B,EAAgB,IAAIxH,KAAK+G,SAASH,UACxC5G,KAAK8G,UAAY9G,KAAKyH,kCAAkCD,GAGpDC,kCAAkCX,GACtC,IACI,OAAOA,EAAUY,MAAK,CAACC,EAAaC,KAChC,IAAIC,EAAY,GAIZA,EAHCF,EAAOG,WAAkC,KAArBH,EAAOG,UAGhBH,EAAOG,UAFP,WAKXH,EAAOI,WAAkC,KAArBJ,EAAOI,UAG5BF,GAAaF,EAAOI,UAFpBF,GAAa,WAIjBA,GAAaG,YAAYL,EAAOM,eAAgB,IAEhD,IAAIC,EAAY,GAahB,OATIA,EAHCN,EAAOE,WAAkC,KAArBF,EAAOE,UAGhBF,EAAOE,UAFP,WAKXF,EAAOG,WAAkC,KAArBH,EAAOG,UAG5BG,GAAaN,EAAOG,UAFpBG,GAAa,WAIjBA,GAAaF,YAAYJ,EAAOK,eAAgB,IACzCC,EAAUC,cAAcN,MAErC,MAAO5G,GAEL,OADAI,QAAQJ,MAAM,uCAAUA,GACjB6F,K,YClHnB,MAAM,aAAEsB,GAAiBC,MAAIC,SAASC,GA8I/B,MAAMC,EAAqB,IA5IlC,MAQI3I,cAAe,KANf4I,aAAsB,GAMR,KALdC,YAAgC,IAAIjD,IAKtB,KAJdkD,WAA+B,IAAIlD,IAIrB,KAFNC,gBAAiB,EAEX,KAqBdC,yBAA2B,KACvB,IACQ3F,KAAK0F,iBACL1F,KAAK4F,iBACL5F,KAAK0F,gBAAiB,GAE5B,MAAOzE,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK2F,yBAA0B,MA7B1C5F,YAAeC,KAAM,CACjByI,aAAcxI,IACd0I,WAAY1I,IACZ2I,gBAAiBzI,IACjB0I,cAAe1I,IACf2I,0BAA2B3I,IAC3B4I,kBAAmB5I,IACnByF,eAAgBzF,IAChB6I,YAAa7I,MAOjBH,KAAK2I,WAAWpC,IAAI,MAJD,CACf,iBAAoB,EACpB,sBAAyB,IAG7BV,WAAW7F,KAAK2F,yBAA0B,IAgB9CiD,kBACI1C,IAAa+C,uBAGjBJ,cAAcK,GACN7C,KACAhF,QAAQiF,MAAM4C,GAEdA,EAAS9C,UACTd,EAAmBS,cAAcmD,EAAS9C,UAE9CpG,KAAK0I,YAAYnC,IAAI2C,EAASC,WAAYD,GAC1ClJ,KAAK0F,gBAAiB,EAG1BoD,0BAA0BL,GAClBpC,KACAhF,QAAQiF,MAAMmC,GAElB,MAAMW,EAAmC,IAAI3D,IAC7C,IAAK,IAAIiB,EAAI,EAAGA,EAAK+B,EAAa9B,OAAQD,IAAK,CAC3C,MAAMwC,EAAWT,EAAa/B,GAC1BwC,EAAS9C,UACTd,EAAmBS,cAAcmD,EAAS9C,UAE9CgD,EAAe7C,IAAI2C,EAASC,WAAYD,GAE5ClJ,KAAK0I,YAAcU,EACnBpJ,KAAK0F,gBAAiB,EAG1BqD,kBAAkBN,GACVpC,KACAhF,QAAQiF,MAAMmC,GAElB,IAAK,IAAI/B,EAAI,EAAGA,EAAI+B,EAAa9B,OAAQD,IAAK,CAC1C,MAAMwC,EAAWT,EAAa/B,GAC1BwC,EAAS9C,UACTd,EAAmBS,cAAcmD,EAAS9C,UAE9CpG,KAAK0I,YAAYnC,IAAI2C,EAASC,WAAYD,GAE9ClJ,KAAK0F,gBAAiB,EAG1BE,iBACI,MAAMyD,EAAmB,IAAIrJ,KAAK0I,YAAY9B,UAC9C5G,KAAKyI,aAAezI,KAAKsJ,yCAAyCD,GAClErJ,KAAKgJ,cAGTA,cAEI,IAAIO,EAAmB,EACnBC,EAAwB,EAE5B,MAAMf,EAAezI,KAAKyI,aAC1B,IAAK,IAAI/B,EAAI,EAAGA,EAAI+B,EAAa9B,OAAQD,IAAK,CAC1C,MAAMwC,EAAWT,EAAa/B,GAE9B,GAAI+C,EAAkBC,qBAAqBC,IAAIT,EAASU,WACpD,IACQV,EAAS9C,SAASyD,WAAazB,EAAa0B,MAC5CN,GAA0BN,EAASa,mBACnCR,GAAoBL,EAASc,eAEnC,MAAO/I,GACLI,QAAQJ,MAAM,qEAAeA,IAOzC,MAAMgJ,EAAa,CACf,iBAAoBV,EACpB,sBAAyBC,GAE7BxJ,KAAK2I,WAAWpC,IAAI,MAAO0D,GAIvBX,yCAAyCb,GAC7C,IACI,OAAOA,EAAaf,MAAK,CAACwC,EAAgBC,KACtC,IAAIC,EAAeF,EAAUN,UAC7BQ,GAAgBpC,YAAYkC,EAAU9D,SAASI,cAAe,IAE9D,IAAI6D,EAAeF,EAAUP,UAE7B,OADAS,GAAgBrC,YAAYmC,EAAU/D,SAASI,cAAe,IACvD6D,EAAalC,cAAciC,MAExC,MAAOnJ,GAEL,OADAI,QAAQJ,MAAM,uCAAUA,GACjBwH,MC1IXL,aAAF,GAAmBC,MAAIC,SAASC,GAgK/B,MAAMkB,EAAoB,IA9JjC,MASI5J,cAAe,KARfyK,YAAqB,GAQP,KAPdC,WAA+B,IAAI9E,IAOrB,KANdiE,qBAAiC,IAAIc,IAMvB,KAJd7B,WAA+B,IAAIlD,IAIrB,KAFNC,gBAAiB,EAEX,KA4BdC,yBAA2B,KACvB,IACQ3F,KAAK0F,iBACL1F,KAAK4F,iBACL5F,KAAK0F,gBAAiB,GAE5B,MAAOzE,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK2F,yBAA0B,MApC1C5F,YAAeC,KAAM,CACjBsK,YAAarK,IACbyJ,qBAAsBzJ,IACtB0I,WAAY1I,IACZwK,eAAgBtK,IAChBuK,wBAAyBvK,IACzBwK,aAAcxK,IACdyK,yBAA0BzK,IAC1B0K,iBAAkB1K,IAClByF,eAAgBzF,IAChB6I,YAAa7I,MAajBH,KAAK2I,WAAWpC,IAAI,MAVD,CACf,WAAc,EACd,cAAiB,EACjB,eAAkB,EAClB,eAAkB,EAClB,kBAAqB,EACrB,UAAa,EACb,cAAiB,EACjB,sBAAyB,IAG7BV,WAAW7F,KAAK2F,yBAA0B,IAe9C8E,iBACIvE,IAAa4E,sBAGjBJ,wBAAwBhB,GACpB1J,KAAK0J,qBAAuBA,EAC5B1J,KAAKgJ,cACLR,EAAmBQ,cAGvB2B,aAAaI,GACL1E,KACAhF,QAAQiF,MAAMyE,GAElB/K,KAAKuK,WAAWhE,IAAIwE,EAAQnB,UAAWmB,GACvC/K,KAAK0F,gBAAiB,EAG1BkF,yBAAyBN,GACjBjE,KACAhF,QAAQiF,MAAMgE,GAElB,MAAMU,EAAkC,IAAIvF,IAC5C,IAAK,IAAIiB,EAAI,EAAGA,EAAK4D,EAAY3D,OAAQD,IAAK,CAC1C,MAAMqE,EAAUT,EAAY5D,GAC5BsE,EAAczE,IAAIwE,EAAQnB,UAAWmB,GAEzC/K,KAAKuK,WAAaS,EAClBhL,KAAK0F,gBAAiB,EAG1BmF,iBAAiBP,GACTjE,KACAhF,QAAQiF,MAAMgE,GAElB,IAAK,IAAI5D,EAAI,EAAGA,EAAI4D,EAAY3D,OAAQD,IAAK,CACzC,MAAMqE,EAAUT,EAAY5D,GAC5B1G,KAAKuK,WAAWhE,IAAIwE,EAAQnB,UAAWmB,GAE3C/K,KAAK0F,gBAAiB,EAG1BE,iBACI,MAAMqF,EAAkB,IAAIjL,KAAKuK,WAAW3D,UAC5C5G,KAAKsK,YAActK,KAAKkL,2BAA2BD,GACnDjL,KAAKgJ,cAGTA,cAEI,IAAImC,EAAa,EACbC,EAAgB,EAChBC,EAAiB,EACjBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAY,EACZC,EAAgB,EAChBC,EAAwB,EAI5B,IAAK,IAAIhF,EAAI,EAAGA,EAAI1G,KAAKsK,YAAY3D,OAAQD,IAAK,CAC9C,MAAMqE,EAAU/K,KAAKsK,YAAY5D,GACjC,GAAI+C,EAAkBC,qBAAqBC,IAAIoB,EAAQnB,WACnD,IACQmB,EAAQlB,WAAazB,EAAa0B,MAClCqB,GAAcJ,EAAQY,QACtBL,GAAmBP,EAAQY,QAAUZ,EAAQa,WAAab,EAAQc,SAAWd,EAAQe,QACrFV,GAAiBL,EAAQa,WACzBP,GAAkBN,EAAQgB,YAC1BR,GAAqBR,EAAQiB,eAC7BR,GAAaT,EAAQkB,OACrBR,GAAiBV,EAAQmB,WACzBR,GAA0BX,EAAQe,QAAUf,EAAQc,UAE1D,MAAO5K,GACLI,QAAQJ,MAAM,qEAAeA,IAOzC,MAAMgJ,EAAa,CACf,WAAckB,EACd,cAAiBC,EACjB,eAAkBC,EAClB,eAAkBC,EAClB,kBAAqBC,EACrB,UAAaC,EACb,cAAiBC,EACjB,sBAAyBC,GAE7B1L,KAAK2I,WAAWpC,IAAI,MAAO0D,GAGvBiB,2BAA2BZ,GAC/B,IACI,OAAOA,EAAY5C,MAAK,CAACyE,EAAeC,IAC7BD,EAASvC,UAAUzB,cAAciE,EAASxC,aAEvD,MAAO3I,GAEL,OADAI,QAAQJ,MAAM,uCAAUA,GACjBqJ,KClCZ,MAAM+B,EAAkB,IAzH/B,MAMIxM,cAAe,KAJfyM,UAAmB,GAIL,KAHdC,SAA6B,IAAI9G,IAGnB,KAFNC,gBAAiB,EAEX,KAadC,yBAA2B,KACvB,IACQ3F,KAAK0F,iBACL1F,KAAK4F,iBACL5F,KAAK0F,gBAAiB,GAE5B,MAAOzE,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK2F,yBAA0B,MArB1C5F,YAAeC,KAAM,CACjBsM,UAAWrM,IACXuM,aAAcrM,IACdsM,WAAYtM,IACZuM,uBAAwBvM,IACxBwM,eAAgBxM,IAChByF,eAAgBzF,MAGpB0F,WAAW7F,KAAK2F,yBAA0B,IAe9C6G,eACItG,IAAa0G,oBAGjBH,WAAWI,GACHxG,KACAhF,QAAQiF,MAAMuG,GAEdA,EAAMzG,UACNd,EAAmBS,cAAc8G,EAAMzG,UAE3CpG,KAAKuM,SAAShG,IAAIsG,EAAMC,QAASD,GACjC7M,KAAK0F,gBAAiB,EAE1BgH,uBAAuBJ,GACfjG,KACAhF,QAAQiF,MAAMgG,GAElB,MAAMS,EAAgC,IAAItH,IAC1C,IAAK,IAAIiB,EAAI,EAAGA,EAAI4F,EAAU3F,OAAQD,IAAK,CACvC,MAAMmG,EAAQP,EAAU5F,GACpBmG,EAAMzG,UACNd,EAAmBS,cAAc8G,EAAMzG,UAE3C2G,EAAYxG,IAAIsG,EAAMC,QAASD,GAEnC7M,KAAKuM,SAAWQ,EAChB/M,KAAK0F,gBAAiB,EAG1BiH,eAAeL,GACPjG,KACAhF,QAAQiF,MAAMgG,GAElB,IAAK,IAAI5F,EAAI,EAAGA,EAAI4F,EAAU3F,OAAQD,IAAK,CACvC,MAAMmG,EAAQP,EAAU5F,GACpBmG,EAAMzG,UACNd,EAAmBS,cAAc8G,EAAMzG,UAE3CpG,KAAKuM,SAAShG,IAAIsG,EAAMC,QAASD,GAErC7M,KAAK0F,gBAAiB,EAG1BE,iBACI,MAAMoH,EAAgB,IAAIhN,KAAKuM,SAAS3F,UACxC5G,KAAKsM,UAAYtM,KAAKiN,kCAAkCD,GAGpDC,kCAAkCX,GACtC,IACI,OAAOA,EAAU5E,MAAK,CAACwF,EAAaC,KAChC,IAAIC,EAAY,GAIZA,EAHCF,EAAOG,WAAkC,KAArBH,EAAOG,UAGhBH,EAAOG,UAFP,WAKXH,EAAOI,WAAkC,KAArBJ,EAAOI,UAG5BF,GAAaF,EAAOI,UAFpBF,GAAa,WAIjBA,GAAapF,YAAYkF,EAAOK,eAAgB,IAEhD,IAAIC,EAAY,GAahB,OATIA,EAHCL,EAAOE,WAAkC,KAArBF,EAAOE,UAGhBF,EAAOE,UAFP,WAKXF,EAAOG,WAAkC,KAArBH,EAAOG,UAG5BE,GAAaL,EAAOG,UAFpBE,GAAa,WAIjBA,GAAaxF,YAAYmF,EAAOI,eAAgB,IACzCC,EAAUrF,cAAciF,MAErC,MAAOnM,GAEL,OADAI,QAAQJ,MAAM,uCAAUA,GACjBqL,MC9Gb,oBAAEmB,EAAF,cACFC,EADE,mBAEFC,EAFE,cAGFC,EAHE,eAIFC,EAJE,kBAKFC,EALE,oBAMFC,EANE,cAOFC,EAPE,aAQFC,EARE,wBASFC,EATE,qBAUFC,GACA9F,MAAIC,SAASC,GAwWV,MAAM6F,EAAmB,IAvWhC,MAaIvO,cAAe,KAZfwO,sBAYc,OAXdC,eAAyBX,EAAmBY,eAW9B,KAVdC,uBAAiC,OAUnB,KATdC,MAAyB,GASX,KARdC,UAA6B,GAQf,KAPdC,OAAiB,EAOH,KANdC,cAAwBd,EAAkBe,OAM5B,KALdC,gBAA0Bf,EAAoBgB,MAKhC,KAJdC,UAAoB,EAIN,KAHdC,UAAoBjB,EAAckB,eAGpB,KAFdC,oBAA8BjB,EAAwBkB,eAGlDrP,YAAeC,KAAM,CACjBqO,iBAAkBpO,IAClBqO,eAAgBrO,IAChBuO,uBAAwBvO,IACxBwO,MAAOxO,IACPyO,UAAWzO,IACX0O,OAAQ1O,IACR2O,cAAe3O,IACf6O,gBAAiB7O,IACjB+O,UAAW/O,IACXgP,UAAWhP,IACXkP,oBAAqBlP,IACrBoP,oBAAqBlP,IACrBmP,UAAWnP,IACXoP,UAAWpP,IACXqP,aAAcrP,IACdsP,aAActP,IACduP,SAAUvP,IACVwP,aAAcxP,IACdyP,iBAAkBzP,IAClB0P,uBAAwB1P,IACxB2P,mBAAoB3P,IACpB4P,kBAAmB5P,IACnB6P,0BAA2B7P,IAC3B8P,YAAa9P,IACb+P,YAAa/P,IACbgQ,MAAOhQ,MAIfkP,oBAAoBhB,GAEZhI,KACAhF,QAAQiF,MAAM+H,GAEdA,EACI/I,EAAmBE,eAAemE,IAAI0E,EAAiB7H,gBACvDxG,KAAKqO,iBAAmB/I,EAAmBE,eAAe4K,IAAI/B,EAAiB7H,eAC/EN,IAAamK,eAAehC,GAC5BrO,KAAKsP,aAELtO,IAAMsP,KAAM,sEAAcjC,EAAiB7H,iBAAiB6H,EAAiBkC,YAGjFlP,QAAQiP,KAAK,4BAIrBhB,YACI,GAAItP,KAAKqO,kBAC+B,WAAhCrO,KAAKwO,uBACL,GAAIgC,EAAeC,WAAW9G,IAAI3J,KAAKqO,iBAAiB7H,eAAgB,CACpE,MAAMkK,EAAOF,EAAeC,WAAWL,IAAIpQ,KAAKqO,iBAAiB7H,eACjE,IACI,IAAImK,EACgC,SAAhC3Q,KAAKwO,uBACLmC,EAAWD,EAAKE,UACuB,gBAAhC5Q,KAAKwO,uBACZmC,EAAWD,EAAKG,WACuB,gBAAhC7Q,KAAKwO,uBACZmC,EAAWD,EAAKI,WACuB,SAAhC9Q,KAAKwO,uBACRkC,EAAKK,UAAYL,EAAKK,SAASpK,OAAS,IACxCgK,EAAWD,EAAKK,SAAS,IAEU,SAAhC/Q,KAAKwO,wBACRkC,EAAKM,UAAYN,EAAKM,SAASrK,OAAS,IACxCgK,EAAWD,EAAKM,SAAS,IAI7BL,GAAYA,IAAaM,OAAOC,UAChClR,KAAKyO,MAAQkC,EAEb3Q,KAAKyO,MAAQ,GAGnB,MAAOxN,GACLI,QAAQJ,MAAMA,GACdjB,KAAKyO,MAAQ,SAIjBzO,KAAKyO,MAAQ,GAO7Bc,UAAUZ,GACN3O,KAAK2O,OAASA,EAGlBa,aAAaR,GAILhP,KAAKgP,UAHJA,GAA2B,KAAdA,EAGGmC,SAASnC,EAAY,GAAI,IAFzB,EAMzBS,aAAaR,GACTjP,KAAKiP,UAAYA,EAGrBS,SAASjB,GACLzO,KAAKwO,uBAAyB,SAC9BxO,KAAKyO,MAAQA,EAGjBkB,aAAajB,GACT1O,KAAK0O,UAAYA,EAGrBkB,iBAAiBhB,GACb5O,KAAK4O,cAAgBA,EAGzBiB,uBAAuBV,GACnBnP,KAAKmP,oBAAsBA,EAG/BW,mBAAmBhB,GACf9O,KAAK8O,gBAAkBA,EAG3BiB,kBAAkBzB,GACdtO,KAAKsO,eAAiBA,EAG1B0B,0BAA0BxB,GACtBxO,KAAKwO,uBAAyBA,EAC9BxO,KAAKsP,YAGTW,YACI5B,EACA+C,EACAC,EACA5C,EACAH,EACAK,EACAC,EACAE,EACAG,EACAD,EACApF,EACA8E,EACAS,EACAmC,GAGA,IACI,IAAK1H,GAA2B,KAAdA,EAGd,OAFAvI,QAAQJ,MAAM,iGACdD,IAAMC,MAAM,4FAIhB,IAAKwI,EAAkBc,WAAWZ,IAAIC,GAGlC,OAFAvI,QAAQJ,MAAO,yJAAgC2I,UAC/C5I,IAAMC,MAAO,yJAAgC2I,KAGjD,MAAMmB,EAAUtB,EAAkBc,WAAW6F,IAAIxG,GAEjD,IAAKyE,EAGD,OAFAhN,QAAQJ,MAAM,qGACdD,IAAMC,MAAM,gGAGhB,MAAMsQ,EAAgB7D,EAAc8D,WAAWnD,GAEzCoD,EAAsB,IAAIhE,EAGhC,GAFAgE,EAAoBrL,SAAWmL,EAE3BjD,IAAmBX,EAAmB+D,eAAiBjD,EAGvD,OAFApN,QAAQJ,MAAO,gGAAoBwN,UACnCzN,IAAMC,MAAO,gGAAoBwN,KAKrC,GAFAgD,EAAoBhD,MAAQA,EAExBH,IAAmBX,EAAmBY,eACtCkD,EAAoBnD,eAAiBX,EAAmBY,oBACrD,GAAID,IAAmBX,EAAmB+D,aAC7CD,EAAoBnD,eAAiBX,EAAmB+D,kBACrD,GAAIpD,IAAmBX,EAAmBgE,mBAC7CF,EAAoBnD,eAAiBX,EAAmBgE,wBACrD,GAAIrD,IAAmBX,EAAmBiE,cAC7CH,EAAoBnD,eAAiBX,EAAmBiE,mBACrD,GAAItD,IAAmBX,EAAmBkE,cAC7CJ,EAAoBnD,eAAiBX,EAAmBkE,mBACrD,GAAIvD,IAAmBX,EAAmBmE,0BAC7CL,EAAoBnD,eAAiBX,EAAmBmE,8BACrD,IAAIxD,IAAmBX,EAAmBoE,4BAK7C,OAFA1Q,QAAQJ,MAAO,4GAAsBqN,UACrCtN,IAAMC,MAAO,4GAAsBqN,KAHnCmD,EAAoBnD,eAAiBX,EAAmBoE,4BAO5D,IAAKpD,GAAUA,GAAU,EAGrB,OAFAtN,QAAQJ,MAAO,gGAAoB0N,UACnC3N,IAAMC,MAAO,gGAAoB0N,KAKrC,GAFA8C,EAAoB9C,OAASA,EAEzByC,IAAcxD,EAAcoE,MAC5BP,EAAoBL,UAAYxD,EAAcoE,UAC3C,IAAIZ,IAAcxD,EAAcqE,OAKnC,OAFA5Q,QAAQJ,MAAO,4GAAsBmQ,UACrCpQ,IAAMC,MAAO,4GAAsBmQ,KAHnCK,EAAoBL,UAAYxD,EAAcqE,OAOlD,GAAIZ,IAAexD,EAAeqE,QAC9BT,EAAoBJ,WAAaxD,EAAeqE,aAC7C,GAAIb,IAAexD,EAAesE,SACrCV,EAAoBJ,WAAaxD,EAAesE,cAC7C,GAAId,IAAexD,EAAeuE,cACrCX,EAAoBJ,WAAaxD,EAAeuE,kBAC7C,IAAIf,IAAexD,EAAewE,kBAKrC,OAFAhR,QAAQJ,MAAO,4GAAsBoQ,UACrCrQ,IAAMC,MAAO,4GAAsBoQ,KAHnCI,EAAoBJ,WAAaxD,EAAewE,kBAOpD,GAAIzD,IAAkBd,EAAkBe,OACpC4C,EAAoB7C,cAAgBd,EAAkBe,YACnD,GAAID,IAAkBd,EAAkBwE,OAC3Cb,EAAoB7C,cAAgBd,EAAkBwE,WACnD,IAAI1D,IAAkBd,EAAkByE,OAK3C,OAFAlR,QAAQJ,MAAO,4GAAsB2N,UACrC5N,IAAMC,MAAO,4GAAsB2N,KAHnC6C,EAAoB7C,cAAgBd,EAAkByE,OAO1D,GAAIzD,IAAoBf,EAAoBgB,MACxC0C,EAAoB3C,gBAAkBf,EAAoBgB,WACvD,GAAID,IAAoBf,EAAoByE,MAC/Cf,EAAoB3C,gBAAkBf,EAAoByE,UACvD,IAAI1D,IAAoBf,EAAoB0E,MAK/C,OAFApR,QAAQJ,MAAO,kHAAuB6N,UACtC9N,IAAMC,MAAO,kHAAuB6N,KAHpC2C,EAAoB3C,gBAAkBf,EAAoB0E,MAO9D,IAAKzD,GAAaA,GAAa,EAG3B,OAFA3N,QAAQJ,MAAO,wHAAwB+N,UACvChO,IAAMC,MAAO,wHAAwB+N,KAMzC,GAHAyC,EAAoBzC,UAAYA,EAG5BC,IAAcjB,EAAckB,eAC5BuC,EAAoBxC,UAAYjB,EAAckB,oBAC3C,GAAID,IAAcjB,EAAc0E,SACnCjB,EAAoBxC,UAAYjB,EAAc0E,cAC3C,GAAIzD,IAAcjB,EAAc2E,eACnClB,EAAoBxC,UAAYjB,EAAc2E,oBAC3C,GAAI1D,IAAcjB,EAAc4E,aACnCnB,EAAoBxC,UAAYjB,EAAc4E,kBAC3C,GAAI3D,IAAcjB,EAAc6E,aACnCpB,EAAoBxC,UAAYjB,EAAc6E,iBAC3C,IAAI5D,IAAcjB,EAAc8E,aAKnC,OAFAzR,QAAQJ,MAAO,wHAAwBgO,UACvCjO,IAAMC,MAAO,wHAAwBgO,KAHrCwC,EAAoBxC,UAAYjB,EAAc8E,aAQlD,GAAI3D,IAAwBjB,EAAwBkB,eAChDqC,EAAoBtC,oBAAsBjB,EAAwBkB,oBAC/D,GAAID,IAAwBjB,EAAwB6E,kCACvDtB,EAAoBtC,oBAAsBjB,EAAwB6E,uCAC/D,GAAI5D,IAAwBjB,EAAwB8E,iCACvDvB,EAAoBtC,oBAAsBjB,EAAwB8E,sCAC/D,GAAI7D,IAAwBjB,EAAwB+E,uCACvDxB,EAAoBtC,oBAAsBjB,EAAwB+E,2CAC/D,IAAI9D,IAAwBjB,EAAwBgF,sCAKvD,OAFA7R,QAAQJ,MAAO,4GAAsBkO,UACrCnO,IAAMC,MAAO,4GAAsBkO,KAHnCsC,EAAoBtC,oBAAsBjB,EAAwBgF,sCAOtE,GAAI/D,IAAwBjB,EAAwBkB,eAAgB,CAChE,IAAKV,EAGD,OAFArN,QAAQJ,MAAO,4GAAsByN,UACrC1N,IAAMC,MAAO,4GAAsByN,KAGnC+C,EAAoB/C,UAAYA,EAGxC+C,EAAoB/C,UAAYA,EAEhC+C,EAAoBnP,UAAYyI,EAAQzI,UACxC,MAAM6Q,EAAelF,EAAauD,WAAWzG,GAC7C0G,EAAoB2B,YAAcD,EAAaE,KAC/C5B,EAAoB5H,SAAWsJ,EAAatJ,SAE5C4H,EAAoB6B,iBAAmBnF,EAAqBoF,kBAC5D9B,EAAoBH,cAAgBA,EAEpCjQ,QAAQJ,MAAMwQ,GACdvL,IAAasN,iBAAiB/B,GAChC,MAAOxQ,GACLI,QAAQJ,MAAM,wFAAmBA,GACjCD,IAAMC,MAAM,0FAIpBiP,YAAY5I,GACRpB,IAAauN,iBAAiBnM,GAGlC6I,QACInQ,KAAKqO,iBAAmB,KACxBrO,KAAK2O,OAAS,EACd3O,KAAKsO,eAAiBX,EAAmBY,eACzCvO,KAAKwO,uBAAyB,OAC9BxO,KAAKyO,MAAQ,GACbzO,KAAK4O,cAAgBd,EAAkBe,OACvC7O,KAAK8O,gBAAkBf,EAAoBgB,MAC3C/O,KAAKgP,UAAY,EACjBhP,KAAKiP,UAAYjB,EAAckB,iBC7QhC,MAAMsB,EAAiB,IAvG9B,MAQI3Q,cAAe,KANf6T,SAAkB,GAMJ,KALdjD,WAA+B,IAAIhL,IAKrB,KAHdkO,kBAGc,OAFdjO,gBAAiB,EAEH,KAedC,yBAA2B,KACvB,IACQ3F,KAAK0F,iBACL1F,KAAK4F,iBACL5F,KAAK0F,gBAAiB,GAE5B,MAAOzE,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK2F,yBAA0B,MAxBhC,KA2BdiO,gCAAkC,KAC9B,IACQxF,EAAiBC,kBACbrO,KAAKyQ,WAAW9G,IAAIyE,EAAiBC,iBAAiB7H,eACtDxG,KAAK6T,gBAAiB7T,KAAKyQ,WAAWL,IAAIhC,EAAiBC,iBAAiB7H,gBAKhFxG,KAAK6T,gBAAgB,MAGzBzF,EAAiBkB,YAEnB,MAAOrO,GACLI,QAAQJ,MAAMA,GAElB4E,WAAW7F,KAAK4T,gCAAiC,KA3CjD7T,YAAeC,KAAM,CACjB0T,SAAUzT,IACV0T,aAAc1T,IACd6T,UAAW3T,IACX4T,sBAAuB5T,IACvB6T,cAAe7T,IACfyF,eAAgBzF,IAChB0T,gBAAiB1T,MAGrB0F,WAAW7F,KAAK2F,yBAA0B,IAC1CE,WAAW7F,KAAK4T,gCAAiC,IAmCrDC,gBAAgBF,GACZ3T,KAAK2T,aAAeA,EAGxBG,UAAUpD,GACFrK,KACAhF,QAAQiF,MAAMoK,GAGdA,EAAKlK,gBACJxG,KAAKyQ,WAAWlK,IAAImK,EAAKlK,cAAekK,GACzC1Q,KAAK0F,gBAAiB,GAI9BqO,sBAAsBL,GACdrN,KACAhF,QAAQiF,MAAMoN,GAElB,MAAMO,EAAkC,IAAIxO,IAC5C,IAAK,IAAIiB,EAAI,EAAGA,EAAIgN,EAAS/M,OAAQD,IAAK,CACtC,MAAMgK,EAAOgD,EAAShN,GACtBuN,EAAc1N,IAAImK,EAAKlK,cAAekK,GAE1C1Q,KAAKyQ,WAAawD,EAClBjU,KAAK0F,gBAAiB,EAG1BsO,cAAcN,GACNrN,KACAhF,QAAQiF,MAAMoN,GAElB,IAAK,IAAIhN,EAAI,EAAGA,EAAIgN,EAAS/M,OAAQD,IAAK,CACtC,MAAMgK,EAAOgD,EAAShN,GAElBgK,EAAKlK,gBACLxG,KAAKyQ,WAAWlK,IAAImK,EAAKlK,cAAekK,GACxC1Q,KAAK0F,gBAAiB,GAG9B1F,KAAK0F,gBAAiB,EAG1BE,iBACI5F,KAAK0T,SAAW,IAAI1T,KAAKyQ,WAAW7J,YCpBrC,MAAMsN,EAAiB,IAhF9B,MAIIrU,cAAe,KAHfsU,qBAA8B,GAGhB,KAFdC,iCAAgD,IAAI5J,IAGhDzK,YAAeC,KAAM,CACjBmU,qBAAsBlU,IACtBmU,iCAAkCnU,IAClCoU,wBAAyBlU,IACzBmU,mCAAoCnU,IACpCoU,sCAAuCpU,IACvCqU,wBAAyBrU,MAIjCqU,wBAAwBL,GACpBnU,KAAKmU,qBAAuBA,EAE5B,MAAMC,EAAgD,IAAI5J,IAC1D,IAAK,IAAI9D,EAAI,EAAGA,EAAI1G,KAAKmU,qBAAqBxN,OAAQD,IAClD0N,EAAiCK,IAAIzU,KAAKmU,qBAAqBzN,GAAGF,eAEtExG,KAAKoU,iCAAmCA,EAG5CC,0BACI5T,YAAQ,0CAA0CC,MAAKC,IACnD,GAAIA,EACA,GAAIA,EAAIC,OAAQ,CACZ,MAAMuT,EAAuBtT,MAAMC,QAAQH,EAAII,QAAUJ,EAAII,OAAS,GACtEf,KAAKwU,wBAAwBL,QAE7BnT,YAAO,qEAAaL,EAAIO,UAAW,CAAEwT,WAAW,EAAOC,KAAM,aAGtExT,OAAMC,IACLC,QAAQC,IAAIF,MAIpBkT,mCAAmC9N,GAC/B/F,YAAQ,oDAAqD,CACzDe,OAAQ,OACRC,KAAM,CACF,OAAU+E,KAEf9F,MAAKC,IACAA,IACIA,EAAIC,QACJZ,KAAKqU,0BACLrT,YAAM,6CAAW,CAAE0T,UAAW,IAAMC,KAAM,UAE1C3T,YAAO,6CAASL,EAAIO,UAAW,CAAEwT,WAAW,EAAOC,KAAM,cAGlExT,OAAMC,IACLC,QAAQC,IAAIF,MAIpBmT,sCAAsC/N,GAClC/F,YAAQ,uDAAwD,CAC5De,OAAQ,OACRC,KAAM,CACF,OAAU+E,KAEf9F,MAAKC,IACAA,IACIA,EAAIC,QACJZ,KAAKqU,0BACLrT,YAAM,yDAAa,CAAE0T,UAAW,IAAMC,KAAM,UAE5C3T,YAAO,yDAAWL,EAAIO,UAAW,CAAEwT,WAAW,EAAOC,KAAM,cAGpExT,OAAMC,IACLC,QAAQC,IAAIF,QCGjB,MAAMwT,EAA2B,IA/ExC,MAII/U,cAAe,KAHfgV,aAAsB,GAGR,KAFdC,yBAAwC,IAAItK,IAGxCzK,YAAeC,KAAM,CACjB6U,aAAc5U,IACd6U,yBAA0B7U,IAC1B8U,gBAAiB5U,IACjB6U,2BAA4B7U,IAC5B8U,8BAA+B9U,IAC/B+U,gBAAiB/U,MAIzB+U,gBAAgBL,GACZ7U,KAAK6U,aAAeA,EACpB,MAAMC,EAAwC,IAAItK,IAClD,IAAK,IAAI9D,EAAI,EAAGA,EAAI1G,KAAK6U,aAAalO,OAAQD,IAC1CoO,EAAyBL,IAAIzU,KAAK6U,aAAanO,GAAGF,eAEtDxG,KAAK8U,yBAA2BA,EAGpCC,kBACItU,YAAQ,uDAAuDC,MAAKC,IAChE,GAAIA,EACA,GAAIA,EAAIC,OAAQ,CACZ,MAAMiU,EAAehU,MAAMC,QAAQH,EAAII,QAAUJ,EAAII,OAAS,GAC9Df,KAAKkV,gBAAgBL,QAErB7T,IAAMC,MAAO,iFAAeN,EAAIO,cAGzCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpB4T,2BAA2BxO,GACvB/F,YAAQ,iEAAkE,CACtEe,OAAQ,OACRC,KAAM,CACF,OAAU+E,KAEf9F,MAAKC,IACAA,IACIA,EAAIC,QACJZ,KAAK+U,kBACL/T,IAAMmU,KAAK,2DAEXnU,IAAMC,MAAO,yDAAWN,EAAIO,eAGrCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpB6T,8BAA8BzO,GAC1B/F,YAAQ,oEAAqE,CACzEe,OAAQ,OACRC,KAAM,CACF,OAAU+E,KAEf9F,MAAKC,IACAA,IACIA,EAAIC,QACJZ,KAAK+U,kBACL/T,IAAMmU,KAAK,uEAEXnU,IAAMC,MAAO,qEAAaN,EAAIO,eAGvCC,OAAMC,IACLC,QAAQC,IAAIF,QCoBjB,MAAMgU,EAAgB,IA/F7B,MAIIvV,cAAe,KAHfwV,aAAsB,GAGR,KAFdC,YAAgC,IAAI7P,IAGhC1F,YAAeC,KAAM,CACjBqV,aAAcpV,IACdqV,YAAarV,IACbsV,gBAAiBpV,IACjBqV,qBAAsBrV,IACtBsV,2BAA4BtV,IAC5BuV,eAAgBvV,IAChBwV,gBAAiBxV,MAKzBwV,gBAAgBN,GACZ,MAAMC,EAAgC,IAAI7P,IAC1C4P,EAAaO,SAASC,IAClBP,EAAY/O,IAAIsP,EAAQtS,WAAYsS,MAGxC7V,KAAKsV,YAAcA,EACnBtV,KAAKqV,aAAe,IAAIrV,KAAKsV,YAAY1O,UAG7C2O,kBACI9U,YAAQ,4CAA4CC,MAAKC,IACrD,GAAIA,EACA,GAAIA,EAAIC,OAAQ,CACZ,MAAMyU,EAAexU,MAAMC,QAAQH,EAAII,QAAUJ,EAAII,OAAS,GAC9Df,KAAK2V,gBAAgBN,QAErBrU,IAAMC,MAAO,mDAAUN,EAAIO,cAGpCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBoU,qBAAqBM,GACjBrV,YAAQ,gDAAiD,CACrDe,OAAQ,OACRC,KAAM,IACCqU,KAERpV,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKuV,kBAELvU,IAAMC,MAAO,qEAAaN,EAAIO,eAGvCC,OAAMC,IACLC,QAAQC,IAAIF,MAIpBqU,2BAA2BlS,GACvB9C,YAAQ,sDAAuD,CAC3De,OAAQ,OACRC,KAAM,CACF,OAAU8B,KAGf7C,MAAKC,IACAA,IACIA,EAAIC,OACJZ,KAAKuV,kBAELvU,IAAMC,MAAO,mDAAUN,EAAIO,eAGpCC,OAAMC,IACLC,QAAQJ,MAAMG,MAItBsU,iBACIjV,YAAQ,2CAA2CC,MAAKC,IAChDA,IACIA,EAAIC,OACJZ,KAAKuV,kBAELvU,IAAMC,MAAO,mDAAUN,EAAIO,eAGpCC,OAAMC,IACLC,QAAQC,IAAIF,QCpCjB,MAiCM2U,EAAiBC,cACjBC,EAAe,IA5ErB,MAILpW,cAAe,KAHfqW,SAAW,KAGG,KAFdC,QAAe,KAED,KAoBdC,KAAO,CAACF,EAAeG,KACrBrW,KAAKmW,QAAQC,KAAKF,EAAUG,IArBhB,KAuBdC,QAAU,CAACJ,EAAeG,KACxBrW,KAAKmW,QAAQG,QAAQJ,EAAUG,IAxBnB,KA0BdE,GAAMC,IACJxW,KAAKmW,QAAQI,GAAGC,IA3BJ,KA6BdC,OAAS,KACPzW,KAAKmW,QAAQM,UA9BD,KAgCdC,UAAY,KACV1W,KAAKmW,QAAQO,aAhCb3W,YAAeC,KAAM,CACnBkW,SAAUjW,IACV0W,gBAAiBxW,MAGnBH,KAAKoW,KAAOpW,KAAKoW,KAAKQ,KAAK5W,MAC3BA,KAAKsW,QAAUtW,KAAKsW,QAAQM,KAAK5W,MACjCA,KAAKuW,GAAKvW,KAAKuW,GAAGK,KAAK5W,MACvBA,KAAKyW,OAASzW,KAAKyW,OAAOG,KAAK5W,MAC/BA,KAAK0W,UAAY1W,KAAK0W,UAAUE,KAAK5W,MAGvC2W,gBAAgBE,GACd7W,KAAKkW,SAAWW,IA4DPV,EApCuB,EAACA,EAAcW,KAEjDA,EAAMX,QAAUA,EAGhB,MAAMY,EAAwBb,IAC5BY,EAAMH,gBAAgBT,IAGlBc,EAAyBb,EAAQc,OAAOF,GAC9CA,EAAqBZ,EAAQD,UAmB7B,OAHAC,EAAQe,UAdWC,IACjB,MAMMC,EAAuBC,YAAQP,EAAO,YANtB,KACpB,MAAMQ,EAAc,IAAKR,EAAMZ,UAC/BiB,EAASG,EAAanB,EAAQhW,WAQhC,OAFAgX,EAASL,EAAMZ,SAAUC,EAAQhW,QAE1BiX,GAITjB,EAAQoB,YAAcP,EAEfb,GAOcqB,CAAqBzB,EAAgBE,I,gCC/F5D,4BAOA,MAAMwB,EAAc,CAClBC,IAAK,iFACLC,IAAK,+DACLC,IAAK,qHACLC,IAAK,6CACLC,IAAK,qKACLC,IAAK,2HACLC,IAAK,yGACLC,IAAK,+JACLC,IAAK,yDACLC,IAAK,qHACLC,IAAK,+GACLC,IAAK,6FACLC,IAAK,iCACLC,IAAK,yGACLC,IAAK,kCA0BD/X,EAAUgY,YAAO,CACrBC,aArBoBzX,IACpB,MAAM,SAAE0X,EAAW,IAAO1X,EACpB2X,EAAYnB,EAAYkB,EAAS/X,SAAW+X,EAASE,YACrD,OAAEjY,EAAF,IAAUkY,GAAQH,EAExB,GAAe,MAAX/X,EAKF,OAJAI,IAAMsP,KAAK,oGACXnN,IAAoBU,SACpBV,IAAoBM,iBACpB0S,IAAQC,KAAK,UAIfpV,IAAMC,MAAO,4BAAOL,MAAWkY,YAASF,MASxCG,YAAa,YAIftY,EAAQuY,aAAavY,QAAQwY,KAAI,CAACH,EAAKI,KAErC,MAAM1V,EAAYL,IAAoBW,eAEtC,GAAIN,EAAW,CACb,MAAM2V,EAAU,CACd,aAAc3V,GAEhB,MACE,CACEsV,MACAI,QAAS,IAAKA,EAASC,YAI3B,MACE,CACEL,MACAI,QAAS,IAAKA,OAgBPzY,O,gCCrFf,IAAI2Y,EAAYC,EAAQ,KAGpBC,EAAUF,EAAUG,OAAQC,EAAUJ,EAAUK,OAAQC,EAAQN,EAAUO,KAG1EC,EAAQR,EAAUS,MAAV,UAA+BT,EAAUS,MAAV,QAA6B,IAExED,EAAMvR,IAAO,WAOT,IAAIA,EAAM,GA0q7BV,OAxq7BAA,EAAIC,SAAY,WAOZ,IAAIA,EAAW,GA8p7Bf,OA5p7BAA,EAASC,GAAM,WAOX,IAAIA,EAAK,GAkp7BT,OAzo7BAA,EAAGuR,uBAA0B,WACzB,IAAIC,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAG5C,OAFAnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,mBAAqB,EACrCnT,EAJkB,GAe7B2B,EAAG2R,gBAAmB,WAClB,IAAIH,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,0BAA4B,EACnDnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,aAAe,EAC/BnT,EALW,GAgBtB2B,EAAG4R,uBAA0B,WACzB,IAAIJ,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,cAAgB,EAChCnT,EALkB,GAiB7B2B,EAAG6R,iBAAoB,WACnB,IAAIL,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAK5C,OAJAnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,cAAgB,EAChCnT,EANY,GAoBvB2B,EAAG8R,aAAgB,WACf,IAAIN,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAO5C,OANAnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,KAAS,YAAc,IACzCnT,EAAOmT,EAAW,KAAS,WAAa,IACxCnT,EAAOmT,EAAW,KAAS,WAAa,IACxCnT,EAAOmT,EAAW,KAAS,YAAc,IACzCnT,EAAOmT,EAAW,KAAQ,YAAc,IACjCnT,EARQ,GAmBnB2B,EAAG+R,qBAAwB,WACvB,IAAIP,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,YAAc,EACrCnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,aAAe,EAC/BnT,EALgB,GAmB3B2B,EAAGgS,cAAiB,WAChB,IAAIR,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAO5C,OANAnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,UAAY,EAC5BnT,EARS,GAqBpB2B,EAAGiS,kBAAqB,WACpB,IAAIT,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAM5C,OALAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,oBAAsB,EAC7CnT,EAAOmT,EAAW,GAAK,iBAAmB,EACnCnT,EAPa,GAmBxB2B,EAAGkS,qBAAwB,WACvB,IAAIV,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAK5C,OAJAnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,gBAAkB,EAClCnT,EANgB,GAwB3B2B,EAAGmS,gBAAmB,WAClB,IAAIX,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAW5C,OAVAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,yBAA2B,EAClDnT,EAAOmT,EAAW,GAAK,4BAA8B,EACrDnT,EAAOmT,EAAW,GAAK,sBAAwB,EAC/CnT,EAAOmT,EAAW,GAAK,yBAA2B,EAClDnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,eAAiB,EACjCnT,EAZW,GA4BtB2B,EAAGoS,sBAAyB,WACxB,IAAIZ,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAS5C,OARAnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,sBAAwB,EAC/CnT,EAAOmT,EAAW,GAAK,sBAAwB,EAC/CnT,EAAOmT,EAAW,GAAK,sBAAwB,EACxCnT,EAViB,GAoC5B2B,EAAGqS,iBAAoB,WACnB,IAAIb,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAmB5C,OAlBAnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,QAAU,EACjCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,GAAK,QAAU,EACjCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,YAAc,GACtCnT,EAAOmT,EAAW,IAAM,UAAY,GACpCnT,EAAOmT,EAAW,IAAM,QAAU,GAClCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,cAAgB,GACxCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,MAAQ,GACzBnT,EApBY,GA+BvB2B,EAAGqF,cAAiB,WAChB,IAAImM,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,GAAK,UAAY,EAC5BnT,EALS,GAgBpB2B,EAAGsS,iBAAoB,WACnB,IAAId,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,YAAc,EAC9BnT,EALY,GAiBvB2B,EAAGuS,sBAAyB,WACxB,IAAIf,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAK5C,OAJAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,YAAc,EAC9BnT,EANiB,GAqB5B2B,EAAGyF,cAAiB,WAChB,IAAI+L,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAQ5C,OAPAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,YAAc,EACrCnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,gBAAkB,EAClCnT,EATS,GAkCpB2B,EAAGoF,mBAAsB,WACrB,IAAIoM,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAkB5C,OAjBAnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,6BAA+B,EACtDnT,EAAOmT,EAAW,GAAK,6BAA+B,EACtDnT,EAAOmT,EAAW,GAAK,+BAAiC,EACxDnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,6BAA+B,EACtDnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,IAAM,+BAAiC,GACzDnT,EAAOmT,EAAW,IAAM,iBAAmB,GAC3CnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,IAAM,+BAAiC,GACzDnT,EAAOmT,EAAW,IAAM,sBAAwB,GACzCnT,EAnBc,GAmCzB2B,EAAGsF,eAAkB,WACjB,IAAIkM,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAS5C,OARAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,YAAc,EACrCnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,qBAAuB,EAC9CnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,sBAAwB,EACxCnT,EAVU,GA2BrB2B,EAAG4F,qBAAwB,WACvB,IAAI4L,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAU5C,OATAnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,qBAAuB,EAC9CnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,+BAAiC,EACxDnT,EAAOmT,EAAW,GAAK,+BAAiC,EACxDnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,qBAAuB,EACvCnT,EAXgB,GA0B3B2B,EAAGwS,cAAiB,WAChB,IAAIhB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAQ5C,OAPAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,sBAAwB,EAC/CnT,EAAOmT,EAAW,GAAK,4BAA8B,EACrDnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,WAAa,EAC7BnT,EATS,GAwBpB2B,EAAGuF,kBAAqB,WACpB,IAAIiM,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAQ5C,OAPAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,UAAY,EAC5BnT,EATa,GAqBxB2B,EAAGwF,oBAAuB,WACtB,IAAIgM,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAK5C,OAJAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,GAAK,SAAW,EAC3BnT,EANe,GAiC1B2B,EAAG2F,wBAA2B,WAC1B,IAAI6L,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAoB5C,OAnBAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,YAAc,EACrCnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,oCAAsC,EAC7DnT,EAAOmT,EAAW,GAAK,qCAAuC,EAC9DnT,EAAOmT,EAAW,GAAK,mCAAqC,EAC5DnT,EAAOmT,EAAW,GAAK,oCAAsC,EAC7DnT,EAAOmT,EAAW,GAAK,mCAAqC,EAC5DnT,EAAOmT,EAAW,IAAM,oCAAsC,GAC9DnT,EAAOmT,EAAW,IAAM,kCAAoC,GAC5DnT,EAAOmT,EAAW,IAAM,mCAAqC,GAC7DnT,EAAOmT,EAAW,IAAM,mCAAqC,GAC7DnT,EAAOmT,EAAW,IAAM,oCAAsC,GAC9DnT,EAAOmT,EAAW,IAAM,kCAAoC,GAC5DnT,EAAOmT,EAAW,IAAM,mCAAqC,GAC7DnT,EAAOmT,EAAW,IAAM,yCAA2C,GACnEnT,EAAOmT,EAAW,IAAM,0CAA4C,GAC7DnT,EArBmB,GAgC9B2B,EAAGyS,eAAkB,WACjB,IAAIjB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EAC/BnT,EALU,GAiBrB2B,EAAG0S,iBAAoB,WACnB,IAAIlB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAK5C,OAJAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,YAAc,EACrCnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,gBAAkB,EAClCnT,EANY,GAiBvB2B,EAAG2S,gBAAmB,WAClB,IAAInB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,qBAAuB,EACvCnT,EALW,GAqBtB2B,EAAG4S,cAAiB,WAChB,IAAIpB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAS5C,OARAnT,EAAOmT,EAAW,GAAK,cAAgB,EACvCnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,GAAK,UAAY,EACnCnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,yBAA2B,EAClDnT,EAAOmT,EAAW,GAAK,iBAAmB,EACnCnT,EAVS,GAuBpB2B,EAAG6S,gBAAmB,WAClB,IAAIrB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAM5C,OALAnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,YAAc,EACrCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,YAAc,EAC9BnT,EAPW,GA6CtB2B,EAAGH,aAAgB,WACf,IAAI2R,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GA+B5C,OA9BAnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GAC1BnT,EAhCQ,GA2EnB2B,EAAG8S,aAAgB,WACf,IAAItB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAoC5C,OAnCAnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,QAAU,EACjCnT,EAAOmT,EAAW,GAAK,SAAW,EAClCnT,EAAOmT,EAAW,GAAK,QAAU,EACjCnT,EAAOmT,EAAW,GAAK,QAAU,EACjCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,OAAS,EAChCnT,EAAOmT,EAAW,GAAK,QAAU,EACjCnT,EAAOmT,EAAW,IAAM,QAAU,GAClCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,UAAY,GACpCnT,EAAOmT,EAAW,IAAM,aAAe,GACvCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,aAAe,GACvCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,UAAY,GACpCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,QAAU,GAClCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,SAAW,GACnCnT,EAAOmT,EAAW,IAAM,UAAY,GACpCnT,EAAOmT,EAAW,IAAM,YAAc,GACtCnT,EAAOmT,EAAW,IAAM,WAAa,GACrCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,OAAS,GACjCnT,EAAOmT,EAAW,IAAM,eAAiB,GACzCnT,EAAOmT,EAAW,IAAM,YAAc,GAC/BnT,EArCQ,GAgDnB2B,EAAG+S,gBAAmB,WAClB,IAAIvB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAI5C,OAHAnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,gBAAkB,EAClCnT,EALW,GAiBtB2B,EAAGgT,eAAkB,WACjB,IAAIxB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAK5C,OAJAnT,EAAOmT,EAAW,GAAK,eAAiB,EACxCnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,eAAiB,EACjCnT,EANU,GAsBrB2B,EAAGiT,oBAAuB,WACtB,IAAIzB,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAS5C,OARAnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,gBAAkB,EACzCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EACtCnT,EAAOmT,EAAW,GAAK,aAAe,EAC/BnT,EAVe,GAa1B2B,EAAGkT,aAAgB,WAuBf,SAASA,EAAaC,GAClB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkWhD,OAzVA+U,EAAaG,UAAUtZ,UAAY,GAQnCmZ,EAAaG,UAAUC,KAAO,GAQ9BJ,EAAaG,UAAUla,YAAc,GAQrC+Z,EAAaG,UAAUE,YAAc,EAQrCL,EAAaG,UAAUG,mBAAqB,EAQ5CN,EAAaG,UAAUhb,OAAS,EAQhC6a,EAAaG,UAAUI,eAAgB,EAUvCP,EAAaxB,OAAS,SAAgByB,GAClC,OAAO,IAAID,EAAaC,IAY5BD,EAAaQ,OAAS,SAAgB/a,EAASgb,GAiB3C,OAhBKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WACxC,MAAhBpB,EAAQ2a,MAAgB3a,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ2a,MACjC,MAAvB3a,EAAQQ,aAAuBR,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQQ,aACjC,MAAvBR,EAAQ4a,aAAuB5a,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ4a,aACzB,MAA9B5a,EAAQ6a,oBAA8B7a,EAAQib,eAAe,uBAC7DD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ6a,oBACrC,MAAlB7a,EAAQN,QAAkBM,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQN,QAC9B,MAAzBM,EAAQ8a,eAAyB9a,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIG,KAAKrb,EAAQ8a,eACnDE,GAYXT,EAAae,gBAAkB,SAAyBtb,EAASgb,GAC7D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxChB,EAAaiB,OAAS,SAAgBC,EAAQhW,GACpCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkT,aAChGkB,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQ2a,KAAOc,EAAON,SACtB,MACJ,KAAK,EACDnb,EAAQQ,YAAcib,EAAON,SAC7B,MACJ,KAAK,EACDnb,EAAQ4a,YAAca,EAAOL,QAC7B,MACJ,KAAK,EACDpb,EAAQ6a,mBAAqBY,EAAOL,QACpC,MACJ,KAAK,EACDpb,EAAQN,OAAS+b,EAAOL,QACxB,MACJ,KAAK,EACDpb,EAAQ8a,cAAgBW,EAAOJ,OAC/B,MACJ,QACII,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXua,EAAayB,gBAAkB,SAAyBP,GAGpD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCX,EAAa0B,OAAS,SAAgBjc,GAClC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACxB,MAAO,6BACf,GAAoB,MAAhBpB,EAAQ2a,MAAgB3a,EAAQib,eAAe,UAC1CzC,EAAM0D,SAASlc,EAAQ2a,MACxB,MAAO,wBACf,GAA2B,MAAvB3a,EAAQQ,aAAuBR,EAAQib,eAAe,iBACjDzC,EAAM0D,SAASlc,EAAQQ,aACxB,MAAO,+BACf,GAA2B,MAAvBR,EAAQ4a,aAAuB5a,EAAQib,eAAe,eACtD,OAAQjb,EAAQ4a,aAChB,QACI,MAAO,mCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAkC,MAA9B5a,EAAQ6a,oBAA8B7a,EAAQib,eAAe,sBAC7D,OAAQjb,EAAQ6a,oBAChB,QACI,MAAO,0CACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAsB,MAAlB7a,EAAQN,QAAkBM,EAAQib,eAAe,UACjD,OAAQjb,EAAQN,QAChB,QACI,MAAO,8BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAA6B,MAAzBM,EAAQ8a,eAAyB9a,EAAQib,eAAe,kBACnB,mBAA1Bjb,EAAQ8a,cACR,kCACR,MAWXP,EAAajK,WAAa,SAAoB6L,GAC1C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkT,aACxC,OAAO4B,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkT,aAOxC,OANwB,MAApB4B,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACnB,MAAf+a,EAAOxB,OACP3a,EAAQ2a,KAAOyB,OAAOD,EAAOxB,OACP,MAAtBwB,EAAO3b,cACPR,EAAQQ,YAAc4b,OAAOD,EAAO3b,cAChC2b,EAAOvB,aACf,IAAK,yBACL,KAAK,EACD5a,EAAQ4a,YAAc,EACtB,MACJ,IAAK,iBACL,KAAK,EACD5a,EAAQ4a,YAAc,EACtB,MACJ,IAAK,YACL,KAAK,EACD5a,EAAQ4a,YAAc,EAG1B,OAAQuB,EAAOtB,oBACf,IAAK,UACL,KAAK,EACD7a,EAAQ6a,mBAAqB,EAC7B,MACJ,IAAK,SACL,KAAK,EACD7a,EAAQ6a,mBAAqB,EAC7B,MACJ,IAAK,aACL,KAAK,EACD7a,EAAQ6a,mBAAqB,EAGjC,OAAQsB,EAAOzc,QACf,IAAK,aACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,kBACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,eACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,mBACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,gBACL,KAAK,EACDM,EAAQN,OAAS,EAKrB,OAF4B,MAAxByc,EAAOrB,gBACP9a,EAAQ8a,cAAgBuB,QAAQF,EAAOrB,gBACpC9a,GAYXua,EAAa+B,SAAW,SAAkBtc,EAASgY,GAC1CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAwBb,OAvBInE,EAAQuE,WACRJ,EAAO/a,UAAY,GACnB+a,EAAOxB,KAAO,GACdwB,EAAO3b,YAAc,GACrB2b,EAAOvB,YAAc5C,EAAQwE,QAAUJ,OAAS,yBAA2B,EAC3ED,EAAOtB,mBAAqB7C,EAAQwE,QAAUJ,OAAS,UAAY,EACnED,EAAOzc,OAASsY,EAAQwE,QAAUJ,OAAS,aAAe,EAC1DD,EAAOrB,eAAgB,GAEF,MAArB9a,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACX,MAAhBpB,EAAQ2a,MAAgB3a,EAAQib,eAAe,UAC/CkB,EAAOxB,KAAO3a,EAAQ2a,MACC,MAAvB3a,EAAQQ,aAAuBR,EAAQib,eAAe,iBACtDkB,EAAO3b,YAAcR,EAAQQ,aACN,MAAvBR,EAAQ4a,aAAuB5a,EAAQib,eAAe,iBACtDkB,EAAOvB,YAAc5C,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG2R,gBAAgBhZ,EAAQ4a,aAAe5a,EAAQ4a,aACvF,MAA9B5a,EAAQ6a,oBAA8B7a,EAAQib,eAAe,wBAC7DkB,EAAOtB,mBAAqB7C,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG4R,uBAAuBjZ,EAAQ6a,oBAAsB7a,EAAQ6a,oBACxH,MAAlB7a,EAAQN,QAAkBM,EAAQib,eAAe,YACjDkB,EAAOzc,OAASsY,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGiS,kBAAkBtZ,EAAQN,QAAUM,EAAQN,QACpF,MAAzBM,EAAQ8a,eAAyB9a,EAAQib,eAAe,mBACxDkB,EAAOrB,cAAgB9a,EAAQ8a,eAC5BqB,GAUX5B,EAAaG,UAAU+B,OAAS,WAC5B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDnC,EA7XQ,GAgYnBlT,EAAGmF,cAAiB,WAyChB,SAASA,EAAcgO,GACnB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAioChD,OAxnCAgH,EAAckO,UAAUiC,WAAa,GAQrCnQ,EAAckO,UAAUC,KAAO,GAQ/BnO,EAAckO,UAAUrL,SAAW,GAQnC7C,EAAckO,UAAUkC,aAAe,GAQvCpQ,EAAckO,UAAUpV,cAAgB,GAQxCkH,EAAckO,UAAUmC,OAAS,GAQjCrQ,EAAckO,UAAUoC,SAAW,EAQnCtQ,EAAckO,UAAUqC,aAAe,EAQvCvQ,EAAckO,UAAU/R,SAAW,EAQnC6D,EAAckO,UAAUsC,WAAa,EAQrCxQ,EAAckO,UAAUuC,UAAY,EAQpCzQ,EAAckO,UAAUwC,gBAAkB,EAQ1C1Q,EAAckO,UAAUyC,iBAAmB,EAQ3C3Q,EAAckO,UAAU0C,wBAAyB,EAQjD5Q,EAAckO,UAAU2C,iBAAmB,GAQ3C7Q,EAAckO,UAAU4C,YAAc,EAQtC9Q,EAAckO,UAAU6C,YAAc,EAQtC/Q,EAAckO,UAAU8C,qBAAuB,EAQ/ChR,EAAckO,UAAU+C,6BAA+B,GAQvDjR,EAAckO,UAAUgD,qBAAuB,EAQ/ClR,EAAckO,UAAUiD,qBAAuB,EAQ/CnR,EAAckO,UAAUkD,oBAAsB,EAQ9CpR,EAAckO,UAAUmD,oBAAsB,EAQ9CrR,EAAckO,UAAUoD,gBAAkB,EAQ1CtR,EAAckO,UAAUtZ,UAAY,GAUpCoL,EAAcuM,OAAS,SAAgByB,GACnC,OAAO,IAAIhO,EAAcgO,IAY7BhO,EAAcuO,OAAS,SAAgB/a,EAASgb,GAqD5C,OApDKA,IACDA,EAAS1C,EAAQS,UACK,MAAtB/Y,EAAQ2c,YAAsB3c,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ2c,YACxC,MAAhB3c,EAAQ2a,MAAgB3a,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ2a,MACpC,MAApB3a,EAAQqP,UAAoBrP,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqP,UAChC,MAAxBrP,EAAQ4c,cAAwB5c,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ4c,cAC/B,MAAzB5c,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACtC,MAAlBtF,EAAQ6c,QAAkB7c,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ6c,QACpC,MAApB7c,EAAQ8c,UAAoB9c,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ8c,UAC/B,MAAxB9c,EAAQ+c,cAAwB/c,EAAQib,eAAe,iBACvDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQ+c,cACpC,MAApB/c,EAAQ2I,UAAoB3I,EAAQib,eAAe,aACnDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQ2I,UAClC,MAAtB3I,EAAQgd,YAAsBhd,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQgd,YACpC,MAArBhd,EAAQid,WAAqBjd,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQid,WAC/B,MAA3Bjd,EAAQkd,iBAA2Bld,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQkd,iBAC9B,MAA5Bld,EAAQmd,kBAA4Bnd,EAAQib,eAAe,qBAC3DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQmd,kBACxB,MAAlCnd,EAAQod,wBAAkCpd,EAAQib,eAAe,2BACjED,EAAOE,OAA+B,KAAKG,KAAKrb,EAAQod,wBAC5B,MAA5Bpd,EAAQqd,kBAA4Brd,EAAQib,eAAe,qBAC3DD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQqd,kBACnC,MAAvBrd,EAAQsd,aAAuBtd,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQsd,aACnC,MAAvBtd,EAAQud,aAAuBvd,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQud,aACzB,MAAhCvd,EAAQwd,sBAAgCxd,EAAQib,eAAe,yBAC/DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQwd,sBAClB,MAAxCxd,EAAQyd,8BAAwCzd,EAAQib,eAAe,iCACvED,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQyd,8BAC1B,MAAhCzd,EAAQ0d,sBAAgC1d,EAAQib,eAAe,yBAC/DD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ0d,sBAC3B,MAAhC1d,EAAQ2d,sBAAgC3d,EAAQib,eAAe,yBAC/DD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ2d,sBAC5B,MAA/B3d,EAAQ4d,qBAA+B5d,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ4d,qBAC5B,MAA/B5d,EAAQ6d,qBAA+B7d,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ6d,qBAChC,MAA3B7d,EAAQ8d,iBAA2B9d,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ8d,iBACpC,MAArB9d,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQoB,WACvD4Z,GAYXxO,EAAc8O,gBAAkB,SAAyBtb,EAASgb,GAC9D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC/O,EAAcgP,OAAS,SAAgBC,EAAQhW,GACrCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAChGiP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ2c,WAAalB,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQ2a,KAAOc,EAAON,SACtB,MACJ,KAAK,EACDnb,EAAQqP,SAAWoM,EAAON,SAC1B,MACJ,KAAK,EACDnb,EAAQ4c,aAAenB,EAAON,SAC9B,MACJ,KAAK,EACDnb,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQ6c,OAASpB,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQ8c,SAAWrB,EAAOL,QAC1B,MACJ,KAAK,GACDpb,EAAQ+c,aAAetB,EAAOL,QAC9B,MACJ,KAAK,GACDpb,EAAQ2I,SAAW8S,EAAOL,QAC1B,MACJ,KAAK,GACDpb,EAAQgd,WAAavB,EAAOsC,SAC5B,MACJ,KAAK,GACD/d,EAAQid,UAAYxB,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQkd,gBAAkBzB,EAAOsC,SACjC,MACJ,KAAK,GACD/d,EAAQmd,iBAAmB1B,EAAOsC,SAClC,MACJ,KAAK,GACD/d,EAAQod,uBAAyB3B,EAAOJ,OACxC,MACJ,KAAK,GACDrb,EAAQqd,iBAAmB5B,EAAON,SAClC,MACJ,KAAK,GACDnb,EAAQsd,YAAc7B,EAAOsC,SAC7B,MACJ,KAAK,GACD/d,EAAQud,YAAc9B,EAAOL,QAC7B,MACJ,KAAK,GACDpb,EAAQwd,qBAAuB/B,EAAOsC,SACtC,MACJ,KAAK,GACD/d,EAAQyd,6BAA+BhC,EAAON,SAC9C,MACJ,KAAK,GACDnb,EAAQ0d,qBAAuBjC,EAAOuC,UACtC,MACJ,KAAK,GACDhe,EAAQ2d,qBAAuBlC,EAAOuC,UACtC,MACJ,KAAK,GACDhe,EAAQ4d,oBAAsBnC,EAAOuC,UACrC,MACJ,KAAK,GACDhe,EAAQ6d,oBAAsBpC,EAAOuC,UACrC,MACJ,KAAK,GACDhe,EAAQ8d,gBAAkBrC,EAAOL,QACjC,MACJ,KAAK,GACDpb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwM,EAAcwP,gBAAkB,SAAyBP,GAGrD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC1O,EAAcyP,OAAS,SAAgBjc,GACnC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQ2c,YAAsB3c,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQ2c,YACxB,MAAO,8BACf,GAAoB,MAAhB3c,EAAQ2a,MAAgB3a,EAAQib,eAAe,UAC1CzC,EAAM0D,SAASlc,EAAQ2a,MACxB,MAAO,wBACf,GAAwB,MAApB3a,EAAQqP,UAAoBrP,EAAQib,eAAe,cAC9CzC,EAAM0D,SAASlc,EAAQqP,UACxB,MAAO,4BACf,GAA4B,MAAxBrP,EAAQ4c,cAAwB5c,EAAQib,eAAe,kBAClDzC,EAAM0D,SAASlc,EAAQ4c,cACxB,MAAO,gCACf,GAA6B,MAAzB5c,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACxB,MAAO,iCACf,GAAsB,MAAlBtF,EAAQ6c,QAAkB7c,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQ6c,QACxB,MAAO,0BACf,GAAwB,MAApB7c,EAAQ8c,UAAoB9c,EAAQib,eAAe,YACnD,OAAQjb,EAAQ8c,UAChB,QACI,MAAO,gCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAA4B,MAAxB9c,EAAQ+c,cAAwB/c,EAAQib,eAAe,gBACvD,OAAQjb,EAAQ+c,cAChB,QACI,MAAO,oCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAAwB,MAApB/c,EAAQ2I,UAAoB3I,EAAQib,eAAe,YACnD,OAAQjb,EAAQ2I,UAChB,QACI,MAAO,gCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAA0B,MAAtB3I,EAAQgd,YAAsBhd,EAAQib,eAAe,eACnB,kBAAvBjb,EAAQgd,WACf,MAAO,8BACf,GAAyB,MAArBhd,EAAQid,WAAqBjd,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQid,UACf,MAAO,6BACf,GAA+B,MAA3Bjd,EAAQkd,iBAA2Bld,EAAQib,eAAe,oBACnB,kBAA5Bjb,EAAQkd,gBACf,MAAO,mCACf,GAAgC,MAA5Bld,EAAQmd,kBAA4Bnd,EAAQib,eAAe,qBACnB,kBAA7Bjb,EAAQmd,iBACf,MAAO,oCACf,GAAsC,MAAlCnd,EAAQod,wBAAkCpd,EAAQib,eAAe,2BACnB,mBAAnCjb,EAAQod,uBACf,MAAO,2CACf,GAAgC,MAA5Bpd,EAAQqd,kBAA4Brd,EAAQib,eAAe,sBACtDzC,EAAM0D,SAASlc,EAAQqd,kBACxB,MAAO,oCACf,GAA2B,MAAvBrd,EAAQsd,aAAuBtd,EAAQib,eAAe,gBACnB,kBAAxBjb,EAAQsd,YACf,MAAO,+BACf,GAA2B,MAAvBtd,EAAQud,aAAuBvd,EAAQib,eAAe,eACtD,OAAQjb,EAAQud,aAChB,QACI,MAAO,mCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAoC,MAAhCvd,EAAQwd,sBAAgCxd,EAAQib,eAAe,yBACnB,kBAAjCjb,EAAQwd,qBACf,MAAO,wCACf,GAA4C,MAAxCxd,EAAQyd,8BAAwCzd,EAAQib,eAAe,kCAClEzC,EAAM0D,SAASlc,EAAQyd,8BACxB,MAAO,gDACf,GAAoC,MAAhCzd,EAAQ0d,sBAAgC1d,EAAQib,eAAe,0BAC1DzC,EAAMyF,UAAUje,EAAQ0d,sBACzB,MAAO,yCACf,GAAoC,MAAhC1d,EAAQ2d,sBAAgC3d,EAAQib,eAAe,0BAC1DzC,EAAMyF,UAAUje,EAAQ2d,sBACzB,MAAO,yCACf,GAAmC,MAA/B3d,EAAQ4d,qBAA+B5d,EAAQib,eAAe,yBACzDzC,EAAMyF,UAAUje,EAAQ4d,qBACzB,MAAO,wCACf,GAAmC,MAA/B5d,EAAQ6d,qBAA+B7d,EAAQib,eAAe,yBACzDzC,EAAMyF,UAAUje,EAAQ6d,qBACzB,MAAO,wCACf,GAA+B,MAA3B7d,EAAQ8d,iBAA2B9d,EAAQib,eAAe,mBAC1D,OAAQjb,EAAQ8d,iBAChB,QACI,MAAO,uCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAyB,MAArB9d,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACR,MAWXoL,EAAc8D,WAAa,SAAoB6L,GAC3C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmF,cACxC,OAAO2P,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAaxC,OAZyB,MAArB2P,EAAOQ,aACP3c,EAAQ2c,WAAaP,OAAOD,EAAOQ,aACpB,MAAfR,EAAOxB,OACP3a,EAAQ2a,KAAOyB,OAAOD,EAAOxB,OACV,MAAnBwB,EAAO9M,WACPrP,EAAQqP,SAAW+M,OAAOD,EAAO9M,WACV,MAAvB8M,EAAOS,eACP5c,EAAQ4c,aAAeR,OAAOD,EAAOS,eACb,MAAxBT,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBACrB,MAAjB6W,EAAOU,SACP7c,EAAQ6c,OAAST,OAAOD,EAAOU,SAC3BV,EAAOW,UACf,IAAK,kBACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,OACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,QACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,OACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,OACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,OACL,KAAK,EACD9c,EAAQ8c,SAAW,EACnB,MACJ,IAAK,OACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,SACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,YACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,YACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,SACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,OACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,QACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,SACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,WACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,UACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,cACL,KAAK,GACD9c,EAAQ8c,SAAW,GACnB,MACJ,IAAK,WACL,KAAK,GACD9c,EAAQ8c,SAAW,GAGvB,OAAQX,EAAOY,cACf,IAAK,sBACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,SACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,UACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,SACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,QACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,cACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,OACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,QACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,OACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,QACL,KAAK,EACD/c,EAAQ+c,aAAe,EACvB,MACJ,IAAK,MACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,WACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,SACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,OACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,MACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,aACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,MACL,KAAK,GACD/c,EAAQ+c,aAAe,GACvB,MACJ,IAAK,KACL,KAAK,GACD/c,EAAQ+c,aAAe,GAG3B,OAAQZ,EAAOxT,UACf,IAAK,kBACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GAiBvB,OAdyB,MAArBwT,EAAOa,aACPhd,EAAQgd,WAAajN,OAAOoM,EAAOa,aACf,MAApBb,EAAOc,YACPjd,EAAQid,UAAYlN,OAAOoM,EAAOc,YACR,MAA1Bd,EAAOe,kBACPld,EAAQkd,gBAAkBnN,OAAOoM,EAAOe,kBACb,MAA3Bf,EAAOgB,mBACPnd,EAAQmd,iBAAmBpN,OAAOoM,EAAOgB,mBACR,MAAjChB,EAAOiB,yBACPpd,EAAQod,uBAAyBf,QAAQF,EAAOiB,yBACrB,MAA3BjB,EAAOkB,mBACPrd,EAAQqd,iBAAmBjB,OAAOD,EAAOkB,mBACnB,MAAtBlB,EAAOmB,cACPtd,EAAQsd,YAAcvN,OAAOoM,EAAOmB,cAChCnB,EAAOoB,aACf,IAAK,YACL,KAAK,EACDvd,EAAQud,YAAc,EACtB,MACJ,IAAK,gBACL,KAAK,EACDvd,EAAQud,YAAc,EACtB,MACJ,IAAK,eACL,KAAK,EACDvd,EAAQud,YAAc,EAe1B,OAZmC,MAA/BpB,EAAOqB,uBACPxd,EAAQwd,qBAAuBzN,OAAOoM,EAAOqB,uBACN,MAAvCrB,EAAOsB,+BACPzd,EAAQyd,6BAA+BrB,OAAOD,EAAOsB,+BACtB,MAA/BtB,EAAOuB,uBACP1d,EAAQ0d,qBAAuBvB,EAAOuB,uBAAyB,GAChC,MAA/BvB,EAAOwB,uBACP3d,EAAQ2d,qBAAuBxB,EAAOwB,uBAAyB,GACjC,MAA9BxB,EAAOyB,sBACP5d,EAAQ4d,oBAAsBzB,EAAOyB,sBAAwB,GAC/B,MAA9BzB,EAAO0B,sBACP7d,EAAQ6d,oBAAsB1B,EAAO0B,sBAAwB,GACzD1B,EAAO2B,iBACf,IAAK,gBACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,eACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,YACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,YACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,YACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,YACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,YACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAC1B,MACJ,IAAK,YACL,KAAK,EACD9d,EAAQ8d,gBAAkB,EAK9B,OAFwB,MAApB3B,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YAC/BpB,GAYXwM,EAAc8P,SAAW,SAAkBtc,EAASgY,GAC3CA,IACDA,EAAU,IACd,IAAImE,EAAS,GA8Eb,OA7EInE,EAAQuE,WACRJ,EAAOQ,WAAa,GACpBR,EAAOxB,KAAO,GACdwB,EAAO9M,SAAW,GAClB8M,EAAOS,aAAe,GACtBT,EAAO7W,cAAgB,GACvB6W,EAAOU,OAAS,GAChBV,EAAOW,SAAW9E,EAAQwE,QAAUJ,OAAS,kBAAoB,EACjED,EAAOY,aAAe/E,EAAQwE,QAAUJ,OAAS,sBAAwB,EACzED,EAAOxT,SAAWqP,EAAQwE,QAAUJ,OAAS,kBAAoB,EACjED,EAAOa,WAAa,EACpBb,EAAOc,UAAY,EACnBd,EAAOe,gBAAkB,EACzBf,EAAOgB,iBAAmB,EAC1BhB,EAAOiB,wBAAyB,EAChCjB,EAAOkB,iBAAmB,GAC1BlB,EAAOmB,YAAc,EACrBnB,EAAOoB,YAAcvF,EAAQwE,QAAUJ,OAAS,YAAc,EAC9DD,EAAOqB,qBAAuB,EAC9BrB,EAAOsB,6BAA+B,GACtCtB,EAAOuB,qBAAuB,EAC9BvB,EAAOwB,qBAAuB,EAC9BxB,EAAOyB,oBAAsB,EAC7BzB,EAAO0B,oBAAsB,EAC7B1B,EAAO2B,gBAAkB9F,EAAQwE,QAAUJ,OAAS,gBAAkB,EACtED,EAAO/a,UAAY,IAEG,MAAtBpB,EAAQ2c,YAAsB3c,EAAQib,eAAe,gBACrDkB,EAAOQ,WAAa3c,EAAQ2c,YACZ,MAAhB3c,EAAQ2a,MAAgB3a,EAAQib,eAAe,UAC/CkB,EAAOxB,KAAO3a,EAAQ2a,MACF,MAApB3a,EAAQqP,UAAoBrP,EAAQib,eAAe,cACnDkB,EAAO9M,SAAWrP,EAAQqP,UACF,MAAxBrP,EAAQ4c,cAAwB5c,EAAQib,eAAe,kBACvDkB,EAAOS,aAAe5c,EAAQ4c,cACL,MAAzB5c,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eACb,MAAlBtF,EAAQ6c,QAAkB7c,EAAQib,eAAe,YACjDkB,EAAOU,OAAS7c,EAAQ6c,QACJ,MAApB7c,EAAQ8c,UAAoB9c,EAAQib,eAAe,cACnDkB,EAAOW,SAAW9E,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG8S,aAAana,EAAQ8c,UAAY9c,EAAQ8c,UACpF,MAAxB9c,EAAQ+c,cAAwB/c,EAAQib,eAAe,kBACvDkB,EAAOY,aAAe/E,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGqS,iBAAiB1Z,EAAQ+c,cAAgB/c,EAAQ+c,cACpG,MAApB/c,EAAQ2I,UAAoB3I,EAAQib,eAAe,cACnDkB,EAAOxT,SAAWqP,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGH,aAAalH,EAAQ2I,UAAY3I,EAAQ2I,UACtF,MAAtB3I,EAAQgd,YAAsBhd,EAAQib,eAAe,gBACrDkB,EAAOa,WAAahF,EAAQkG,OAASC,SAASne,EAAQgd,YAAcZ,OAAOpc,EAAQgd,YAAchd,EAAQgd,YACpF,MAArBhd,EAAQid,WAAqBjd,EAAQib,eAAe,eACpDkB,EAAOc,UAAYjF,EAAQkG,OAASC,SAASne,EAAQid,WAAab,OAAOpc,EAAQid,WAAajd,EAAQid,WAC3E,MAA3Bjd,EAAQkd,iBAA2Bld,EAAQib,eAAe,qBAC1DkB,EAAOe,gBAAkBlF,EAAQkG,OAASC,SAASne,EAAQkd,iBAAmBd,OAAOpc,EAAQkd,iBAAmBld,EAAQkd,iBAC5F,MAA5Bld,EAAQmd,kBAA4Bnd,EAAQib,eAAe,sBAC3DkB,EAAOgB,iBAAmBnF,EAAQkG,OAASC,SAASne,EAAQmd,kBAAoBf,OAAOpc,EAAQmd,kBAAoBnd,EAAQmd,kBACzF,MAAlCnd,EAAQod,wBAAkCpd,EAAQib,eAAe,4BACjEkB,EAAOiB,uBAAyBpd,EAAQod,wBACZ,MAA5Bpd,EAAQqd,kBAA4Brd,EAAQib,eAAe,sBAC3DkB,EAAOkB,iBAAmBrd,EAAQqd,kBACX,MAAvBrd,EAAQsd,aAAuBtd,EAAQib,eAAe,iBACtDkB,EAAOmB,YAActF,EAAQkG,OAASC,SAASne,EAAQsd,aAAelB,OAAOpc,EAAQsd,aAAetd,EAAQsd,aACrF,MAAvBtd,EAAQud,aAAuBvd,EAAQib,eAAe,iBACtDkB,EAAOoB,YAAcvF,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG+S,gBAAgBpa,EAAQud,aAAevd,EAAQud,aACrF,MAAhCvd,EAAQwd,sBAAgCxd,EAAQib,eAAe,0BAC/DkB,EAAOqB,qBAAuBxF,EAAQkG,OAASC,SAASne,EAAQwd,sBAAwBpB,OAAOpc,EAAQwd,sBAAwBxd,EAAQwd,sBAC/F,MAAxCxd,EAAQyd,8BAAwCzd,EAAQib,eAAe,kCACvEkB,EAAOsB,6BAA+Bzd,EAAQyd,8BACd,MAAhCzd,EAAQ0d,sBAAgC1d,EAAQib,eAAe,0BAC/DkB,EAAOuB,qBAAuB1d,EAAQ0d,sBACN,MAAhC1d,EAAQ2d,sBAAgC3d,EAAQib,eAAe,0BAC/DkB,EAAOwB,qBAAuB3d,EAAQ2d,sBACP,MAA/B3d,EAAQ4d,qBAA+B5d,EAAQib,eAAe,yBAC9DkB,EAAOyB,oBAAsB5d,EAAQ4d,qBACN,MAA/B5d,EAAQ6d,qBAA+B7d,EAAQib,eAAe,yBAC9DkB,EAAO0B,oBAAsB7d,EAAQ6d,qBACV,MAA3B7d,EAAQ8d,iBAA2B9d,EAAQib,eAAe,qBAC1DkB,EAAO2B,gBAAkB9F,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGiT,oBAAoBta,EAAQ8d,iBAAmB9d,EAAQ8d,iBAC5G,MAArB9d,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACxB+a,GAUX3P,EAAckO,UAAU+B,OAAS,WAC7B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDlQ,EA9qCS,GAirCpBnF,EAAG0F,aAAgB,WAgCf,SAASA,EAAayN,GAClB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAsoBhD,OA7nBAuH,EAAa2N,UAAUhS,UAAY,GAQnCqE,EAAa2N,UAAUvI,KAAO,GAQ9BpF,EAAa2N,UAAUC,KAAO,GAQ9B5N,EAAa2N,UAAU0D,OAAS,GAQhCrR,EAAa2N,UAAU/R,SAAW,EAQlCoE,EAAa2N,UAAUhQ,WAAa,EAQpCqC,EAAa2N,UAAUjQ,QAAU,EAQjCsC,EAAa2N,UAAU2D,UAAY,EAQnCtR,EAAa2N,UAAU1P,WAAa,EAQpC+B,EAAa2N,UAAU3P,OAAS,EAQhCgC,EAAa2N,UAAU7P,YAAc,EAQrCkC,EAAa2N,UAAU5P,eAAiB,EAQxCiC,EAAa2N,UAAU9P,QAAU,EAQjCmC,EAAa2N,UAAU/P,SAAW,EAQlCoC,EAAa2N,UAAUtZ,UAAY,GAQnC2L,EAAa2N,UAAU4D,sBAAwB9F,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAU7FzR,EAAagM,OAAS,SAAgByB,GAClC,OAAO,IAAIzN,EAAayN,IAY5BzN,EAAagO,OAAS,SAAgB/a,EAASgb,GAmC3C,OAlCKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WACxC,MAAhB1I,EAAQmS,MAAgBnS,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQmS,MACxC,MAAhBnS,EAAQ2a,MAAgB3a,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ2a,MACtC,MAAlB3a,EAAQoe,QAAkBpe,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoe,QACpC,MAApBpe,EAAQ2I,UAAoB3I,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ2I,UACjC,MAAtB3I,EAAQ0K,YAAsB1K,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQ0K,YACrC,MAAnB1K,EAAQyK,SAAmBzK,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQyK,SACnC,MAArBzK,EAAQqe,WAAqBre,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQqe,WAClC,MAAtBre,EAAQgL,YAAsBhL,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQgL,YACtC,MAAlBhL,EAAQ+K,QAAkB/K,EAAQib,eAAe,WACjDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQ+K,QAClC,MAAvB/K,EAAQ6K,aAAuB7K,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQ6K,aAC/B,MAA1B7K,EAAQ8K,gBAA0B9K,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQ8K,gBACtC,MAAnB9K,EAAQ4K,SAAmB5K,EAAQib,eAAe,YAClDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ4K,SACtC,MAApB5K,EAAQ2K,UAAoB3K,EAAQib,eAAe,aACnDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ2K,UACrC,MAArB3K,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQoB,WACzB,MAAjCpB,EAAQse,uBAAiCte,EAAQib,eAAe,0BAChED,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQse,uBACxDtD,GAYXjO,EAAauO,gBAAkB,SAAyBtb,EAASgb,GAC7D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCxO,EAAayO,OAAS,SAAgBC,EAAQhW,GACpCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0F,aAChG0O,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQmS,KAAOsJ,EAAON,SACtB,MACJ,KAAK,EACDnb,EAAQ2a,KAAOc,EAAON,SACtB,MACJ,KAAK,EACDnb,EAAQoe,OAAS3C,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQ2I,SAAW8S,EAAOL,QAC1B,MACJ,KAAK,EACDpb,EAAQ0K,WAAa+Q,EAAOsC,SAC5B,MACJ,KAAK,EACD/d,EAAQyK,QAAUgR,EAAOsC,SACzB,MACJ,KAAK,EACD/d,EAAQqe,UAAY5C,EAAOsC,SAC3B,MACJ,KAAK,EACD/d,EAAQgL,WAAayQ,EAAOsC,SAC5B,MACJ,KAAK,GACD/d,EAAQ+K,OAAS0Q,EAAOsC,SACxB,MACJ,KAAK,GACD/d,EAAQ6K,YAAc4Q,EAAOsC,SAC7B,MACJ,KAAK,GACD/d,EAAQ8K,eAAiB2Q,EAAOsC,SAChC,MACJ,KAAK,GACD/d,EAAQ4K,QAAU6Q,EAAOsC,SACzB,MACJ,KAAK,GACD/d,EAAQ2K,SAAW8Q,EAAOsC,SAC1B,MACJ,KAAK,GACD/d,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQse,sBAAwB7C,EAAOgD,UACvC,MACJ,QACIhD,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX+M,EAAaiP,gBAAkB,SAAyBP,GAGpD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCnO,EAAakP,OAAS,SAAgBjc,GAClC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACxB,MAAO,6BACf,GAAoB,MAAhB1I,EAAQmS,MAAgBnS,EAAQib,eAAe,UAC1CzC,EAAM0D,SAASlc,EAAQmS,MACxB,MAAO,wBACf,GAAoB,MAAhBnS,EAAQ2a,MAAgB3a,EAAQib,eAAe,UAC1CzC,EAAM0D,SAASlc,EAAQ2a,MACxB,MAAO,wBACf,GAAsB,MAAlB3a,EAAQoe,QAAkBpe,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQoe,QACxB,MAAO,0BACf,GAAwB,MAApBpe,EAAQ2I,UAAoB3I,EAAQib,eAAe,YACnD,OAAQjb,EAAQ2I,UAChB,QACI,MAAO,gCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,OAA0B,MAAtB3I,EAAQ0K,YAAsB1K,EAAQib,eAAe,eACnB,kBAAvBjb,EAAQ0K,WACR,8BACQ,MAAnB1K,EAAQyK,SAAmBzK,EAAQib,eAAe,YACnB,kBAApBjb,EAAQyK,QACR,2BACU,MAArBzK,EAAQqe,WAAqBre,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQqe,UACR,6BACW,MAAtBre,EAAQgL,YAAsBhL,EAAQib,eAAe,eACnB,kBAAvBjb,EAAQgL,WACR,8BACO,MAAlBhL,EAAQ+K,QAAkB/K,EAAQib,eAAe,WACnB,kBAAnBjb,EAAQ+K,OACR,0BACY,MAAvB/K,EAAQ6K,aAAuB7K,EAAQib,eAAe,gBACnB,kBAAxBjb,EAAQ6K,YACR,+BACe,MAA1B7K,EAAQ8K,gBAA0B9K,EAAQib,eAAe,mBACnB,kBAA3Bjb,EAAQ8K,eACR,kCACQ,MAAnB9K,EAAQ4K,SAAmB5K,EAAQib,eAAe,YACnB,kBAApBjb,EAAQ4K,QACR,2BACS,MAApB5K,EAAQ2K,UAAoB3K,EAAQib,eAAe,aACnB,kBAArBjb,EAAQ2K,SACR,4BACU,MAArB3K,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACsB,MAAjCpB,EAAQse,wBAAiCte,EAAQib,eAAe,0BAC3DzC,EAAMyF,UAAUje,EAAQse,wBAA4Bte,EAAQse,uBAAyB9F,EAAMyF,UAAUje,EAAQse,sBAAsBI,MAAQlG,EAAMyF,UAAUje,EAAQse,sBAAsBK,MAE3L,KADQ,gDAYnB5R,EAAauD,WAAa,SAAoB6L,GAC1C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG0F,aACxC,OAAOoP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0F,aASxC,OARwB,MAApBoP,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YACnB,MAAfyT,EAAOhK,OACPnS,EAAQmS,KAAOiK,OAAOD,EAAOhK,OACd,MAAfgK,EAAOxB,OACP3a,EAAQ2a,KAAOyB,OAAOD,EAAOxB,OACZ,MAAjBwB,EAAOiC,SACPpe,EAAQoe,OAAShC,OAAOD,EAAOiC,SAC3BjC,EAAOxT,UACf,IAAK,kBACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GAgCvB,OA7ByB,MAArBwT,EAAOzR,aACP1K,EAAQ0K,WAAaqF,OAAOoM,EAAOzR,aACjB,MAAlByR,EAAO1R,UACPzK,EAAQyK,QAAUsF,OAAOoM,EAAO1R,UACZ,MAApB0R,EAAOkC,YACPre,EAAQqe,UAAYtO,OAAOoM,EAAOkC,YACb,MAArBlC,EAAOnR,aACPhL,EAAQgL,WAAa+E,OAAOoM,EAAOnR,aAClB,MAAjBmR,EAAOpR,SACP/K,EAAQ+K,OAASgF,OAAOoM,EAAOpR,SACT,MAAtBoR,EAAOtR,cACP7K,EAAQ6K,YAAckF,OAAOoM,EAAOtR,cACX,MAAzBsR,EAAOrR,iBACP9K,EAAQ8K,eAAiBiF,OAAOoM,EAAOrR,iBACrB,MAAlBqR,EAAOvR,UACP5K,EAAQ4K,QAAUmF,OAAOoM,EAAOvR,UACb,MAAnBuR,EAAOxR,WACP3K,EAAQ2K,SAAWoF,OAAOoM,EAAOxR,WACb,MAApBwR,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACF,MAAhC+a,EAAOmC,wBACH9F,EAAM+F,MACLve,EAAQse,sBAAwB9F,EAAM+F,KAAKK,UAAUzC,EAAOmC,wBAAwBO,UAAW,EACnD,kBAAjC1C,EAAOmC,sBACnBte,EAAQse,sBAAwBrO,SAASkM,EAAOmC,sBAAuB,IAC1B,kBAAjCnC,EAAOmC,sBACnBte,EAAQse,sBAAwBnC,EAAOmC,sBACM,kBAAjCnC,EAAOmC,wBACnBte,EAAQse,sBAAwB,IAAI9F,EAAMsG,SAAS3C,EAAOmC,sBAAsBI,MAAQ,EAAGvC,EAAOmC,sBAAsBK,OAAS,GAAGI,aACrI/e,GAYX+M,EAAauP,SAAW,SAAkBtc,EAASgY,GAC1CA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAgBR,GAfAJ,EAAOzT,UAAY,GACnByT,EAAOhK,KAAO,GACdgK,EAAOxB,KAAO,GACdwB,EAAOiC,OAAS,GAChBjC,EAAOxT,SAAWqP,EAAQwE,QAAUJ,OAAS,kBAAoB,EACjED,EAAOzR,WAAa,EACpByR,EAAO1R,QAAU,EACjB0R,EAAOkC,UAAY,EACnBlC,EAAOnR,WAAa,EACpBmR,EAAOpR,OAAS,EAChBoR,EAAOtR,YAAc,EACrBsR,EAAOrR,eAAiB,EACxBqR,EAAOvR,QAAU,EACjBuR,EAAOxR,SAAW,EAClBwR,EAAO/a,UAAY,GACfoX,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEzH7C,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAAS,IAAM,EAqCxE,OAnCyB,MAArBpc,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACX,MAAhB1I,EAAQmS,MAAgBnS,EAAQib,eAAe,UAC/CkB,EAAOhK,KAAOnS,EAAQmS,MACN,MAAhBnS,EAAQ2a,MAAgB3a,EAAQib,eAAe,UAC/CkB,EAAOxB,KAAO3a,EAAQ2a,MACJ,MAAlB3a,EAAQoe,QAAkBpe,EAAQib,eAAe,YACjDkB,EAAOiC,OAASpe,EAAQoe,QACJ,MAApBpe,EAAQ2I,UAAoB3I,EAAQib,eAAe,cACnDkB,EAAOxT,SAAWqP,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGH,aAAalH,EAAQ2I,UAAY3I,EAAQ2I,UACtF,MAAtB3I,EAAQ0K,YAAsB1K,EAAQib,eAAe,gBACrDkB,EAAOzR,WAAasN,EAAQkG,OAASC,SAASne,EAAQ0K,YAAc0R,OAAOpc,EAAQ0K,YAAc1K,EAAQ0K,YACtF,MAAnB1K,EAAQyK,SAAmBzK,EAAQib,eAAe,aAClDkB,EAAO1R,QAAUuN,EAAQkG,OAASC,SAASne,EAAQyK,SAAW2R,OAAOpc,EAAQyK,SAAWzK,EAAQyK,SAC3E,MAArBzK,EAAQqe,WAAqBre,EAAQib,eAAe,eACpDkB,EAAOkC,UAAYrG,EAAQkG,OAASC,SAASne,EAAQqe,WAAajC,OAAOpc,EAAQqe,WAAare,EAAQqe,WAChF,MAAtBre,EAAQgL,YAAsBhL,EAAQib,eAAe,gBACrDkB,EAAOnR,WAAagN,EAAQkG,OAASC,SAASne,EAAQgL,YAAcoR,OAAOpc,EAAQgL,YAAchL,EAAQgL,YACvF,MAAlBhL,EAAQ+K,QAAkB/K,EAAQib,eAAe,YACjDkB,EAAOpR,OAASiN,EAAQkG,OAASC,SAASne,EAAQ+K,QAAUqR,OAAOpc,EAAQ+K,QAAU/K,EAAQ+K,QACtE,MAAvB/K,EAAQ6K,aAAuB7K,EAAQib,eAAe,iBACtDkB,EAAOtR,YAAcmN,EAAQkG,OAASC,SAASne,EAAQ6K,aAAeuR,OAAOpc,EAAQ6K,aAAe7K,EAAQ6K,aAClF,MAA1B7K,EAAQ8K,gBAA0B9K,EAAQib,eAAe,oBACzDkB,EAAOrR,eAAiBkN,EAAQkG,OAASC,SAASne,EAAQ8K,gBAAkBsR,OAAOpc,EAAQ8K,gBAAkB9K,EAAQ8K,gBAClG,MAAnB9K,EAAQ4K,SAAmB5K,EAAQib,eAAe,aAClDkB,EAAOvR,QAAUoN,EAAQkG,OAASC,SAASne,EAAQ4K,SAAWwR,OAAOpc,EAAQ4K,SAAW5K,EAAQ4K,SAC5E,MAApB5K,EAAQ2K,UAAoB3K,EAAQib,eAAe,cACnDkB,EAAOxR,SAAWqN,EAAQkG,OAASC,SAASne,EAAQ2K,UAAYyR,OAAOpc,EAAQ2K,UAAY3K,EAAQ2K,UAC9E,MAArB3K,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACM,MAAjCpB,EAAQse,uBAAiCte,EAAQib,eAAe,2BACnB,kBAAlCjb,EAAQse,sBACfnC,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQse,uBAAyBte,EAAQse,sBAE1GnC,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQse,uBAAyBtG,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQse,sBAAsBI,MAAQ,EAAG1e,EAAQse,sBAAsBK,OAAS,GAAGI,WAAa/e,EAAQse,uBACrRnC,GAUXpP,EAAa2N,UAAU+B,OAAS,WAC5B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD3P,EA1qBQ,GA6qBnB1F,EAAG+X,WAAc,WAuDb,SAASA,EAAW5E,GAChB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAi7ChD,OAx6CA4Z,EAAW1E,UAAUtK,cAAgB,GAQrCgP,EAAW1E,UAAUtU,QAAU,GAQ/BgZ,EAAW1E,UAAU3T,eAAiB,GAQtCqY,EAAW1E,UAAUhS,UAAY,GAQjC0W,EAAW1E,UAAU2E,aAAe,GAQpCD,EAAW1E,UAAU4E,eAAiB,GAQtCF,EAAW1E,UAAU6E,WAAa,GAQlCH,EAAW1E,UAAU8E,WAAa,GAQlCJ,EAAW1E,UAAUxK,UAAY,EAQjCkP,EAAW1E,UAAUvK,WAAa,EAQlCiP,EAAW1E,UAAU3M,UAAY,EAQjCqR,EAAW1E,UAAUtN,eAAiB,EAQtCgS,EAAW1E,UAAU+E,YAAc,EAQnCL,EAAW1E,UAAUnN,MAAQ,EAQ7B6R,EAAW1E,UAAUgF,YAAc,EAQnCN,EAAW1E,UAAUiF,aAAe,EAQpCP,EAAW1E,UAAUhN,cAAgB,EAQrC0R,EAAW1E,UAAUkF,QAAU,GAQ/BR,EAAW1E,UAAU9M,gBAAkB,EAQvCwR,EAAW1E,UAAU5M,UAAY,EAQjCsR,EAAW1E,UAAUzM,oBAAsB,EAQ3CmR,EAAW1E,UAAUlN,UAAY,EAQjC4R,EAAW1E,UAAUtI,iBAAmB,EAQxCgN,EAAW1E,UAAUmF,YAAc,EAQnCT,EAAW1E,UAAUoF,eAAiB,EAQtCV,EAAW1E,UAAUqF,UAAY,EAQjCX,EAAW1E,UAAUsF,WAAa,GAQlCZ,EAAW1E,UAAU9T,UAAY,GAQjCwY,EAAW1E,UAAU7T,UAAY,GAQjCuY,EAAW1E,UAAUuF,WAAa,GAQlCb,EAAW1E,UAAUwF,YAAc,GAQnCd,EAAW1E,UAAUyF,WAAa,GAQlCf,EAAW1E,UAAU0F,WAAa,GAQlChB,EAAW1E,UAAU2F,UAAY,GAQjCjB,EAAW1E,UAAU4F,QAAU,EAQ/BlB,EAAW1E,UAAU6F,UAAY,EAQjCnB,EAAW1E,UAAUxV,SAAW,KAQhCka,EAAW1E,UAAUtZ,UAAY,GAQjCge,EAAW1E,UAAU8F,kBAAoB,EAUzCpB,EAAWrG,OAAS,SAAgByB,GAChC,OAAO,IAAI4E,EAAW5E,IAY1B4E,EAAWrE,OAAS,SAAgB/a,EAASgb,GAiFzC,OAhFKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQoQ,eAAyBpQ,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoQ,eACrC,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoG,SAC9B,MAA1BpG,EAAQ+G,gBAA0B/G,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ+G,gBACnC,MAArB/G,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WAChC,MAAxB1I,EAAQqf,cAAwBrf,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqf,cAC9B,MAA1Brf,EAAQsf,gBAA0Btf,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsf,gBAClC,MAAtBtf,EAAQuf,YAAsBvf,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQuf,YAClC,MAAtBvf,EAAQwf,YAAsBxf,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQwf,YACnC,MAArBxf,EAAQkQ,WAAqBlQ,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQkQ,WACjC,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQmQ,YACnC,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQ+N,WAC9B,MAA1B/N,EAAQoN,gBAA0BpN,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQoN,gBACjC,MAAvBpN,EAAQyf,aAAuBzf,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQyf,aACxC,MAAjBzf,EAAQuN,OAAiBvN,EAAQib,eAAe,UAChDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQuN,OACnC,MAAvBvN,EAAQ0f,aAAuB1f,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ0f,aACnC,MAAxB1f,EAAQ2f,cAAwB3f,EAAQib,eAAe,iBACvDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ2f,cAClC,MAAzB3f,EAAQ0N,eAAyB1N,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ0N,eACtC,MAAnB1N,EAAQ4f,SAAmB5f,EAAQib,eAAe,YAClDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQ4f,SAC/B,MAA3B5f,EAAQ4N,iBAA2B5N,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ4N,iBACpC,MAArB5N,EAAQ8N,WAAqB9N,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ8N,WAC5B,MAA/B9N,EAAQiO,qBAA+BjO,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQiO,qBACpC,MAArBjO,EAAQwN,WAAqBxN,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQwN,WAC9B,MAA5BxN,EAAQoS,kBAA4BpS,EAAQib,eAAe,qBAC3DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQoS,kBAClC,MAAvBpS,EAAQ6f,aAAuB7f,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ6f,aACjC,MAA1B7f,EAAQ8f,gBAA0B9f,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ8f,gBACtC,MAArB9f,EAAQ+f,WAAqB/f,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ+f,WACrC,MAAtB/f,EAAQggB,YAAsBhgB,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQggB,YACrC,MAArBhgB,EAAQ4G,WAAqB5G,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQ4G,WACrC,MAArB5G,EAAQ6G,WAAqB7G,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQ6G,WACpC,MAAtB7G,EAAQigB,YAAsBjgB,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQigB,YACnC,MAAvBjgB,EAAQkgB,aAAuBlgB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQkgB,aACpC,MAAtBlgB,EAAQmgB,YAAsBngB,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQmgB,YACpC,MAAtBngB,EAAQogB,YAAsBpgB,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQogB,YACrC,MAArBpgB,EAAQqgB,WAAqBrgB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQqgB,WACvC,MAAnBrgB,EAAQsgB,SAAmBtgB,EAAQib,eAAe,YAClDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQsgB,SACtC,MAArBtgB,EAAQugB,WAAqBvgB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQugB,WACvC,MAApBvgB,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA+B,KAAKuF,QAAQlF,SAC3F,MAArBvb,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQoB,WAC7B,MAA7BpB,EAAQwgB,mBAA6BxgB,EAAQib,eAAe,sBAC5DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQwgB,mBACtDxF,GAYXoE,EAAW9D,gBAAkB,SAAyBtb,EAASgb,GAC3D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6D,EAAW5D,OAAS,SAAgBC,EAAQhW,GAClCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAChG3D,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQoQ,cAAgBqL,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQoG,QAAUqV,EAAON,SACzB,MACJ,KAAK,EACDnb,EAAQ+G,eAAiB0U,EAAON,SAChC,MACJ,KAAK,EACDnb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQqf,aAAe5D,EAAON,SAC9B,MACJ,KAAK,EACDnb,EAAQsf,eAAiB7D,EAAON,SAChC,MACJ,KAAK,EACDnb,EAAQuf,WAAa9D,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQwf,WAAa/D,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQkQ,UAAYuL,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQmQ,WAAasL,EAAOL,QAC5B,MACJ,KAAK,GACDpb,EAAQ+N,UAAY0N,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQoN,eAAiBqO,EAAOL,QAChC,MACJ,KAAK,GACDpb,EAAQyf,YAAchE,EAAOL,QAC7B,MACJ,KAAK,GACDpb,EAAQuN,MAAQkO,EAAOsC,SACvB,MACJ,KAAK,GACD/d,EAAQ0f,YAAcjE,EAAOuC,UAC7B,MACJ,KAAK,GACDhe,EAAQ2f,aAAelE,EAAOuC,UAC9B,MACJ,KAAK,GACDhe,EAAQ0N,cAAgB+N,EAAOL,QAC/B,MACJ,KAAK,GACDpb,EAAQ4f,QAAUnE,EAAON,SACzB,MACJ,KAAK,GACDnb,EAAQ4N,gBAAkB6N,EAAOL,QACjC,MACJ,KAAK,GACDpb,EAAQ8N,UAAY2N,EAAOuC,UAC3B,MACJ,KAAK,GACDhe,EAAQiO,oBAAsBwN,EAAOL,QACrC,MACJ,KAAK,GACDpb,EAAQwN,UAAYiO,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQoS,iBAAmBqJ,EAAOL,QAClC,MACJ,KAAK,GACDpb,EAAQ6f,YAAcpE,EAAOuC,UAC7B,MACJ,KAAK,GACDhe,EAAQ8f,eAAiBrE,EAAOuC,UAChC,MACJ,KAAK,GACDhe,EAAQ+f,UAAYtE,EAAOuC,UAC3B,MACJ,KAAK,GACDhe,EAAQggB,WAAavE,EAAON,SAC5B,MACJ,KAAK,GACDnb,EAAQ4G,UAAY6U,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQ6G,UAAY4U,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQigB,WAAaxE,EAAON,SAC5B,MACJ,KAAK,GACDnb,EAAQkgB,YAAczE,EAAON,SAC7B,MACJ,KAAK,GACDnb,EAAQmgB,WAAa1E,EAAON,SAC5B,MACJ,KAAK,GACDnb,EAAQogB,WAAa3E,EAAON,SAC5B,MACJ,KAAK,GACDnb,EAAQqgB,UAAY5E,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQsgB,QAAU7E,EAAOuC,UACzB,MACJ,KAAK,GACDhe,EAAQugB,UAAY9E,EAAOuC,UAC3B,MACJ,KAAK,GACDhe,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,KAAK,GACDlb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQwgB,kBAAoB/E,EAAOL,QACnC,MACJ,QACIK,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXof,EAAWpD,gBAAkB,SAAyBP,GAGlD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkE,EAAWnD,OAAS,SAAgBjc,GAChC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA6B,MAAzBA,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQoQ,eACxB,MAAO,iCACf,GAAuB,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQoG,SACxB,MAAO,2BACf,GAA8B,MAA1BpG,EAAQ+G,gBAA0B/G,EAAQib,eAAe,oBACpDzC,EAAM0D,SAASlc,EAAQ+G,gBACxB,MAAO,kCACf,GAAyB,MAArB/G,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACxB,MAAO,6BACf,GAA4B,MAAxB1I,EAAQqf,cAAwBrf,EAAQib,eAAe,kBAClDzC,EAAM0D,SAASlc,EAAQqf,cACxB,MAAO,gCACf,GAA8B,MAA1Brf,EAAQsf,gBAA0Btf,EAAQib,eAAe,oBACpDzC,EAAM0D,SAASlc,EAAQsf,gBACxB,MAAO,kCACf,GAA0B,MAAtBtf,EAAQuf,YAAsBvf,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQuf,YACxB,MAAO,8BACf,GAA0B,MAAtBvf,EAAQwf,YAAsBxf,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQwf,YACxB,MAAO,8BACf,GAAyB,MAArBxf,EAAQkQ,WAAqBlQ,EAAQib,eAAe,aACpD,OAAQjb,EAAQkQ,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,cACrD,OAAQjb,EAAQmQ,YAChB,QACI,MAAO,kCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAyB,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,aACpD,OAAQjb,EAAQ+N,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA8B,MAA1B/N,EAAQoN,gBAA0BpN,EAAQib,eAAe,kBACzD,OAAQjb,EAAQoN,gBAChB,QACI,MAAO,sCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAA2B,MAAvBpN,EAAQyf,aAAuBzf,EAAQib,eAAe,eACtD,OAAQjb,EAAQyf,aAChB,QACI,MAAO,mCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAqB,MAAjBzf,EAAQuN,OAAiBvN,EAAQib,eAAe,UACnB,kBAAlBjb,EAAQuN,MACf,MAAO,yBACf,GAA2B,MAAvBvN,EAAQ0f,aAAuB1f,EAAQib,eAAe,iBACjDzC,EAAMyF,UAAUje,EAAQ0f,aACzB,MAAO,gCACf,GAA4B,MAAxB1f,EAAQ2f,cAAwB3f,EAAQib,eAAe,kBAClDzC,EAAMyF,UAAUje,EAAQ2f,cACzB,MAAO,iCACf,GAA6B,MAAzB3f,EAAQ0N,eAAyB1N,EAAQib,eAAe,iBACxD,OAAQjb,EAAQ0N,eAChB,QACI,MAAO,qCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAuB,MAAnB1N,EAAQ4f,SAAmB5f,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQ4f,SACxB,MAAO,2BACf,GAA+B,MAA3B5f,EAAQ4N,iBAA2B5N,EAAQib,eAAe,mBAC1D,OAAQjb,EAAQ4N,iBAChB,QACI,MAAO,uCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAyB,MAArB5N,EAAQ8N,WAAqB9N,EAAQib,eAAe,eAC/CzC,EAAMyF,UAAUje,EAAQ8N,WACzB,MAAO,8BACf,GAAmC,MAA/B9N,EAAQiO,qBAA+BjO,EAAQib,eAAe,uBAC9D,OAAQjb,EAAQiO,qBAChB,QACI,MAAO,2CACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAAyB,MAArBjO,EAAQwN,WAAqBxN,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQwN,UACf,MAAO,6BACf,GAAgC,MAA5BxN,EAAQoS,kBAA4BpS,EAAQib,eAAe,oBAC3D,OAAQjb,EAAQoS,kBAChB,QACI,MAAO,wCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA2B,MAAvBpS,EAAQ6f,aAAuB7f,EAAQib,eAAe,iBACjDzC,EAAMyF,UAAUje,EAAQ6f,aACzB,MAAO,gCACf,GAA8B,MAA1B7f,EAAQ8f,gBAA0B9f,EAAQib,eAAe,oBACpDzC,EAAMyF,UAAUje,EAAQ8f,gBACzB,MAAO,mCACf,GAAyB,MAArB9f,EAAQ+f,WAAqB/f,EAAQib,eAAe,eAC/CzC,EAAMyF,UAAUje,EAAQ+f,WACzB,MAAO,8BACf,GAA0B,MAAtB/f,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQggB,YACxB,MAAO,8BACf,GAAyB,MAArBhgB,EAAQ4G,WAAqB5G,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ4G,WACxB,MAAO,6BACf,GAAyB,MAArB5G,EAAQ6G,WAAqB7G,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ6G,WACxB,MAAO,6BACf,GAA0B,MAAtB7G,EAAQigB,YAAsBjgB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQigB,YACxB,MAAO,8BACf,GAA2B,MAAvBjgB,EAAQkgB,aAAuBlgB,EAAQib,eAAe,iBACjDzC,EAAM0D,SAASlc,EAAQkgB,aACxB,MAAO,+BACf,GAA0B,MAAtBlgB,EAAQmgB,YAAsBngB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQmgB,YACxB,MAAO,8BACf,GAA0B,MAAtBngB,EAAQogB,YAAsBpgB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQogB,YACxB,MAAO,8BACf,GAAyB,MAArBpgB,EAAQqgB,WAAqBrgB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQqgB,WACxB,MAAO,6BACf,GAAuB,MAAnBrgB,EAAQsgB,SAAmBtgB,EAAQib,eAAe,aAC7CzC,EAAMyF,UAAUje,EAAQsgB,SACzB,MAAO,4BACf,GAAyB,MAArBtgB,EAAQugB,WAAqBvgB,EAAQib,eAAe,eAC/CzC,EAAMyF,UAAUje,EAAQugB,WACzB,MAAO,8BACf,GAAwB,MAApBvgB,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,UAC/D,GAAInF,EACA,MAAO,YAAcA,EAE7B,GAAyB,MAArBC,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACxB,MAAO,6BACf,GAAiC,MAA7BpB,EAAQwgB,mBAA6BxgB,EAAQib,eAAe,qBAC5D,OAAQjb,EAAQwgB,mBAChB,QACI,MAAO,yCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAO,MAWXpB,EAAW9O,WAAa,SAAoB6L,GACxC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+X,WACxC,OAAOjD,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAiBxC,OAhB4B,MAAxBjD,EAAO/L,gBACPpQ,EAAQoQ,cAAgBgM,OAAOD,EAAO/L,gBACpB,MAAlB+L,EAAO/V,UACPpG,EAAQoG,QAAUgW,OAAOD,EAAO/V,UACP,MAAzB+V,EAAOpV,iBACP/G,EAAQ+G,eAAiBqV,OAAOD,EAAOpV,iBACnB,MAApBoV,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YACX,MAAvByT,EAAOkD,eACPrf,EAAQqf,aAAejD,OAAOD,EAAOkD,eACZ,MAAzBlD,EAAOmD,iBACPtf,EAAQsf,eAAiBlD,OAAOD,EAAOmD,iBAClB,MAArBnD,EAAOoD,aACPvf,EAAQuf,WAAanD,OAAOD,EAAOoD,aACd,MAArBpD,EAAOqD,aACPxf,EAAQwf,WAAapD,OAAOD,EAAOqD,aAC/BrD,EAAOjM,WACf,IAAK,YACL,KAAK,EACDlQ,EAAQkQ,UAAY,EACpB,MACJ,IAAK,QACL,KAAK,EACDlQ,EAAQkQ,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDlQ,EAAQkQ,UAAY,EAGxB,OAAQiM,EAAOhM,YACf,IAAK,aACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,UACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,WACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,gBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,gBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,oBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,cACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,qBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EAGzB,OAAQgM,EAAOpO,WACf,IAAK,aACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,WACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EAGxB,OAAQoO,EAAO/O,gBACf,IAAK,cACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,eACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,iBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,gBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,gBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,8BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,gBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,8BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,gBACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,4BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,4BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,8BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,qBACL,KAAK,GACDpN,EAAQoN,eAAiB,GAG7B,OAAQ+O,EAAOsD,aACf,IAAK,aACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,eACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,wBACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,2BACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,qBACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,wBACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,cACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,gBACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,aACL,KAAK,EACDzf,EAAQyf,YAAc,EACtB,MACJ,IAAK,cACL,KAAK,EACDzf,EAAQyf,YAAc,EAS1B,OANoB,MAAhBtD,EAAO5O,QACPvN,EAAQuN,MAAQwC,OAAOoM,EAAO5O,QACR,MAAtB4O,EAAOuD,cACP1f,EAAQ0f,YAAcvD,EAAOuD,cAAgB,GACtB,MAAvBvD,EAAOwD,eACP3f,EAAQ2f,aAAexD,EAAOwD,eAAiB,GAC3CxD,EAAOzO,eACf,IAAK,aACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EAK5B,OAFsB,MAAlByO,EAAOyD,UACP5f,EAAQ4f,QAAUxD,OAAOD,EAAOyD,UAC5BzD,EAAOvO,iBACf,IAAK,aACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAC1B,MACJ,IAAK,QACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAC1B,MACJ,IAAK,QACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAC1B,MACJ,IAAK,QACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAK9B,OAFwB,MAApBuO,EAAOrO,YACP9N,EAAQ8N,UAAYqO,EAAOrO,YAAc,GACrCqO,EAAOlO,qBACf,IAAK,aACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,iBACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,WACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,iBACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,iBACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,mCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,oCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,kCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,mCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,kCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,mCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,iCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,kCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,kCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,mCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,iCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,kCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,wCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,yCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAKlC,OAFwB,MAApBkO,EAAO3O,YACPxN,EAAQwN,UAAYuC,OAAOoM,EAAO3O,YAC9B2O,EAAO/J,kBACf,IAAK,cACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,oBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,kBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,8BACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,8BACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,kBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,gBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,YACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,oBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EA6B/B,GA1B0B,MAAtB+J,EAAO0D,cACP7f,EAAQ6f,YAAc1D,EAAO0D,cAAgB,GACpB,MAAzB1D,EAAO2D,iBACP9f,EAAQ8f,eAAiB3D,EAAO2D,iBAAmB,GAC/B,MAApB3D,EAAO4D,YACP/f,EAAQ+f,UAAY5D,EAAO4D,YAAc,GACpB,MAArB5D,EAAO6D,aACPhgB,EAAQggB,WAAa5D,OAAOD,EAAO6D,aACf,MAApB7D,EAAOvV,YACP5G,EAAQ4G,UAAYwV,OAAOD,EAAOvV,YACd,MAApBuV,EAAOtV,YACP7G,EAAQ6G,UAAYuV,OAAOD,EAAOtV,YACb,MAArBsV,EAAO8D,aACPjgB,EAAQigB,WAAa7D,OAAOD,EAAO8D,aACb,MAAtB9D,EAAO+D,cACPlgB,EAAQkgB,YAAc9D,OAAOD,EAAO+D,cACf,MAArB/D,EAAOgE,aACPngB,EAAQmgB,WAAa/D,OAAOD,EAAOgE,aACd,MAArBhE,EAAOiE,aACPpgB,EAAQogB,WAAahE,OAAOD,EAAOiE,aACf,MAApBjE,EAAOkE,YACPrgB,EAAQqgB,UAAYjE,OAAOD,EAAOkE,YAChB,MAAlBlE,EAAOmE,UACPtgB,EAAQsgB,QAAUnE,EAAOmE,UAAY,GACjB,MAApBnE,EAAOoE,YACPvgB,EAAQugB,UAAYpE,EAAOoE,YAAc,GACtB,MAAnBpE,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,yDACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAI7E,OAFwB,MAApBiX,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YAC9B+a,EAAOqE,mBACf,IAAK,cACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,sBACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,sBACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,sBACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,eACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,qBACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,qBACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAC5B,MACJ,IAAK,qBACL,KAAK,EACDxgB,EAAQwgB,kBAAoB,EAGhC,OAAOxgB,GAYXof,EAAW9C,SAAW,SAAkBtc,EAASgY,GACxCA,IACDA,EAAU,IACd,IAAImE,EAAS,GAwHb,OAvHInE,EAAQuE,WACRJ,EAAO/L,cAAgB,GACvB+L,EAAO/V,QAAU,GACjB+V,EAAOpV,eAAiB,GACxBoV,EAAOzT,UAAY,GACnByT,EAAOkD,aAAe,GACtBlD,EAAOmD,eAAiB,GACxBnD,EAAOoD,WAAa,GACpBpD,EAAOqD,WAAa,GACpBrD,EAAOjM,UAAY8H,EAAQwE,QAAUJ,OAAS,YAAc,EAC5DD,EAAOhM,WAAa6H,EAAQwE,QAAUJ,OAAS,aAAe,EAC9DD,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS,aAAe,EAC7DD,EAAO/O,eAAiB4K,EAAQwE,QAAUJ,OAAS,cAAgB,EACnED,EAAOsD,YAAczH,EAAQwE,QAAUJ,OAAS,aAAe,EAC/DD,EAAO5O,MAAQ,EACf4O,EAAOuD,YAAc,EACrBvD,EAAOwD,aAAe,EACtBxD,EAAOzO,cAAgBsK,EAAQwE,QAAUJ,OAAS,aAAe,EACjED,EAAOyD,QAAU,GACjBzD,EAAOvO,gBAAkBoK,EAAQwE,QAAUJ,OAAS,aAAe,EACnED,EAAOrO,UAAY,EACnBqO,EAAOlO,oBAAsB+J,EAAQwE,QAAUJ,OAAS,aAAe,EACvED,EAAO3O,UAAY,EACnB2O,EAAO/J,iBAAmB4F,EAAQwE,QAAUJ,OAAS,cAAgB,EACrED,EAAO0D,YAAc,EACrB1D,EAAO2D,eAAiB,EACxB3D,EAAO4D,UAAY,EACnB5D,EAAO6D,WAAa,GACpB7D,EAAOvV,UAAY,GACnBuV,EAAOtV,UAAY,GACnBsV,EAAO8D,WAAa,GACpB9D,EAAO+D,YAAc,GACrB/D,EAAOgE,WAAa,GACpBhE,EAAOiE,WAAa,GACpBjE,EAAOkE,UAAY,GACnBlE,EAAOmE,QAAU,EACjBnE,EAAOoE,UAAY,EACnBpE,EAAOjX,SAAW,KAClBiX,EAAO/a,UAAY,GACnB+a,EAAOqE,kBAAoBxI,EAAQwE,QAAUJ,OAAS,cAAgB,GAE7C,MAAzBpc,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACxDkB,EAAO/L,cAAgBpQ,EAAQoQ,eACZ,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,aAClDkB,EAAO/V,QAAUpG,EAAQoG,SACC,MAA1BpG,EAAQ+G,gBAA0B/G,EAAQib,eAAe,oBACzDkB,EAAOpV,eAAiB/G,EAAQ+G,gBACX,MAArB/G,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACH,MAAxB1I,EAAQqf,cAAwBrf,EAAQib,eAAe,kBACvDkB,EAAOkD,aAAerf,EAAQqf,cACJ,MAA1Brf,EAAQsf,gBAA0Btf,EAAQib,eAAe,oBACzDkB,EAAOmD,eAAiBtf,EAAQsf,gBACV,MAAtBtf,EAAQuf,YAAsBvf,EAAQib,eAAe,gBACrDkB,EAAOoD,WAAavf,EAAQuf,YACN,MAAtBvf,EAAQwf,YAAsBxf,EAAQib,eAAe,gBACrDkB,EAAOqD,WAAaxf,EAAQwf,YACP,MAArBxf,EAAQkQ,WAAqBlQ,EAAQib,eAAe,eACpDkB,EAAOjM,UAAY8H,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGqF,cAAc1M,EAAQkQ,WAAalQ,EAAQkQ,WACzF,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,gBACrDkB,EAAOhM,WAAa6H,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGsF,eAAe3M,EAAQmQ,YAAcnQ,EAAQmQ,YAC7F,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,eACpDkB,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGyF,cAAc9M,EAAQ+N,WAAa/N,EAAQ+N,WACrF,MAA1B/N,EAAQoN,gBAA0BpN,EAAQib,eAAe,oBACzDkB,EAAO/O,eAAiB4K,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGoF,mBAAmBzM,EAAQoN,gBAAkBpN,EAAQoN,gBACvG,MAAvBpN,EAAQyf,aAAuBzf,EAAQib,eAAe,iBACtDkB,EAAOsD,YAAczH,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGmS,gBAAgBxZ,EAAQyf,aAAezf,EAAQyf,aACpG,MAAjBzf,EAAQuN,OAAiBvN,EAAQib,eAAe,WAChDkB,EAAO5O,MAAQyK,EAAQkG,OAASC,SAASne,EAAQuN,OAAS6O,OAAOpc,EAAQuN,OAASvN,EAAQuN,OACnE,MAAvBvN,EAAQ0f,aAAuB1f,EAAQib,eAAe,iBACtDkB,EAAOuD,YAAc1f,EAAQ0f,aACL,MAAxB1f,EAAQ2f,cAAwB3f,EAAQib,eAAe,kBACvDkB,EAAOwD,aAAe3f,EAAQ2f,cACL,MAAzB3f,EAAQ0N,eAAyB1N,EAAQib,eAAe,mBACxDkB,EAAOzO,cAAgBsK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGuF,kBAAkB5M,EAAQ0N,eAAiB1N,EAAQ0N,eACxG,MAAnB1N,EAAQ4f,SAAmB5f,EAAQib,eAAe,aAClDkB,EAAOyD,QAAU5f,EAAQ4f,SACE,MAA3B5f,EAAQ4N,iBAA2B5N,EAAQib,eAAe,qBAC1DkB,EAAOvO,gBAAkBoK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGwF,oBAAoB7M,EAAQ4N,iBAAmB5N,EAAQ4N,iBAC5G,MAArB5N,EAAQ8N,WAAqB9N,EAAQib,eAAe,eACpDkB,EAAOrO,UAAY9N,EAAQ8N,WACI,MAA/B9N,EAAQiO,qBAA+BjO,EAAQib,eAAe,yBAC9DkB,EAAOlO,oBAAsB+J,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG2F,wBAAwBhN,EAAQiO,qBAAuBjO,EAAQiO,qBACxH,MAArBjO,EAAQwN,WAAqBxN,EAAQib,eAAe,eACpDkB,EAAO3O,UAAYwK,EAAQkG,OAASC,SAASne,EAAQwN,WAAa4O,OAAOpc,EAAQwN,WAAaxN,EAAQwN,WAC1E,MAA5BxN,EAAQoS,kBAA4BpS,EAAQib,eAAe,sBAC3DkB,EAAO/J,iBAAmB4F,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG4F,qBAAqBjN,EAAQoS,kBAAoBpS,EAAQoS,kBAC7G,MAAvBpS,EAAQ6f,aAAuB7f,EAAQib,eAAe,iBACtDkB,EAAO0D,YAAc7f,EAAQ6f,aACH,MAA1B7f,EAAQ8f,gBAA0B9f,EAAQib,eAAe,oBACzDkB,EAAO2D,eAAiB9f,EAAQ8f,gBACX,MAArB9f,EAAQ+f,WAAqB/f,EAAQib,eAAe,eACpDkB,EAAO4D,UAAY/f,EAAQ+f,WACL,MAAtB/f,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBACrDkB,EAAO6D,WAAahgB,EAAQggB,YACP,MAArBhgB,EAAQ4G,WAAqB5G,EAAQib,eAAe,eACpDkB,EAAOvV,UAAY5G,EAAQ4G,WACN,MAArB5G,EAAQ6G,WAAqB7G,EAAQib,eAAe,eACpDkB,EAAOtV,UAAY7G,EAAQ6G,WACL,MAAtB7G,EAAQigB,YAAsBjgB,EAAQib,eAAe,gBACrDkB,EAAO8D,WAAajgB,EAAQigB,YACL,MAAvBjgB,EAAQkgB,aAAuBlgB,EAAQib,eAAe,iBACtDkB,EAAO+D,YAAclgB,EAAQkgB,aACP,MAAtBlgB,EAAQmgB,YAAsBngB,EAAQib,eAAe,gBACrDkB,EAAOgE,WAAangB,EAAQmgB,YACN,MAAtBngB,EAAQogB,YAAsBpgB,EAAQib,eAAe,gBACrDkB,EAAOiE,WAAapgB,EAAQogB,YACP,MAArBpgB,EAAQqgB,WAAqBrgB,EAAQib,eAAe,eACpDkB,EAAOkE,UAAYrgB,EAAQqgB,WACR,MAAnBrgB,EAAQsgB,SAAmBtgB,EAAQib,eAAe,aAClDkB,EAAOmE,QAAUtgB,EAAQsgB,SACJ,MAArBtgB,EAAQugB,WAAqBvgB,EAAQib,eAAe,eACpDkB,EAAOoE,UAAYvgB,EAAQugB,WACP,MAApBvgB,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC5D,MAArBhY,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACE,MAA7BpB,EAAQwgB,mBAA6BxgB,EAAQib,eAAe,uBAC5DkB,EAAOqE,kBAAoBxI,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGoS,sBAAsBzZ,EAAQwgB,mBAAqBxgB,EAAQwgB,mBACpIrE,GAUXiD,EAAW1E,UAAU+B,OAAS,WAC1B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD0C,EA5+CM,GA++CjB/X,EAAGsZ,WAAc,WAwCb,SAASA,EAAWnG,GAChB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAo0BhD,OA3zBAmb,EAAWjG,UAAU9O,QAAU,GAQ/B+U,EAAWjG,UAAUrO,eAAiB,GAQtCsU,EAAWjG,UAAUtK,cAAgB,GAQrCuQ,EAAWjG,UAAUtU,QAAU,GAQ/Bua,EAAWjG,UAAU3T,eAAiB,GAQtC4Z,EAAWjG,UAAU2E,aAAe,GAQpCsB,EAAWjG,UAAU4E,eAAiB,GAQtCqB,EAAWjG,UAAU6E,WAAa,GAQlCoB,EAAWjG,UAAUkG,aAAe,GAQpCD,EAAWjG,UAAU8E,WAAa,GAQlCmB,EAAWjG,UAAUhS,UAAY,GAQjCiY,EAAWjG,UAAUxK,UAAY,EAQjCyQ,EAAWjG,UAAUvK,WAAa,EAQlCwQ,EAAWjG,UAAU3M,UAAY,EAQjC4S,EAAWjG,UAAUnN,MAAQ,EAQ7BoT,EAAWjG,UAAUjN,OAAS,EAQ9BkT,EAAWjG,UAAUmG,UAAY,EAQjCF,EAAWjG,UAAUoG,YAAc,EAQnCH,EAAWjG,UAAUsF,WAAa,GAQlCW,EAAWjG,UAAUvO,UAAY,GAQjCwU,EAAWjG,UAAUtO,UAAY,GAQjCuU,EAAWjG,UAAUqG,eAAiBvI,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQpFmC,EAAWjG,UAAUxV,SAAW,KAQhCyb,EAAWjG,UAAUtZ,UAAY,GAUjCuf,EAAW5H,OAAS,SAAgByB,GAChC,OAAO,IAAImG,EAAWnG,IAY1BmG,EAAW5F,OAAS,SAAgB/a,EAASgb,GAmDzC,OAlDKA,IACDA,EAAS1C,EAAQS,UACE,MAAnB/Y,EAAQ4L,SAAmB5L,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ4L,SAC9B,MAA1B5L,EAAQqM,gBAA0BrM,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqM,gBAC/B,MAAzBrM,EAAQoQ,eAAyBpQ,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoQ,eACrC,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoG,SAC9B,MAA1BpG,EAAQ+G,gBAA0B/G,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ+G,gBAChC,MAAxB/G,EAAQqf,cAAwBrf,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqf,cAC9B,MAA1Brf,EAAQsf,gBAA0Btf,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsf,gBAClC,MAAtBtf,EAAQuf,YAAsBvf,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQuf,YAChC,MAAxBvf,EAAQ4gB,cAAwB5gB,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ4gB,cAClC,MAAtB5gB,EAAQwf,YAAsBxf,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,IAAIC,OAAOnb,EAAQwf,YACpC,MAArBxf,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,IAAIC,OAAOnb,EAAQ0I,WACpC,MAArB1I,EAAQkQ,WAAqBlQ,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQkQ,WAClC,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQmQ,YACpC,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ+N,WACxC,MAAjB/N,EAAQuN,OAAiBvN,EAAQib,eAAe,UAChDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQuN,OACxC,MAAlBvN,EAAQyN,QAAkBzN,EAAQib,eAAe,WACjDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQyN,QACtC,MAArBzN,EAAQ6gB,WAAqB7gB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ6gB,WAClC,MAAvB7gB,EAAQ8gB,aAAuB9gB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ8gB,aACnC,MAAtB9gB,EAAQggB,YAAsBhgB,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQggB,YACrC,MAArBhgB,EAAQmM,WAAqBnM,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQmM,WACrC,MAArBnM,EAAQoM,WAAqBpM,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQoM,WAChC,MAA1BpM,EAAQ+gB,gBAA0B/gB,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ+gB,gBACvC,MAApB/gB,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA+B,KAAKuF,QAAQlF,SAC3F,MAArBvb,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQoB,WACvD4Z,GAYX2F,EAAWrF,gBAAkB,SAAyBtb,EAASgb,GAC3D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoF,EAAWnF,OAAS,SAAgBC,EAAQhW,GAClCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAChGlF,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ4L,QAAU6P,EAAON,SACzB,MACJ,KAAK,EACDnb,EAAQqM,eAAiBoP,EAAON,SAChC,MACJ,KAAK,EACDnb,EAAQoQ,cAAgBqL,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQoG,QAAUqV,EAAON,SACzB,MACJ,KAAK,EACDnb,EAAQ+G,eAAiB0U,EAAON,SAChC,MACJ,KAAK,EACDnb,EAAQqf,aAAe5D,EAAON,SAC9B,MACJ,KAAK,EACDnb,EAAQsf,eAAiB7D,EAAON,SAChC,MACJ,KAAK,EACDnb,EAAQuf,WAAa9D,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQ4gB,aAAenF,EAAON,SAC9B,MACJ,KAAK,GACDnb,EAAQwf,WAAa/D,EAAON,SAC5B,MACJ,KAAK,GACDnb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQkQ,UAAYuL,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQmQ,WAAasL,EAAOL,QAC5B,MACJ,KAAK,GACDpb,EAAQ+N,UAAY0N,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQuN,MAAQkO,EAAOsC,SACvB,MACJ,KAAK,GACD/d,EAAQyN,OAASgO,EAAOuC,UACxB,MACJ,KAAK,GACDhe,EAAQ6gB,UAAYpF,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQ8gB,YAAcrF,EAAOL,QAC7B,MACJ,KAAK,GACDpb,EAAQggB,WAAavE,EAAON,SAC5B,MACJ,KAAK,GACDnb,EAAQmM,UAAYsP,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQoM,UAAYqP,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQ+gB,eAAiBtF,EAAOgD,UAChC,MACJ,KAAK,GACDze,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,KAAK,GACDlb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2gB,EAAW3E,gBAAkB,SAAyBP,GAGlD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyF,EAAW1E,OAAS,SAAgBjc,GAChC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAuB,MAAnBA,EAAQ4L,SAAmB5L,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQ4L,SACxB,MAAO,2BACf,GAA8B,MAA1B5L,EAAQqM,gBAA0BrM,EAAQib,eAAe,oBACpDzC,EAAM0D,SAASlc,EAAQqM,gBACxB,MAAO,kCACf,GAA6B,MAAzBrM,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQoQ,eACxB,MAAO,iCACf,GAAuB,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQoG,SACxB,MAAO,2BACf,GAA8B,MAA1BpG,EAAQ+G,gBAA0B/G,EAAQib,eAAe,oBACpDzC,EAAM0D,SAASlc,EAAQ+G,gBACxB,MAAO,kCACf,GAA4B,MAAxB/G,EAAQqf,cAAwBrf,EAAQib,eAAe,kBAClDzC,EAAM0D,SAASlc,EAAQqf,cACxB,MAAO,gCACf,GAA8B,MAA1Brf,EAAQsf,gBAA0Btf,EAAQib,eAAe,oBACpDzC,EAAM0D,SAASlc,EAAQsf,gBACxB,MAAO,kCACf,GAA0B,MAAtBtf,EAAQuf,YAAsBvf,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQuf,YACxB,MAAO,8BACf,GAA4B,MAAxBvf,EAAQ4gB,cAAwB5gB,EAAQib,eAAe,kBAClDzC,EAAM0D,SAASlc,EAAQ4gB,cACxB,MAAO,gCACf,GAA0B,MAAtB5gB,EAAQwf,YAAsBxf,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQwf,YACxB,MAAO,8BACf,GAAyB,MAArBxf,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACxB,MAAO,6BACf,GAAyB,MAArB1I,EAAQkQ,WAAqBlQ,EAAQib,eAAe,aACpD,OAAQjb,EAAQkQ,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,cACrD,OAAQjb,EAAQmQ,YAChB,QACI,MAAO,kCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAyB,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,aACpD,OAAQjb,EAAQ+N,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAqB,MAAjB/N,EAAQuN,OAAiBvN,EAAQib,eAAe,UACnB,kBAAlBjb,EAAQuN,MACf,MAAO,yBACf,GAAsB,MAAlBvN,EAAQyN,QAAkBzN,EAAQib,eAAe,YAC5CzC,EAAMyF,UAAUje,EAAQyN,QACzB,MAAO,2BACf,GAAyB,MAArBzN,EAAQ6gB,WAAqB7gB,EAAQib,eAAe,aACpD,OAAQjb,EAAQ6gB,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA2B,MAAvB7gB,EAAQ8gB,aAAuB9gB,EAAQib,eAAe,eACtD,OAAQjb,EAAQ8gB,aAChB,QACI,MAAO,mCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtB9gB,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQggB,YACxB,MAAO,8BACf,GAAyB,MAArBhgB,EAAQmM,WAAqBnM,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQmM,WACxB,MAAO,6BACf,GAAyB,MAArBnM,EAAQoM,WAAqBpM,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoM,WACxB,MAAO,6BACf,GAA8B,MAA1BpM,EAAQ+gB,gBAA0B/gB,EAAQib,eAAe,oBACpDzC,EAAMyF,UAAUje,EAAQ+gB,mBAAqB/gB,EAAQ+gB,gBAAkBvI,EAAMyF,UAAUje,EAAQ+gB,eAAerC,MAAQlG,EAAMyF,UAAUje,EAAQ+gB,eAAepC,OAC9J,MAAO,wCACf,GAAwB,MAApB3e,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,UAC/D,GAAInF,EACA,MAAO,YAAcA,EAE7B,OAAyB,MAArBC,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACR,MAWXuf,EAAWrQ,WAAa,SAAoB6L,GACxC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGsZ,WACxC,OAAOxE,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAuBxC,OAtBsB,MAAlBxE,EAAOvQ,UACP5L,EAAQ4L,QAAUwQ,OAAOD,EAAOvQ,UACP,MAAzBuQ,EAAO9P,iBACPrM,EAAQqM,eAAiB+P,OAAOD,EAAO9P,iBACf,MAAxB8P,EAAO/L,gBACPpQ,EAAQoQ,cAAgBgM,OAAOD,EAAO/L,gBACpB,MAAlB+L,EAAO/V,UACPpG,EAAQoG,QAAUgW,OAAOD,EAAO/V,UACP,MAAzB+V,EAAOpV,iBACP/G,EAAQ+G,eAAiBqV,OAAOD,EAAOpV,iBAChB,MAAvBoV,EAAOkD,eACPrf,EAAQqf,aAAejD,OAAOD,EAAOkD,eACZ,MAAzBlD,EAAOmD,iBACPtf,EAAQsf,eAAiBlD,OAAOD,EAAOmD,iBAClB,MAArBnD,EAAOoD,aACPvf,EAAQuf,WAAanD,OAAOD,EAAOoD,aACZ,MAAvBpD,EAAOyE,eACP5gB,EAAQ4gB,aAAexE,OAAOD,EAAOyE,eAChB,MAArBzE,EAAOqD,aACPxf,EAAQwf,WAAapD,OAAOD,EAAOqD,aACf,MAApBrD,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YAC9ByT,EAAOjM,WACf,IAAK,YACL,KAAK,EACDlQ,EAAQkQ,UAAY,EACpB,MACJ,IAAK,QACL,KAAK,EACDlQ,EAAQkQ,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDlQ,EAAQkQ,UAAY,EAGxB,OAAQiM,EAAOhM,YACf,IAAK,aACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,UACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,WACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,gBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,gBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,oBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,cACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,qBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EAGzB,OAAQgM,EAAOpO,WACf,IAAK,aACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,WACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EAOxB,OAJoB,MAAhBoO,EAAO5O,QACPvN,EAAQuN,MAAQwC,OAAOoM,EAAO5O,QACb,MAAjB4O,EAAO1O,SACPzN,EAAQyN,OAAS0O,EAAO1O,SAAW,GAC/B0O,EAAO0E,WACf,IAAK,aACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,sBACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,YACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,sBACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,gBACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,wBACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EACpB,MACJ,IAAK,gBACL,KAAK,EACD7gB,EAAQ6gB,UAAY,EAGxB,OAAQ1E,EAAO2E,aACf,IAAK,eACL,KAAK,EACD9gB,EAAQ8gB,YAAc,EACtB,MACJ,IAAK,iBACL,KAAK,EACD9gB,EAAQ8gB,YAAc,EACtB,MACJ,IAAK,WACL,KAAK,EACD9gB,EAAQ8gB,YAAc,EACtB,MACJ,IAAK,YACL,KAAK,EACD9gB,EAAQ8gB,YAAc,EACtB,MACJ,IAAK,WACL,KAAK,EACD9gB,EAAQ8gB,YAAc,EAkB1B,GAfyB,MAArB3E,EAAO6D,aACPhgB,EAAQggB,WAAa5D,OAAOD,EAAO6D,aACf,MAApB7D,EAAOhQ,YACPnM,EAAQmM,UAAYiQ,OAAOD,EAAOhQ,YACd,MAApBgQ,EAAO/P,YACPpM,EAAQoM,UAAYgQ,OAAOD,EAAO/P,YACT,MAAzB+P,EAAO4E,iBACHvI,EAAM+F,MACLve,EAAQ+gB,eAAiBvI,EAAM+F,KAAKK,UAAUzC,EAAO4E,iBAAiBlC,UAAW,EAC5C,kBAA1B1C,EAAO4E,eACnB/gB,EAAQ+gB,eAAiB9Q,SAASkM,EAAO4E,eAAgB,IACnB,kBAA1B5E,EAAO4E,eACnB/gB,EAAQ+gB,eAAiB5E,EAAO4E,eACM,kBAA1B5E,EAAO4E,iBACnB/gB,EAAQ+gB,eAAiB,IAAIvI,EAAMsG,SAAS3C,EAAO4E,eAAerC,MAAQ,EAAGvC,EAAO4E,eAAepC,OAAS,GAAGI,aAChG,MAAnB5C,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,yDACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAI7E,OAFwB,MAApBiX,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YAC/BpB,GAYX2gB,EAAWrE,SAAW,SAAkBtc,EAASgY,GACxCA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAsBlB,GArBAJ,EAAOvQ,QAAU,GACjBuQ,EAAO9P,eAAiB,GACxB8P,EAAO/L,cAAgB,GACvB+L,EAAO/V,QAAU,GACjB+V,EAAOpV,eAAiB,GACxBoV,EAAOkD,aAAe,GACtBlD,EAAOmD,eAAiB,GACxBnD,EAAOoD,WAAa,GACpBpD,EAAOyE,aAAe,GACtBzE,EAAOqD,WAAa,GACpBrD,EAAOzT,UAAY,GACnByT,EAAOjM,UAAY8H,EAAQwE,QAAUJ,OAAS,YAAc,EAC5DD,EAAOhM,WAAa6H,EAAQwE,QAAUJ,OAAS,aAAe,EAC9DD,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS,aAAe,EAC7DD,EAAO5O,MAAQ,EACf4O,EAAO1O,OAAS,EAChB0O,EAAO0E,UAAY7I,EAAQwE,QAAUJ,OAAS,aAAe,EAC7DD,EAAO2E,YAAc9I,EAAQwE,QAAUJ,OAAS,eAAiB,EACjED,EAAO6D,WAAa,GACpB7D,EAAOhQ,UAAY,GACnBgQ,EAAO/P,UAAY,GACfoM,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO4E,eAAiB/I,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAElH7C,EAAO4E,eAAiB/I,EAAQiH,QAAU7C,OAAS,IAAM,EAC7DD,EAAOjX,SAAW,KAClBiX,EAAO/a,UAAY,GAqDvB,OAnDuB,MAAnBpB,EAAQ4L,SAAmB5L,EAAQib,eAAe,aAClDkB,EAAOvQ,QAAU5L,EAAQ4L,SACC,MAA1B5L,EAAQqM,gBAA0BrM,EAAQib,eAAe,oBACzDkB,EAAO9P,eAAiBrM,EAAQqM,gBACP,MAAzBrM,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACxDkB,EAAO/L,cAAgBpQ,EAAQoQ,eACZ,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,aAClDkB,EAAO/V,QAAUpG,EAAQoG,SACC,MAA1BpG,EAAQ+G,gBAA0B/G,EAAQib,eAAe,oBACzDkB,EAAOpV,eAAiB/G,EAAQ+G,gBACR,MAAxB/G,EAAQqf,cAAwBrf,EAAQib,eAAe,kBACvDkB,EAAOkD,aAAerf,EAAQqf,cACJ,MAA1Brf,EAAQsf,gBAA0Btf,EAAQib,eAAe,oBACzDkB,EAAOmD,eAAiBtf,EAAQsf,gBACV,MAAtBtf,EAAQuf,YAAsBvf,EAAQib,eAAe,gBACrDkB,EAAOoD,WAAavf,EAAQuf,YACJ,MAAxBvf,EAAQ4gB,cAAwB5gB,EAAQib,eAAe,kBACvDkB,EAAOyE,aAAe5gB,EAAQ4gB,cACR,MAAtB5gB,EAAQwf,YAAsBxf,EAAQib,eAAe,gBACrDkB,EAAOqD,WAAaxf,EAAQwf,YACP,MAArBxf,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACN,MAArB1I,EAAQkQ,WAAqBlQ,EAAQib,eAAe,eACpDkB,EAAOjM,UAAY8H,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGqF,cAAc1M,EAAQkQ,WAAalQ,EAAQkQ,WACzF,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,gBACrDkB,EAAOhM,WAAa6H,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGsF,eAAe3M,EAAQmQ,YAAcnQ,EAAQmQ,YAC7F,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,eACpDkB,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGyF,cAAc9M,EAAQ+N,WAAa/N,EAAQ+N,WAC9F,MAAjB/N,EAAQuN,OAAiBvN,EAAQib,eAAe,WAChDkB,EAAO5O,MAAQyK,EAAQkG,OAASC,SAASne,EAAQuN,OAAS6O,OAAOpc,EAAQuN,OAASvN,EAAQuN,OACxE,MAAlBvN,EAAQyN,QAAkBzN,EAAQib,eAAe,YACjDkB,EAAO1O,OAASzN,EAAQyN,QACH,MAArBzN,EAAQ6gB,WAAqB7gB,EAAQib,eAAe,eACpDkB,EAAO0E,UAAY7I,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG4S,cAAcja,EAAQ6gB,WAAa7gB,EAAQ6gB,WACxF,MAAvB7gB,EAAQ8gB,aAAuB9gB,EAAQib,eAAe,iBACtDkB,EAAO2E,YAAc9I,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG6S,gBAAgBla,EAAQ8gB,aAAe9gB,EAAQ8gB,aAC/F,MAAtB9gB,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBACrDkB,EAAO6D,WAAahgB,EAAQggB,YACP,MAArBhgB,EAAQmM,WAAqBnM,EAAQib,eAAe,eACpDkB,EAAOhQ,UAAYnM,EAAQmM,WACN,MAArBnM,EAAQoM,WAAqBpM,EAAQib,eAAe,eACpDkB,EAAO/P,UAAYpM,EAAQoM,WACD,MAA1BpM,EAAQ+gB,gBAA0B/gB,EAAQib,eAAe,oBACnB,kBAA3Bjb,EAAQ+gB,eACf5E,EAAO4E,eAAiB/I,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ+gB,gBAAkB/gB,EAAQ+gB,eAE5F5E,EAAO4E,eAAiB/I,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ+gB,gBAAkB/I,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ+gB,eAAerC,MAAQ,EAAG1e,EAAQ+gB,eAAepC,OAAS,GAAGI,WAAa/e,EAAQ+gB,gBACxO,MAApB/gB,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC5D,MAArBhY,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACxB+a,GAUXwE,EAAWjG,UAAU+B,OAAS,WAC1B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiE,EAh3BM,GAm3BjBtZ,EAAG2Z,cAAiB,WAyChB,SAASA,EAAcxG,GACnB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA4uBhD,OAnuBAwb,EAActG,UAAUzS,WAAa,GAQrC+Y,EAActG,UAAUhS,UAAY,GAQpCsY,EAActG,UAAUuG,kBAAoB,EAQ5CD,EAActG,UAAU1S,SAAW,EAQnCgZ,EAActG,UAAUwG,OAAS,EAQjCF,EAActG,UAAUyG,WAAa,EAQrCH,EAActG,UAAU0G,SAAW,EAQnCJ,EAActG,UAAU2G,WAAa,EAQrCL,EAActG,UAAU4G,SAAW,EAQnCN,EAActG,UAAUhL,UAAY,EAQpCsR,EAActG,UAAUnN,MAAQ,EAQhCyT,EAActG,UAAU6G,UAAY,EAQpCP,EAActG,UAAU8G,UAAY,EAQpCR,EAActG,UAAU+G,cAAgB,EAQxCT,EAActG,UAAU5P,eAAiB,EAQzCkW,EAActG,UAAUgH,oBAAsB,EAQ9CV,EAActG,UAAU7R,mBAAqB,EAQ7CmY,EAActG,UAAUiH,wBAA0B,EAQlDX,EAActG,UAAUkH,UAAY,EAQpCZ,EAActG,UAAUmH,eAAiB,EAQzCb,EAActG,UAAU5R,cAAgB,EAQxCkY,EAActG,UAAU3M,UAAY,EAQpCiT,EAActG,UAAUxV,SAAW,KAQnC8b,EAActG,UAAUtZ,UAAY,GAQpC4f,EAActG,UAAU4D,sBAAwB9F,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAU9FwC,EAAcjI,OAAS,SAAgByB,GACnC,OAAO,IAAIwG,EAAcxG,IAY7BwG,EAAcjG,OAAS,SAAgB/a,EAASgb,GAqD5C,OApDKA,IACDA,EAAS1C,EAAQS,UACK,MAAtB/Y,EAAQiI,YAAsBjI,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQiI,YACnC,MAArBjI,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WAC3B,MAA7B1I,EAAQihB,mBAA6BjhB,EAAQib,eAAe,sBAC5DD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQihB,mBACnC,MAApBjhB,EAAQgI,UAAoBhI,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQgI,UACvC,MAAlBhI,EAAQkhB,QAAkBlhB,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQkhB,QACnC,MAAtBlhB,EAAQmhB,YAAsBnhB,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQmhB,YACrC,MAApBnhB,EAAQohB,UAAoBphB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQohB,UACnC,MAAtBphB,EAAQqhB,YAAsBrhB,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQqhB,YACrC,MAApBrhB,EAAQshB,UAAoBthB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQshB,UACpC,MAArBthB,EAAQ0P,WAAqB1P,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQ0P,WACxC,MAAjB1P,EAAQuN,OAAiBvN,EAAQib,eAAe,UAChDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQuN,OACpC,MAArBvN,EAAQuhB,WAAqBvhB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQuhB,WACpC,MAArBvhB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQwhB,WACjC,MAAzBxhB,EAAQyhB,eAAyBzhB,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQyhB,eAChC,MAA1BzhB,EAAQ8K,gBAA0B9K,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ8K,gBAC3B,MAA/B9K,EAAQ0hB,qBAA+B1hB,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ0hB,qBAC5B,MAA9B1hB,EAAQ6I,oBAA8B7I,EAAQib,eAAe,uBAC7DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ6I,oBACvB,MAAnC7I,EAAQ2hB,yBAAmC3hB,EAAQib,eAAe,4BAClED,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ2hB,yBACrC,MAArB3hB,EAAQ4hB,WAAqB5hB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ4hB,WAChC,MAA1B5hB,EAAQ6hB,gBAA0B7hB,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ6hB,gBACjC,MAAzB7hB,EAAQ8I,eAAyB9I,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ8I,eACrC,MAArB9I,EAAQ+N,WAAqB/N,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ+N,WACrC,MAApB/N,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA+B,KAAKuF,QAAQlF,SAC3F,MAArBvb,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQoB,WACzB,MAAjCpB,EAAQse,uBAAiCte,EAAQib,eAAe,0BAChED,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQse,uBACxDtD,GAYXgG,EAAc1F,gBAAkB,SAAyBtb,EAASgb,GAC9D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCyF,EAAcxF,OAAS,SAAgBC,EAAQhW,GACrCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAChGvF,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQiI,WAAawT,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQihB,kBAAoBxF,EAAOL,QACnC,MACJ,KAAK,EACDpb,EAAQgI,SAAWyT,EAAOuC,UAC1B,MACJ,KAAK,EACDhe,EAAQkhB,OAASzF,EAAOuC,UACxB,MACJ,KAAK,EACDhe,EAAQmhB,WAAa1F,EAAOuC,UAC5B,MACJ,KAAK,EACDhe,EAAQohB,SAAW3F,EAAOuC,UAC1B,MACJ,KAAK,EACDhe,EAAQqhB,WAAa5F,EAAOuC,UAC5B,MACJ,KAAK,EACDhe,EAAQshB,SAAW7F,EAAOuC,UAC1B,MACJ,KAAK,GACDhe,EAAQ0P,UAAY+L,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQuN,MAAQkO,EAAOsC,SACvB,MACJ,KAAK,GACD/d,EAAQuhB,UAAY9F,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQwhB,UAAY/F,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQyhB,cAAgBhG,EAAOsC,SAC/B,MACJ,KAAK,GACD/d,EAAQ8K,eAAiB2Q,EAAOsC,SAChC,MACJ,KAAK,GACD/d,EAAQ0hB,oBAAsBjG,EAAOsC,SACrC,MACJ,KAAK,GACD/d,EAAQ6I,mBAAqB4S,EAAOsC,SACpC,MACJ,KAAK,GACD/d,EAAQ2hB,wBAA0BlG,EAAOsC,SACzC,MACJ,KAAK,GACD/d,EAAQ4hB,UAAYnG,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQ6hB,eAAiBpG,EAAOsC,SAChC,MACJ,KAAK,GACD/d,EAAQ8I,cAAgB2S,EAAOsC,SAC/B,MACJ,KAAK,GACD/d,EAAQ+N,UAAY0N,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,KAAK,GACDlb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,GACDnb,EAAQse,sBAAwB7C,EAAOgD,UACvC,MACJ,QACIhD,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXghB,EAAchF,gBAAkB,SAAyBP,GAGrD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC8F,EAAc/E,OAAS,SAAgBjc,GACnC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQiI,YAAsBjI,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQiI,YACxB,MAAO,8BACf,GAAyB,MAArBjI,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACxB,MAAO,6BACf,GAAiC,MAA7B1I,EAAQihB,mBAA6BjhB,EAAQib,eAAe,qBAC5D,OAAQjb,EAAQihB,mBAChB,QACI,MAAO,yCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAwB,MAApBjhB,EAAQgI,UAAoBhI,EAAQib,eAAe,cAC9CzC,EAAMyF,UAAUje,EAAQgI,UACzB,MAAO,6BACf,GAAsB,MAAlBhI,EAAQkhB,QAAkBlhB,EAAQib,eAAe,YAC5CzC,EAAMyF,UAAUje,EAAQkhB,QACzB,MAAO,2BACf,GAA0B,MAAtBlhB,EAAQmhB,YAAsBnhB,EAAQib,eAAe,gBAChDzC,EAAMyF,UAAUje,EAAQmhB,YACzB,MAAO,+BACf,GAAwB,MAApBnhB,EAAQohB,UAAoBphB,EAAQib,eAAe,cAC9CzC,EAAMyF,UAAUje,EAAQohB,UACzB,MAAO,6BACf,GAA0B,MAAtBphB,EAAQqhB,YAAsBrhB,EAAQib,eAAe,gBAChDzC,EAAMyF,UAAUje,EAAQqhB,YACzB,MAAO,+BACf,GAAwB,MAApBrhB,EAAQshB,UAAoBthB,EAAQib,eAAe,cAC9CzC,EAAMyF,UAAUje,EAAQshB,UACzB,MAAO,6BACf,GAAyB,MAArBthB,EAAQ0P,WAAqB1P,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQ0P,UACf,MAAO,6BACf,GAAqB,MAAjB1P,EAAQuN,OAAiBvN,EAAQib,eAAe,UACnB,kBAAlBjb,EAAQuN,MACf,MAAO,yBACf,GAAyB,MAArBvN,EAAQuhB,WAAqBvhB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQuhB,UACf,MAAO,6BACf,GAAyB,MAArBvhB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQwhB,UACf,MAAO,6BACf,GAA6B,MAAzBxhB,EAAQyhB,eAAyBzhB,EAAQib,eAAe,kBACnB,kBAA1Bjb,EAAQyhB,cACf,MAAO,iCACf,GAA8B,MAA1BzhB,EAAQ8K,gBAA0B9K,EAAQib,eAAe,mBACnB,kBAA3Bjb,EAAQ8K,eACf,MAAO,kCACf,GAAmC,MAA/B9K,EAAQ0hB,qBAA+B1hB,EAAQib,eAAe,wBACnB,kBAAhCjb,EAAQ0hB,oBACf,MAAO,uCACf,GAAkC,MAA9B1hB,EAAQ6I,oBAA8B7I,EAAQib,eAAe,uBACnB,kBAA/Bjb,EAAQ6I,mBACf,MAAO,sCACf,GAAuC,MAAnC7I,EAAQ2hB,yBAAmC3hB,EAAQib,eAAe,4BACnB,kBAApCjb,EAAQ2hB,wBACf,MAAO,2CACf,GAAyB,MAArB3hB,EAAQ4hB,WAAqB5hB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQ4hB,UACf,MAAO,6BACf,GAA8B,MAA1B5hB,EAAQ6hB,gBAA0B7hB,EAAQib,eAAe,mBACnB,kBAA3Bjb,EAAQ6hB,eACf,MAAO,kCACf,GAA6B,MAAzB7hB,EAAQ8I,eAAyB9I,EAAQib,eAAe,kBACnB,kBAA1Bjb,EAAQ8I,cACf,MAAO,iCACf,GAAyB,MAArB9I,EAAQ+N,WAAqB/N,EAAQib,eAAe,aACpD,OAAQjb,EAAQ+N,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAwB,MAApB/N,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,UAC/D,GAAInF,EACA,MAAO,YAAcA,EAE7B,OAAyB,MAArBC,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACsB,MAAjCpB,EAAQse,wBAAiCte,EAAQib,eAAe,0BAC3DzC,EAAMyF,UAAUje,EAAQse,wBAA4Bte,EAAQse,uBAAyB9F,EAAMyF,UAAUje,EAAQse,sBAAsBI,MAAQlG,EAAMyF,UAAUje,EAAQse,sBAAsBK,MAE3L,KADQ,gDAYnBqC,EAAc1Q,WAAa,SAAoB6L,GAC3C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG2Z,cACxC,OAAO7E,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAKxC,OAJyB,MAArB7E,EAAOlU,aACPjI,EAAQiI,WAAamU,OAAOD,EAAOlU,aACf,MAApBkU,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YAC9ByT,EAAO8E,mBACf,IAAK,aACL,KAAK,EACDjhB,EAAQihB,kBAAoB,EAC5B,MACJ,IAAK,SACL,KAAK,EACDjhB,EAAQihB,kBAAoB,EAC5B,MACJ,IAAK,UACL,KAAK,EACDjhB,EAAQihB,kBAAoB,EAC5B,MACJ,IAAK,WACL,KAAK,EACDjhB,EAAQihB,kBAAoB,EAuChC,OApCuB,MAAnB9E,EAAOnU,WACPhI,EAAQgI,SAAWmU,EAAOnU,WAAa,GACtB,MAAjBmU,EAAO+E,SACPlhB,EAAQkhB,OAAS/E,EAAO+E,SAAW,GACd,MAArB/E,EAAOgF,aACPnhB,EAAQmhB,WAAahF,EAAOgF,aAAe,GACxB,MAAnBhF,EAAOiF,WACPphB,EAAQohB,SAAWjF,EAAOiF,WAAa,GAClB,MAArBjF,EAAOkF,aACPrhB,EAAQqhB,WAAalF,EAAOkF,aAAe,GACxB,MAAnBlF,EAAOmF,WACPthB,EAAQshB,SAAWnF,EAAOmF,WAAa,GACnB,MAApBnF,EAAOzM,YACP1P,EAAQ0P,UAAYK,OAAOoM,EAAOzM,YAClB,MAAhByM,EAAO5O,QACPvN,EAAQuN,MAAQwC,OAAOoM,EAAO5O,QACV,MAApB4O,EAAOoF,YACPvhB,EAAQuhB,UAAYxR,OAAOoM,EAAOoF,YACd,MAApBpF,EAAOqF,YACPxhB,EAAQwhB,UAAYzR,OAAOoM,EAAOqF,YACV,MAAxBrF,EAAOsF,gBACPzhB,EAAQyhB,cAAgB1R,OAAOoM,EAAOsF,gBACb,MAAzBtF,EAAOrR,iBACP9K,EAAQ8K,eAAiBiF,OAAOoM,EAAOrR,iBACT,MAA9BqR,EAAOuF,sBACP1hB,EAAQ0hB,oBAAsB3R,OAAOoM,EAAOuF,sBACf,MAA7BvF,EAAOtT,qBACP7I,EAAQ6I,mBAAqBkH,OAAOoM,EAAOtT,qBACT,MAAlCsT,EAAOwF,0BACP3hB,EAAQ2hB,wBAA0B5R,OAAOoM,EAAOwF,0BAC5B,MAApBxF,EAAOyF,YACP5hB,EAAQ4hB,UAAY7R,OAAOoM,EAAOyF,YACT,MAAzBzF,EAAO0F,iBACP7hB,EAAQ6hB,eAAiB9R,OAAOoM,EAAO0F,iBACf,MAAxB1F,EAAOrT,gBACP9I,EAAQ8I,cAAgBiH,OAAOoM,EAAOrT,gBAClCqT,EAAOpO,WACf,IAAK,aACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,WACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EAGxB,GAAuB,MAAnBoO,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,4DACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAa7E,OAXwB,MAApBiX,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACF,MAAhC+a,EAAOmC,wBACH9F,EAAM+F,MACLve,EAAQse,sBAAwB9F,EAAM+F,KAAKK,UAAUzC,EAAOmC,wBAAwBO,UAAW,EACnD,kBAAjC1C,EAAOmC,sBACnBte,EAAQse,sBAAwBrO,SAASkM,EAAOmC,sBAAuB,IAC1B,kBAAjCnC,EAAOmC,sBACnBte,EAAQse,sBAAwBnC,EAAOmC,sBACM,kBAAjCnC,EAAOmC,wBACnBte,EAAQse,sBAAwB,IAAI9F,EAAMsG,SAAS3C,EAAOmC,sBAAsBI,MAAQ,EAAGvC,EAAOmC,sBAAsBK,OAAS,GAAGI,aACrI/e,GAYXghB,EAAc1E,SAAW,SAAkBtc,EAASgY,GAC3CA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAyBR,GAxBAJ,EAAOlU,WAAa,GACpBkU,EAAOzT,UAAY,GACnByT,EAAO8E,kBAAoBjJ,EAAQwE,QAAUJ,OAAS,aAAe,EACrED,EAAOnU,SAAW,EAClBmU,EAAO+E,OAAS,EAChB/E,EAAOgF,WAAa,EACpBhF,EAAOiF,SAAW,EAClBjF,EAAOkF,WAAa,EACpBlF,EAAOmF,SAAW,EAClBnF,EAAOzM,UAAY,EACnByM,EAAO5O,MAAQ,EACf4O,EAAOoF,UAAY,EACnBpF,EAAOqF,UAAY,EACnBrF,EAAOsF,cAAgB,EACvBtF,EAAOrR,eAAiB,EACxBqR,EAAOuF,oBAAsB,EAC7BvF,EAAOtT,mBAAqB,EAC5BsT,EAAOwF,wBAA0B,EACjCxF,EAAOyF,UAAY,EACnBzF,EAAO0F,eAAiB,EACxB1F,EAAOrT,cAAgB,EACvBqT,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS,aAAe,EAC7DD,EAAOjX,SAAW,KAClBiX,EAAO/a,UAAY,GACfoX,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEzH7C,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAAS,IAAM,EAuDxE,OArD0B,MAAtBpc,EAAQiI,YAAsBjI,EAAQib,eAAe,gBACrDkB,EAAOlU,WAAajI,EAAQiI,YACP,MAArBjI,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACE,MAA7B1I,EAAQihB,mBAA6BjhB,EAAQib,eAAe,uBAC5DkB,EAAO8E,kBAAoBjJ,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGuS,sBAAsB5Z,EAAQihB,mBAAqBjhB,EAAQihB,mBACnH,MAApBjhB,EAAQgI,UAAoBhI,EAAQib,eAAe,cACnDkB,EAAOnU,SAAWhI,EAAQgI,UACR,MAAlBhI,EAAQkhB,QAAkBlhB,EAAQib,eAAe,YACjDkB,EAAO+E,OAASlhB,EAAQkhB,QACF,MAAtBlhB,EAAQmhB,YAAsBnhB,EAAQib,eAAe,gBACrDkB,EAAOgF,WAAanhB,EAAQmhB,YACR,MAApBnhB,EAAQohB,UAAoBphB,EAAQib,eAAe,cACnDkB,EAAOiF,SAAWphB,EAAQohB,UACJ,MAAtBphB,EAAQqhB,YAAsBrhB,EAAQib,eAAe,gBACrDkB,EAAOkF,WAAarhB,EAAQqhB,YACR,MAApBrhB,EAAQshB,UAAoBthB,EAAQib,eAAe,cACnDkB,EAAOmF,SAAWthB,EAAQshB,UACL,MAArBthB,EAAQ0P,WAAqB1P,EAAQib,eAAe,eACpDkB,EAAOzM,UAAYsI,EAAQkG,OAASC,SAASne,EAAQ0P,WAAa0M,OAAOpc,EAAQ0P,WAAa1P,EAAQ0P,WACrF,MAAjB1P,EAAQuN,OAAiBvN,EAAQib,eAAe,WAChDkB,EAAO5O,MAAQyK,EAAQkG,OAASC,SAASne,EAAQuN,OAAS6O,OAAOpc,EAAQuN,OAASvN,EAAQuN,OACrE,MAArBvN,EAAQuhB,WAAqBvhB,EAAQib,eAAe,eACpDkB,EAAOoF,UAAYvJ,EAAQkG,OAASC,SAASne,EAAQuhB,WAAanF,OAAOpc,EAAQuhB,WAAavhB,EAAQuhB,WACjF,MAArBvhB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,eACpDkB,EAAOqF,UAAYxJ,EAAQkG,OAASC,SAASne,EAAQwhB,WAAapF,OAAOpc,EAAQwhB,WAAaxhB,EAAQwhB,WAC7E,MAAzBxhB,EAAQyhB,eAAyBzhB,EAAQib,eAAe,mBACxDkB,EAAOsF,cAAgBzJ,EAAQkG,OAASC,SAASne,EAAQyhB,eAAiBrF,OAAOpc,EAAQyhB,eAAiBzhB,EAAQyhB,eACxF,MAA1BzhB,EAAQ8K,gBAA0B9K,EAAQib,eAAe,oBACzDkB,EAAOrR,eAAiBkN,EAAQkG,OAASC,SAASne,EAAQ8K,gBAAkBsR,OAAOpc,EAAQ8K,gBAAkB9K,EAAQ8K,gBACtF,MAA/B9K,EAAQ0hB,qBAA+B1hB,EAAQib,eAAe,yBAC9DkB,EAAOuF,oBAAsB1J,EAAQkG,OAASC,SAASne,EAAQ0hB,qBAAuBtF,OAAOpc,EAAQ0hB,qBAAuB1hB,EAAQ0hB,qBACtG,MAA9B1hB,EAAQ6I,oBAA8B7I,EAAQib,eAAe,wBAC7DkB,EAAOtT,mBAAqBmP,EAAQkG,OAASC,SAASne,EAAQ6I,oBAAsBuT,OAAOpc,EAAQ6I,oBAAsB7I,EAAQ6I,oBAC9F,MAAnC7I,EAAQ2hB,yBAAmC3hB,EAAQib,eAAe,6BAClEkB,EAAOwF,wBAA0B3J,EAAQkG,OAASC,SAASne,EAAQ2hB,yBAA2BvF,OAAOpc,EAAQ2hB,yBAA2B3hB,EAAQ2hB,yBAC3H,MAArB3hB,EAAQ4hB,WAAqB5hB,EAAQib,eAAe,eACpDkB,EAAOyF,UAAY5J,EAAQkG,OAASC,SAASne,EAAQ4hB,WAAaxF,OAAOpc,EAAQ4hB,WAAa5hB,EAAQ4hB,WAC5E,MAA1B5hB,EAAQ6hB,gBAA0B7hB,EAAQib,eAAe,oBACzDkB,EAAO0F,eAAiB7J,EAAQkG,OAASC,SAASne,EAAQ6hB,gBAAkBzF,OAAOpc,EAAQ6hB,gBAAkB7hB,EAAQ6hB,gBAC5F,MAAzB7hB,EAAQ8I,eAAyB9I,EAAQib,eAAe,mBACxDkB,EAAOrT,cAAgBkP,EAAQkG,OAASC,SAASne,EAAQ8I,eAAiBsT,OAAOpc,EAAQ8I,eAAiB9I,EAAQ8I,eAC7F,MAArB9I,EAAQ+N,WAAqB/N,EAAQib,eAAe,eACpDkB,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGyF,cAAc9M,EAAQ+N,WAAa/N,EAAQ+N,WAC3F,MAApB/N,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC5D,MAArBhY,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACM,MAAjCpB,EAAQse,uBAAiCte,EAAQib,eAAe,2BACnB,kBAAlCjb,EAAQse,sBACfnC,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQse,uBAAyBte,EAAQse,sBAE1GnC,EAAOmC,sBAAwBtG,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQse,uBAAyBtG,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQse,sBAAsBI,MAAQ,EAAG1e,EAAQse,sBAAsBK,OAAS,GAAGI,WAAa/e,EAAQse,uBACrRnC,GAUX6E,EAActG,UAAU+B,OAAS,WAC7B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDsE,EAzxBS,GA4xBpB3Z,EAAGya,UAAa,WAoDZ,SAASA,EAAUtH,GAKf,GAJA1b,KAAK+Q,SAAW,GAChB/Q,KAAKgR,SAAW,GAChBhR,KAAKijB,UAAY,GACjBjjB,KAAKkjB,UAAY,GACbxH,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmkChD,OA1jCAsc,EAAUpH,UAAUpV,cAAgB,GAQpCwc,EAAUpH,UAAUtZ,UAAY,GAQhC0gB,EAAUpH,UAAUsF,WAAa,GAQjC8B,EAAUpH,UAAUuH,UAAY,GAQhCH,EAAUpH,UAAUwH,WAAa,GAQjCJ,EAAUpH,UAAUyH,gBAAkB3J,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQpFsD,EAAUpH,UAAUhb,OAAS,EAQ7BoiB,EAAUpH,UAAUhL,UAAY,EAQhCoS,EAAUpH,UAAU0H,SAAW,EAQ/BN,EAAUpH,UAAU2H,YAAc7J,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQhFsD,EAAUpH,UAAU4H,YAAc9J,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQhFsD,EAAUpH,UAAU6H,oBAAsB,EAQ1CT,EAAUpH,UAAU8H,oBAAsB,EAQ1CV,EAAUpH,UAAU+H,KAAO,EAQ3BX,EAAUpH,UAAUgI,gBAAkB,EAQtCZ,EAAUpH,UAAUiI,YAAcnK,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQhFsD,EAAUpH,UAAUjN,OAAS+K,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ3EsD,EAAUpH,UAAUkI,SAAW,EAQ/Bd,EAAUpH,UAAUmI,cAAgB,EAQpCf,EAAUpH,UAAUoI,UAAYtK,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ9EsD,EAAUpH,UAAUqI,eAAiBvK,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQnFsD,EAAUpH,UAAUsI,aAAe,EAQnClB,EAAUpH,UAAUuI,kBAAoB,EAQxCnB,EAAUpH,UAAUwI,gBAAkB,EAQtCpB,EAAUpH,UAAUyI,cAAgB,EAQpCrB,EAAUpH,UAAU0I,YAAc,EAQlCtB,EAAUpH,UAAU2I,eAAiB,EAQrCvB,EAAUpH,UAAU8G,UAAY,EAQhCM,EAAUpH,UAAU4I,UAAY,EAQhCxB,EAAUpH,UAAU6I,SAAW,EAQ/BzB,EAAUpH,UAAU/K,WAAa,EAQjCmS,EAAUpH,UAAU9K,WAAa,EAQjCkS,EAAUpH,UAAU7K,SAAW2I,EAAMgL,WAQrC1B,EAAUpH,UAAU5K,SAAW0I,EAAMgL,WAQrC1B,EAAUpH,UAAUqH,UAAYvJ,EAAMgL,WAQtC1B,EAAUpH,UAAUsH,UAAYxJ,EAAMgL,WAUtC1B,EAAU/I,OAAS,SAAgByB,GAC/B,OAAO,IAAIsH,EAAUtH,IAYzBsH,EAAU/G,OAAS,SAAgB/a,EAASgb,GAmExC,GAlEKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACnC,MAArBtF,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WAClC,MAAtBpB,EAAQggB,YAAsBhgB,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQggB,YACnC,MAArBhgB,EAAQiiB,WAAqBjiB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQiiB,WAClC,MAAtBjiB,EAAQkiB,YAAsBliB,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQkiB,YAC7B,MAA3BliB,EAAQmiB,iBAA2BniB,EAAQib,eAAe,oBAC1DD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQmiB,iBACvC,MAAlBniB,EAAQN,QAAkBM,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQN,QACpC,MAArBM,EAAQ0P,WAAqB1P,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQ0P,WACpC,MAApB1P,EAAQoiB,UAAoBpiB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQoiB,UACjC,MAAvBpiB,EAAQqiB,aAAuBriB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,IAAIuD,QAAQze,EAAQqiB,aACnC,MAAvBriB,EAAQsiB,aAAuBtiB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,IAAIuD,QAAQze,EAAQsiB,aAC3B,MAA/BtiB,EAAQuiB,qBAA+BviB,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQuiB,qBAC1B,MAA/BviB,EAAQwiB,qBAA+BxiB,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQwiB,qBAC1C,MAAhBxiB,EAAQyiB,MAAgBziB,EAAQib,eAAe,SAC/CD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQyiB,MAC/B,MAA3BziB,EAAQ0iB,iBAA2B1iB,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ0iB,iBACnC,MAAvB1iB,EAAQ2iB,aAAuB3iB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ2iB,aACzC,MAAlB3iB,EAAQyN,QAAkBzN,EAAQib,eAAe,WACjDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQyN,QACvC,MAApBzN,EAAQ4iB,UAAoB5iB,EAAQib,eAAe,aACnDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ4iB,UACjC,MAAzB5iB,EAAQ6iB,eAAyB7iB,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ6iB,eACrC,MAArB7iB,EAAQ8iB,WAAqB9iB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ8iB,WACjC,MAA1B9iB,EAAQ+iB,gBAA0B/iB,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ+iB,gBACnC,MAAxB/iB,EAAQgjB,cAAwBhjB,EAAQib,eAAe,iBACvDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQgjB,cAC7B,MAA7BhjB,EAAQijB,mBAA6BjjB,EAAQib,eAAe,sBAC5DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQijB,mBAC/B,MAA3BjjB,EAAQkjB,iBAA2BljB,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQkjB,iBACjC,MAAzBljB,EAAQmjB,eAAyBnjB,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQmjB,eACnC,MAAvBnjB,EAAQojB,aAAuBpjB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQojB,aAChC,MAA1BpjB,EAAQqjB,gBAA0BrjB,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQqjB,gBACrC,MAArBrjB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQwhB,WACrC,MAArBxhB,EAAQsjB,WAAqBtjB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQsjB,WACtC,MAApBtjB,EAAQujB,UAAoBvjB,EAAQib,eAAe,aACnDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQujB,UACpC,MAAtBvjB,EAAQ2P,YAAsB3P,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ2P,YACpC,MAAtB3P,EAAQ4P,YAAsB5P,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ4P,YACtC,MAApB5P,EAAQ6P,UAAoB7P,EAAQ6P,SAASpK,OAAQ,CACrDuV,EAAOE,OAA+B,KAAKuF,OAC3C,IAAK,IAAIjb,EAAI,EAAGA,EAAIxF,EAAQ6P,SAASpK,SAAUD,EAC3CwV,EAAO+C,OAAO/d,EAAQ6P,SAASrK,IACnCwV,EAAOO,SAEX,GAAwB,MAApBvb,EAAQ8P,UAAoB9P,EAAQ8P,SAASrK,OAAQ,CACrDuV,EAAOE,OAA+B,KAAKuF,OAC3C,IAASjb,EAAI,EAAGA,EAAIxF,EAAQ8P,SAASrK,SAAUD,EAC3CwV,EAAO+C,OAAO/d,EAAQ8P,SAAStK,IACnCwV,EAAOO,SAEX,GAAyB,MAArBvb,EAAQ+hB,WAAqB/hB,EAAQ+hB,UAAUtc,OAAQ,CACvDuV,EAAOE,OAA+B,KAAKuF,OAC3C,IAASjb,EAAI,EAAGA,EAAIxF,EAAQ+hB,UAAUtc,SAAUD,EAC5CwV,EAAOgD,QAAQhe,EAAQ+hB,UAAUvc,IACrCwV,EAAOO,SAEX,GAAyB,MAArBvb,EAAQgiB,WAAqBhiB,EAAQgiB,UAAUvc,OAAQ,CACvDuV,EAAOE,OAA+B,KAAKuF,OAC3C,IAASjb,EAAI,EAAGA,EAAIxF,EAAQgiB,UAAUvc,SAAUD,EAC5CwV,EAAOgD,QAAQhe,EAAQgiB,UAAUxc,IACrCwV,EAAOO,SAEX,OAAOP,GAYX8G,EAAUxG,gBAAkB,SAAyBtb,EAASgb,GAC1D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuG,EAAUtG,OAAS,SAAgBC,EAAQhW,GACjCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGya,UAChGrG,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQggB,WAAavE,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQiiB,UAAYxG,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQkiB,WAAazG,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQmiB,gBAAkB1G,EAAOgD,UACjC,MACJ,KAAK,EACDze,EAAQN,OAAS+b,EAAOuC,UACxB,MACJ,KAAK,EACDhe,EAAQ0P,UAAY+L,EAAOsC,SAC3B,MACJ,KAAK,EACD/d,EAAQoiB,SAAW3G,EAAOsC,SAC1B,MACJ,KAAK,GACD/d,EAAQqiB,YAAc5G,EAAOgD,UAC7B,MACJ,KAAK,GACDze,EAAQsiB,YAAc7G,EAAOgD,UAC7B,MACJ,KAAK,GACDze,EAAQuiB,oBAAsB9G,EAAOsC,SACrC,MACJ,KAAK,GACD/d,EAAQwiB,oBAAsB/G,EAAOsC,SACrC,MACJ,KAAK,GACD/d,EAAQyiB,KAAOhH,EAAOsC,SACtB,MACJ,KAAK,GACD/d,EAAQ0iB,gBAAkBjH,EAAOsC,SACjC,MACJ,KAAK,GACD/d,EAAQ2iB,YAAclH,EAAOgD,UAC7B,MACJ,KAAK,GACDze,EAAQyN,OAASgO,EAAOgD,UACxB,MACJ,KAAK,GACDze,EAAQ4iB,SAAWnH,EAAOsC,SAC1B,MACJ,KAAK,GACD/d,EAAQ6iB,cAAgBpH,EAAOsC,SAC/B,MACJ,KAAK,GACD/d,EAAQ8iB,UAAYrH,EAAOgD,UAC3B,MACJ,KAAK,GACDze,EAAQ+iB,eAAiBtH,EAAOgD,UAChC,MACJ,KAAK,GACDze,EAAQgjB,aAAevH,EAAOsC,SAC9B,MACJ,KAAK,GACD/d,EAAQijB,kBAAoBxH,EAAOsC,SACnC,MACJ,KAAK,GACD/d,EAAQkjB,gBAAkBzH,EAAOsC,SACjC,MACJ,KAAK,GACD/d,EAAQmjB,cAAgB1H,EAAOsC,SAC/B,MACJ,KAAK,GACD/d,EAAQojB,YAAc3H,EAAOsC,SAC7B,MACJ,KAAK,GACD/d,EAAQqjB,eAAiB5H,EAAOsC,SAChC,MACJ,KAAK,GACD/d,EAAQwhB,UAAY/F,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQsjB,UAAY7H,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQujB,SAAW9H,EAAOsC,SAC1B,MACJ,KAAK,GACD/d,EAAQ2P,WAAa8L,EAAOsC,SAC5B,MACJ,KAAK,GACD/d,EAAQ4P,WAAa6L,EAAOsC,SAC5B,MACJ,KAAK,GAGD,GAFM/d,EAAQ6P,UAAY7P,EAAQ6P,SAASpK,SACvCzF,EAAQ6P,SAAW,IACL,KAAP,EAANiM,GAED,IADA,IAAI2H,EAAOhI,EAAOP,SAAWO,EAAOI,IAC7BJ,EAAOI,IAAM4H,GAChBzjB,EAAQ6P,SAASqF,KAAKuG,EAAOsC,eAEjC/d,EAAQ6P,SAASqF,KAAKuG,EAAOsC,UACjC,MACJ,KAAK,GAGD,GAFM/d,EAAQ8P,UAAY9P,EAAQ8P,SAASrK,SACvCzF,EAAQ8P,SAAW,IACL,KAAP,EAANgM,GAED,IADI2H,EAAOhI,EAAOP,SAAWO,EAAOI,IAC7BJ,EAAOI,IAAM4H,GAChBzjB,EAAQ8P,SAASoF,KAAKuG,EAAOsC,eAEjC/d,EAAQ8P,SAASoF,KAAKuG,EAAOsC,UACjC,MACJ,KAAK,GAGD,GAFM/d,EAAQ+hB,WAAa/hB,EAAQ+hB,UAAUtc,SACzCzF,EAAQ+hB,UAAY,IACN,KAAP,EAANjG,GAED,IADI2H,EAAOhI,EAAOP,SAAWO,EAAOI,IAC7BJ,EAAOI,IAAM4H,GAChBzjB,EAAQ+hB,UAAU7M,KAAKuG,EAAOuC,gBAElChe,EAAQ+hB,UAAU7M,KAAKuG,EAAOuC,WAClC,MACJ,KAAK,GAGD,GAFMhe,EAAQgiB,WAAahiB,EAAQgiB,UAAUvc,SACzCzF,EAAQgiB,UAAY,IACN,KAAP,EAANlG,GAED,IADI2H,EAAOhI,EAAOP,SAAWO,EAAOI,IAC7BJ,EAAOI,IAAM4H,GAChBzjB,EAAQgiB,UAAU9M,KAAKuG,EAAOuC,gBAElChe,EAAQgiB,UAAU9M,KAAKuG,EAAOuC,WAClC,MACJ,QACIvC,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8hB,EAAU9F,gBAAkB,SAAyBP,GAGjD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4G,EAAU7F,OAAS,SAAgBjc,GAC/B,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA6B,MAAzBA,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACxB,MAAO,iCACf,GAAyB,MAArBtF,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACxB,MAAO,6BACf,GAA0B,MAAtBpB,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQggB,YACxB,MAAO,8BACf,GAAyB,MAArBhgB,EAAQiiB,WAAqBjiB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQiiB,WACxB,MAAO,6BACf,GAA0B,MAAtBjiB,EAAQkiB,YAAsBliB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQkiB,YACxB,MAAO,8BACf,GAA+B,MAA3BliB,EAAQmiB,iBAA2BniB,EAAQib,eAAe,qBACrDzC,EAAMyF,UAAUje,EAAQmiB,oBAAsBniB,EAAQmiB,iBAAmB3J,EAAMyF,UAAUje,EAAQmiB,gBAAgBzD,MAAQlG,EAAMyF,UAAUje,EAAQmiB,gBAAgBxD,OAClK,MAAO,yCACf,GAAsB,MAAlB3e,EAAQN,QAAkBM,EAAQib,eAAe,YAC5CzC,EAAMyF,UAAUje,EAAQN,QACzB,MAAO,2BACf,GAAyB,MAArBM,EAAQ0P,WAAqB1P,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQ0P,UACf,MAAO,6BACf,GAAwB,MAApB1P,EAAQoiB,UAAoBpiB,EAAQib,eAAe,aACnB,kBAArBjb,EAAQoiB,SACf,MAAO,4BACf,GAA2B,MAAvBpiB,EAAQqiB,aAAuBriB,EAAQib,eAAe,iBACjDzC,EAAMyF,UAAUje,EAAQqiB,gBAAkBriB,EAAQqiB,aAAe7J,EAAMyF,UAAUje,EAAQqiB,YAAY3D,MAAQlG,EAAMyF,UAAUje,EAAQqiB,YAAY1D,OAClJ,MAAO,qCACf,GAA2B,MAAvB3e,EAAQsiB,aAAuBtiB,EAAQib,eAAe,iBACjDzC,EAAMyF,UAAUje,EAAQsiB,gBAAkBtiB,EAAQsiB,aAAe9J,EAAMyF,UAAUje,EAAQsiB,YAAY5D,MAAQlG,EAAMyF,UAAUje,EAAQsiB,YAAY3D,OAClJ,MAAO,qCACf,GAAmC,MAA/B3e,EAAQuiB,qBAA+BviB,EAAQib,eAAe,wBACnB,kBAAhCjb,EAAQuiB,oBACf,MAAO,uCACf,GAAmC,MAA/BviB,EAAQwiB,qBAA+BxiB,EAAQib,eAAe,wBACnB,kBAAhCjb,EAAQwiB,oBACf,MAAO,uCACf,GAAoB,MAAhBxiB,EAAQyiB,MAAgBziB,EAAQib,eAAe,SACnB,kBAAjBjb,EAAQyiB,KACf,MAAO,wBACf,GAA+B,MAA3BziB,EAAQ0iB,iBAA2B1iB,EAAQib,eAAe,oBACnB,kBAA5Bjb,EAAQ0iB,gBACf,MAAO,mCACf,GAA2B,MAAvB1iB,EAAQ2iB,aAAuB3iB,EAAQib,eAAe,iBACjDzC,EAAMyF,UAAUje,EAAQ2iB,gBAAkB3iB,EAAQ2iB,aAAenK,EAAMyF,UAAUje,EAAQ2iB,YAAYjE,MAAQlG,EAAMyF,UAAUje,EAAQ2iB,YAAYhE,OAClJ,MAAO,qCACf,GAAsB,MAAlB3e,EAAQyN,QAAkBzN,EAAQib,eAAe,YAC5CzC,EAAMyF,UAAUje,EAAQyN,WAAazN,EAAQyN,QAAU+K,EAAMyF,UAAUje,EAAQyN,OAAOiR,MAAQlG,EAAMyF,UAAUje,EAAQyN,OAAOkR,OAC9H,MAAO,gCACf,GAAwB,MAApB3e,EAAQ4iB,UAAoB5iB,EAAQib,eAAe,aACnB,kBAArBjb,EAAQ4iB,SACf,MAAO,4BACf,GAA6B,MAAzB5iB,EAAQ6iB,eAAyB7iB,EAAQib,eAAe,kBACnB,kBAA1Bjb,EAAQ6iB,cACf,MAAO,iCACf,GAAyB,MAArB7iB,EAAQ8iB,WAAqB9iB,EAAQib,eAAe,eAC/CzC,EAAMyF,UAAUje,EAAQ8iB,cAAgB9iB,EAAQ8iB,WAAatK,EAAMyF,UAAUje,EAAQ8iB,UAAUpE,MAAQlG,EAAMyF,UAAUje,EAAQ8iB,UAAUnE,OAC1I,MAAO,mCACf,GAA8B,MAA1B3e,EAAQ+iB,gBAA0B/iB,EAAQib,eAAe,oBACpDzC,EAAMyF,UAAUje,EAAQ+iB,mBAAqB/iB,EAAQ+iB,gBAAkBvK,EAAMyF,UAAUje,EAAQ+iB,eAAerE,MAAQlG,EAAMyF,UAAUje,EAAQ+iB,eAAepE,OAC9J,MAAO,wCACf,GAA4B,MAAxB3e,EAAQgjB,cAAwBhjB,EAAQib,eAAe,iBACnB,kBAAzBjb,EAAQgjB,aACf,MAAO,gCACf,GAAiC,MAA7BhjB,EAAQijB,mBAA6BjjB,EAAQib,eAAe,sBACnB,kBAA9Bjb,EAAQijB,kBACf,MAAO,qCACf,GAA+B,MAA3BjjB,EAAQkjB,iBAA2BljB,EAAQib,eAAe,oBACnB,kBAA5Bjb,EAAQkjB,gBACf,MAAO,mCACf,GAA6B,MAAzBljB,EAAQmjB,eAAyBnjB,EAAQib,eAAe,kBACnB,kBAA1Bjb,EAAQmjB,cACf,MAAO,iCACf,GAA2B,MAAvBnjB,EAAQojB,aAAuBpjB,EAAQib,eAAe,gBACnB,kBAAxBjb,EAAQojB,YACf,MAAO,+BACf,GAA8B,MAA1BpjB,EAAQqjB,gBAA0BrjB,EAAQib,eAAe,mBACnB,kBAA3Bjb,EAAQqjB,eACf,MAAO,kCACf,GAAyB,MAArBrjB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQwhB,UACf,MAAO,6BACf,GAAyB,MAArBxhB,EAAQsjB,WAAqBtjB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQsjB,UACf,MAAO,6BACf,GAAwB,MAApBtjB,EAAQujB,UAAoBvjB,EAAQib,eAAe,aACnB,kBAArBjb,EAAQujB,SACf,MAAO,4BACf,GAA0B,MAAtBvjB,EAAQ2P,YAAsB3P,EAAQib,eAAe,eACnB,kBAAvBjb,EAAQ2P,WACf,MAAO,8BACf,GAA0B,MAAtB3P,EAAQ4P,YAAsB5P,EAAQib,eAAe,eACnB,kBAAvBjb,EAAQ4P,WACf,MAAO,8BACf,GAAwB,MAApB5P,EAAQ6P,UAAoB7P,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQ6P,UACvB,MAAO,2BACX,IAAK,IAAIrK,EAAI,EAAGA,EAAIxF,EAAQ6P,SAASpK,SAAUD,EAC3C,GAAmC,kBAAxBxF,EAAQ6P,SAASrK,GACxB,MAAO,8BAEnB,GAAwB,MAApBxF,EAAQ8P,UAAoB9P,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQ8P,UACvB,MAAO,2BACX,IAAStK,EAAI,EAAGA,EAAIxF,EAAQ8P,SAASrK,SAAUD,EAC3C,GAAmC,kBAAxBxF,EAAQ8P,SAAStK,GACxB,MAAO,8BAEnB,GAAyB,MAArBxF,EAAQ+hB,WAAqB/hB,EAAQib,eAAe,aAAc,CAClE,IAAKtb,MAAMC,QAAQI,EAAQ+hB,WACvB,MAAO,4BACX,IAASvc,EAAI,EAAGA,EAAIxF,EAAQ+hB,UAAUtc,SAAUD,EAC5C,IAAKgT,EAAMyF,UAAUje,EAAQ+hB,UAAUvc,IACnC,MAAO,gCAEnB,GAAyB,MAArBxF,EAAQgiB,WAAqBhiB,EAAQib,eAAe,aAAc,CAClE,IAAKtb,MAAMC,QAAQI,EAAQgiB,WACvB,MAAO,4BACX,IAASxc,EAAI,EAAGA,EAAIxF,EAAQgiB,UAAUvc,SAAUD,EAC5C,IAAKgT,EAAMyF,UAAUje,EAAQgiB,UAAUxc,IACnC,MAAO,gCAEnB,OAAO,MAWXsc,EAAUxR,WAAa,SAAoB6L,GACvC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGya,UACxC,OAAO3F,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGya,UAkHxC,GAjH4B,MAAxB3F,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBAClB,MAApB6W,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACb,MAArB+a,EAAO6D,aACPhgB,EAAQggB,WAAa5D,OAAOD,EAAO6D,aACf,MAApB7D,EAAO8F,YACPjiB,EAAQiiB,UAAY7F,OAAOD,EAAO8F,YACb,MAArB9F,EAAO+F,aACPliB,EAAQkiB,WAAa9F,OAAOD,EAAO+F,aACT,MAA1B/F,EAAOgG,kBACH3J,EAAM+F,MACLve,EAAQmiB,gBAAkB3J,EAAM+F,KAAKK,UAAUzC,EAAOgG,kBAAkBtD,UAAW,EAC7C,kBAA3B1C,EAAOgG,gBACnBniB,EAAQmiB,gBAAkBlS,SAASkM,EAAOgG,gBAAiB,IACpB,kBAA3BhG,EAAOgG,gBACnBniB,EAAQmiB,gBAAkBhG,EAAOgG,gBACM,kBAA3BhG,EAAOgG,kBACnBniB,EAAQmiB,gBAAkB,IAAI3J,EAAMsG,SAAS3C,EAAOgG,gBAAgBzD,MAAQ,EAAGvC,EAAOgG,gBAAgBxD,OAAS,GAAGI,aACrG,MAAjB5C,EAAOzc,SACPM,EAAQN,OAASyc,EAAOzc,SAAW,GACf,MAApByc,EAAOzM,YACP1P,EAAQ0P,UAAYK,OAAOoM,EAAOzM,YACf,MAAnByM,EAAOiG,WACPpiB,EAAQoiB,SAAWrS,OAAOoM,EAAOiG,WACX,MAAtBjG,EAAOkG,cACH7J,EAAM+F,MACLve,EAAQqiB,YAAc7J,EAAM+F,KAAKK,UAAUzC,EAAOkG,cAAcxD,UAAW,EACzC,kBAAvB1C,EAAOkG,YACnBriB,EAAQqiB,YAAcpS,SAASkM,EAAOkG,YAAa,IAChB,kBAAvBlG,EAAOkG,YACnBriB,EAAQqiB,YAAclG,EAAOkG,YACM,kBAAvBlG,EAAOkG,cACnBriB,EAAQqiB,YAAc,IAAI7J,EAAMsG,SAAS3C,EAAOkG,YAAY3D,MAAQ,EAAGvC,EAAOkG,YAAY1D,OAAS,GAAGI,aACpF,MAAtB5C,EAAOmG,cACH9J,EAAM+F,MACLve,EAAQsiB,YAAc9J,EAAM+F,KAAKK,UAAUzC,EAAOmG,cAAczD,UAAW,EACzC,kBAAvB1C,EAAOmG,YACnBtiB,EAAQsiB,YAAcrS,SAASkM,EAAOmG,YAAa,IAChB,kBAAvBnG,EAAOmG,YACnBtiB,EAAQsiB,YAAcnG,EAAOmG,YACM,kBAAvBnG,EAAOmG,cACnBtiB,EAAQsiB,YAAc,IAAI9J,EAAMsG,SAAS3C,EAAOmG,YAAY5D,MAAQ,EAAGvC,EAAOmG,YAAY3D,OAAS,GAAGI,aAC5E,MAA9B5C,EAAOoG,sBACPviB,EAAQuiB,oBAAsBxS,OAAOoM,EAAOoG,sBACd,MAA9BpG,EAAOqG,sBACPxiB,EAAQwiB,oBAAsBzS,OAAOoM,EAAOqG,sBAC7B,MAAfrG,EAAOsG,OACPziB,EAAQyiB,KAAO1S,OAAOoM,EAAOsG,OACH,MAA1BtG,EAAOuG,kBACP1iB,EAAQ0iB,gBAAkB3S,OAAOoM,EAAOuG,kBAClB,MAAtBvG,EAAOwG,cACHnK,EAAM+F,MACLve,EAAQ2iB,YAAcnK,EAAM+F,KAAKK,UAAUzC,EAAOwG,cAAc9D,UAAW,EACzC,kBAAvB1C,EAAOwG,YACnB3iB,EAAQ2iB,YAAc1S,SAASkM,EAAOwG,YAAa,IAChB,kBAAvBxG,EAAOwG,YACnB3iB,EAAQ2iB,YAAcxG,EAAOwG,YACM,kBAAvBxG,EAAOwG,cACnB3iB,EAAQ2iB,YAAc,IAAInK,EAAMsG,SAAS3C,EAAOwG,YAAYjE,MAAQ,EAAGvC,EAAOwG,YAAYhE,OAAS,GAAGI,aACzF,MAAjB5C,EAAO1O,SACH+K,EAAM+F,MACLve,EAAQyN,OAAS+K,EAAM+F,KAAKK,UAAUzC,EAAO1O,SAASoR,UAAW,EACpC,kBAAlB1C,EAAO1O,OACnBzN,EAAQyN,OAASwC,SAASkM,EAAO1O,OAAQ,IACX,kBAAlB0O,EAAO1O,OACnBzN,EAAQyN,OAAS0O,EAAO1O,OACM,kBAAlB0O,EAAO1O,SACnBzN,EAAQyN,OAAS,IAAI+K,EAAMsG,SAAS3C,EAAO1O,OAAOiR,MAAQ,EAAGvC,EAAO1O,OAAOkR,OAAS,GAAGI,aACxE,MAAnB5C,EAAOyG,WACP5iB,EAAQ4iB,SAAW7S,OAAOoM,EAAOyG,WACT,MAAxBzG,EAAO0G,gBACP7iB,EAAQ6iB,cAAgB9S,OAAOoM,EAAO0G,gBAClB,MAApB1G,EAAO2G,YACHtK,EAAM+F,MACLve,EAAQ8iB,UAAYtK,EAAM+F,KAAKK,UAAUzC,EAAO2G,YAAYjE,UAAW,EACvC,kBAArB1C,EAAO2G,UACnB9iB,EAAQ8iB,UAAY7S,SAASkM,EAAO2G,UAAW,IACd,kBAArB3G,EAAO2G,UACnB9iB,EAAQ8iB,UAAY3G,EAAO2G,UACM,kBAArB3G,EAAO2G,YACnB9iB,EAAQ8iB,UAAY,IAAItK,EAAMsG,SAAS3C,EAAO2G,UAAUpE,MAAQ,EAAGvC,EAAO2G,UAAUnE,OAAS,GAAGI,aAC3E,MAAzB5C,EAAO4G,iBACHvK,EAAM+F,MACLve,EAAQ+iB,eAAiBvK,EAAM+F,KAAKK,UAAUzC,EAAO4G,iBAAiBlE,UAAW,EAC5C,kBAA1B1C,EAAO4G,eACnB/iB,EAAQ+iB,eAAiB9S,SAASkM,EAAO4G,eAAgB,IACnB,kBAA1B5G,EAAO4G,eACnB/iB,EAAQ+iB,eAAiB5G,EAAO4G,eACM,kBAA1B5G,EAAO4G,iBACnB/iB,EAAQ+iB,eAAiB,IAAIvK,EAAMsG,SAAS3C,EAAO4G,eAAerE,MAAQ,EAAGvC,EAAO4G,eAAepE,OAAS,GAAGI,aAC5F,MAAvB5C,EAAO6G,eACPhjB,EAAQgjB,aAAejT,OAAOoM,EAAO6G,eACT,MAA5B7G,EAAO8G,oBACPjjB,EAAQijB,kBAAoBlT,OAAOoM,EAAO8G,oBAChB,MAA1B9G,EAAO+G,kBACPljB,EAAQkjB,gBAAkBnT,OAAOoM,EAAO+G,kBAChB,MAAxB/G,EAAOgH,gBACPnjB,EAAQmjB,cAAgBpT,OAAOoM,EAAOgH,gBAChB,MAAtBhH,EAAOiH,cACPpjB,EAAQojB,YAAcrT,OAAOoM,EAAOiH,cACX,MAAzBjH,EAAOkH,iBACPrjB,EAAQqjB,eAAiBtT,OAAOoM,EAAOkH,iBACnB,MAApBlH,EAAOqF,YACPxhB,EAAQwhB,UAAYzR,OAAOoM,EAAOqF,YACd,MAApBrF,EAAOmH,YACPtjB,EAAQsjB,UAAYvT,OAAOoM,EAAOmH,YACf,MAAnBnH,EAAOoH,WACPvjB,EAAQujB,SAAWxT,OAAOoM,EAAOoH,WACZ,MAArBpH,EAAOxM,aACP3P,EAAQ2P,WAAaI,OAAOoM,EAAOxM,aACd,MAArBwM,EAAOvM,aACP5P,EAAQ4P,WAAaG,OAAOoM,EAAOvM,aACnCuM,EAAOtM,SAAU,CACjB,IAAKlQ,MAAMC,QAAQuc,EAAOtM,UACtB,MAAM6Q,UAAU,uDACpB1gB,EAAQ6P,SAAW,GACnB,IAAK,IAAIrK,EAAI,EAAGA,EAAI2W,EAAOtM,SAASpK,SAAUD,EAC1CxF,EAAQ6P,SAASrK,GAAKuK,OAAOoM,EAAOtM,SAASrK,IAErD,GAAI2W,EAAOrM,SAAU,CACjB,IAAKnQ,MAAMC,QAAQuc,EAAOrM,UACtB,MAAM4Q,UAAU,uDACpB1gB,EAAQ8P,SAAW,GACnB,IAAStK,EAAI,EAAGA,EAAI2W,EAAOrM,SAASrK,SAAUD,EAC1CxF,EAAQ8P,SAAStK,GAAKuK,OAAOoM,EAAOrM,SAAStK,IAErD,GAAI2W,EAAO4F,UAAW,CAClB,IAAKpiB,MAAMC,QAAQuc,EAAO4F,WACtB,MAAMrB,UAAU,wDACpB1gB,EAAQ+hB,UAAY,GACpB,IAASvc,EAAI,EAAGA,EAAI2W,EAAO4F,UAAUtc,SAAUD,EAC3CxF,EAAQ+hB,UAAUvc,GAAK2W,EAAO4F,UAAUvc,KAAO,EAEvD,GAAI2W,EAAO6F,UAAW,CAClB,IAAKriB,MAAMC,QAAQuc,EAAO6F,WACtB,MAAMtB,UAAU,wDACpB1gB,EAAQgiB,UAAY,GACpB,IAASxc,EAAI,EAAGA,EAAI2W,EAAO6F,UAAUvc,SAAUD,EAC3CxF,EAAQgiB,UAAUxc,GAAK2W,EAAO6F,UAAUxc,KAAO,EAEvD,OAAOxF,GAYX8hB,EAAUxF,SAAW,SAAkBtc,EAASgY,GACvCA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOtM,SAAW,GAClBsM,EAAOrM,SAAW,GAClBqM,EAAO4F,UAAY,GACnB5F,EAAO6F,UAAY,IAEnBhK,EAAQuE,SAAU,CAMlB,GALAJ,EAAO7W,cAAgB,GACvB6W,EAAO/a,UAAY,GACnB+a,EAAO6D,WAAa,GACpB7D,EAAO8F,UAAY,GACnB9F,EAAO+F,WAAa,GAChB1J,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEnH7C,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAAS,IAAM,EAI9D,GAHAD,EAAOzc,OAAS,EAChByc,EAAOzM,UAAY,EACnByM,EAAOiG,SAAW,EACd5J,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOkG,YAAcrK,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE/G7C,EAAOkG,YAAcrK,EAAQiH,QAAU7C,OAAS,IAAM,EAC1D,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOmG,YAActK,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE/G7C,EAAOmG,YAActK,EAAQiH,QAAU7C,OAAS,IAAM,EAK1D,GAJAD,EAAOoG,oBAAsB,EAC7BpG,EAAOqG,oBAAsB,EAC7BrG,EAAOsG,KAAO,EACdtG,EAAOuG,gBAAkB,EACrBlK,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE/G7C,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAAS,IAAM,EAC1D,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE1G7C,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAAS,IAAM,EAGrD,GAFAD,EAAOyG,SAAW,EAClBzG,EAAO0G,cAAgB,EACnBrK,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE7G7C,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAAS,IAAM,EACxD,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAElH7C,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAAS,IAAM,EAC7DD,EAAO6G,aAAe,EACtB7G,EAAO8G,kBAAoB,EAC3B9G,EAAO+G,gBAAkB,EACzB/G,EAAOgH,cAAgB,EACvBhH,EAAOiH,YAAc,EACrBjH,EAAOkH,eAAiB,EACxBlH,EAAOqF,UAAY,EACnBrF,EAAOmH,UAAY,EACnBnH,EAAOoH,SAAW,EAClBpH,EAAOxM,WAAa,EACpBwM,EAAOvM,WAAa,EAuFxB,GArF6B,MAAzB5P,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eACV,MAArBtF,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACL,MAAtBpB,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBACrDkB,EAAO6D,WAAahgB,EAAQggB,YACP,MAArBhgB,EAAQiiB,WAAqBjiB,EAAQib,eAAe,eACpDkB,EAAO8F,UAAYjiB,EAAQiiB,WACL,MAAtBjiB,EAAQkiB,YAAsBliB,EAAQib,eAAe,gBACrDkB,EAAO+F,WAAaliB,EAAQkiB,YACD,MAA3BliB,EAAQmiB,iBAA2BniB,EAAQib,eAAe,qBACnB,kBAA5Bjb,EAAQmiB,gBACfhG,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQmiB,iBAAmBniB,EAAQmiB,gBAE9FhG,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQmiB,iBAAmBnK,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQmiB,gBAAgBzD,MAAQ,EAAG1e,EAAQmiB,gBAAgBxD,OAAS,GAAGI,WAAa/e,EAAQmiB,iBAC9O,MAAlBniB,EAAQN,QAAkBM,EAAQib,eAAe,YACjDkB,EAAOzc,OAASM,EAAQN,QACH,MAArBM,EAAQ0P,WAAqB1P,EAAQib,eAAe,eACpDkB,EAAOzM,UAAYsI,EAAQkG,OAASC,SAASne,EAAQ0P,WAAa0M,OAAOpc,EAAQ0P,WAAa1P,EAAQ0P,WAClF,MAApB1P,EAAQoiB,UAAoBpiB,EAAQib,eAAe,cACnDkB,EAAOiG,SAAWpK,EAAQkG,OAASC,SAASne,EAAQoiB,UAAYhG,OAAOpc,EAAQoiB,UAAYpiB,EAAQoiB,UAC5E,MAAvBpiB,EAAQqiB,aAAuBriB,EAAQib,eAAe,iBACnB,kBAAxBjb,EAAQqiB,YACflG,EAAOkG,YAAcrK,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQqiB,aAAeriB,EAAQqiB,YAEtFlG,EAAOkG,YAAcrK,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQqiB,aAAerK,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQqiB,YAAY3D,MAAQ,EAAG1e,EAAQqiB,YAAY1D,OAAS,GAAGI,WAAa/e,EAAQqiB,aACzN,MAAvBriB,EAAQsiB,aAAuBtiB,EAAQib,eAAe,iBACnB,kBAAxBjb,EAAQsiB,YACfnG,EAAOmG,YAActK,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQsiB,aAAetiB,EAAQsiB,YAEtFnG,EAAOmG,YAActK,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQsiB,aAAetK,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQsiB,YAAY5D,MAAQ,EAAG1e,EAAQsiB,YAAY3D,OAAS,GAAGI,WAAa/e,EAAQsiB,aACjN,MAA/BtiB,EAAQuiB,qBAA+BviB,EAAQib,eAAe,yBAC9DkB,EAAOoG,oBAAsBvK,EAAQkG,OAASC,SAASne,EAAQuiB,qBAAuBnG,OAAOpc,EAAQuiB,qBAAuBviB,EAAQuiB,qBACrG,MAA/BviB,EAAQwiB,qBAA+BxiB,EAAQib,eAAe,yBAC9DkB,EAAOqG,oBAAsBxK,EAAQkG,OAASC,SAASne,EAAQwiB,qBAAuBpG,OAAOpc,EAAQwiB,qBAAuBxiB,EAAQwiB,qBACpH,MAAhBxiB,EAAQyiB,MAAgBziB,EAAQib,eAAe,UAC/CkB,EAAOsG,KAAOzK,EAAQkG,OAASC,SAASne,EAAQyiB,MAAQrG,OAAOpc,EAAQyiB,MAAQziB,EAAQyiB,MAC5D,MAA3BziB,EAAQ0iB,iBAA2B1iB,EAAQib,eAAe,qBAC1DkB,EAAOuG,gBAAkB1K,EAAQkG,OAASC,SAASne,EAAQ0iB,iBAAmBtG,OAAOpc,EAAQ0iB,iBAAmB1iB,EAAQ0iB,iBACjG,MAAvB1iB,EAAQ2iB,aAAuB3iB,EAAQib,eAAe,iBACnB,kBAAxBjb,EAAQ2iB,YACfxG,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ2iB,aAAe3iB,EAAQ2iB,YAEtFxG,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ2iB,aAAe3K,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ2iB,YAAYjE,MAAQ,EAAG1e,EAAQ2iB,YAAYhE,OAAS,GAAGI,WAAa/e,EAAQ2iB,aAC9N,MAAlB3iB,EAAQyN,QAAkBzN,EAAQib,eAAe,YACnB,kBAAnBjb,EAAQyN,OACf0O,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQyN,QAAUzN,EAAQyN,OAE5E0O,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQyN,QAAUuK,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQyN,OAAOiR,MAAQ,EAAG1e,EAAQyN,OAAOkR,OAAS,GAAGI,WAAa/e,EAAQyN,QACxM,MAApBzN,EAAQ4iB,UAAoB5iB,EAAQib,eAAe,cACnDkB,EAAOyG,SAAW5K,EAAQkG,OAASC,SAASne,EAAQ4iB,UAAYxG,OAAOpc,EAAQ4iB,UAAY5iB,EAAQ4iB,UAC1E,MAAzB5iB,EAAQ6iB,eAAyB7iB,EAAQib,eAAe,mBACxDkB,EAAO0G,cAAgB7K,EAAQkG,OAASC,SAASne,EAAQ6iB,eAAiBzG,OAAOpc,EAAQ6iB,eAAiB7iB,EAAQ6iB,eAC7F,MAArB7iB,EAAQ8iB,WAAqB9iB,EAAQib,eAAe,eACnB,kBAAtBjb,EAAQ8iB,UACf3G,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ8iB,WAAa9iB,EAAQ8iB,UAElF3G,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ8iB,WAAa9K,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ8iB,UAAUpE,MAAQ,EAAG1e,EAAQ8iB,UAAUnE,OAAS,GAAGI,WAAa/e,EAAQ8iB,WAC9M,MAA1B9iB,EAAQ+iB,gBAA0B/iB,EAAQib,eAAe,oBACnB,kBAA3Bjb,EAAQ+iB,eACf5G,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ+iB,gBAAkB/iB,EAAQ+iB,eAE5F5G,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ+iB,gBAAkB/K,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ+iB,eAAerE,MAAQ,EAAG1e,EAAQ+iB,eAAepE,OAAS,GAAGI,WAAa/e,EAAQ+iB,gBACpO,MAAxB/iB,EAAQgjB,cAAwBhjB,EAAQib,eAAe,kBACvDkB,EAAO6G,aAAehL,EAAQkG,OAASC,SAASne,EAAQgjB,cAAgB5G,OAAOpc,EAAQgjB,cAAgBhjB,EAAQgjB,cAClF,MAA7BhjB,EAAQijB,mBAA6BjjB,EAAQib,eAAe,uBAC5DkB,EAAO8G,kBAAoBjL,EAAQkG,OAASC,SAASne,EAAQijB,mBAAqB7G,OAAOpc,EAAQijB,mBAAqBjjB,EAAQijB,mBACnG,MAA3BjjB,EAAQkjB,iBAA2BljB,EAAQib,eAAe,qBAC1DkB,EAAO+G,gBAAkBlL,EAAQkG,OAASC,SAASne,EAAQkjB,iBAAmB9G,OAAOpc,EAAQkjB,iBAAmBljB,EAAQkjB,iBAC/F,MAAzBljB,EAAQmjB,eAAyBnjB,EAAQib,eAAe,mBACxDkB,EAAOgH,cAAgBnL,EAAQkG,OAASC,SAASne,EAAQmjB,eAAiB/G,OAAOpc,EAAQmjB,eAAiBnjB,EAAQmjB,eAC3F,MAAvBnjB,EAAQojB,aAAuBpjB,EAAQib,eAAe,iBACtDkB,EAAOiH,YAAcpL,EAAQkG,OAASC,SAASne,EAAQojB,aAAehH,OAAOpc,EAAQojB,aAAepjB,EAAQojB,aAClF,MAA1BpjB,EAAQqjB,gBAA0BrjB,EAAQib,eAAe,oBACzDkB,EAAOkH,eAAiBrL,EAAQkG,OAASC,SAASne,EAAQqjB,gBAAkBjH,OAAOpc,EAAQqjB,gBAAkBrjB,EAAQqjB,gBAChG,MAArBrjB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,eACpDkB,EAAOqF,UAAYxJ,EAAQkG,OAASC,SAASne,EAAQwhB,WAAapF,OAAOpc,EAAQwhB,WAAaxhB,EAAQwhB,WACjF,MAArBxhB,EAAQsjB,WAAqBtjB,EAAQib,eAAe,eACpDkB,EAAOmH,UAAYtL,EAAQkG,OAASC,SAASne,EAAQsjB,WAAalH,OAAOpc,EAAQsjB,WAAatjB,EAAQsjB,WAClF,MAApBtjB,EAAQujB,UAAoBvjB,EAAQib,eAAe,cACnDkB,EAAOoH,SAAWvL,EAAQkG,OAASC,SAASne,EAAQujB,UAAYnH,OAAOpc,EAAQujB,UAAYvjB,EAAQujB,UAC7E,MAAtBvjB,EAAQ2P,YAAsB3P,EAAQib,eAAe,gBACrDkB,EAAOxM,WAAaqI,EAAQkG,OAASC,SAASne,EAAQ2P,YAAcyM,OAAOpc,EAAQ2P,YAAc3P,EAAQ2P,YACnF,MAAtB3P,EAAQ4P,YAAsB5P,EAAQib,eAAe,gBACrDkB,EAAOvM,WAAaoI,EAAQkG,OAASC,SAASne,EAAQ4P,YAAcwM,OAAOpc,EAAQ4P,YAAc5P,EAAQ4P,YACzG5P,EAAQ6P,UAAY7P,EAAQ6P,SAASpK,OAAQ,CAC7C0W,EAAOtM,SAAW,GAClB,IAAK,IAAI8T,EAAI,EAAGA,EAAI3jB,EAAQ6P,SAASpK,SAAUke,EAC3CxH,EAAOtM,SAAS8T,GAAK3L,EAAQkG,OAASC,SAASne,EAAQ6P,SAAS8T,IAAMvH,OAAOpc,EAAQ6P,SAAS8T,IAAM3jB,EAAQ6P,SAAS8T,GAE7H,GAAI3jB,EAAQ8P,UAAY9P,EAAQ8P,SAASrK,OAAQ,CAC7C0W,EAAOrM,SAAW,GAClB,IAAS6T,EAAI,EAAGA,EAAI3jB,EAAQ8P,SAASrK,SAAUke,EAC3CxH,EAAOrM,SAAS6T,GAAK3L,EAAQkG,OAASC,SAASne,EAAQ8P,SAAS6T,IAAMvH,OAAOpc,EAAQ8P,SAAS6T,IAAM3jB,EAAQ8P,SAAS6T,GAE7H,GAAI3jB,EAAQ+hB,WAAa/hB,EAAQ+hB,UAAUtc,OAAQ,CAC/C0W,EAAO4F,UAAY,GACnB,IAAS4B,EAAI,EAAGA,EAAI3jB,EAAQ+hB,UAAUtc,SAAUke,EAC5CxH,EAAO4F,UAAU4B,GAAK3jB,EAAQ+hB,UAAU4B,GAEhD,GAAI3jB,EAAQgiB,WAAahiB,EAAQgiB,UAAUvc,OAAQ,CAC/C0W,EAAO6F,UAAY,GACnB,IAAS2B,EAAI,EAAGA,EAAI3jB,EAAQgiB,UAAUvc,SAAUke,EAC5CxH,EAAO6F,UAAU2B,GAAK3jB,EAAQgiB,UAAU2B,GAEhD,OAAOxH,GAUX2F,EAAUpH,UAAU+B,OAAS,WACzB,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoF,EA/nCK,GAkoChBza,EAAGuc,SAAY,WAqCX,SAASA,EAASpJ,GACd,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8oBhD,OAroBAoe,EAASlJ,UAAUpV,cAAgB,GAQnCse,EAASlJ,UAAUtZ,UAAY,GAQ/BwiB,EAASlJ,UAAUsF,WAAa,GAQhC4D,EAASlJ,UAAUuH,UAAY,GAQ/B2B,EAASlJ,UAAUwH,WAAa,GAQhC0B,EAASlJ,UAAUyH,gBAAkB3J,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQnFoF,EAASlJ,UAAU8G,UAAY,EAQ/BoC,EAASlJ,UAAU4I,UAAY,EAQ/BM,EAASlJ,UAAU6I,SAAW,EAQ9BK,EAASlJ,UAAUmJ,WAAa,EAQhCD,EAASlJ,UAAUsI,aAAe,EAQlCY,EAASlJ,UAAUuI,kBAAoB,EAQvCW,EAASlJ,UAAUjN,OAAS+K,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ1EoF,EAASlJ,UAAUiI,YAAcnK,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ/EoF,EAASlJ,UAAUkI,SAAW,EAQ9BgB,EAASlJ,UAAUmI,cAAgB,EAQnCe,EAASlJ,UAAUoI,UAAYtK,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ7EoF,EAASlJ,UAAUqI,eAAiBvK,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQlFoF,EAASlJ,UAAUwI,gBAAkB,EAQrCU,EAASlJ,UAAUyI,cAAgB,EAQnCS,EAASlJ,UAAU2I,eAAiB,EAUpCO,EAAS7K,OAAS,SAAgByB,GAC9B,OAAO,IAAIoJ,EAASpJ,IAYxBoJ,EAAS7I,OAAS,SAAgB/a,EAASgb,GA6CvC,OA5CKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACnC,MAArBtF,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WAClC,MAAtBpB,EAAQggB,YAAsBhgB,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQggB,YACnC,MAArBhgB,EAAQiiB,WAAqBjiB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQiiB,WAClC,MAAtBjiB,EAAQkiB,YAAsBliB,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQkiB,YAC7B,MAA3BliB,EAAQmiB,iBAA2BniB,EAAQib,eAAe,oBAC1DD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQmiB,iBACpC,MAArBniB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQwhB,WACnC,MAArBxhB,EAAQsjB,WAAqBtjB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQsjB,WACpC,MAApBtjB,EAAQujB,UAAoBvjB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQujB,UAClC,MAAtBvjB,EAAQ6jB,YAAsB7jB,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQ6jB,YACjC,MAAxB7jB,EAAQgjB,cAAwBhjB,EAAQib,eAAe,iBACvDD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQgjB,cAC5B,MAA7BhjB,EAAQijB,mBAA6BjjB,EAAQib,eAAe,sBAC5DD,EAAOE,OAA+B,IAAI6C,OAAO/d,EAAQijB,mBACvC,MAAlBjjB,EAAQyN,QAAkBzN,EAAQib,eAAe,WACjDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQyN,QACpC,MAAvBzN,EAAQ2iB,aAAuB3iB,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ2iB,aACvC,MAApB3iB,EAAQ4iB,UAAoB5iB,EAAQib,eAAe,aACnDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ4iB,UACjC,MAAzB5iB,EAAQ6iB,eAAyB7iB,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQ6iB,eACrC,MAArB7iB,EAAQ8iB,WAAqB9iB,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ8iB,WACjC,MAA1B9iB,EAAQ+iB,gBAA0B/iB,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAKuD,QAAQze,EAAQ+iB,gBAChC,MAA3B/iB,EAAQkjB,iBAA2BljB,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQkjB,iBACjC,MAAzBljB,EAAQmjB,eAAyBnjB,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQmjB,eAChC,MAA1BnjB,EAAQqjB,gBAA0BrjB,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQqjB,gBACvDrI,GAYX4I,EAAStI,gBAAkB,SAAyBtb,EAASgb,GACzD,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqI,EAASpI,OAAS,SAAgBC,EAAQhW,GAChCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuc,SAChGnI,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQggB,WAAavE,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQiiB,UAAYxG,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQkiB,WAAazG,EAAON,SAC5B,MACJ,KAAK,EACDnb,EAAQmiB,gBAAkB1G,EAAOgD,UACjC,MACJ,KAAK,EACDze,EAAQwhB,UAAY/F,EAAOsC,SAC3B,MACJ,KAAK,EACD/d,EAAQsjB,UAAY7H,EAAOsC,SAC3B,MACJ,KAAK,EACD/d,EAAQujB,SAAW9H,EAAOsC,SAC1B,MACJ,KAAK,GACD/d,EAAQ6jB,WAAapI,EAAOsC,SAC5B,MACJ,KAAK,GACD/d,EAAQgjB,aAAevH,EAAOsC,SAC9B,MACJ,KAAK,GACD/d,EAAQijB,kBAAoBxH,EAAOsC,SACnC,MACJ,KAAK,GACD/d,EAAQyN,OAASgO,EAAOgD,UACxB,MACJ,KAAK,GACDze,EAAQ2iB,YAAclH,EAAOgD,UAC7B,MACJ,KAAK,GACDze,EAAQ4iB,SAAWnH,EAAOsC,SAC1B,MACJ,KAAK,GACD/d,EAAQ6iB,cAAgBpH,EAAOsC,SAC/B,MACJ,KAAK,GACD/d,EAAQ8iB,UAAYrH,EAAOgD,UAC3B,MACJ,KAAK,GACDze,EAAQ+iB,eAAiBtH,EAAOgD,UAChC,MACJ,KAAK,GACDze,EAAQkjB,gBAAkBzH,EAAOsC,SACjC,MACJ,KAAK,GACD/d,EAAQmjB,cAAgB1H,EAAOsC,SAC/B,MACJ,KAAK,GACD/d,EAAQqjB,eAAiB5H,EAAOsC,SAChC,MACJ,QACItC,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4jB,EAAS5H,gBAAkB,SAAyBP,GAGhD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0I,EAAS3H,OAAS,SAAgBjc,GAC9B,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACkB,MAAzBA,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACjB,iCACU,MAArBtF,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACW,MAAtBpB,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQggB,YACjB,8BACU,MAArBhgB,EAAQiiB,WAAqBjiB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQiiB,WACjB,6BACW,MAAtBjiB,EAAQkiB,YAAsBliB,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQkiB,YACjB,8BACgB,MAA3BliB,EAAQmiB,kBAA2BniB,EAAQib,eAAe,oBACrDzC,EAAMyF,UAAUje,EAAQmiB,kBAAsBniB,EAAQmiB,iBAAmB3J,EAAMyF,UAAUje,EAAQmiB,gBAAgBzD,MAAQlG,EAAMyF,UAAUje,EAAQmiB,gBAAgBxD,MAEjJ,MAArB3e,EAAQwhB,WAAqBxhB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQwhB,UACR,6BACU,MAArBxhB,EAAQsjB,WAAqBtjB,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQsjB,UACR,6BACS,MAApBtjB,EAAQujB,UAAoBvjB,EAAQib,eAAe,aACnB,kBAArBjb,EAAQujB,SACR,4BACW,MAAtBvjB,EAAQ6jB,YAAsB7jB,EAAQib,eAAe,eACnB,kBAAvBjb,EAAQ6jB,WACR,8BACa,MAAxB7jB,EAAQgjB,cAAwBhjB,EAAQib,eAAe,iBACnB,kBAAzBjb,EAAQgjB,aACR,gCACkB,MAA7BhjB,EAAQijB,mBAA6BjjB,EAAQib,eAAe,sBACnB,kBAA9Bjb,EAAQijB,kBACR,qCACO,MAAlBjjB,EAAQyN,SAAkBzN,EAAQib,eAAe,WAC5CzC,EAAMyF,UAAUje,EAAQyN,SAAazN,EAAQyN,QAAU+K,EAAMyF,UAAUje,EAAQyN,OAAOiR,MAAQlG,EAAMyF,UAAUje,EAAQyN,OAAOkR,MAE3G,MAAvB3e,EAAQ2iB,cAAuB3iB,EAAQib,eAAe,gBACjDzC,EAAMyF,UAAUje,EAAQ2iB,cAAkB3iB,EAAQ2iB,aAAenK,EAAMyF,UAAUje,EAAQ2iB,YAAYjE,MAAQlG,EAAMyF,UAAUje,EAAQ2iB,YAAYhE,MAElI,MAApB3e,EAAQ4iB,UAAoB5iB,EAAQib,eAAe,aACnB,kBAArBjb,EAAQ4iB,SACR,4BACc,MAAzB5iB,EAAQ6iB,eAAyB7iB,EAAQib,eAAe,kBACnB,kBAA1Bjb,EAAQ6iB,cACR,iCACU,MAArB7iB,EAAQ8iB,YAAqB9iB,EAAQib,eAAe,cAC/CzC,EAAMyF,UAAUje,EAAQ8iB,YAAgB9iB,EAAQ8iB,WAAatK,EAAMyF,UAAUje,EAAQ8iB,UAAUpE,MAAQlG,EAAMyF,UAAUje,EAAQ8iB,UAAUnE,MAEpH,MAA1B3e,EAAQ+iB,iBAA0B/iB,EAAQib,eAAe,mBACpDzC,EAAMyF,UAAUje,EAAQ+iB,iBAAqB/iB,EAAQ+iB,gBAAkBvK,EAAMyF,UAAUje,EAAQ+iB,eAAerE,MAAQlG,EAAMyF,UAAUje,EAAQ+iB,eAAepE,MAEvI,MAA3B3e,EAAQkjB,iBAA2BljB,EAAQib,eAAe,oBACnB,kBAA5Bjb,EAAQkjB,gBACR,mCACc,MAAzBljB,EAAQmjB,eAAyBnjB,EAAQib,eAAe,kBACnB,kBAA1Bjb,EAAQmjB,cACR,iCACe,MAA1BnjB,EAAQqjB,gBAA0BrjB,EAAQib,eAAe,mBACnB,kBAA3Bjb,EAAQqjB,eACR,kCACR,KAVQ,wCAHA,mCATA,qCAHA,gCArBA,0CAyDnBO,EAAStT,WAAa,SAAoB6L,GACtC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGuc,SACxC,OAAOzH,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuc,SA8ExC,OA7E4B,MAAxBzH,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBAClB,MAApB6W,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACb,MAArB+a,EAAO6D,aACPhgB,EAAQggB,WAAa5D,OAAOD,EAAO6D,aACf,MAApB7D,EAAO8F,YACPjiB,EAAQiiB,UAAY7F,OAAOD,EAAO8F,YACb,MAArB9F,EAAO+F,aACPliB,EAAQkiB,WAAa9F,OAAOD,EAAO+F,aACT,MAA1B/F,EAAOgG,kBACH3J,EAAM+F,MACLve,EAAQmiB,gBAAkB3J,EAAM+F,KAAKK,UAAUzC,EAAOgG,kBAAkBtD,UAAW,EAC7C,kBAA3B1C,EAAOgG,gBACnBniB,EAAQmiB,gBAAkBlS,SAASkM,EAAOgG,gBAAiB,IACpB,kBAA3BhG,EAAOgG,gBACnBniB,EAAQmiB,gBAAkBhG,EAAOgG,gBACM,kBAA3BhG,EAAOgG,kBACnBniB,EAAQmiB,gBAAkB,IAAI3J,EAAMsG,SAAS3C,EAAOgG,gBAAgBzD,MAAQ,EAAGvC,EAAOgG,gBAAgBxD,OAAS,GAAGI,aAClG,MAApB5C,EAAOqF,YACPxhB,EAAQwhB,UAAYzR,OAAOoM,EAAOqF,YACd,MAApBrF,EAAOmH,YACPtjB,EAAQsjB,UAAYvT,OAAOoM,EAAOmH,YACf,MAAnBnH,EAAOoH,WACPvjB,EAAQujB,SAAWxT,OAAOoM,EAAOoH,WACZ,MAArBpH,EAAO0H,aACP7jB,EAAQ6jB,WAAa9T,OAAOoM,EAAO0H,aACZ,MAAvB1H,EAAO6G,eACPhjB,EAAQgjB,aAAejT,OAAOoM,EAAO6G,eACT,MAA5B7G,EAAO8G,oBACPjjB,EAAQijB,kBAAoBlT,OAAOoM,EAAO8G,oBACzB,MAAjB9G,EAAO1O,SACH+K,EAAM+F,MACLve,EAAQyN,OAAS+K,EAAM+F,KAAKK,UAAUzC,EAAO1O,SAASoR,UAAW,EACpC,kBAAlB1C,EAAO1O,OACnBzN,EAAQyN,OAASwC,SAASkM,EAAO1O,OAAQ,IACX,kBAAlB0O,EAAO1O,OACnBzN,EAAQyN,OAAS0O,EAAO1O,OACM,kBAAlB0O,EAAO1O,SACnBzN,EAAQyN,OAAS,IAAI+K,EAAMsG,SAAS3C,EAAO1O,OAAOiR,MAAQ,EAAGvC,EAAO1O,OAAOkR,OAAS,GAAGI,aACrE,MAAtB5C,EAAOwG,cACHnK,EAAM+F,MACLve,EAAQ2iB,YAAcnK,EAAM+F,KAAKK,UAAUzC,EAAOwG,cAAc9D,UAAW,EACzC,kBAAvB1C,EAAOwG,YACnB3iB,EAAQ2iB,YAAc1S,SAASkM,EAAOwG,YAAa,IAChB,kBAAvBxG,EAAOwG,YACnB3iB,EAAQ2iB,YAAcxG,EAAOwG,YACM,kBAAvBxG,EAAOwG,cACnB3iB,EAAQ2iB,YAAc,IAAInK,EAAMsG,SAAS3C,EAAOwG,YAAYjE,MAAQ,EAAGvC,EAAOwG,YAAYhE,OAAS,GAAGI,aACvF,MAAnB5C,EAAOyG,WACP5iB,EAAQ4iB,SAAW7S,OAAOoM,EAAOyG,WACT,MAAxBzG,EAAO0G,gBACP7iB,EAAQ6iB,cAAgB9S,OAAOoM,EAAO0G,gBAClB,MAApB1G,EAAO2G,YACHtK,EAAM+F,MACLve,EAAQ8iB,UAAYtK,EAAM+F,KAAKK,UAAUzC,EAAO2G,YAAYjE,UAAW,EACvC,kBAArB1C,EAAO2G,UACnB9iB,EAAQ8iB,UAAY7S,SAASkM,EAAO2G,UAAW,IACd,kBAArB3G,EAAO2G,UACnB9iB,EAAQ8iB,UAAY3G,EAAO2G,UACM,kBAArB3G,EAAO2G,YACnB9iB,EAAQ8iB,UAAY,IAAItK,EAAMsG,SAAS3C,EAAO2G,UAAUpE,MAAQ,EAAGvC,EAAO2G,UAAUnE,OAAS,GAAGI,aAC3E,MAAzB5C,EAAO4G,iBACHvK,EAAM+F,MACLve,EAAQ+iB,eAAiBvK,EAAM+F,KAAKK,UAAUzC,EAAO4G,iBAAiBlE,UAAW,EAC5C,kBAA1B1C,EAAO4G,eACnB/iB,EAAQ+iB,eAAiB9S,SAASkM,EAAO4G,eAAgB,IACnB,kBAA1B5G,EAAO4G,eACnB/iB,EAAQ+iB,eAAiB5G,EAAO4G,eACM,kBAA1B5G,EAAO4G,iBACnB/iB,EAAQ+iB,eAAiB,IAAIvK,EAAMsG,SAAS3C,EAAO4G,eAAerE,MAAQ,EAAGvC,EAAO4G,eAAepE,OAAS,GAAGI,aACzF,MAA1B5C,EAAO+G,kBACPljB,EAAQkjB,gBAAkBnT,OAAOoM,EAAO+G,kBAChB,MAAxB/G,EAAOgH,gBACPnjB,EAAQmjB,cAAgBpT,OAAOoM,EAAOgH,gBACb,MAAzBhH,EAAOkH,iBACPrjB,EAAQqjB,eAAiBtT,OAAOoM,EAAOkH,iBACpCrjB,GAYX4jB,EAAStH,SAAW,SAAkBtc,EAASgY,GACtCA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAMlB,GALAJ,EAAO7W,cAAgB,GACvB6W,EAAO/a,UAAY,GACnB+a,EAAO6D,WAAa,GACpB7D,EAAO8F,UAAY,GACnB9F,EAAO+F,WAAa,GAChB1J,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEnH7C,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAAS,IAAM,EAO9D,GANAD,EAAOqF,UAAY,EACnBrF,EAAOmH,UAAY,EACnBnH,EAAOoH,SAAW,EAClBpH,EAAO0H,WAAa,EACpB1H,EAAO6G,aAAe,EACtB7G,EAAO8G,kBAAoB,EACvBzK,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE1G7C,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAAS,IAAM,EACrD,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE/G7C,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAAS,IAAM,EAG1D,GAFAD,EAAOyG,SAAW,EAClBzG,EAAO0G,cAAgB,EACnBrK,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE7G7C,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAAS,IAAM,EACxD,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAElH7C,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAAS,IAAM,EAC7DD,EAAO+G,gBAAkB,EACzB/G,EAAOgH,cAAgB,EACvBhH,EAAOkH,eAAiB,EA2D5B,OAzD6B,MAAzBrjB,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eACV,MAArBtF,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACL,MAAtBpB,EAAQggB,YAAsBhgB,EAAQib,eAAe,gBACrDkB,EAAO6D,WAAahgB,EAAQggB,YACP,MAArBhgB,EAAQiiB,WAAqBjiB,EAAQib,eAAe,eACpDkB,EAAO8F,UAAYjiB,EAAQiiB,WACL,MAAtBjiB,EAAQkiB,YAAsBliB,EAAQib,eAAe,gBACrDkB,EAAO+F,WAAaliB,EAAQkiB,YACD,MAA3BliB,EAAQmiB,iBAA2BniB,EAAQib,eAAe,qBACnB,kBAA5Bjb,EAAQmiB,gBACfhG,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQmiB,iBAAmBniB,EAAQmiB,gBAE9FhG,EAAOgG,gBAAkBnK,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQmiB,iBAAmBnK,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQmiB,gBAAgBzD,MAAQ,EAAG1e,EAAQmiB,gBAAgBxD,OAAS,GAAGI,WAAa/e,EAAQmiB,iBAC3O,MAArBniB,EAAQwhB,WAAqBxhB,EAAQib,eAAe,eACpDkB,EAAOqF,UAAYxJ,EAAQkG,OAASC,SAASne,EAAQwhB,WAAapF,OAAOpc,EAAQwhB,WAAaxhB,EAAQwhB,WACjF,MAArBxhB,EAAQsjB,WAAqBtjB,EAAQib,eAAe,eACpDkB,EAAOmH,UAAYtL,EAAQkG,OAASC,SAASne,EAAQsjB,WAAalH,OAAOpc,EAAQsjB,WAAatjB,EAAQsjB,WAClF,MAApBtjB,EAAQujB,UAAoBvjB,EAAQib,eAAe,cACnDkB,EAAOoH,SAAWvL,EAAQkG,OAASC,SAASne,EAAQujB,UAAYnH,OAAOpc,EAAQujB,UAAYvjB,EAAQujB,UAC7E,MAAtBvjB,EAAQ6jB,YAAsB7jB,EAAQib,eAAe,gBACrDkB,EAAO0H,WAAa7L,EAAQkG,OAASC,SAASne,EAAQ6jB,YAAczH,OAAOpc,EAAQ6jB,YAAc7jB,EAAQ6jB,YACjF,MAAxB7jB,EAAQgjB,cAAwBhjB,EAAQib,eAAe,kBACvDkB,EAAO6G,aAAehL,EAAQkG,OAASC,SAASne,EAAQgjB,cAAgB5G,OAAOpc,EAAQgjB,cAAgBhjB,EAAQgjB,cAClF,MAA7BhjB,EAAQijB,mBAA6BjjB,EAAQib,eAAe,uBAC5DkB,EAAO8G,kBAAoBjL,EAAQkG,OAASC,SAASne,EAAQijB,mBAAqB7G,OAAOpc,EAAQijB,mBAAqBjjB,EAAQijB,mBAC5G,MAAlBjjB,EAAQyN,QAAkBzN,EAAQib,eAAe,YACnB,kBAAnBjb,EAAQyN,OACf0O,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQyN,QAAUzN,EAAQyN,OAE5E0O,EAAO1O,OAASuK,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQyN,QAAUuK,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQyN,OAAOiR,MAAQ,EAAG1e,EAAQyN,OAAOkR,OAAS,GAAGI,WAAa/e,EAAQyN,QACrM,MAAvBzN,EAAQ2iB,aAAuB3iB,EAAQib,eAAe,iBACnB,kBAAxBjb,EAAQ2iB,YACfxG,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ2iB,aAAe3iB,EAAQ2iB,YAEtFxG,EAAOwG,YAAc3K,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ2iB,aAAe3K,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ2iB,YAAYjE,MAAQ,EAAG1e,EAAQ2iB,YAAYhE,OAAS,GAAGI,WAAa/e,EAAQ2iB,aAC5N,MAApB3iB,EAAQ4iB,UAAoB5iB,EAAQib,eAAe,cACnDkB,EAAOyG,SAAW5K,EAAQkG,OAASC,SAASne,EAAQ4iB,UAAYxG,OAAOpc,EAAQ4iB,UAAY5iB,EAAQ4iB,UAC1E,MAAzB5iB,EAAQ6iB,eAAyB7iB,EAAQib,eAAe,mBACxDkB,EAAO0G,cAAgB7K,EAAQkG,OAASC,SAASne,EAAQ6iB,eAAiBzG,OAAOpc,EAAQ6iB,eAAiB7iB,EAAQ6iB,eAC7F,MAArB7iB,EAAQ8iB,WAAqB9iB,EAAQib,eAAe,eACnB,kBAAtBjb,EAAQ8iB,UACf3G,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ8iB,WAAa9iB,EAAQ8iB,UAElF3G,EAAO2G,UAAY9K,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ8iB,WAAa9K,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ8iB,UAAUpE,MAAQ,EAAG1e,EAAQ8iB,UAAUnE,OAAS,GAAGI,WAAa/e,EAAQ8iB,WAC9M,MAA1B9iB,EAAQ+iB,gBAA0B/iB,EAAQib,eAAe,oBACnB,kBAA3Bjb,EAAQ+iB,eACf5G,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ+iB,gBAAkB/iB,EAAQ+iB,eAE5F5G,EAAO4G,eAAiB/K,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ+iB,gBAAkB/K,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ+iB,eAAerE,MAAQ,EAAG1e,EAAQ+iB,eAAepE,OAAS,GAAGI,WAAa/e,EAAQ+iB,gBACjO,MAA3B/iB,EAAQkjB,iBAA2BljB,EAAQib,eAAe,qBAC1DkB,EAAO+G,gBAAkBlL,EAAQkG,OAASC,SAASne,EAAQkjB,iBAAmB9G,OAAOpc,EAAQkjB,iBAAmBljB,EAAQkjB,iBAC/F,MAAzBljB,EAAQmjB,eAAyBnjB,EAAQib,eAAe,mBACxDkB,EAAOgH,cAAgBnL,EAAQkG,OAASC,SAASne,EAAQmjB,eAAiB/G,OAAOpc,EAAQmjB,eAAiBnjB,EAAQmjB,eACxF,MAA1BnjB,EAAQqjB,gBAA0BrjB,EAAQib,eAAe,oBACzDkB,EAAOkH,eAAiBrL,EAAQkG,OAASC,SAASne,EAAQqjB,gBAAkBjH,OAAOpc,EAAQqjB,gBAAkBrjB,EAAQqjB,gBAClHlH,GAUXyH,EAASlJ,UAAU+B,OAAS,WACxB,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkH,EAvrBI,GA0rBfvc,EAAGyc,eAAkB,WAkBjB,SAASA,EAAetJ,GACpB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAyLhD,OAhLAse,EAAepJ,UAAUqJ,cAAgB,GAQzCD,EAAepJ,UAAUrY,WAAa,GAUtCyhB,EAAe/K,OAAS,SAAgByB,GACpC,OAAO,IAAIsJ,EAAetJ,IAY9BsJ,EAAe/I,OAAS,SAAgB/a,EAASgb,GAO7C,OANKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQ+jB,eAAyB/jB,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ+jB,eAClC,MAAtB/jB,EAAQqC,YAAsBrC,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqC,YACrD2Y,GAYX8I,EAAexI,gBAAkB,SAAyBtb,EAASgb,GAC/D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuI,EAAetI,OAAS,SAAgBC,EAAQhW,GACtCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAChGrI,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ+jB,cAAgBtI,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQqC,WAAaoZ,EAAON,SAC5B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8jB,EAAe9H,gBAAkB,SAAyBP,GAGtD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4I,EAAe7H,OAAS,SAAgBjc,GACpC,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACkB,MAAzBA,EAAQ+jB,eAAyB/jB,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQ+jB,eACjB,iCACW,MAAtB/jB,EAAQqC,YAAsBrC,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQqC,YACjB,8BACR,MAWXyhB,EAAexT,WAAa,SAAoB6L,GAC5C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGyc,eACxC,OAAO3H,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAKxC,OAJ4B,MAAxB3H,EAAO4H,gBACP/jB,EAAQ+jB,cAAgB3H,OAAOD,EAAO4H,gBACjB,MAArB5H,EAAO9Z,aACPrC,EAAQqC,WAAa+Z,OAAOD,EAAO9Z,aAChCrC,GAYX8jB,EAAexH,SAAW,SAAkBtc,EAASgY,GAC5CA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO4H,cAAgB,GACvB5H,EAAO9Z,WAAa,IAEK,MAAzBrC,EAAQ+jB,eAAyB/jB,EAAQib,eAAe,mBACxDkB,EAAO4H,cAAgB/jB,EAAQ+jB,eACT,MAAtB/jB,EAAQqC,YAAsBrC,EAAQib,eAAe,gBACrDkB,EAAO9Z,WAAarC,EAAQqC,YACzB8Z,GAUX2H,EAAepJ,UAAU+B,OAAS,WAC9B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoH,EA/MU,GAkNrBzc,EAAG2c,eAAkB,WAmBjB,SAASA,EAAexJ,GACpB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8MhD,OArMAwe,EAAetJ,UAAUqJ,cAAgB,GAQzCC,EAAetJ,UAAUuJ,QAAU,EAQnCD,EAAetJ,UAAUwJ,SAAW,GAUpCF,EAAejL,OAAS,SAAgByB,GACpC,OAAO,IAAIwJ,EAAexJ,IAY9BwJ,EAAejJ,OAAS,SAAgB/a,EAASgb,GAS7C,OARKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQ+jB,eAAyB/jB,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ+jB,eACrC,MAAnB/jB,EAAQikB,SAAmBjkB,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQikB,SACrC,MAApBjkB,EAAQkkB,UAAoBlkB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQkkB,UACrDlJ,GAYXgJ,EAAe1I,gBAAkB,SAAyBtb,EAASgb,GAC/D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCyI,EAAexI,OAAS,SAAgBC,EAAQhW,GACtCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAChGvI,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ+jB,cAAgBtI,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQikB,QAAUxI,EAAOuC,UACzB,MACJ,KAAK,EACDhe,EAAQkkB,SAAWzI,EAAON,SAC1B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXgkB,EAAehI,gBAAkB,SAAyBP,GAGtD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC8I,EAAe/H,OAAS,SAAgBjc,GACpC,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACkB,MAAzBA,EAAQ+jB,eAAyB/jB,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQ+jB,eACjB,iCACQ,MAAnB/jB,EAAQikB,SAAmBjkB,EAAQib,eAAe,aAC7CzC,EAAMyF,UAAUje,EAAQikB,SAClB,4BACS,MAApBjkB,EAAQkkB,UAAoBlkB,EAAQib,eAAe,cAC9CzC,EAAM0D,SAASlc,EAAQkkB,UACjB,4BACR,MAWXF,EAAe1T,WAAa,SAAoB6L,GAC5C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG2c,eACxC,OAAO7H,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAOxC,OAN4B,MAAxB7H,EAAO4H,gBACP/jB,EAAQ+jB,cAAgB3H,OAAOD,EAAO4H,gBACpB,MAAlB5H,EAAO8H,UACPjkB,EAAQikB,QAAU9H,EAAO8H,UAAY,GAClB,MAAnB9H,EAAO+H,WACPlkB,EAAQkkB,SAAW9H,OAAOD,EAAO+H,WAC9BlkB,GAYXgkB,EAAe1H,SAAW,SAAkBtc,EAASgY,GAC5CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAYb,OAXInE,EAAQuE,WACRJ,EAAO4H,cAAgB,GACvB5H,EAAO8H,QAAU,EACjB9H,EAAO+H,SAAW,IAEO,MAAzBlkB,EAAQ+jB,eAAyB/jB,EAAQib,eAAe,mBACxDkB,EAAO4H,cAAgB/jB,EAAQ+jB,eACZ,MAAnB/jB,EAAQikB,SAAmBjkB,EAAQib,eAAe,aAClDkB,EAAO8H,QAAUjkB,EAAQikB,SACL,MAApBjkB,EAAQkkB,UAAoBlkB,EAAQib,eAAe,cACnDkB,EAAO+H,SAAWlkB,EAAQkkB,UACvB/H,GAUX6H,EAAetJ,UAAU+B,OAAS,WAC9B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDsH,EArOU,GAwOrB3c,EAAGkF,oBAAuB,WAqCtB,SAASA,EAAoBiO,GACzB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAgnChD,OAvmCA+G,EAAoBmO,UAAUtK,cAAgB,GAQ9C7D,EAAoBmO,UAAUxI,YAAc,GAQ5C3F,EAAoBmO,UAAU/R,SAAW,EAQzC4D,EAAoBmO,UAAUxV,SAAW,KAQzCqH,EAAoBmO,UAAUtZ,UAAY,GAQ1CmL,EAAoBmO,UAAUjN,OAAS,EAQvClB,EAAoBmO,UAAUnN,MAAQ,EAQtChB,EAAoBmO,UAAUtN,eAAiB,EAQ/Cb,EAAoBmO,UAAUxK,UAAY,EAQ1C3D,EAAoBmO,UAAUvK,WAAa,EAQ3C5D,EAAoBmO,UAAU3M,UAAY,EAQ1CxB,EAAoBmO,UAAUhN,cAAgB,EAQ9CnB,EAAoBmO,UAAUkF,QAAU,GAQxCrT,EAAoBmO,UAAU9M,gBAAkB,EAQhDrB,EAAoBmO,UAAU5M,UAAY,EAQ1CvB,EAAoBmO,UAAUzM,oBAAsB,EAQpD1B,EAAoBmO,UAAUlN,UAAY,EAQ1CjB,EAAoBmO,UAAUtI,iBAAmB,EAQjD7F,EAAoBmO,UAAUmF,YAAc,EAQ5CtT,EAAoBmO,UAAUoF,eAAiB,EAQ/CvT,EAAoBmO,UAAUqF,UAAY,EAU1CxT,EAAoBwM,OAAS,SAAgByB,GACzC,OAAO,IAAIjO,EAAoBiO,IAYnCjO,EAAoBwO,OAAS,SAAgB/a,EAASgb,GA6ClD,OA5CKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQoQ,eAAyBpQ,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoQ,eACjC,MAAvBpQ,EAAQkS,aAAuBlS,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQkS,aACpC,MAApBlS,EAAQ2I,UAAoB3I,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ2I,UACnC,MAApB3I,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzF,MAArBvb,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WACtC,MAAlBpB,EAAQyN,QAAkBzN,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQyN,QACxC,MAAjBzN,EAAQuN,OAAiBvN,EAAQib,eAAe,UAChDD,EAAOE,OAA8B,IAAI6C,OAAO/d,EAAQuN,OAC9B,MAA1BvN,EAAQoN,gBAA0BpN,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQoN,gBAClC,MAArBpN,EAAQkQ,WAAqBlQ,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQkQ,WACjC,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,eACrDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQmQ,YACnC,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQ+N,WAC/B,MAAzB/N,EAAQ0N,eAAyB1N,EAAQib,eAAe,kBACxDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQ0N,eACrC,MAAnB1N,EAAQ4f,SAAmB5f,EAAQib,eAAe,YAClDD,EAAOE,OAA+B,KAAKC,OAAOnb,EAAQ4f,SAC/B,MAA3B5f,EAAQ4N,iBAA2B5N,EAAQib,eAAe,oBAC1DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQ4N,iBACpC,MAArB5N,EAAQ8N,WAAqB9N,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ8N,WAC5B,MAA/B9N,EAAQiO,qBAA+BjO,EAAQib,eAAe,wBAC9DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQiO,qBACpC,MAArBjO,EAAQwN,WAAqBxN,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK6C,OAAO/d,EAAQwN,WAC9B,MAA5BxN,EAAQoS,kBAA4BpS,EAAQib,eAAe,qBAC3DD,EAAOE,OAA+B,KAAKE,MAAMpb,EAAQoS,kBAClC,MAAvBpS,EAAQ6f,aAAuB7f,EAAQib,eAAe,gBACtDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ6f,aACjC,MAA1B7f,EAAQ8f,gBAA0B9f,EAAQib,eAAe,mBACzDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ8f,gBACtC,MAArB9f,EAAQ+f,WAAqB/f,EAAQib,eAAe,cACpDD,EAAOE,OAA+B,KAAK8C,QAAQhe,EAAQ+f,WACxD/E,GAYXzO,EAAoB+O,gBAAkB,SAAyBtb,EAASgb,GACpE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxChP,EAAoBiP,OAAS,SAAgBC,EAAQhW,GAC3CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkF,oBAChGkP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQoQ,cAAgBqL,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQkS,YAAcuJ,EAAON,SAC7B,MACJ,KAAK,EACDnb,EAAQ2I,SAAW8S,EAAOL,QAC1B,MACJ,KAAK,EACDpb,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,KAAK,EACDlb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQyN,OAASgO,EAAOuC,UACxB,MACJ,KAAK,EACDhe,EAAQuN,MAAQkO,EAAOsC,SACvB,MACJ,KAAK,EACD/d,EAAQoN,eAAiBqO,EAAOL,QAChC,MACJ,KAAK,EACDpb,EAAQkQ,UAAYuL,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQmQ,WAAasL,EAAOL,QAC5B,MACJ,KAAK,GACDpb,EAAQ+N,UAAY0N,EAAOL,QAC3B,MACJ,KAAK,GACDpb,EAAQ0N,cAAgB+N,EAAOL,QAC/B,MACJ,KAAK,GACDpb,EAAQ4f,QAAUnE,EAAON,SACzB,MACJ,KAAK,GACDnb,EAAQ4N,gBAAkB6N,EAAOL,QACjC,MACJ,KAAK,GACDpb,EAAQ8N,UAAY2N,EAAOuC,UAC3B,MACJ,KAAK,GACDhe,EAAQiO,oBAAsBwN,EAAOL,QACrC,MACJ,KAAK,GACDpb,EAAQwN,UAAYiO,EAAOsC,SAC3B,MACJ,KAAK,GACD/d,EAAQoS,iBAAmBqJ,EAAOL,QAClC,MACJ,KAAK,GACDpb,EAAQ6f,YAAcpE,EAAOuC,UAC7B,MACJ,KAAK,GACDhe,EAAQ8f,eAAiBrE,EAAOuC,UAChC,MACJ,KAAK,GACDhe,EAAQ+f,UAAYtE,EAAOuC,UAC3B,MACJ,QACIvC,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXuM,EAAoByP,gBAAkB,SAAyBP,GAG3D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC3O,EAAoB0P,OAAS,SAAgBjc,GACzC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA6B,MAAzBA,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQoQ,eACxB,MAAO,iCACf,GAA2B,MAAvBpQ,EAAQkS,aAAuBlS,EAAQib,eAAe,iBACjDzC,EAAM0D,SAASlc,EAAQkS,aACxB,MAAO,+BACf,GAAwB,MAApBlS,EAAQ2I,UAAoB3I,EAAQib,eAAe,YACnD,OAAQjb,EAAQ2I,UAChB,QACI,MAAO,gCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAAwB,MAApB3I,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,UAC/D,GAAInF,EACA,MAAO,YAAcA,EAE7B,GAAyB,MAArBC,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACxB,MAAO,6BACf,GAAsB,MAAlBpB,EAAQyN,QAAkBzN,EAAQib,eAAe,YAC5CzC,EAAMyF,UAAUje,EAAQyN,QACzB,MAAO,2BACf,GAAqB,MAAjBzN,EAAQuN,OAAiBvN,EAAQib,eAAe,UACnB,kBAAlBjb,EAAQuN,MACf,MAAO,yBACf,GAA8B,MAA1BvN,EAAQoN,gBAA0BpN,EAAQib,eAAe,kBACzD,OAAQjb,EAAQoN,gBAChB,QACI,MAAO,sCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAAyB,MAArBpN,EAAQkQ,WAAqBlQ,EAAQib,eAAe,aACpD,OAAQjb,EAAQkQ,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,cACrD,OAAQjb,EAAQmQ,YAChB,QACI,MAAO,kCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAyB,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,aACpD,OAAQjb,EAAQ+N,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAA6B,MAAzB/N,EAAQ0N,eAAyB1N,EAAQib,eAAe,iBACxD,OAAQjb,EAAQ0N,eAChB,QACI,MAAO,qCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAuB,MAAnB1N,EAAQ4f,SAAmB5f,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQ4f,SACxB,MAAO,2BACf,GAA+B,MAA3B5f,EAAQ4N,iBAA2B5N,EAAQib,eAAe,mBAC1D,OAAQjb,EAAQ4N,iBAChB,QACI,MAAO,uCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAyB,MAArB5N,EAAQ8N,WAAqB9N,EAAQib,eAAe,eAC/CzC,EAAMyF,UAAUje,EAAQ8N,WACzB,MAAO,8BACf,GAAmC,MAA/B9N,EAAQiO,qBAA+BjO,EAAQib,eAAe,uBAC9D,OAAQjb,EAAQiO,qBAChB,QACI,MAAO,2CACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAAyB,MAArBjO,EAAQwN,WAAqBxN,EAAQib,eAAe,cACnB,kBAAtBjb,EAAQwN,UACf,MAAO,6BACf,GAAgC,MAA5BxN,EAAQoS,kBAA4BpS,EAAQib,eAAe,oBAC3D,OAAQjb,EAAQoS,kBAChB,QACI,MAAO,wCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAA2B,MAAvBpS,EAAQ6f,aAAuB7f,EAAQib,eAAe,iBACjDzC,EAAMyF,UAAUje,EAAQ6f,aAClB,gCACe,MAA1B7f,EAAQ8f,gBAA0B9f,EAAQib,eAAe,oBACpDzC,EAAMyF,UAAUje,EAAQ8f,gBAClB,mCACU,MAArB9f,EAAQ+f,WAAqB/f,EAAQib,eAAe,eAC/CzC,EAAMyF,UAAUje,EAAQ+f,WAClB,8BACR,MAWXxT,EAAoB+D,WAAa,SAAoB6L,GACjD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkF,oBACxC,OAAO4P,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkF,oBAKxC,OAJ4B,MAAxB4P,EAAO/L,gBACPpQ,EAAQoQ,cAAgBgM,OAAOD,EAAO/L,gBAChB,MAAtB+L,EAAOjK,cACPlS,EAAQkS,YAAckK,OAAOD,EAAOjK,cAChCiK,EAAOxT,UACf,IAAK,kBACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,EACD3I,EAAQ2I,SAAW,EACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GACnB,MACJ,IAAK,MACL,KAAK,GACD3I,EAAQ2I,SAAW,GAGvB,GAAuB,MAAnBwT,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,kEACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAQ7E,OANwB,MAApBiX,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACjB,MAAjB+a,EAAO1O,SACPzN,EAAQyN,OAAS0O,EAAO1O,SAAW,GACnB,MAAhB0O,EAAO5O,QACPvN,EAAQuN,MAAQwC,OAAOoM,EAAO5O,QAC1B4O,EAAO/O,gBACf,IAAK,cACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,eACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,iBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,gBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,gBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,8BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,gBACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,EACDpN,EAAQoN,eAAiB,EACzB,MACJ,IAAK,4BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,8BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,gBACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,4BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,4BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,8BACL,KAAK,GACDpN,EAAQoN,eAAiB,GACzB,MACJ,IAAK,qBACL,KAAK,GACDpN,EAAQoN,eAAiB,GAG7B,OAAQ+O,EAAOjM,WACf,IAAK,YACL,KAAK,EACDlQ,EAAQkQ,UAAY,EACpB,MACJ,IAAK,QACL,KAAK,EACDlQ,EAAQkQ,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDlQ,EAAQkQ,UAAY,EAGxB,OAAQiM,EAAOhM,YACf,IAAK,aACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,UACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,WACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,gBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,gBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,oBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,cACL,KAAK,EACDnQ,EAAQmQ,WAAa,EACrB,MACJ,IAAK,qBACL,KAAK,EACDnQ,EAAQmQ,WAAa,EAGzB,OAAQgM,EAAOpO,WACf,IAAK,aACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,WACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,iBACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EACpB,MACJ,IAAK,eACL,KAAK,EACD/N,EAAQ+N,UAAY,EAGxB,OAAQoO,EAAOzO,eACf,IAAK,aACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EACxB,MACJ,IAAK,SACL,KAAK,EACD1N,EAAQ0N,cAAgB,EAK5B,OAFsB,MAAlByO,EAAOyD,UACP5f,EAAQ4f,QAAUxD,OAAOD,EAAOyD,UAC5BzD,EAAOvO,iBACf,IAAK,aACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAC1B,MACJ,IAAK,QACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAC1B,MACJ,IAAK,QACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAC1B,MACJ,IAAK,QACL,KAAK,EACD5N,EAAQ4N,gBAAkB,EAK9B,OAFwB,MAApBuO,EAAOrO,YACP9N,EAAQ8N,UAAYqO,EAAOrO,YAAc,GACrCqO,EAAOlO,qBACf,IAAK,aACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,iBACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,WACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,iBACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,iBACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,mCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,oCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,kCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,mCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,kCACL,KAAK,EACDjO,EAAQiO,oBAAsB,EAC9B,MACJ,IAAK,mCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,iCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,kCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,kCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,mCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,iCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,kCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,wCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAC9B,MACJ,IAAK,yCACL,KAAK,GACDjO,EAAQiO,oBAAsB,GAKlC,OAFwB,MAApBkO,EAAO3O,YACPxN,EAAQwN,UAAYuC,OAAOoM,EAAO3O,YAC9B2O,EAAO/J,kBACf,IAAK,cACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,oBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,kBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,8BACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,8BACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,kBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,gBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,YACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAC3B,MACJ,IAAK,oBACL,KAAK,EACDpS,EAAQoS,iBAAmB,EAS/B,OAN0B,MAAtB+J,EAAO0D,cACP7f,EAAQ6f,YAAc1D,EAAO0D,cAAgB,GACpB,MAAzB1D,EAAO2D,iBACP9f,EAAQ8f,eAAiB3D,EAAO2D,iBAAmB,GAC/B,MAApB3D,EAAO4D,YACP/f,EAAQ+f,UAAY5D,EAAO4D,YAAc,GACtC/f,GAYXuM,EAAoB+P,SAAW,SAAkBtc,EAASgY,GACjDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAkEb,OAjEInE,EAAQuE,WACRJ,EAAO/L,cAAgB,GACvB+L,EAAOjK,YAAc,GACrBiK,EAAOxT,SAAWqP,EAAQwE,QAAUJ,OAAS,kBAAoB,EACjED,EAAOjX,SAAW,KAClBiX,EAAO/a,UAAY,GACnB+a,EAAO1O,OAAS,EAChB0O,EAAO5O,MAAQ,EACf4O,EAAO/O,eAAiB4K,EAAQwE,QAAUJ,OAAS,cAAgB,EACnED,EAAOjM,UAAY8H,EAAQwE,QAAUJ,OAAS,YAAc,EAC5DD,EAAOhM,WAAa6H,EAAQwE,QAAUJ,OAAS,aAAe,EAC9DD,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS,aAAe,EAC7DD,EAAOzO,cAAgBsK,EAAQwE,QAAUJ,OAAS,aAAe,EACjED,EAAOyD,QAAU,GACjBzD,EAAOvO,gBAAkBoK,EAAQwE,QAAUJ,OAAS,aAAe,EACnED,EAAOrO,UAAY,EACnBqO,EAAOlO,oBAAsB+J,EAAQwE,QAAUJ,OAAS,aAAe,EACvED,EAAO3O,UAAY,EACnB2O,EAAO/J,iBAAmB4F,EAAQwE,QAAUJ,OAAS,cAAgB,EACrED,EAAO0D,YAAc,EACrB1D,EAAO2D,eAAiB,EACxB3D,EAAO4D,UAAY,GAEM,MAAzB/f,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACxDkB,EAAO/L,cAAgBpQ,EAAQoQ,eACR,MAAvBpQ,EAAQkS,aAAuBlS,EAAQib,eAAe,iBACtDkB,EAAOjK,YAAclS,EAAQkS,aACT,MAApBlS,EAAQ2I,UAAoB3I,EAAQib,eAAe,cACnDkB,EAAOxT,SAAWqP,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGH,aAAalH,EAAQ2I,UAAY3I,EAAQ2I,UACxF,MAApB3I,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC5D,MAArBhY,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACT,MAAlBpB,EAAQyN,QAAkBzN,EAAQib,eAAe,YACjDkB,EAAO1O,OAASzN,EAAQyN,QACP,MAAjBzN,EAAQuN,OAAiBvN,EAAQib,eAAe,WAChDkB,EAAO5O,MAAQyK,EAAQkG,OAASC,SAASne,EAAQuN,OAAS6O,OAAOpc,EAAQuN,OAASvN,EAAQuN,OAChE,MAA1BvN,EAAQoN,gBAA0BpN,EAAQib,eAAe,oBACzDkB,EAAO/O,eAAiB4K,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGoF,mBAAmBzM,EAAQoN,gBAAkBpN,EAAQoN,gBACzG,MAArBpN,EAAQkQ,WAAqBlQ,EAAQib,eAAe,eACpDkB,EAAOjM,UAAY8H,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGqF,cAAc1M,EAAQkQ,WAAalQ,EAAQkQ,WACzF,MAAtBlQ,EAAQmQ,YAAsBnQ,EAAQib,eAAe,gBACrDkB,EAAOhM,WAAa6H,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGsF,eAAe3M,EAAQmQ,YAAcnQ,EAAQmQ,YAC7F,MAArBnQ,EAAQ+N,WAAqB/N,EAAQib,eAAe,eACpDkB,EAAOpO,UAAYiK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGyF,cAAc9M,EAAQ+N,WAAa/N,EAAQ+N,WACtF,MAAzB/N,EAAQ0N,eAAyB1N,EAAQib,eAAe,mBACxDkB,EAAOzO,cAAgBsK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGuF,kBAAkB5M,EAAQ0N,eAAiB1N,EAAQ0N,eACxG,MAAnB1N,EAAQ4f,SAAmB5f,EAAQib,eAAe,aAClDkB,EAAOyD,QAAU5f,EAAQ4f,SACE,MAA3B5f,EAAQ4N,iBAA2B5N,EAAQib,eAAe,qBAC1DkB,EAAOvO,gBAAkBoK,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGwF,oBAAoB7M,EAAQ4N,iBAAmB5N,EAAQ4N,iBAC5G,MAArB5N,EAAQ8N,WAAqB9N,EAAQib,eAAe,eACpDkB,EAAOrO,UAAY9N,EAAQ8N,WACI,MAA/B9N,EAAQiO,qBAA+BjO,EAAQib,eAAe,yBAC9DkB,EAAOlO,oBAAsB+J,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG2F,wBAAwBhN,EAAQiO,qBAAuBjO,EAAQiO,qBACxH,MAArBjO,EAAQwN,WAAqBxN,EAAQib,eAAe,eACpDkB,EAAO3O,UAAYwK,EAAQkG,OAASC,SAASne,EAAQwN,WAAa4O,OAAOpc,EAAQwN,WAAaxN,EAAQwN,WAC1E,MAA5BxN,EAAQoS,kBAA4BpS,EAAQib,eAAe,sBAC3DkB,EAAO/J,iBAAmB4F,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG4F,qBAAqBjN,EAAQoS,kBAAoBpS,EAAQoS,kBAC7G,MAAvBpS,EAAQ6f,aAAuB7f,EAAQib,eAAe,iBACtDkB,EAAO0D,YAAc7f,EAAQ6f,aACH,MAA1B7f,EAAQ8f,gBAA0B9f,EAAQib,eAAe,oBACzDkB,EAAO2D,eAAiB9f,EAAQ8f,gBACX,MAArB9f,EAAQ+f,WAAqB/f,EAAQib,eAAe,eACpDkB,EAAO4D,UAAY/f,EAAQ+f,WACxB5D,GAUX5P,EAAoBmO,UAAU+B,OAAS,WACnC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDnQ,EAzpCe,GA4pC1BlF,EAAG8c,oBAAuB,WAkBtB,SAASA,EAAoB3J,GACzB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAyLhD,OAhLA2e,EAAoBzJ,UAAUtK,cAAgB,GAQ9C+T,EAAoBzJ,UAAUtU,QAAU,GAUxC+d,EAAoBpL,OAAS,SAAgByB,GACzC,OAAO,IAAI2J,EAAoB3J,IAYnC2J,EAAoBpJ,OAAS,SAAgB/a,EAASgb,GAOlD,OANKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQoQ,eAAyBpQ,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoQ,eACrC,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoG,SACrD4U,GAYXmJ,EAAoB7I,gBAAkB,SAAyBtb,EAASgb,GACpE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4I,EAAoB3I,OAAS,SAAgBC,EAAQhW,GAC3CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8c,oBAChG1I,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQoQ,cAAgBqL,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQoG,QAAUqV,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmkB,EAAoBnI,gBAAkB,SAAyBP,GAG3D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiJ,EAAoBlI,OAAS,SAAgBjc,GACzC,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACkB,MAAzBA,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQoQ,eACjB,iCACQ,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQoG,SACjB,2BACR,MAWX+d,EAAoB7T,WAAa,SAAoB6L,GACjD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8c,oBACxC,OAAOhI,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8c,oBAKxC,OAJ4B,MAAxBhI,EAAO/L,gBACPpQ,EAAQoQ,cAAgBgM,OAAOD,EAAO/L,gBACpB,MAAlB+L,EAAO/V,UACPpG,EAAQoG,QAAUgW,OAAOD,EAAO/V,UAC7BpG,GAYXmkB,EAAoB7H,SAAW,SAAkBtc,EAASgY,GACjDA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO/L,cAAgB,GACvB+L,EAAO/V,QAAU,IAEQ,MAAzBpG,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACxDkB,EAAO/L,cAAgBpQ,EAAQoQ,eACZ,MAAnBpQ,EAAQoG,SAAmBpG,EAAQib,eAAe,aAClDkB,EAAO/V,QAAUpG,EAAQoG,SACtB+V,GAUXgI,EAAoBzJ,UAAU+B,OAAS,WACnC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyH,EA/Me,GAkN1B9c,EAAG+c,oBAAuB,WA2BtB,SAASA,EAAoB5J,GACzB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwjChD,OA/iCA4e,EAAoB1J,UAAUtZ,UAAY,GAQ1CgjB,EAAoB1J,UAAU2J,YAAc,GAQ5CD,EAAoB1J,UAAU4J,mBAAqB,GAQnDF,EAAoB1J,UAAU6J,mBAAqB,GAQnDH,EAAoB1J,UAAUE,YAAc,EAQ5CwJ,EAAoB1J,UAAUG,mBAAqB,EAQnDuJ,EAAoB1J,UAAU8J,cAAgB,KAQ9CJ,EAAoB1J,UAAU+J,aAAe,KAQ7CL,EAAoB1J,UAAUhb,OAAS,EAQvC0kB,EAAoB1J,UAAUgK,QAAUlM,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQtF4F,EAAoB1J,UAAUiK,sBAAwB,GAUtDP,EAAoBrL,OAAS,SAAgByB,GACzC,OAAO,IAAI4J,EAAoB5J,IAYnC4J,EAAoBrJ,OAAS,SAAgB/a,EAASgb,GAyBlD,OAxBKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WACjC,MAAvBpB,EAAQqkB,aAAuBrkB,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqkB,aAC1B,MAA9BrkB,EAAQskB,oBAA8BtkB,EAAQib,eAAe,uBAC7DD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQskB,oBAC1B,MAA9BtkB,EAAQukB,oBAA8BvkB,EAAQib,eAAe,uBAC7DD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQukB,oBACjC,MAAvBvkB,EAAQ4a,aAAuB5a,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ4a,aACzB,MAA9B5a,EAAQ6a,oBAA8B7a,EAAQib,eAAe,uBAC7DD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQ6a,oBAC9B,MAAzB7a,EAAQwkB,eAAyBxkB,EAAQib,eAAe,kBACxDvC,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAAmB7J,OAAO/a,EAAQwkB,cAAexJ,EAAOE,OAA8B,IAAIuF,QAAQlF,SACpH,MAAxBvb,EAAQykB,cAAwBzkB,EAAQib,eAAe,iBACvDvC,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAAkB9J,OAAO/a,EAAQykB,aAAczJ,EAAOE,OAA8B,IAAIuF,QAAQlF,SACxH,MAAlBvb,EAAQN,QAAkBM,EAAQib,eAAe,WACjDD,EAAOE,OAA+B,IAAIE,MAAMpb,EAAQN,QACrC,MAAnBM,EAAQ0kB,SAAmB1kB,EAAQib,eAAe,YAClDD,EAAOE,OAA+B,IAAIuD,QAAQze,EAAQ0kB,SACzB,MAAjC1kB,EAAQ2kB,uBAAiC3kB,EAAQib,eAAe,0BAChED,EAAOE,OAA+B,IAAIC,OAAOnb,EAAQ2kB,uBACtD3J,GAYXoJ,EAAoB9I,gBAAkB,SAAyBtb,EAASgb,GACpE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6I,EAAoB5I,OAAS,SAAgBC,EAAQhW,GAC3CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAChG3I,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,KAAK,EACDnb,EAAQqkB,YAAc5I,EAAON,SAC7B,MACJ,KAAK,EACDnb,EAAQskB,mBAAqB7I,EAAON,SACpC,MACJ,KAAK,EACDnb,EAAQukB,mBAAqB9I,EAAON,SACpC,MACJ,KAAK,EACDnb,EAAQ4a,YAAca,EAAOL,QAC7B,MACJ,KAAK,EACDpb,EAAQ6a,mBAAqBY,EAAOL,QACpC,MACJ,KAAK,EACDpb,EAAQwkB,cAAgB9L,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAAmBpJ,OAAOC,EAAQA,EAAOP,UAC3G,MACJ,KAAK,EACDlb,EAAQykB,aAAe/L,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAAkBrJ,OAAOC,EAAQA,EAAOP,UACzG,MACJ,KAAK,GACDlb,EAAQN,OAAS+b,EAAOL,QACxB,MACJ,KAAK,GACDpb,EAAQ0kB,QAAUjJ,EAAOgD,UACzB,MACJ,KAAK,GACDze,EAAQ2kB,sBAAwBlJ,EAAON,SACvC,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXokB,EAAoBpI,gBAAkB,SAAyBP,GAG3D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkJ,EAAoBnI,OAAS,SAAgBjc,GACzC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACxB,MAAO,6BACf,GAA2B,MAAvBpB,EAAQqkB,aAAuBrkB,EAAQib,eAAe,iBACjDzC,EAAM0D,SAASlc,EAAQqkB,aACxB,MAAO,+BACf,GAAkC,MAA9BrkB,EAAQskB,oBAA8BtkB,EAAQib,eAAe,wBACxDzC,EAAM0D,SAASlc,EAAQskB,oBACxB,MAAO,sCACf,GAAkC,MAA9BtkB,EAAQukB,oBAA8BvkB,EAAQib,eAAe,wBACxDzC,EAAM0D,SAASlc,EAAQukB,oBACxB,MAAO,sCACf,GAA2B,MAAvBvkB,EAAQ4a,aAAuB5a,EAAQib,eAAe,eACtD,OAAQjb,EAAQ4a,aAChB,QACI,MAAO,mCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAkC,MAA9B5a,EAAQ6a,oBAA8B7a,EAAQib,eAAe,sBAC7D,OAAQjb,EAAQ6a,oBAChB,QACI,MAAO,0CACX,KAAK,EACL,KAAK,EACL,KAAK,GAIL,IAKI9a,EANR,GAA6B,MAAzBC,EAAQwkB,eAAyBxkB,EAAQib,eAAe,mBACpDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAAmB3I,OAAOjc,EAAQwkB,gBAEpF,MAAO,iBAAmBzkB,EAElC,GAA4B,MAAxBC,EAAQykB,cAAwBzkB,EAAQib,eAAe,kBACnDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAAkB5I,OAAOjc,EAAQykB,eAEnF,MAAO,gBAAkB1kB,EAEjC,GAAsB,MAAlBC,EAAQN,QAAkBM,EAAQib,eAAe,UACjD,OAAQjb,EAAQN,QAChB,QACI,MAAO,8BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAuB,MAAnBM,EAAQ0kB,UAAmB1kB,EAAQib,eAAe,YAC7CzC,EAAMyF,UAAUje,EAAQ0kB,UAAc1kB,EAAQ0kB,SAAWlM,EAAMyF,UAAUje,EAAQ0kB,QAAQhG,MAAQlG,EAAMyF,UAAUje,EAAQ0kB,QAAQ/F,MAErG,MAAjC3e,EAAQ2kB,uBAAiC3kB,EAAQib,eAAe,2BAC3DzC,EAAM0D,SAASlc,EAAQ2kB,uBACjB,yCACR,KAJQ,kCAenBP,EAAoB9T,WAAa,SAAoB6L,GACjD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+c,oBACxC,OAAOjI,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBASxC,OARwB,MAApBjI,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YACZ,MAAtB+a,EAAOkI,cACPrkB,EAAQqkB,YAAcjI,OAAOD,EAAOkI,cACP,MAA7BlI,EAAOmI,qBACPtkB,EAAQskB,mBAAqBlI,OAAOD,EAAOmI,qBACd,MAA7BnI,EAAOoI,qBACPvkB,EAAQukB,mBAAqBnI,OAAOD,EAAOoI,qBACvCpI,EAAOvB,aACf,IAAK,yBACL,KAAK,EACD5a,EAAQ4a,YAAc,EACtB,MACJ,IAAK,iBACL,KAAK,EACD5a,EAAQ4a,YAAc,EACtB,MACJ,IAAK,YACL,KAAK,EACD5a,EAAQ4a,YAAc,EAG1B,OAAQuB,EAAOtB,oBACf,IAAK,UACL,KAAK,EACD7a,EAAQ6a,mBAAqB,EAC7B,MACJ,IAAK,SACL,KAAK,EACD7a,EAAQ6a,mBAAqB,EAC7B,MACJ,IAAK,aACL,KAAK,EACD7a,EAAQ6a,mBAAqB,EAGjC,GAA4B,MAAxBsB,EAAOqI,cAAuB,CAC9B,GAAoC,kBAAzBrI,EAAOqI,cACd,MAAM9D,UAAU,uEACpB1gB,EAAQwkB,cAAgB9L,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAAmBtU,WAAW6L,EAAOqI,eAE3G,GAA2B,MAAvBrI,EAAOsI,aAAsB,CAC7B,GAAmC,kBAAxBtI,EAAOsI,aACd,MAAM/D,UAAU,sEACpB1gB,EAAQykB,aAAe/L,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAAkBvU,WAAW6L,EAAOsI,cAEzG,OAAQtI,EAAOzc,QACf,IAAK,aACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,kBACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,eACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,mBACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,gBACL,KAAK,EACDM,EAAQN,OAAS,EAcrB,OAXsB,MAAlByc,EAAOuI,UACHlM,EAAM+F,MACLve,EAAQ0kB,QAAUlM,EAAM+F,KAAKK,UAAUzC,EAAOuI,UAAU7F,UAAW,EACrC,kBAAnB1C,EAAOuI,QACnB1kB,EAAQ0kB,QAAUzU,SAASkM,EAAOuI,QAAS,IACZ,kBAAnBvI,EAAOuI,QACnB1kB,EAAQ0kB,QAAUvI,EAAOuI,QACM,kBAAnBvI,EAAOuI,UACnB1kB,EAAQ0kB,QAAU,IAAIlM,EAAMsG,SAAS3C,EAAOuI,QAAQhG,MAAQ,EAAGvC,EAAOuI,QAAQ/F,OAAS,GAAGI,aAC9D,MAAhC5C,EAAOwI,wBACP3kB,EAAQ2kB,sBAAwBvI,OAAOD,EAAOwI,wBAC3C3kB,GAYXokB,EAAoB9H,SAAW,SAAkBtc,EAASgY,GACjDA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAUlB,GATAJ,EAAO/a,UAAY,GACnB+a,EAAOkI,YAAc,GACrBlI,EAAOmI,mBAAqB,GAC5BnI,EAAOoI,mBAAqB,GAC5BpI,EAAOvB,YAAc5C,EAAQwE,QAAUJ,OAAS,yBAA2B,EAC3ED,EAAOtB,mBAAqB7C,EAAQwE,QAAUJ,OAAS,UAAY,EACnED,EAAOqI,cAAgB,KACvBrI,EAAOsI,aAAe,KACtBtI,EAAOzc,OAASsY,EAAQwE,QAAUJ,OAAS,aAAe,EACtD5D,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOuI,QAAU1M,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE3G7C,EAAOuI,QAAU1M,EAAQiH,QAAU7C,OAAS,IAAM,EACtDD,EAAOwI,sBAAwB,GA2BnC,OAzByB,MAArB3kB,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACJ,MAAvBpB,EAAQqkB,aAAuBrkB,EAAQib,eAAe,iBACtDkB,EAAOkI,YAAcrkB,EAAQqkB,aACC,MAA9BrkB,EAAQskB,oBAA8BtkB,EAAQib,eAAe,wBAC7DkB,EAAOmI,mBAAqBtkB,EAAQskB,oBACN,MAA9BtkB,EAAQukB,oBAA8BvkB,EAAQib,eAAe,wBAC7DkB,EAAOoI,mBAAqBvkB,EAAQukB,oBACb,MAAvBvkB,EAAQ4a,aAAuB5a,EAAQib,eAAe,iBACtDkB,EAAOvB,YAAc5C,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG2R,gBAAgBhZ,EAAQ4a,aAAe5a,EAAQ4a,aACvF,MAA9B5a,EAAQ6a,oBAA8B7a,EAAQib,eAAe,wBAC7DkB,EAAOtB,mBAAqB7C,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG4R,uBAAuBjZ,EAAQ6a,oBAAsB7a,EAAQ6a,oBACjH,MAAzB7a,EAAQwkB,eAAyBxkB,EAAQib,eAAe,mBACxDkB,EAAOqI,cAAgB9L,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAAmBtI,SAAStc,EAAQwkB,cAAexM,IAC5F,MAAxBhY,EAAQykB,cAAwBzkB,EAAQib,eAAe,kBACvDkB,EAAOsI,aAAe/L,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAAkBvI,SAAStc,EAAQykB,aAAczM,IAC/F,MAAlBhY,EAAQN,QAAkBM,EAAQib,eAAe,YACjDkB,EAAOzc,OAASsY,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGiS,kBAAkBtZ,EAAQN,QAAUM,EAAQN,QAC1F,MAAnBM,EAAQ0kB,SAAmB1kB,EAAQib,eAAe,aACnB,kBAApBjb,EAAQ0kB,QACfvI,EAAOuI,QAAU1M,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ0kB,SAAW1kB,EAAQ0kB,QAE9EvI,EAAOuI,QAAU1M,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ0kB,SAAW1M,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ0kB,QAAQhG,MAAQ,EAAG1e,EAAQ0kB,QAAQ/F,OAAS,GAAGI,WAAa/e,EAAQ0kB,SAC/L,MAAjC1kB,EAAQ2kB,uBAAiC3kB,EAAQib,eAAe,2BAChEkB,EAAOwI,sBAAwB3kB,EAAQ2kB,uBACpCxI,GAUXiI,EAAoB1J,UAAU+B,OAAS,WACnC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAG1D0H,EAAoBQ,mBAAsB,WA0BtC,SAASA,EAAmBpK,GACxB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAiWhD,OAxVAof,EAAmBlK,UAAUoK,OAAS,GAQtCF,EAAmBlK,UAAU1Y,SAAW,GAQxC4iB,EAAmBlK,UAAUqK,SAAW,GAQxCH,EAAmBlK,UAAUsK,OAAS,GAQtCJ,EAAmBlK,UAAUuK,OAAS,GAQtCL,EAAmBlK,UAAUwK,OAAS,GAQtCN,EAAmBlK,UAAUyK,OAAS,GAQtCP,EAAmBlK,UAAU0K,SAAW,GAQxCR,EAAmBlK,UAAU2K,gBAAkB,GAQ/CT,EAAmBlK,UAAU4K,MAAQ,GAUrCV,EAAmB7L,OAAS,SAAgByB,GACxC,OAAO,IAAIoK,EAAmBpK,IAYlCoK,EAAmB7J,OAAS,SAAgB/a,EAASgb,GAuBjD,OAtBKA,IACDA,EAAS1C,EAAQS,UACC,MAAlB/Y,EAAQ8kB,QAAkB9kB,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ8kB,QACpC,MAApB9kB,EAAQgC,UAAoBhC,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQgC,UACpC,MAApBhC,EAAQ+kB,UAAoB/kB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ+kB,UACtC,MAAlB/kB,EAAQglB,QAAkBhlB,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQglB,QACtC,MAAlBhlB,EAAQilB,QAAkBjlB,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQilB,QACtC,MAAlBjlB,EAAQklB,QAAkBllB,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQklB,QACtC,MAAlBllB,EAAQmlB,QAAkBnlB,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQmlB,QACpC,MAApBnlB,EAAQolB,UAAoBplB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQolB,UAC7B,MAA3BplB,EAAQqlB,iBAA2BrlB,EAAQib,eAAe,oBAC1DD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQqlB,iBACvC,MAAjBrlB,EAAQslB,OAAiBtlB,EAAQib,eAAe,UAChDD,EAAOE,OAA+B,IAAIC,OAAOnb,EAAQslB,OACtDtK,GAYX4J,EAAmBtJ,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqJ,EAAmBpJ,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBACpHnJ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ8kB,OAASrJ,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQgC,SAAWyZ,EAAON,SAC1B,MACJ,KAAK,EACDnb,EAAQ+kB,SAAWtJ,EAAON,SAC1B,MACJ,KAAK,EACDnb,EAAQglB,OAASvJ,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQilB,OAASxJ,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQklB,OAASzJ,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQmlB,OAAS1J,EAAON,SACxB,MACJ,KAAK,EACDnb,EAAQolB,SAAW3J,EAAON,SAC1B,MACJ,KAAK,EACDnb,EAAQqlB,gBAAkB5J,EAAON,SACjC,MACJ,KAAK,GACDnb,EAAQslB,MAAQ7J,EAAON,SACvB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4kB,EAAmB5I,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0J,EAAmB3I,OAAS,SAAgBjc,GACxC,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACW,MAAlBA,EAAQ8kB,QAAkB9kB,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQ8kB,QACjB,0BACS,MAApB9kB,EAAQgC,UAAoBhC,EAAQib,eAAe,cAC9CzC,EAAM0D,SAASlc,EAAQgC,UACjB,4BACS,MAApBhC,EAAQ+kB,UAAoB/kB,EAAQib,eAAe,cAC9CzC,EAAM0D,SAASlc,EAAQ+kB,UACjB,4BACO,MAAlB/kB,EAAQglB,QAAkBhlB,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQglB,QACjB,0BACO,MAAlBhlB,EAAQilB,QAAkBjlB,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQilB,QACjB,0BACO,MAAlBjlB,EAAQklB,QAAkBllB,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQklB,QACjB,0BACO,MAAlBllB,EAAQmlB,QAAkBnlB,EAAQib,eAAe,YAC5CzC,EAAM0D,SAASlc,EAAQmlB,QACjB,0BACS,MAApBnlB,EAAQolB,UAAoBplB,EAAQib,eAAe,cAC9CzC,EAAM0D,SAASlc,EAAQolB,UACjB,4BACgB,MAA3BplB,EAAQqlB,iBAA2BrlB,EAAQib,eAAe,qBACrDzC,EAAM0D,SAASlc,EAAQqlB,iBACjB,mCACM,MAAjBrlB,EAAQslB,OAAiBtlB,EAAQib,eAAe,WAC3CzC,EAAM0D,SAASlc,EAAQslB,OACjB,yBACR,MAWXV,EAAmBtU,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAC5D,OAAOzI,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBQ,mBAqB5D,OApBqB,MAAjBzI,EAAO2I,SACP9kB,EAAQ8kB,OAAS1I,OAAOD,EAAO2I,SACZ,MAAnB3I,EAAOna,WACPhC,EAAQgC,SAAWoa,OAAOD,EAAOna,WACd,MAAnBma,EAAO4I,WACP/kB,EAAQ+kB,SAAW3I,OAAOD,EAAO4I,WAChB,MAAjB5I,EAAO6I,SACPhlB,EAAQglB,OAAS5I,OAAOD,EAAO6I,SACd,MAAjB7I,EAAO8I,SACPjlB,EAAQilB,OAAS7I,OAAOD,EAAO8I,SACd,MAAjB9I,EAAO+I,SACPllB,EAAQklB,OAAS9I,OAAOD,EAAO+I,SACd,MAAjB/I,EAAOgJ,SACPnlB,EAAQmlB,OAAS/I,OAAOD,EAAOgJ,SACZ,MAAnBhJ,EAAOiJ,WACPplB,EAAQolB,SAAWhJ,OAAOD,EAAOiJ,WACP,MAA1BjJ,EAAOkJ,kBACPrlB,EAAQqlB,gBAAkBjJ,OAAOD,EAAOkJ,kBACxB,MAAhBlJ,EAAOmJ,QACPtlB,EAAQslB,MAAQlJ,OAAOD,EAAOmJ,QAC3BtlB,GAYX4kB,EAAmBtI,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAiCb,OAhCInE,EAAQuE,WACRJ,EAAO2I,OAAS,GAChB3I,EAAOna,SAAW,GAClBma,EAAO4I,SAAW,GAClB5I,EAAO6I,OAAS,GAChB7I,EAAO8I,OAAS,GAChB9I,EAAO+I,OAAS,GAChB/I,EAAOgJ,OAAS,GAChBhJ,EAAOiJ,SAAW,GAClBjJ,EAAOkJ,gBAAkB,GACzBlJ,EAAOmJ,MAAQ,IAEG,MAAlBtlB,EAAQ8kB,QAAkB9kB,EAAQib,eAAe,YACjDkB,EAAO2I,OAAS9kB,EAAQ8kB,QACJ,MAApB9kB,EAAQgC,UAAoBhC,EAAQib,eAAe,cACnDkB,EAAOna,SAAWhC,EAAQgC,UACN,MAApBhC,EAAQ+kB,UAAoB/kB,EAAQib,eAAe,cACnDkB,EAAO4I,SAAW/kB,EAAQ+kB,UACR,MAAlB/kB,EAAQglB,QAAkBhlB,EAAQib,eAAe,YACjDkB,EAAO6I,OAAShlB,EAAQglB,QACN,MAAlBhlB,EAAQilB,QAAkBjlB,EAAQib,eAAe,YACjDkB,EAAO8I,OAASjlB,EAAQilB,QACN,MAAlBjlB,EAAQklB,QAAkBllB,EAAQib,eAAe,YACjDkB,EAAO+I,OAASllB,EAAQklB,QACN,MAAlBllB,EAAQmlB,QAAkBnlB,EAAQib,eAAe,YACjDkB,EAAOgJ,OAASnlB,EAAQmlB,QACJ,MAApBnlB,EAAQolB,UAAoBplB,EAAQib,eAAe,cACnDkB,EAAOiJ,SAAWplB,EAAQolB,UACC,MAA3BplB,EAAQqlB,iBAA2BrlB,EAAQib,eAAe,qBAC1DkB,EAAOkJ,gBAAkBrlB,EAAQqlB,iBAChB,MAAjBrlB,EAAQslB,OAAiBtlB,EAAQib,eAAe,WAChDkB,EAAOmJ,MAAQtlB,EAAQslB,OACpBnJ,GAUXyI,EAAmBlK,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkI,EA/X+B,GAkY1CR,EAAoBS,kBAAqB,WAmBrC,SAASA,EAAkBrK,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8MhD,OArMAqf,EAAkBnK,UAAU6K,KAAO,GAQnCV,EAAkBnK,UAAU8K,KAAO,EAQnCX,EAAkBnK,UAAU+K,SAAW,EAUvCZ,EAAkB9L,OAAS,SAAgByB,GACvC,OAAO,IAAIqK,EAAkBrK,IAYjCqK,EAAkB9J,OAAS,SAAgB/a,EAASgb,GAShD,OARKA,IACDA,EAAS1C,EAAQS,UACD,MAAhB/Y,EAAQulB,MAAgBvlB,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQulB,MACxC,MAAhBvlB,EAAQwlB,MAAgBxlB,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQwlB,MACrC,MAApBxlB,EAAQylB,UAAoBzlB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQylB,UACtDzK,GAYX6J,EAAkBvJ,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCsJ,EAAkBrJ,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBACpHpJ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQulB,KAAO9J,EAAON,SACtB,MACJ,KAAK,EACDnb,EAAQwlB,KAAO/J,EAAOuC,UACtB,MACJ,KAAK,EACDhe,EAAQylB,SAAWhK,EAAOuC,UAC1B,MACJ,QACIvC,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX6kB,EAAkB7I,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC2J,EAAkB5I,OAAS,SAAgBjc,GACvC,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACS,MAAhBA,EAAQulB,MAAgBvlB,EAAQib,eAAe,UAC1CzC,EAAM0D,SAASlc,EAAQulB,MACjB,wBACK,MAAhBvlB,EAAQwlB,MAAgBxlB,EAAQib,eAAe,UAC1CzC,EAAMyF,UAAUje,EAAQwlB,MAClB,yBACS,MAApBxlB,EAAQylB,UAAoBzlB,EAAQib,eAAe,cAC9CzC,EAAMyF,UAAUje,EAAQylB,UAClB,6BACR,MAWXZ,EAAkBvU,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAC5D,OAAO1I,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBS,kBAO5D,OANmB,MAAf1I,EAAOoJ,OACPvlB,EAAQulB,KAAOnJ,OAAOD,EAAOoJ,OACd,MAAfpJ,EAAOqJ,OACPxlB,EAAQwlB,KAAOrJ,EAAOqJ,OAAS,GACZ,MAAnBrJ,EAAOsJ,WACPzlB,EAAQylB,SAAWtJ,EAAOsJ,WAAa,GACpCzlB,GAYX6kB,EAAkBvI,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAYb,OAXInE,EAAQuE,WACRJ,EAAOoJ,KAAO,GACdpJ,EAAOqJ,KAAO,EACdrJ,EAAOsJ,SAAW,GAEF,MAAhBzlB,EAAQulB,MAAgBvlB,EAAQib,eAAe,UAC/CkB,EAAOoJ,KAAOvlB,EAAQulB,MACN,MAAhBvlB,EAAQwlB,MAAgBxlB,EAAQib,eAAe,UAC/CkB,EAAOqJ,KAAOxlB,EAAQwlB,MACF,MAApBxlB,EAAQylB,UAAoBzlB,EAAQib,eAAe,cACnDkB,EAAOsJ,SAAWzlB,EAAQylB,UACvBtJ,GAUX0I,EAAkBnK,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDmI,EArO8B,GAwOlCT,EAvlCe,GA0lC1B/c,EAAGqe,SAAY,WAmBX,SAASA,EAASlL,GACd,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA6PhD,OApPAkgB,EAAShL,UAAUiL,SAAW,EAQ9BD,EAAShL,UAAUkL,UAAYpN,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ7EkH,EAAShL,UAAUmL,QAAU,GAU7BH,EAAS3M,OAAS,SAAgByB,GAC9B,OAAO,IAAIkL,EAASlL,IAYxBkL,EAAS3K,OAAS,SAAgB/a,EAASgb,GASvC,OARKA,IACDA,EAAS1C,EAAQS,UACG,MAApB/Y,EAAQ2lB,UAAoB3lB,EAAQib,eAAe,aACnDD,EAAOE,OAA8B,GAAGE,MAAMpb,EAAQ2lB,UACjC,MAArB3lB,EAAQ4lB,WAAqB5lB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQ4lB,WACtC,MAAnB5lB,EAAQ6lB,SAAmB7lB,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ6lB,SACrD7K,GAYX0K,EAASpK,gBAAkB,SAAyBtb,EAASgb,GACzD,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmK,EAASlK,OAAS,SAAgBC,EAAQhW,GAChCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqe,SAChGjK,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ2lB,SAAWlK,EAAOL,QAC1B,MACJ,KAAK,EACDpb,EAAQ4lB,UAAYnK,EAAOgD,UAC3B,MACJ,KAAK,EACDze,EAAQ6lB,QAAUpK,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0lB,EAAS1J,gBAAkB,SAAyBP,GAGhD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwK,EAASzJ,OAAS,SAAgBjc,GAC9B,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQ2lB,UAAoB3lB,EAAQib,eAAe,YACnD,OAAQjb,EAAQ2lB,UAChB,QACI,MAAO,gCACX,KAAK,EACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,KAGT,OAAyB,MAArB3lB,EAAQ4lB,YAAqB5lB,EAAQib,eAAe,cAC/CzC,EAAMyF,UAAUje,EAAQ4lB,YAAgB5lB,EAAQ4lB,WAAapN,EAAMyF,UAAUje,EAAQ4lB,UAAUlH,MAAQlG,EAAMyF,UAAUje,EAAQ4lB,UAAUjH,MAE3H,MAAnB3e,EAAQ6lB,SAAmB7lB,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQ6lB,SACjB,2BACR,KAJQ,oCAenBH,EAASpV,WAAa,SAAoB6L,GACtC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqe,SACxC,OAAOvJ,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqe,SACxC,OAAQvJ,EAAOwJ,UACf,IAAK,SACL,KAAK,EACD3lB,EAAQ2lB,SAAW,EACnB,MACJ,IAAK,WACL,KAAK,IACD3lB,EAAQ2lB,SAAW,IACnB,MACJ,IAAK,UACL,KAAK,IACD3lB,EAAQ2lB,SAAW,IACnB,MACJ,IAAK,UACL,KAAK,IACD3lB,EAAQ2lB,SAAW,IACnB,MACJ,IAAK,WACL,KAAK,IACD3lB,EAAQ2lB,SAAW,IACnB,MACJ,IAAK,WACL,KAAK,IACD3lB,EAAQ2lB,SAAW,IAcvB,OAXwB,MAApBxJ,EAAOyJ,YACHpN,EAAM+F,MACLve,EAAQ4lB,UAAYpN,EAAM+F,KAAKK,UAAUzC,EAAOyJ,YAAY/G,UAAW,EACvC,kBAArB1C,EAAOyJ,UACnB5lB,EAAQ4lB,UAAY3V,SAASkM,EAAOyJ,UAAW,IACd,kBAArBzJ,EAAOyJ,UACnB5lB,EAAQ4lB,UAAYzJ,EAAOyJ,UACM,kBAArBzJ,EAAOyJ,YACnB5lB,EAAQ4lB,UAAY,IAAIpN,EAAMsG,SAAS3C,EAAOyJ,UAAUlH,MAAQ,EAAGvC,EAAOyJ,UAAUjH,OAAS,GAAGI,aAClF,MAAlB5C,EAAO0J,UACP7lB,EAAQ6lB,QAAUzJ,OAAOD,EAAO0J,UAC7B7lB,GAYX0lB,EAASpJ,SAAW,SAAkBtc,EAASgY,GACtCA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAElB,GADAJ,EAAOwJ,SAAW3N,EAAQwE,QAAUJ,OAAS,SAAW,EACpD5D,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE7G7C,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS,IAAM,EACxDD,EAAO0J,QAAU,GAWrB,OATwB,MAApB7lB,EAAQ2lB,UAAoB3lB,EAAQib,eAAe,cACnDkB,EAAOwJ,SAAW3N,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG8R,aAAanZ,EAAQ2lB,UAAY3lB,EAAQ2lB,UACvF,MAArB3lB,EAAQ4lB,WAAqB5lB,EAAQib,eAAe,eACnB,kBAAtBjb,EAAQ4lB,UACfzJ,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ4lB,WAAa5lB,EAAQ4lB,UAElFzJ,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ4lB,WAAa5N,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ4lB,UAAUlH,MAAQ,EAAG1e,EAAQ4lB,UAAUjH,OAAS,GAAGI,WAAa/e,EAAQ4lB,WACrN,MAAnB5lB,EAAQ6lB,SAAmB7lB,EAAQib,eAAe,aAClDkB,EAAO0J,QAAU7lB,EAAQ6lB,SACtB1J,GAUXuJ,EAAShL,UAAU+B,OAAS,WACxB,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgJ,EApRI,GAuRfre,EAAGye,YAAe,WAmBd,SAASA,EAAYtL,GACjB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmPhD,OA1OAsgB,EAAYpL,UAAUhb,OAAS,EAQ/BomB,EAAYpL,UAAUkL,UAAYpN,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQhFsH,EAAYpL,UAAUmL,QAAU,GAUhCC,EAAY/M,OAAS,SAAgByB,GACjC,OAAO,IAAIsL,EAAYtL,IAY3BsL,EAAY/K,OAAS,SAAgB/a,EAASgb,GAS1C,OARKA,IACDA,EAAS1C,EAAQS,UACC,MAAlB/Y,EAAQN,QAAkBM,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,GAAGE,MAAMpb,EAAQN,QACjC,MAArBM,EAAQ4lB,WAAqB5lB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQ4lB,WACtC,MAAnB5lB,EAAQ6lB,SAAmB7lB,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ6lB,SACrD7K,GAYX8K,EAAYxK,gBAAkB,SAAyBtb,EAASgb,GAC5D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuK,EAAYtK,OAAS,SAAgBC,EAAQhW,GACnCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGye,YAChGrK,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQN,OAAS+b,EAAOL,QACxB,MACJ,KAAK,EACDpb,EAAQ4lB,UAAYnK,EAAOgD,UAC3B,MACJ,KAAK,EACDze,EAAQ6lB,QAAUpK,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8lB,EAAY9J,gBAAkB,SAAyBP,GAGnD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4K,EAAY7J,OAAS,SAAgBjc,GACjC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAsB,MAAlBA,EAAQN,QAAkBM,EAAQib,eAAe,UACjD,OAAQjb,EAAQN,QAChB,QACI,MAAO,8BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAyB,MAArBM,EAAQ4lB,YAAqB5lB,EAAQib,eAAe,cAC/CzC,EAAMyF,UAAUje,EAAQ4lB,YAAgB5lB,EAAQ4lB,WAAapN,EAAMyF,UAAUje,EAAQ4lB,UAAUlH,MAAQlG,EAAMyF,UAAUje,EAAQ4lB,UAAUjH,MAE3H,MAAnB3e,EAAQ6lB,SAAmB7lB,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQ6lB,SACjB,2BACR,KAJQ,oCAenBC,EAAYxV,WAAa,SAAoB6L,GACzC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGye,YACxC,OAAO3J,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGye,YACxC,OAAQ3J,EAAOzc,QACf,IAAK,eACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,YACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,YACL,KAAK,EACDM,EAAQN,OAAS,EACjB,MACJ,IAAK,aACL,KAAK,EACDM,EAAQN,OAAS,EAcrB,OAXwB,MAApByc,EAAOyJ,YACHpN,EAAM+F,MACLve,EAAQ4lB,UAAYpN,EAAM+F,KAAKK,UAAUzC,EAAOyJ,YAAY/G,UAAW,EACvC,kBAArB1C,EAAOyJ,UACnB5lB,EAAQ4lB,UAAY3V,SAASkM,EAAOyJ,UAAW,IACd,kBAArBzJ,EAAOyJ,UACnB5lB,EAAQ4lB,UAAYzJ,EAAOyJ,UACM,kBAArBzJ,EAAOyJ,YACnB5lB,EAAQ4lB,UAAY,IAAIpN,EAAMsG,SAAS3C,EAAOyJ,UAAUlH,MAAQ,EAAGvC,EAAOyJ,UAAUjH,OAAS,GAAGI,aAClF,MAAlB5C,EAAO0J,UACP7lB,EAAQ6lB,QAAUzJ,OAAOD,EAAO0J,UAC7B7lB,GAYX8lB,EAAYxJ,SAAW,SAAkBtc,EAASgY,GACzCA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAElB,GADAJ,EAAOzc,OAASsY,EAAQwE,QAAUJ,OAAS,eAAiB,EACxD5D,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE7G7C,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS,IAAM,EACxDD,EAAO0J,QAAU,GAWrB,OATsB,MAAlB7lB,EAAQN,QAAkBM,EAAQib,eAAe,YACjDkB,EAAOzc,OAASsY,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG6R,iBAAiBlZ,EAAQN,QAAUM,EAAQN,QACvF,MAArBM,EAAQ4lB,WAAqB5lB,EAAQib,eAAe,eACnB,kBAAtBjb,EAAQ4lB,UACfzJ,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ4lB,WAAa5lB,EAAQ4lB,UAElFzJ,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ4lB,WAAa5N,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ4lB,UAAUlH,MAAQ,EAAG1e,EAAQ4lB,UAAUjH,OAAS,GAAGI,WAAa/e,EAAQ4lB,WACrN,MAAnB5lB,EAAQ6lB,SAAmB7lB,EAAQib,eAAe,aAClDkB,EAAO0J,QAAU7lB,EAAQ6lB,SACtB1J,GAUX2J,EAAYpL,UAAU+B,OAAS,WAC3B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoJ,EA1QO,GA6QlBze,EAAG0e,gBAAmB,WAkBlB,SAASA,EAAgBvL,GACrB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LAugB,EAAgBrL,UAAUsL,UAAY,KAQtCD,EAAgBrL,UAAUxV,SAAW,KAUrC6gB,EAAgBhN,OAAS,SAAgByB,GACrC,OAAO,IAAIuL,EAAgBvL,IAY/BuL,EAAgBhL,OAAS,SAAgB/a,EAASgb,GAO9C,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3GP,GAYX+K,EAAgBzK,gBAAkB,SAAyBtb,EAASgb,GAChE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCwK,EAAgBvK,OAAS,SAAgBC,EAAQhW,GACvCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0e,gBAChGtK,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX+lB,EAAgB/J,gBAAkB,SAAyBP,GAGvD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC6K,EAAgB9J,OAAS,SAAgBjc,GACrC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,YAE5D,MAAO,aAAejmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,cAC/Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,WAE3D,MAAO,YAAcnF,EAE7B,OAAO,MAWXgmB,EAAgBzV,WAAa,SAAoB6L,GAC7C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG0e,gBACxC,OAAO5J,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0e,gBACxC,GAAwB,MAApB5J,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,+DACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,GAAuB,MAAnB7J,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,8DACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAE7E,OAAOlF,GAYX+lB,EAAgBzJ,SAAW,SAAkBtc,EAASgY,GAC7CA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOjX,SAAW,MAEG,MAArBlF,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAChE,MAApBhY,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC9EmE,GAUX4J,EAAgBrL,UAAU+B,OAAS,WAC/B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDqJ,EAzNW,GA4NtB1e,EAAG4e,gBAAmB,WAiBlB,SAASA,EAAgBzL,GACrB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAygB,EAAgBvL,UAAUwL,UAAY,KAUtCD,EAAgBlN,OAAS,SAAgByB,GACrC,OAAO,IAAIyL,EAAgBzL,IAY/ByL,EAAgBlL,OAAS,SAAgB/a,EAASgb,GAK9C,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYXiL,EAAgB3K,gBAAkB,SAAyBtb,EAASgb,GAChE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC0K,EAAgBzK,OAAS,SAAgBC,EAAQhW,GACvCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4e,gBAChGxK,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXimB,EAAgBjK,gBAAkB,SAAyBP,GAGvD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC+K,EAAgBhK,OAAS,SAAgBjc,GACrC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,WAChE,GAAInmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXkmB,EAAgB3V,WAAa,SAAoB6L,GAC7C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG4e,gBACxC,OAAO9J,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4e,gBACxC,GAAwB,MAApB9J,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,+DACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,OAAOlmB,GAYXimB,EAAgB3J,SAAW,SAAkBtc,EAASgY,GAC7CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACjFmE,GAUX8J,EAAgBvL,UAAU+B,OAAS,WAC/B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDuJ,EA7LW,GAgMtB5e,EAAG8e,kBAAqB,WAmBpB,SAASA,EAAkB3L,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwNhD,OA/MA2gB,EAAkBzL,UAAUsL,UAAY,KAQxCG,EAAkBzL,UAAUxV,SAAW,KAQvCihB,EAAkBzL,UAAUtZ,UAAY,GAUxC+kB,EAAkBpN,OAAS,SAAgByB,GACvC,OAAO,IAAI2L,EAAkB3L,IAYjC2L,EAAkBpL,OAAS,SAAgB/a,EAASgb,GAShD,OARKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzF,MAArBvb,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WACrD4Z,GAYXmL,EAAkB7K,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4K,EAAkB3K,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8e,kBAChG1K,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,KAAK,EACDlb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmmB,EAAkBnK,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiL,EAAkBlK,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,YAE5D,MAAO,aAAejmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,cAC/Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,WAE3D,MAAO,YAAcnF,EAE7B,OAAyB,MAArBC,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACR,MAWX+kB,EAAkB7V,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8e,kBACxC,OAAOhK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8e,kBACxC,GAAwB,MAApBhK,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,iEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,GAAuB,MAAnB7J,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,gEACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAI7E,OAFwB,MAApBiX,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YAC/BpB,GAYXmmB,EAAkB7J,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAYb,OAXInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOjX,SAAW,KAClBiX,EAAO/a,UAAY,IAEE,MAArBpB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAChE,MAApBhY,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC5D,MAArBhY,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACxB+a,GAUXgK,EAAkBzL,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyJ,EA/Oa,GAkPxB9e,EAAG+e,kBAAqB,WAiBpB,SAASA,EAAkB5L,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA4gB,EAAkB1L,UAAUwL,UAAY,KAUxCE,EAAkBrN,OAAS,SAAgByB,GACvC,OAAO,IAAI4L,EAAkB5L,IAYjC4L,EAAkBrL,OAAS,SAAgB/a,EAASgb,GAKhD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYXoL,EAAkB9K,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6K,EAAkB5K,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+e,kBAChG3K,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXomB,EAAkBpK,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkL,EAAkBnK,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,WAChE,GAAInmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXqmB,EAAkB9V,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+e,kBACxC,OAAOjK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+e,kBACxC,GAAwB,MAApBjK,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,iEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,OAAOlmB,GAYXomB,EAAkB9J,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACjFmE,GAUXiK,EAAkB1L,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD0J,EA7La,GAgMxB/e,EAAGgf,kBAAqB,WAkBpB,SAASA,EAAkB7L,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LA6gB,EAAkB3L,UAAUsL,UAAY,KAQxCK,EAAkB3L,UAAU4L,eAAiB,KAU7CD,EAAkBtN,OAAS,SAAgByB,GACvC,OAAO,IAAI6L,EAAkB7L,IAYjC6L,EAAkBtL,OAAS,SAAgB/a,EAASgb,GAOhD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACtF,MAA1Bvb,EAAQsmB,gBAA0BtmB,EAAQib,eAAe,mBACzDvC,EAAMvR,IAAIC,SAASC,GAAGkF,oBAAoBwO,OAAO/a,EAAQsmB,eAAgBtL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvHP,GAYXqL,EAAkB/K,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC8K,EAAkB7K,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGgf,kBAChG5K,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQsmB,eAAiB5N,EAAMvR,IAAIC,SAASC,GAAGkF,oBAAoBiP,OAAOC,EAAQA,EAAOP,UACzF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXqmB,EAAkBrK,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCmL,EAAkBpK,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,YAE5D,MAAO,aAAejmB,EAE9B,GAA8B,MAA1BC,EAAQsmB,gBAA0BtmB,EAAQib,eAAe,oBACrDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGkF,oBAAoB0P,OAAOjc,EAAQsmB,iBAEjE,MAAO,kBAAoBvmB,EAEnC,OAAO,MAWXsmB,EAAkB/V,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGgf,kBACxC,OAAOlK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGgf,kBACxC,GAAwB,MAApBlK,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,iEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,GAA6B,MAAzB7J,EAAOmK,eAAwB,CAC/B,GAAqC,kBAA1BnK,EAAOmK,eACd,MAAM5F,UAAU,sEACpB1gB,EAAQsmB,eAAiB5N,EAAMvR,IAAIC,SAASC,GAAGkF,oBAAoB+D,WAAW6L,EAAOmK,gBAEzF,OAAOtmB,GAYXqmB,EAAkB/J,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOmK,eAAiB,MAEH,MAArBtmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC1D,MAA1BhY,EAAQsmB,gBAA0BtmB,EAAQib,eAAe,oBACzDkB,EAAOmK,eAAiB5N,EAAMvR,IAAIC,SAASC,GAAGkF,oBAAoB+P,SAAStc,EAAQsmB,eAAgBtO,IAChGmE,GAUXkK,EAAkB3L,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD2J,EAzNa,GA4NxBhf,EAAGkf,kBAAqB,WAkBpB,SAASA,EAAkB/L,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA+gB,EAAkB7L,UAAUwL,UAAY,KAQxCK,EAAkB7L,UAAUtU,QAAU,GAUtCmgB,EAAkBxN,OAAS,SAAgByB,GACvC,OAAO,IAAI+L,EAAkB/L,IAYjC+L,EAAkBxL,OAAS,SAAgB/a,EAASgb,GAOhD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQoG,SAAmBpG,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoG,SACrD4U,GAYXuL,EAAkBjL,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCgL,EAAkB/K,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkf,kBAChG9K,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoG,QAAUqV,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXumB,EAAkBvK,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCqL,EAAkBtK,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,WAChE,GAAInmB,EACA,MAAO,aAAeA,EAE9B,OAAuB,MAAnBC,EAAQoG,SAAmBpG,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQoG,SACjB,2BACR,MAWXmgB,EAAkBjW,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkf,kBACxC,OAAOpK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkf,kBACxC,GAAwB,MAApBpK,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,iEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAI/E,OAFsB,MAAlB/J,EAAO/V,UACPpG,EAAQoG,QAAUgW,OAAOD,EAAO/V,UAC7BpG,GAYXumB,EAAkBjK,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAO/V,QAAU,IAEI,MAArBpG,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACjE,MAAnBhY,EAAQoG,SAAmBpG,EAAQib,eAAe,aAClDkB,EAAO/V,QAAUpG,EAAQoG,SACtB+V,GAUXoK,EAAkB7L,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD6J,EApNa,GAuNxBlf,EAAGmf,kBAAqB,WAkBpB,SAASA,EAAkBhM,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LAghB,EAAkB9L,UAAUsL,UAAY,KAQxCQ,EAAkB9L,UAAU+L,eAAiB,KAU7CD,EAAkBzN,OAAS,SAAgByB,GACvC,OAAO,IAAIgM,EAAkBhM,IAYjCgM,EAAkBzL,OAAS,SAAgB/a,EAASgb,GAOhD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACtF,MAA1Bvb,EAAQymB,gBAA0BzmB,EAAQib,eAAe,mBACzDvC,EAAMvR,IAAIC,SAASC,GAAG8c,oBAAoBpJ,OAAO/a,EAAQymB,eAAgBzL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvHP,GAYXwL,EAAkBlL,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCiL,EAAkBhL,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmf,kBAChG/K,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQymB,eAAiB/N,EAAMvR,IAAIC,SAASC,GAAG8c,oBAAoB3I,OAAOC,EAAQA,EAAOP,UACzF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwmB,EAAkBxK,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCsL,EAAkBvK,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,YAE5D,MAAO,aAAejmB,EAE9B,GAA8B,MAA1BC,EAAQymB,gBAA0BzmB,EAAQib,eAAe,oBACrDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG8c,oBAAoBlI,OAAOjc,EAAQymB,iBAEjE,MAAO,kBAAoB1mB,EAEnC,OAAO,MAWXymB,EAAkBlW,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmf,kBACxC,OAAOrK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmf,kBACxC,GAAwB,MAApBrK,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,iEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,GAA6B,MAAzB7J,EAAOsK,eAAwB,CAC/B,GAAqC,kBAA1BtK,EAAOsK,eACd,MAAM/F,UAAU,sEACpB1gB,EAAQymB,eAAiB/N,EAAMvR,IAAIC,SAASC,GAAG8c,oBAAoB7T,WAAW6L,EAAOsK,gBAEzF,OAAOzmB,GAYXwmB,EAAkBlK,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOsK,eAAiB,MAEH,MAArBzmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC1D,MAA1BhY,EAAQymB,gBAA0BzmB,EAAQib,eAAe,oBACzDkB,EAAOsK,eAAiB/N,EAAMvR,IAAIC,SAASC,GAAG8c,oBAAoB7H,SAAStc,EAAQymB,eAAgBzO,IAChGmE,GAUXqK,EAAkB9L,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD8J,EAzNa,GA4NxBnf,EAAGqf,kBAAqB,WAiBpB,SAASA,EAAkBlM,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAkhB,EAAkBhM,UAAUwL,UAAY,KAUxCQ,EAAkB3N,OAAS,SAAgByB,GACvC,OAAO,IAAIkM,EAAkBlM,IAYjCkM,EAAkB3L,OAAS,SAAgB/a,EAASgb,GAKhD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYX0L,EAAkBpL,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmL,EAAkBlL,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqf,kBAChGjL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0mB,EAAkB1K,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwL,EAAkBzK,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,WAChE,GAAInmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWX2mB,EAAkBpW,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqf,kBACxC,OAAOvK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqf,kBACxC,GAAwB,MAApBvK,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,iEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,OAAOlmB,GAYX0mB,EAAkBpK,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACjFmE,GAUXuK,EAAkBhM,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgK,EA7La,GAgMxBrf,EAAGsf,qBAAwB,WAkBvB,SAASA,EAAqBnM,GAC1B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LAmhB,EAAqBjM,UAAUsL,UAAY,KAQ3CW,EAAqBjM,UAAUxV,SAAW,KAU1CyhB,EAAqB5N,OAAS,SAAgByB,GAC1C,OAAO,IAAImM,EAAqBnM,IAYpCmM,EAAqB5L,OAAS,SAAgB/a,EAASgb,GAOnD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3GP,GAYX2L,EAAqBrL,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoL,EAAqBnL,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsf,qBAChGlL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2mB,EAAqB3K,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyL,EAAqB1K,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,YAE5D,MAAO,aAAejmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,cAC/Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,WAE3D,MAAO,YAAcnF,EAE7B,OAAO,MAWX4mB,EAAqBrW,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGsf,qBACxC,OAAOxK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsf,qBACxC,GAAwB,MAApBxK,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,oEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,GAAuB,MAAnB7J,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,mEACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAE7E,OAAOlF,GAYX2mB,EAAqBrK,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOjX,SAAW,MAEG,MAArBlF,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAChE,MAApBhY,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC9EmE,GAUXwK,EAAqBjM,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiK,EAzNgB,GA4N3Btf,EAAGuf,qBAAwB,WAiBvB,SAASA,EAAqBpM,GAC1B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAohB,EAAqBlM,UAAUwL,UAAY,KAU3CU,EAAqB7N,OAAS,SAAgByB,GAC1C,OAAO,IAAIoM,EAAqBpM,IAYpCoM,EAAqB7L,OAAS,SAAgB/a,EAASgb,GAKnD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYX4L,EAAqBtL,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqL,EAAqBpL,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuf,qBAChGnL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4mB,EAAqB5K,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0L,EAAqB3K,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,WAChE,GAAInmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWX6mB,EAAqBtW,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGuf,qBACxC,OAAOzK,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuf,qBACxC,GAAwB,MAApBzK,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,oEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,OAAOlmB,GAYX4mB,EAAqBtK,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACjFmE,GAUXyK,EAAqBlM,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkK,EA7LgB,GAgM3Bvf,EAAGwf,mBAAsB,WAiBrB,SAASA,EAAmBrM,GACxB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAqhB,EAAmBnM,UAAUsL,UAAY,KAUzCa,EAAmB9N,OAAS,SAAgByB,GACxC,OAAO,IAAIqM,EAAmBrM,IAYlCqM,EAAmB9L,OAAS,SAAgB/a,EAASgb,GAKjD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYX6L,EAAmBvL,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCsL,EAAmBrL,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwf,mBAChGpL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX6mB,EAAmB7K,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC2L,EAAmB5K,OAAS,SAAgBjc,GACxC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWX8mB,EAAmBvW,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGwf,mBACxC,OAAO1K,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwf,mBACxC,GAAwB,MAApB1K,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,kEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYX6mB,EAAmBvK,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUX0K,EAAmBnM,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDmK,EA7Lc,GAgMzBxf,EAAGyf,mBAAsB,WAkBrB,SAASA,EAAmBtM,GAExB,GADA1b,KAAKqH,MAAQ,GACTqU,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAshB,EAAmBpM,UAAUwL,UAAY,KAQzCY,EAAmBpM,UAAUvU,MAAQqS,EAAMgL,WAU3CsD,EAAmB/N,OAAS,SAAgByB,GACxC,OAAO,IAAIsM,EAAmBtM,IAYlCsM,EAAmB/L,OAAS,SAAgB/a,EAASgb,GAKjD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQmG,OAAiBnG,EAAQmG,MAAMV,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAMX,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYX8L,EAAmBxL,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuL,EAAmBtL,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyf,mBAChGrL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQmG,OAASnG,EAAQmG,MAAMV,SACjCzF,EAAQmG,MAAQ,IACpBnG,EAAQmG,MAAM+O,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8mB,EAAmB9K,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4L,EAAmB7K,OAAS,SAAgBjc,GACxC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQmG,OAAiBnG,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQmG,OACvB,MAAO,wBACX,IAAK,IAAIX,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,MAAMX,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWX+mB,EAAmBxW,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGyf,mBACxC,OAAO3K,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyf,mBACxC,GAAwB,MAApB3K,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,kEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOhW,MAAO,CACd,IAAKxG,MAAMC,QAAQuc,EAAOhW,OACtB,MAAMua,UAAU,6DACpB1gB,EAAQmG,MAAQ,GAChB,IAAK,IAAIX,EAAI,EAAGA,EAAI2W,EAAOhW,MAAMV,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOhW,MAAMX,GACpB,MAAMkb,UAAU,8DACpB1gB,EAAQmG,MAAMX,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,MAAMX,KAGpF,OAAOxF,GAYX8mB,EAAmBxK,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOhW,MAAQ,IACf6R,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQmG,OAASnG,EAAQmG,MAAMV,OAAQ,CACvC0W,EAAOhW,MAAQ,GACf,IAAK,IAAIwd,EAAI,EAAGA,EAAI3jB,EAAQmG,MAAMV,SAAUke,EACxCxH,EAAOhW,MAAMwd,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAMwd,GAAI3L,GAEtF,OAAOmE,GAUX2K,EAAmBpM,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoK,EAzOc,GA4OzBzf,EAAG0f,0BAA6B,WAiB5B,SAASA,EAA0BvM,GAC/B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAuhB,EAA0BrM,UAAUsL,UAAY,KAUhDe,EAA0BhO,OAAS,SAAgByB,GAC/C,OAAO,IAAIuM,EAA0BvM,IAYzCuM,EAA0BhM,OAAS,SAAgB/a,EAASgb,GAKxD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYX+L,EAA0BzL,gBAAkB,SAAyBtb,EAASgb,GAC1E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCwL,EAA0BvL,OAAS,SAAgBC,EAAQhW,GACjDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0f,0BAChGtL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX+mB,EAA0B/K,gBAAkB,SAAyBP,GAGjE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC6L,EAA0B9K,OAAS,SAAgBjc,GAC/C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXgnB,EAA0BzW,WAAa,SAAoB6L,GACvD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG0f,0BACxC,OAAO5K,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0f,0BACxC,GAAwB,MAApB5K,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,yEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYX+mB,EAA0BzK,SAAW,SAAkBtc,EAASgY,GACvDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUX4K,EAA0BrM,UAAU+B,OAAS,WACzC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDqK,EA7LqB,GAgMhC1f,EAAG2f,0BAA6B,WAkB5B,SAASA,EAA0BxM,GAE/B,GADA1b,KAAKqH,MAAQ,GACTqU,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAwhB,EAA0BtM,UAAUwL,UAAY,KAQhDc,EAA0BtM,UAAUvU,MAAQqS,EAAMgL,WAUlDwD,EAA0BjO,OAAS,SAAgByB,GAC/C,OAAO,IAAIwM,EAA0BxM,IAYzCwM,EAA0BjM,OAAS,SAAgB/a,EAASgb,GAKxD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQmG,OAAiBnG,EAAQmG,MAAMV,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAMX,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXgM,EAA0B1L,gBAAkB,SAAyBtb,EAASgb,GAC1E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCyL,EAA0BxL,OAAS,SAAgBC,EAAQhW,GACjDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2f,0BAChGvL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQmG,OAASnG,EAAQmG,MAAMV,SACjCzF,EAAQmG,MAAQ,IACpBnG,EAAQmG,MAAM+O,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXgnB,EAA0BhL,gBAAkB,SAAyBP,GAGjE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC8L,EAA0B/K,OAAS,SAAgBjc,GAC/C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQmG,OAAiBnG,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQmG,OACvB,MAAO,wBACX,IAAK,IAAIX,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,MAAMX,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWXinB,EAA0B1W,WAAa,SAAoB6L,GACvD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG2f,0BACxC,OAAO7K,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2f,0BACxC,GAAwB,MAApB7K,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,yEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOhW,MAAO,CACd,IAAKxG,MAAMC,QAAQuc,EAAOhW,OACtB,MAAMua,UAAU,oEACpB1gB,EAAQmG,MAAQ,GAChB,IAAK,IAAIX,EAAI,EAAGA,EAAI2W,EAAOhW,MAAMV,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOhW,MAAMX,GACpB,MAAMkb,UAAU,qEACpB1gB,EAAQmG,MAAMX,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,MAAMX,KAGpF,OAAOxF,GAYXgnB,EAA0B1K,SAAW,SAAkBtc,EAASgY,GACvDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOhW,MAAQ,IACf6R,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQmG,OAASnG,EAAQmG,MAAMV,OAAQ,CACvC0W,EAAOhW,MAAQ,GACf,IAAK,IAAIwd,EAAI,EAAGA,EAAI3jB,EAAQmG,MAAMV,SAAUke,EACxCxH,EAAOhW,MAAMwd,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAMwd,GAAI3L,GAEtF,OAAOmE,GAUX6K,EAA0BtM,UAAU+B,OAAS,WACzC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDsK,EAzOqB,GA4OhC3f,EAAG4f,0BAA6B,WAkB5B,SAASA,EAA0BzM,GAC/B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAyhB,EAA0BvM,UAAUsL,UAAY,KAQhDiB,EAA0BvM,UAAUtU,QAAU,GAU9C6gB,EAA0BlO,OAAS,SAAgByB,GAC/C,OAAO,IAAIyM,EAA0BzM,IAYzCyM,EAA0BlM,OAAS,SAAgB/a,EAASgb,GAOxD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQoG,SAAmBpG,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoG,SACrD4U,GAYXiM,EAA0B3L,gBAAkB,SAAyBtb,EAASgb,GAC1E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC0L,EAA0BzL,OAAS,SAAgBC,EAAQhW,GACjDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4f,0BAChGxL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoG,QAAUqV,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXinB,EAA0BjL,gBAAkB,SAAyBP,GAGjE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC+L,EAA0BhL,OAAS,SAAgBjc,GAC/C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAuB,MAAnBC,EAAQoG,SAAmBpG,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQoG,SACjB,2BACR,MAWX6gB,EAA0B3W,WAAa,SAAoB6L,GACvD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG4f,0BACxC,OAAO9K,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4f,0BACxC,GAAwB,MAApB9K,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,yEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFsB,MAAlB7J,EAAO/V,UACPpG,EAAQoG,QAAUgW,OAAOD,EAAO/V,UAC7BpG,GAYXinB,EAA0B3K,SAAW,SAAkBtc,EAASgY,GACvDA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO/V,QAAU,IAEI,MAArBpG,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjE,MAAnBhY,EAAQoG,SAAmBpG,EAAQib,eAAe,aAClDkB,EAAO/V,QAAUpG,EAAQoG,SACtB+V,GAUX8K,EAA0BvM,UAAU+B,OAAS,WACzC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDuK,EApNqB,GAuNhC5f,EAAG6f,0BAA6B,WAkB5B,SAASA,EAA0B1M,GAC/B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LA0hB,EAA0BxM,UAAUwL,UAAY,KAQhDgB,EAA0BxM,UAAUvU,MAAQ,KAU5C+gB,EAA0BnO,OAAS,SAAgByB,GAC/C,OAAO,IAAI0M,EAA0B1M,IAYzC0M,EAA0BnM,OAAS,SAAgB/a,EAASgb,GAOxD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQmG,OAAiBnG,EAAQib,eAAe,UAChDvC,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAO6U,EAAOE,OAA8B,IAAIuF,QAAQlF,SACrGP,GAYXkM,EAA0B5L,gBAAkB,SAAyBtb,EAASgb,GAC1E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC2L,EAA0B1L,OAAS,SAAgBC,EAAQhW,GACjDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6f,0BAChGzL,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQmG,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,UACvE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXknB,EAA0BlL,gBAAkB,SAAyBP,GAGjE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCgM,EAA0BjL,OAAS,SAAgBjc,GAC/C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQmG,OAAiBnG,EAAQib,eAAe,WAC5Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,QAExD,MAAO,SAAWpG,EAE1B,OAAO,MAWXmnB,EAA0B5W,WAAa,SAAoB6L,GACvD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG6f,0BACxC,OAAO/K,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6f,0BACxC,GAAwB,MAApB/K,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,yEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAoB,MAAhB/J,EAAOhW,MAAe,CACtB,GAA4B,kBAAjBgW,EAAOhW,MACd,MAAMua,UAAU,qEACpB1gB,EAAQmG,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,OAEvE,OAAOnG,GAYXknB,EAA0B5K,SAAW,SAAkBtc,EAASgY,GACvDA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAOhW,MAAQ,MAEM,MAArBnG,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACnE,MAAjBhY,EAAQmG,OAAiBnG,EAAQib,eAAe,WAChDkB,EAAOhW,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAO6R,IACrEmE,GAUX+K,EAA0BxM,UAAU+B,OAAS,WACzC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDwK,EAzNqB,GA4NhC7f,EAAG8f,gCAAmC,WAkBlC,SAASA,EAAgC3M,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA2hB,EAAgCzM,UAAUsL,UAAY,KAQtDmB,EAAgCzM,UAAUtK,cAAgB,GAU1D+W,EAAgCpO,OAAS,SAAgByB,GACrD,OAAO,IAAI2M,EAAgC3M,IAY/C2M,EAAgCpM,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvF,MAAzBvb,EAAQoQ,eAAyBpQ,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoQ,eACrD4K,GAYXmM,EAAgC7L,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4L,EAAgC3L,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8f,gCAChG1L,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoQ,cAAgBqL,EAAON,SAC/B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmnB,EAAgCnL,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiM,EAAgClL,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA6B,MAAzBC,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQoQ,eACjB,iCACR,MAWX+W,EAAgC7W,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8f,gCACxC,OAAOhL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8f,gCACxC,GAAwB,MAApBhL,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,+EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF4B,MAAxB7J,EAAO/L,gBACPpQ,EAAQoQ,cAAgBgM,OAAOD,EAAO/L,gBACnCpQ,GAYXmnB,EAAgC7K,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO/L,cAAgB,IAEF,MAArBpQ,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC3D,MAAzBhY,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACxDkB,EAAO/L,cAAgBpQ,EAAQoQ,eAC5B+L,GAUXgL,EAAgCzM,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyK,EApN2B,GAuNtC9f,EAAG+f,gCAAmC,WAkBlC,SAASA,EAAgC5M,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LA4hB,EAAgC1M,UAAUwL,UAAY,KAQtDkB,EAAgC1M,UAAUvU,MAAQ,KAUlDihB,EAAgCrO,OAAS,SAAgByB,GACrD,OAAO,IAAI4M,EAAgC5M,IAY/C4M,EAAgCrM,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQmG,OAAiBnG,EAAQib,eAAe,UAChDvC,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAO6U,EAAOE,OAA8B,IAAIuF,QAAQlF,SACrGP,GAYXoM,EAAgC9L,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6L,EAAgC5L,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+f,gCAChG3L,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQmG,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,UACvE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXonB,EAAgCpL,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkM,EAAgCnL,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQmG,OAAiBnG,EAAQib,eAAe,WAC5Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,QAExD,MAAO,SAAWpG,EAE1B,OAAO,MAWXqnB,EAAgC9W,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+f,gCACxC,OAAOjL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+f,gCACxC,GAAwB,MAApBjL,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,+EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAoB,MAAhB/J,EAAOhW,MAAe,CACtB,GAA4B,kBAAjBgW,EAAOhW,MACd,MAAMua,UAAU,2EACpB1gB,EAAQmG,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,OAEvE,OAAOnG,GAYXonB,EAAgC9K,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAOhW,MAAQ,MAEM,MAArBnG,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACnE,MAAjBhY,EAAQmG,OAAiBnG,EAAQib,eAAe,WAChDkB,EAAOhW,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAO6R,IACrEmE,GAUXiL,EAAgC1M,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD0K,EAzN2B,GA4NtC/f,EAAGggB,gCAAmC,WAkBlC,SAASA,EAAgC7M,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA6hB,EAAgC3M,UAAUsL,UAAY,KAQtDqB,EAAgC3M,UAAUhS,UAAY,GAUtD2e,EAAgCtO,OAAS,SAAgByB,GACrD,OAAO,IAAI6M,EAAgC7M,IAY/C6M,EAAgCtM,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3F,MAArBvb,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WACrDsS,GAYXqM,EAAgC/L,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC8L,EAAgC7L,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGggB,gCAChG5L,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXqnB,EAAgCrL,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCmM,EAAgCpL,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAyB,MAArBC,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACjB,6BACR,MAWX2e,EAAgC/W,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGggB,gCACxC,OAAOlL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGggB,gCACxC,GAAwB,MAApBlL,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,+EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFwB,MAApB7J,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YAC/B1I,GAYXqnB,EAAgC/K,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOzT,UAAY,IAEE,MAArB1I,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC/D,MAArBhY,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACxByT,GAUXkL,EAAgC3M,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD2K,EApN2B,GAuNtChgB,EAAGigB,gCAAmC,WAkBlC,SAASA,EAAgC9M,GAErC,GADA1b,KAAKqH,MAAQ,GACTqU,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA8hB,EAAgC5M,UAAUwL,UAAY,KAQtDoB,EAAgC5M,UAAUvU,MAAQqS,EAAMgL,WAUxD8D,EAAgCvO,OAAS,SAAgByB,GACrD,OAAO,IAAI8M,EAAgC9M,IAY/C8M,EAAgCvM,OAAS,SAAgB/a,EAASgb,GAK9D,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQmG,OAAiBnG,EAAQmG,MAAMV,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAMX,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXsM,EAAgChM,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC+L,EAAgC9L,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGigB,gCAChG7L,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQmG,OAASnG,EAAQmG,MAAMV,SACjCzF,EAAQmG,MAAQ,IACpBnG,EAAQmG,MAAM+O,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXsnB,EAAgCtL,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCoM,EAAgCrL,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQmG,OAAiBnG,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQmG,OACvB,MAAO,wBACX,IAAK,IAAIX,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,MAAMX,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWXunB,EAAgChX,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGigB,gCACxC,OAAOnL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGigB,gCACxC,GAAwB,MAApBnL,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,+EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOhW,MAAO,CACd,IAAKxG,MAAMC,QAAQuc,EAAOhW,OACtB,MAAMua,UAAU,0EACpB1gB,EAAQmG,MAAQ,GAChB,IAAK,IAAIX,EAAI,EAAGA,EAAI2W,EAAOhW,MAAMV,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOhW,MAAMX,GACpB,MAAMkb,UAAU,2EACpB1gB,EAAQmG,MAAMX,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,MAAMX,KAGpF,OAAOxF,GAYXsnB,EAAgChL,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOhW,MAAQ,IACf6R,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQmG,OAASnG,EAAQmG,MAAMV,OAAQ,CACvC0W,EAAOhW,MAAQ,GACf,IAAK,IAAIwd,EAAI,EAAGA,EAAI3jB,EAAQmG,MAAMV,SAAUke,EACxCxH,EAAOhW,MAAMwd,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAMwd,GAAI3L,GAEtF,OAAOmE,GAUXmL,EAAgC5M,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD4K,EAzO2B,GA4OtCjgB,EAAGkgB,oCAAuC,WAkBtC,SAASA,EAAoC/M,GACzC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA+hB,EAAoC7M,UAAUsL,UAAY,KAQ1DuB,EAAoC7M,UAAUpV,cAAgB,GAU9DiiB,EAAoCxO,OAAS,SAAgByB,GACzD,OAAO,IAAI+M,EAAoC/M,IAYnD+M,EAAoCxM,OAAS,SAAgB/a,EAASgb,GAOlE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvF,MAAzBvb,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACrD0V,GAYXuM,EAAoCjM,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCgM,EAAoC/L,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkgB,oCAChG9L,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXunB,EAAoCvL,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCqM,EAAoCtL,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA6B,MAAzBC,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACjB,iCACR,MAWXiiB,EAAoCjX,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkgB,oCACxC,OAAOpL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkgB,oCACxC,GAAwB,MAApBpL,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,mFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF4B,MAAxB7J,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBACnCtF,GAYXunB,EAAoCjL,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO7W,cAAgB,IAEF,MAArBtF,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC3D,MAAzBhY,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eAC5B6W,GAUXoL,EAAoC7M,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD6K,EApN+B,GAuN1ClgB,EAAGmgB,oCAAuC,WAkBtC,SAASA,EAAoChN,GAEzC,GADA1b,KAAKqH,MAAQ,GACTqU,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAgiB,EAAoC9M,UAAUwL,UAAY,KAQ1DsB,EAAoC9M,UAAUvU,MAAQqS,EAAMgL,WAU5DgE,EAAoCzO,OAAS,SAAgByB,GACzD,OAAO,IAAIgN,EAAoChN,IAYnDgN,EAAoCzM,OAAS,SAAgB/a,EAASgb,GAKlE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQmG,OAAiBnG,EAAQmG,MAAMV,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAMX,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXwM,EAAoClM,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCiM,EAAoChM,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmgB,oCAChG/L,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQmG,OAASnG,EAAQmG,MAAMV,SACjCzF,EAAQmG,MAAQ,IACpBnG,EAAQmG,MAAM+O,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwnB,EAAoCxL,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCsM,EAAoCvL,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQmG,OAAiBnG,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQmG,OACvB,MAAO,wBACX,IAAK,IAAIX,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,MAAMX,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWXynB,EAAoClX,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmgB,oCACxC,OAAOrL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmgB,oCACxC,GAAwB,MAApBrL,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,mFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOhW,MAAO,CACd,IAAKxG,MAAMC,QAAQuc,EAAOhW,OACtB,MAAMua,UAAU,8EACpB1gB,EAAQmG,MAAQ,GAChB,IAAK,IAAIX,EAAI,EAAGA,EAAI2W,EAAOhW,MAAMV,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOhW,MAAMX,GACpB,MAAMkb,UAAU,+EACpB1gB,EAAQmG,MAAMX,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,MAAMX,KAGpF,OAAOxF,GAYXwnB,EAAoClL,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOhW,MAAQ,IACf6R,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQmG,OAASnG,EAAQmG,MAAMV,OAAQ,CACvC0W,EAAOhW,MAAQ,GACf,IAAK,IAAIwd,EAAI,EAAGA,EAAI3jB,EAAQmG,MAAMV,SAAUke,EACxCxH,EAAOhW,MAAMwd,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAMwd,GAAI3L,GAEtF,OAAOmE,GAUXqL,EAAoC9M,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD8K,EAzO+B,GA4O1CngB,EAAGogB,mBAAsB,WAiBrB,SAASA,EAAmBjN,GACxB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAiiB,EAAmB/M,UAAUsL,UAAY,KAUzCyB,EAAmB1O,OAAS,SAAgByB,GACxC,OAAO,IAAIiN,EAAmBjN,IAYlCiN,EAAmB1M,OAAS,SAAgB/a,EAASgb,GAKjD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYXyM,EAAmBnM,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCkM,EAAmBjM,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGogB,mBAChGhM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXynB,EAAmBzL,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCuM,EAAmBxL,OAAS,SAAgBjc,GACxC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWX0nB,EAAmBnX,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGogB,mBACxC,OAAOtL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGogB,mBACxC,GAAwB,MAApBtL,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,kEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYXynB,EAAmBnL,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUXsL,EAAmB/M,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD+K,EA7Lc,GAgMzBpgB,EAAGqgB,mBAAsB,WAkBrB,SAASA,EAAmBlN,GAExB,GADA1b,KAAK6M,MAAQ,GACT6O,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAkiB,EAAmBhN,UAAUwL,UAAY,KAQzCwB,EAAmBhN,UAAU/O,MAAQ6M,EAAMgL,WAU3CkE,EAAmB3O,OAAS,SAAgByB,GACxC,OAAO,IAAIkN,EAAmBlN,IAYlCkN,EAAmB3M,OAAS,SAAgB/a,EAASgb,GAKjD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQ2L,OAAiB3L,EAAQ2L,MAAMlG,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAMnG,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYX0M,EAAmBpM,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmM,EAAmBlM,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqgB,mBAChGjM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,SACjCzF,EAAQ2L,MAAQ,IACpB3L,EAAQ2L,MAAMuJ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0nB,EAAmB1L,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwM,EAAmBzL,OAAS,SAAgBjc,GACxC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQ2L,OACvB,MAAO,wBACX,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,MAAMnG,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWX2nB,EAAmBpX,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqgB,mBACxC,OAAOvL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqgB,mBACxC,GAAwB,MAApBvL,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,kEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOxQ,MAAO,CACd,IAAKhM,MAAMC,QAAQuc,EAAOxQ,OACtB,MAAM+U,UAAU,6DACpB1gB,EAAQ2L,MAAQ,GAChB,IAAK,IAAInG,EAAI,EAAGA,EAAI2W,EAAOxQ,MAAMlG,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOxQ,MAAMnG,GACpB,MAAMkb,UAAU,8DACpB1gB,EAAQ2L,MAAMnG,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,MAAMnG,KAGpF,OAAOxF,GAYX0nB,EAAmBpL,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOxQ,MAAQ,IACfqM,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,OAAQ,CACvC0W,EAAOxQ,MAAQ,GACf,IAAK,IAAIgY,EAAI,EAAGA,EAAI3jB,EAAQ2L,MAAMlG,SAAUke,EACxCxH,EAAOxQ,MAAMgY,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAMgY,GAAI3L,GAEtF,OAAOmE,GAUXuL,EAAmBhN,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgL,EAzOc,GA4OzBrgB,EAAGsgB,0BAA6B,WAkB5B,SAASA,EAA0BnN,GAC/B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAmiB,EAA0BjN,UAAUsL,UAAY,KAQhD2B,EAA0BjN,UAAU9O,QAAU,GAU9C+b,EAA0B5O,OAAS,SAAgByB,GAC/C,OAAO,IAAImN,EAA0BnN,IAYzCmN,EAA0B5M,OAAS,SAAgB/a,EAASgb,GAOxD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQ4L,SAAmB5L,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ4L,SACrDoP,GAYX2M,EAA0BrM,gBAAkB,SAAyBtb,EAASgb,GAC1E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoM,EAA0BnM,OAAS,SAAgBC,EAAQhW,GACjDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsgB,0BAChGlM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ4L,QAAU6P,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2nB,EAA0B3L,gBAAkB,SAAyBP,GAGjE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyM,EAA0B1L,OAAS,SAAgBjc,GAC/C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAuB,MAAnBC,EAAQ4L,SAAmB5L,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQ4L,SACjB,2BACR,MAWX+b,EAA0BrX,WAAa,SAAoB6L,GACvD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGsgB,0BACxC,OAAOxL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsgB,0BACxC,GAAwB,MAApBxL,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,yEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFsB,MAAlB7J,EAAOvQ,UACP5L,EAAQ4L,QAAUwQ,OAAOD,EAAOvQ,UAC7B5L,GAYX2nB,EAA0BrL,SAAW,SAAkBtc,EAASgY,GACvDA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOvQ,QAAU,IAEI,MAArB5L,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjE,MAAnBhY,EAAQ4L,SAAmB5L,EAAQib,eAAe,aAClDkB,EAAOvQ,QAAU5L,EAAQ4L,SACtBuQ,GAUXwL,EAA0BjN,UAAU+B,OAAS,WACzC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiL,EApNqB,GAuNhCtgB,EAAGugB,0BAA6B,WAkB5B,SAASA,EAA0BpN,GAC/B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LAoiB,EAA0BlN,UAAUwL,UAAY,KAQhD0B,EAA0BlN,UAAU/O,MAAQ,KAU5Cic,EAA0B7O,OAAS,SAAgByB,GAC/C,OAAO,IAAIoN,EAA0BpN,IAYzCoN,EAA0B7M,OAAS,SAAgB/a,EAASgb,GAOxD,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQ2L,OAAiB3L,EAAQib,eAAe,UAChDvC,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAOqP,EAAOE,OAA8B,IAAIuF,QAAQlF,SACrGP,GAYX4M,EAA0BtM,gBAAkB,SAAyBtb,EAASgb,GAC1E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqM,EAA0BpM,OAAS,SAAgBC,EAAQhW,GACjDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGugB,0BAChGnM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ2L,MAAQ+M,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,UACvE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4nB,EAA0B5L,gBAAkB,SAAyBP,GAGjE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0M,EAA0B3L,OAAS,SAAgBjc,GAC/C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQ2L,OAAiB3L,EAAQib,eAAe,WAC5Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,QAExD,MAAO,SAAW5L,EAE1B,OAAO,MAWX6nB,EAA0BtX,WAAa,SAAoB6L,GACvD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGugB,0BACxC,OAAOzL,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGugB,0BACxC,GAAwB,MAApBzL,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,yEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAoB,MAAhB/J,EAAOxQ,MAAe,CACtB,GAA4B,kBAAjBwQ,EAAOxQ,MACd,MAAM+U,UAAU,qEACpB1gB,EAAQ2L,MAAQ+M,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,OAEvE,OAAO3L,GAYX4nB,EAA0BtL,SAAW,SAAkBtc,EAASgY,GACvDA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAOxQ,MAAQ,MAEM,MAArB3L,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACnE,MAAjBhY,EAAQ2L,OAAiB3L,EAAQib,eAAe,WAChDkB,EAAOxQ,MAAQ+M,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAOqM,IACrEmE,GAUXyL,EAA0BlN,UAAU+B,OAAS,WACzC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkL,EAzNqB,GA4NhCvgB,EAAGwgB,oCAAuC,WAkBtC,SAASA,EAAoCrN,GACzC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAqiB,EAAoCnN,UAAUsL,UAAY,KAQ1D6B,EAAoCnN,UAAUpV,cAAgB,GAU9DuiB,EAAoC9O,OAAS,SAAgByB,GACzD,OAAO,IAAIqN,EAAoCrN,IAYnDqN,EAAoC9M,OAAS,SAAgB/a,EAASgb,GAOlE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvF,MAAzBvb,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACrD0V,GAYX6M,EAAoCvM,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCsM,EAAoCrM,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwgB,oCAChGpM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX6nB,EAAoC7L,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC2M,EAAoC5L,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA6B,MAAzBC,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACjB,iCACR,MAWXuiB,EAAoCvX,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGwgB,oCACxC,OAAO1L,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwgB,oCACxC,GAAwB,MAApB1L,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,mFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF4B,MAAxB7J,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBACnCtF,GAYX6nB,EAAoCvL,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO7W,cAAgB,IAEF,MAArBtF,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC3D,MAAzBhY,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eAC5B6W,GAUX0L,EAAoCnN,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDmL,EApN+B,GAuN1CxgB,EAAGygB,oCAAuC,WAkBtC,SAASA,EAAoCtN,GAEzC,GADA1b,KAAK6M,MAAQ,GACT6O,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAsiB,EAAoCpN,UAAUwL,UAAY,KAQ1D4B,EAAoCpN,UAAU/O,MAAQ6M,EAAMgL,WAU5DsE,EAAoC/O,OAAS,SAAgByB,GACzD,OAAO,IAAIsN,EAAoCtN,IAYnDsN,EAAoC/M,OAAS,SAAgB/a,EAASgb,GAKlE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQ2L,OAAiB3L,EAAQ2L,MAAMlG,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAMnG,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYX8M,EAAoCxM,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuM,EAAoCtM,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGygB,oCAChGrM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,SACjCzF,EAAQ2L,MAAQ,IACpB3L,EAAQ2L,MAAMuJ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8nB,EAAoC9L,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4M,EAAoC7L,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQ2L,OACvB,MAAO,wBACX,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,MAAMnG,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWX+nB,EAAoCxX,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGygB,oCACxC,OAAO3L,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGygB,oCACxC,GAAwB,MAApB3L,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,mFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOxQ,MAAO,CACd,IAAKhM,MAAMC,QAAQuc,EAAOxQ,OACtB,MAAM+U,UAAU,8EACpB1gB,EAAQ2L,MAAQ,GAChB,IAAK,IAAInG,EAAI,EAAGA,EAAI2W,EAAOxQ,MAAMlG,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOxQ,MAAMnG,GACpB,MAAMkb,UAAU,+EACpB1gB,EAAQ2L,MAAMnG,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,MAAMnG,KAGpF,OAAOxF,GAYX8nB,EAAoCxL,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOxQ,MAAQ,IACfqM,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,OAAQ,CACvC0W,EAAOxQ,MAAQ,GACf,IAAK,IAAIgY,EAAI,EAAGA,EAAI3jB,EAAQ2L,MAAMlG,SAAUke,EACxCxH,EAAOxQ,MAAMgY,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAMgY,GAAI3L,GAEtF,OAAOmE,GAUX2L,EAAoCpN,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoL,EAzO+B,GA4O1CzgB,EAAG0gB,gCAAmC,WAkBlC,SAASA,EAAgCvN,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAuiB,EAAgCrN,UAAUsL,UAAY,KAQtD+B,EAAgCrN,UAAUhS,UAAY,GAUtDqf,EAAgChP,OAAS,SAAgByB,GACrD,OAAO,IAAIuN,EAAgCvN,IAY/CuN,EAAgChN,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3F,MAArBvb,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WACrDsS,GAYX+M,EAAgCzM,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCwM,EAAgCvM,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0gB,gCAChGtM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX+nB,EAAgC/L,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC6M,EAAgC9L,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAyB,MAArBC,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACjB,6BACR,MAWXqf,EAAgCzX,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG0gB,gCACxC,OAAO5L,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0gB,gCACxC,GAAwB,MAApB5L,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,+EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFwB,MAApB7J,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YAC/B1I,GAYX+nB,EAAgCzL,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOzT,UAAY,IAEE,MAArB1I,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC/D,MAArBhY,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACxByT,GAUX4L,EAAgCrN,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDqL,EApN2B,GAuNtC1gB,EAAG2gB,gCAAmC,WAkBlC,SAASA,EAAgCxN,GAErC,GADA1b,KAAK6M,MAAQ,GACT6O,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAwiB,EAAgCtN,UAAUwL,UAAY,KAQtD8B,EAAgCtN,UAAU/O,MAAQ6M,EAAMgL,WAUxDwE,EAAgCjP,OAAS,SAAgByB,GACrD,OAAO,IAAIwN,EAAgCxN,IAY/CwN,EAAgCjN,OAAS,SAAgB/a,EAASgb,GAK9D,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQ2L,OAAiB3L,EAAQ2L,MAAMlG,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAMnG,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXgN,EAAgC1M,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCyM,EAAgCxM,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2gB,gCAChGvM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,SACjCzF,EAAQ2L,MAAQ,IACpB3L,EAAQ2L,MAAMuJ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXgoB,EAAgChM,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC8M,EAAgC/L,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQ2L,OACvB,MAAO,wBACX,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,MAAMnG,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWXioB,EAAgC1X,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG2gB,gCACxC,OAAO7L,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2gB,gCACxC,GAAwB,MAApB7L,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,+EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOxQ,MAAO,CACd,IAAKhM,MAAMC,QAAQuc,EAAOxQ,OACtB,MAAM+U,UAAU,0EACpB1gB,EAAQ2L,MAAQ,GAChB,IAAK,IAAInG,EAAI,EAAGA,EAAI2W,EAAOxQ,MAAMlG,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOxQ,MAAMnG,GACpB,MAAMkb,UAAU,2EACpB1gB,EAAQ2L,MAAMnG,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,MAAMnG,KAGpF,OAAOxF,GAYXgoB,EAAgC1L,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOxQ,MAAQ,IACfqM,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,OAAQ,CACvC0W,EAAOxQ,MAAQ,GACf,IAAK,IAAIgY,EAAI,EAAGA,EAAI3jB,EAAQ2L,MAAMlG,SAAUke,EACxCxH,EAAOxQ,MAAMgY,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAMgY,GAAI3L,GAEtF,OAAOmE,GAUX6L,EAAgCtN,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDsL,EAzO2B,GA4OtC3gB,EAAG4gB,8BAAiC,WAkBhC,SAASA,EAA8BzN,GACnC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAyiB,EAA8BvN,UAAUsL,UAAY,KAQpDiC,EAA8BvN,UAAUtU,QAAU,GAUlD6hB,EAA8BlP,OAAS,SAAgByB,GACnD,OAAO,IAAIyN,EAA8BzN,IAY7CyN,EAA8BlN,OAAS,SAAgB/a,EAASgb,GAO5D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQoG,SAAmBpG,EAAQib,eAAe,YAClDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoG,SACrD4U,GAYXiN,EAA8B3M,gBAAkB,SAAyBtb,EAASgb,GAC9E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC0M,EAA8BzM,OAAS,SAAgBC,EAAQhW,GACrDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4gB,8BAChGxM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoG,QAAUqV,EAAON,SACzB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXioB,EAA8BjM,gBAAkB,SAAyBP,GAGrE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC+M,EAA8BhM,OAAS,SAAgBjc,GACnD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAuB,MAAnBC,EAAQoG,SAAmBpG,EAAQib,eAAe,aAC7CzC,EAAM0D,SAASlc,EAAQoG,SACjB,2BACR,MAWX6hB,EAA8B3X,WAAa,SAAoB6L,GAC3D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG4gB,8BACxC,OAAO9L,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4gB,8BACxC,GAAwB,MAApB9L,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,6EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFsB,MAAlB7J,EAAO/V,UACPpG,EAAQoG,QAAUgW,OAAOD,EAAO/V,UAC7BpG,GAYXioB,EAA8B3L,SAAW,SAAkBtc,EAASgY,GAC3DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO/V,QAAU,IAEI,MAArBpG,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjE,MAAnBhY,EAAQoG,SAAmBpG,EAAQib,eAAe,aAClDkB,EAAO/V,QAAUpG,EAAQoG,SACtB+V,GAUX8L,EAA8BvN,UAAU+B,OAAS,WAC7C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDuL,EApNyB,GAuNpC5gB,EAAG6gB,8BAAiC,WAkBhC,SAASA,EAA8B1N,GAEnC,GADA1b,KAAK6M,MAAQ,GACT6O,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA0iB,EAA8BxN,UAAUwL,UAAY,KAQpDgC,EAA8BxN,UAAU/O,MAAQ6M,EAAMgL,WAUtD0E,EAA8BnP,OAAS,SAAgByB,GACnD,OAAO,IAAI0N,EAA8B1N,IAY7C0N,EAA8BnN,OAAS,SAAgB/a,EAASgb,GAK5D,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQ2L,OAAiB3L,EAAQ2L,MAAMlG,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAMnG,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXkN,EAA8B5M,gBAAkB,SAAyBtb,EAASgb,GAC9E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC2M,EAA8B1M,OAAS,SAAgBC,EAAQhW,GACrDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6gB,8BAChGzM,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,SACjCzF,EAAQ2L,MAAQ,IACpB3L,EAAQ2L,MAAMuJ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXkoB,EAA8BlM,gBAAkB,SAAyBP,GAGrE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCgN,EAA8BjM,OAAS,SAAgBjc,GACnD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQ2L,OACvB,MAAO,wBACX,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,MAAMnG,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWXmoB,EAA8B5X,WAAa,SAAoB6L,GAC3D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG6gB,8BACxC,OAAO/L,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6gB,8BACxC,GAAwB,MAApB/L,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,6EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOxQ,MAAO,CACd,IAAKhM,MAAMC,QAAQuc,EAAOxQ,OACtB,MAAM+U,UAAU,wEACpB1gB,EAAQ2L,MAAQ,GAChB,IAAK,IAAInG,EAAI,EAAGA,EAAI2W,EAAOxQ,MAAMlG,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOxQ,MAAMnG,GACpB,MAAMkb,UAAU,yEACpB1gB,EAAQ2L,MAAMnG,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,MAAMnG,KAGpF,OAAOxF,GAYXkoB,EAA8B5L,SAAW,SAAkBtc,EAASgY,GAC3DA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOxQ,MAAQ,IACfqM,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,OAAQ,CACvC0W,EAAOxQ,MAAQ,GACf,IAAK,IAAIgY,EAAI,EAAGA,EAAI3jB,EAAQ2L,MAAMlG,SAAUke,EACxCxH,EAAOxQ,MAAMgY,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAMgY,GAAI3L,GAEtF,OAAOmE,GAUX+L,EAA8BxN,UAAU+B,OAAS,WAC7C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDwL,EAzOyB,GA4OpC7gB,EAAG8gB,oCAAuC,WAkBtC,SAASA,EAAoC3N,GACzC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA2iB,EAAoCzN,UAAUsL,UAAY,KAQ1DmC,EAAoCzN,UAAUtK,cAAgB,GAU9D+X,EAAoCpP,OAAS,SAAgByB,GACzD,OAAO,IAAI2N,EAAoC3N,IAYnD2N,EAAoCpN,OAAS,SAAgB/a,EAASgb,GAOlE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvF,MAAzBvb,EAAQoQ,eAAyBpQ,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoQ,eACrD4K,GAYXmN,EAAoC7M,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4M,EAAoC3M,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8gB,oCAChG1M,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoQ,cAAgBqL,EAAON,SAC/B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmoB,EAAoCnM,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiN,EAAoClM,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA6B,MAAzBC,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQoQ,eACjB,iCACR,MAWX+X,EAAoC7X,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8gB,oCACxC,OAAOhM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8gB,oCACxC,GAAwB,MAApBhM,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,mFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF4B,MAAxB7J,EAAO/L,gBACPpQ,EAAQoQ,cAAgBgM,OAAOD,EAAO/L,gBACnCpQ,GAYXmoB,EAAoC7L,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO/L,cAAgB,IAEF,MAArBpQ,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC3D,MAAzBhY,EAAQoQ,eAAyBpQ,EAAQib,eAAe,mBACxDkB,EAAO/L,cAAgBpQ,EAAQoQ,eAC5B+L,GAUXgM,EAAoCzN,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyL,EApN+B,GAuN1C9gB,EAAG+gB,oCAAuC,WAkBtC,SAASA,EAAoC5N,GAEzC,GADA1b,KAAK6M,MAAQ,GACT6O,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA4iB,EAAoC1N,UAAUwL,UAAY,KAQ1DkC,EAAoC1N,UAAU/O,MAAQ6M,EAAMgL,WAU5D4E,EAAoCrP,OAAS,SAAgByB,GACzD,OAAO,IAAI4N,EAAoC5N,IAYnD4N,EAAoCrN,OAAS,SAAgB/a,EAASgb,GAKlE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/F,MAAjBvb,EAAQ2L,OAAiB3L,EAAQ2L,MAAMlG,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAMnG,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXoN,EAAoC9M,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6M,EAAoC5M,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+gB,oCAChG3M,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,SACjCzF,EAAQ2L,MAAQ,IACpB3L,EAAQ2L,MAAMuJ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXooB,EAAoCpM,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkN,EAAoCnM,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAqB,MAAjBC,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQ2L,OACvB,MAAO,wBACX,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EAAG,CAC3C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,MAAMnG,IAE9D,MAAO,SAAWzF,GAG9B,OAAO,MAWXqoB,EAAoC9X,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+gB,oCACxC,OAAOjM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+gB,oCACxC,GAAwB,MAApBjM,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,mFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOxQ,MAAO,CACd,IAAKhM,MAAMC,QAAQuc,EAAOxQ,OACtB,MAAM+U,UAAU,8EACpB1gB,EAAQ2L,MAAQ,GAChB,IAAK,IAAInG,EAAI,EAAGA,EAAI2W,EAAOxQ,MAAMlG,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOxQ,MAAMnG,GACpB,MAAMkb,UAAU,+EACpB1gB,EAAQ2L,MAAMnG,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,MAAMnG,KAGpF,OAAOxF,GAYXooB,EAAoC9L,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOxQ,MAAQ,IACfqM,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,OAAQ,CACvC0W,EAAOxQ,MAAQ,GACf,IAAK,IAAIgY,EAAI,EAAGA,EAAI3jB,EAAQ2L,MAAMlG,SAAUke,EACxCxH,EAAOxQ,MAAMgY,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAMgY,GAAI3L,GAEtF,OAAOmE,GAUXiM,EAAoC1N,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD0L,EAzO+B,GA4O1C/gB,EAAGghB,sBAAyB,WAiBxB,SAASA,EAAsB7N,GAC3B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA6iB,EAAsB3N,UAAUsL,UAAY,KAU5CqC,EAAsBtP,OAAS,SAAgByB,GAC3C,OAAO,IAAI6N,EAAsB7N,IAYrC6N,EAAsBtN,OAAS,SAAgB/a,EAASgb,GAKpD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYXqN,EAAsB/M,gBAAkB,SAAyBtb,EAASgb,GACtE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC8M,EAAsB7M,OAAS,SAAgBC,EAAQhW,GAC7CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGghB,sBAChG5M,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXqoB,EAAsBrM,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCmN,EAAsBpM,OAAS,SAAgBjc,GAC3C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXsoB,EAAsB/X,WAAa,SAAoB6L,GACnD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGghB,sBACxC,OAAOlM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGghB,sBACxC,GAAwB,MAApBlM,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,qEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYXqoB,EAAsB/L,SAAW,SAAkBtc,EAASgY,GACnDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUXkM,EAAsB3N,UAAU+B,OAAS,WACrC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD2L,EA7LiB,GAgM5BhhB,EAAGihB,sBAAyB,WAkBxB,SAASA,EAAsB9N,GAE3B,GADA1b,KAAKkJ,SAAW,GACZwS,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA8iB,EAAsB5N,UAAUwL,UAAY,KAQ5CoC,EAAsB5N,UAAU1S,SAAWwQ,EAAMgL,WAUjD8E,EAAsBvP,OAAS,SAAgByB,GAC3C,OAAO,IAAI8N,EAAsB9N,IAYrC8N,EAAsBvN,OAAS,SAAgB/a,EAASgb,GAKpD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQgI,UAAoBhI,EAAQgI,SAASvC,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcjG,OAAO/a,EAAQgI,SAASxC,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYXsN,EAAsBhN,gBAAkB,SAAyBtb,EAASgb,GACtE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC+M,EAAsB9M,OAAS,SAAgBC,EAAQhW,GAC7CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGihB,sBAChG7M,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQgI,UAAYhI,EAAQgI,SAASvC,SACvCzF,EAAQgI,SAAW,IACvBhI,EAAQgI,SAASkN,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcxF,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXsoB,EAAsBtM,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCoN,EAAsBrM,OAAS,SAAgBjc,GAC3C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQgI,UAAoBhI,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQgI,UACvB,MAAO,2BACX,IAAK,IAAIxC,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc/E,OAAOjc,EAAQgI,SAASxC,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWXuoB,EAAsBhY,WAAa,SAAoB6L,GACnD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGihB,sBACxC,OAAOnM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGihB,sBACxC,GAAwB,MAApBnM,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,qEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOnU,SAAU,CACjB,IAAKrI,MAAMC,QAAQuc,EAAOnU,UACtB,MAAM0Y,UAAU,mEACpB1gB,EAAQgI,SAAW,GACnB,IAAK,IAAIxC,EAAI,EAAGA,EAAI2W,EAAOnU,SAASvC,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOnU,SAASxC,GACvB,MAAMkb,UAAU,oEACpB1gB,EAAQgI,SAASxC,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1Q,WAAW6L,EAAOnU,SAASxC,KAG7F,OAAOxF,GAYXsoB,EAAsBhM,SAAW,SAAkBtc,EAASgY,GACnDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOnU,SAAW,IAClBgQ,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQgI,UAAYhI,EAAQgI,SAASvC,OAAQ,CAC7C0W,EAAOnU,SAAW,GAClB,IAAK,IAAI2b,EAAI,EAAGA,EAAI3jB,EAAQgI,SAASvC,SAAUke,EAC3CxH,EAAOnU,SAAS2b,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1E,SAAStc,EAAQgI,SAAS2b,GAAI3L,GAE/F,OAAOmE,GAUXmM,EAAsB5N,UAAU+B,OAAS,WACrC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD4L,EAzOiB,GA4O5BjhB,EAAGkhB,gCAAmC,WAkBlC,SAASA,EAAgC/N,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA+iB,EAAgC7N,UAAUsL,UAAY,KAQtDuC,EAAgC7N,UAAUzS,WAAa,GAUvDsgB,EAAgCxP,OAAS,SAAgByB,GACrD,OAAO,IAAI+N,EAAgC/N,IAY/C+N,EAAgCxN,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC1F,MAAtBvb,EAAQiI,YAAsBjI,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQiI,YACrD+S,GAYXuN,EAAgCjN,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCgN,EAAgC/M,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkhB,gCAChG9M,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQiI,WAAawT,EAAON,SAC5B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXuoB,EAAgCvM,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCqN,EAAgCtM,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA0B,MAAtBC,EAAQiI,YAAsBjI,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQiI,YACjB,8BACR,MAWXsgB,EAAgCjY,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkhB,gCACxC,OAAOpM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkhB,gCACxC,GAAwB,MAApBpM,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,+EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFyB,MAArB7J,EAAOlU,aACPjI,EAAQiI,WAAamU,OAAOD,EAAOlU,aAChCjI,GAYXuoB,EAAgCjM,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOlU,WAAa,IAEC,MAArBjI,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC9D,MAAtBhY,EAAQiI,YAAsBjI,EAAQib,eAAe,gBACrDkB,EAAOlU,WAAajI,EAAQiI,YACzBkU,GAUXoM,EAAgC7N,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD6L,EApN2B,GAuNtClhB,EAAGmhB,gCAAmC,WAkBlC,SAASA,EAAgChO,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LAgjB,EAAgC9N,UAAUwL,UAAY,KAQtDsC,EAAgC9N,UAAU1S,SAAW,KAUrDwgB,EAAgCzP,OAAS,SAAgByB,GACrD,OAAO,IAAIgO,EAAgChO,IAY/CgO,EAAgCzN,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQgI,UAAoBhI,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcjG,OAAO/a,EAAQgI,SAAUgT,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3GP,GAYXwN,EAAgClN,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCiN,EAAgChN,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmhB,gCAChG/M,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQgI,SAAW0Q,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcxF,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwoB,EAAgCxM,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCsN,EAAgCvM,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQgI,UAAoBhI,EAAQib,eAAe,cAC/Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc/E,OAAOjc,EAAQgI,WAE3D,MAAO,YAAcjI,EAE7B,OAAO,MAWXyoB,EAAgClY,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmhB,gCACxC,OAAOrM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmhB,gCACxC,GAAwB,MAApBrM,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,+EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAuB,MAAnB/J,EAAOnU,SAAkB,CACzB,GAA+B,kBAApBmU,EAAOnU,SACd,MAAM0Y,UAAU,8EACpB1gB,EAAQgI,SAAW0Q,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1Q,WAAW6L,EAAOnU,UAE7E,OAAOhI,GAYXwoB,EAAgClM,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAOnU,SAAW,MAEG,MAArBhI,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IAChE,MAApBhY,EAAQgI,UAAoBhI,EAAQib,eAAe,cACnDkB,EAAOnU,SAAW0Q,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1E,SAAStc,EAAQgI,SAAUgQ,IAC9EmE,GAUXqM,EAAgC9N,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD8L,EAzN2B,GA4NtCnhB,EAAGohB,mCAAsC,WAkBrC,SAASA,EAAmCjO,GACxC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAijB,EAAmC/N,UAAUsL,UAAY,KAQzDyC,EAAmC/N,UAAUhS,UAAY,GAUzD+f,EAAmC1P,OAAS,SAAgByB,GACxD,OAAO,IAAIiO,EAAmCjO,IAYlDiO,EAAmC1N,OAAS,SAAgB/a,EAASgb,GAOjE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3F,MAArBvb,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WACrDsS,GAYXyN,EAAmCnN,gBAAkB,SAAyBtb,EAASgb,GACnF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCkN,EAAmCjN,OAAS,SAAgBC,EAAQhW,GAC1DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGohB,mCAChGhN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXyoB,EAAmCzM,gBAAkB,SAAyBP,GAG1E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCuN,EAAmCxM,OAAS,SAAgBjc,GACxD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAyB,MAArBC,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACjB,6BACR,MAWX+f,EAAmCnY,WAAa,SAAoB6L,GAChE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGohB,mCACxC,OAAOtM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGohB,mCACxC,GAAwB,MAApBtM,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,kFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFwB,MAApB7J,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YAC/B1I,GAYXyoB,EAAmCnM,SAAW,SAAkBtc,EAASgY,GAChEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOzT,UAAY,IAEE,MAArB1I,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC/D,MAArBhY,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACxByT,GAUXsM,EAAmC/N,UAAU+B,OAAS,WAClD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD+L,EApN8B,GAuNzCphB,EAAGqhB,mCAAsC,WAkBrC,SAASA,EAAmClO,GAExC,GADA1b,KAAKkJ,SAAW,GACZwS,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAkjB,EAAmChO,UAAUwL,UAAY,KAQzDwC,EAAmChO,UAAU1S,SAAWwQ,EAAMgL,WAU9DkF,EAAmC3P,OAAS,SAAgByB,GACxD,OAAO,IAAIkO,EAAmClO,IAYlDkO,EAAmC3N,OAAS,SAAgB/a,EAASgb,GAKjE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQgI,UAAoBhI,EAAQgI,SAASvC,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcjG,OAAO/a,EAAQgI,SAASxC,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYX0N,EAAmCpN,gBAAkB,SAAyBtb,EAASgb,GACnF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmN,EAAmClN,OAAS,SAAgBC,EAAQhW,GAC1DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqhB,mCAChGjN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQgI,UAAYhI,EAAQgI,SAASvC,SACvCzF,EAAQgI,SAAW,IACvBhI,EAAQgI,SAASkN,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcxF,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0oB,EAAmC1M,gBAAkB,SAAyBP,GAG1E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwN,EAAmCzM,OAAS,SAAgBjc,GACxD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQgI,UAAoBhI,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQgI,UACvB,MAAO,2BACX,IAAK,IAAIxC,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc/E,OAAOjc,EAAQgI,SAASxC,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWX2oB,EAAmCpY,WAAa,SAAoB6L,GAChE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqhB,mCACxC,OAAOvM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqhB,mCACxC,GAAwB,MAApBvM,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,kFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOnU,SAAU,CACjB,IAAKrI,MAAMC,QAAQuc,EAAOnU,UACtB,MAAM0Y,UAAU,gFACpB1gB,EAAQgI,SAAW,GACnB,IAAK,IAAIxC,EAAI,EAAGA,EAAI2W,EAAOnU,SAASvC,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOnU,SAASxC,GACvB,MAAMkb,UAAU,iFACpB1gB,EAAQgI,SAASxC,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1Q,WAAW6L,EAAOnU,SAASxC,KAG7F,OAAOxF,GAYX0oB,EAAmCpM,SAAW,SAAkBtc,EAASgY,GAChEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOnU,SAAW,IAClBgQ,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQgI,UAAYhI,EAAQgI,SAASvC,OAAQ,CAC7C0W,EAAOnU,SAAW,GAClB,IAAK,IAAI2b,EAAI,EAAGA,EAAI3jB,EAAQgI,SAASvC,SAAUke,EAC3CxH,EAAOnU,SAAS2b,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1E,SAAStc,EAAQgI,SAAS2b,GAAI3L,GAE/F,OAAOmE,GAUXuM,EAAmChO,UAAU+B,OAAS,WAClD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgM,EAzO8B,GA4OzCrhB,EAAGshB,uCAA0C,WAkBzC,SAASA,EAAuCnO,GAC5C,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAmjB,EAAuCjO,UAAUsL,UAAY,KAQ7D2C,EAAuCjO,UAAUpV,cAAgB,GAUjEqjB,EAAuC5P,OAAS,SAAgByB,GAC5D,OAAO,IAAImO,EAAuCnO,IAYtDmO,EAAuC5N,OAAS,SAAgB/a,EAASgb,GAOrE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvF,MAAzBvb,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACrD0V,GAYX2N,EAAuCrN,gBAAkB,SAAyBtb,EAASgb,GACvF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoN,EAAuCnN,OAAS,SAAgBC,EAAQhW,GAC9DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGshB,uCAChGlN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2oB,EAAuC3M,gBAAkB,SAAyBP,GAG9E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyN,EAAuC1M,OAAS,SAAgBjc,GAC5D,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA6B,MAAzBC,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACjB,iCACR,MAWXqjB,EAAuCrY,WAAa,SAAoB6L,GACpE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGshB,uCACxC,OAAOxM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGshB,uCACxC,GAAwB,MAApBxM,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,sFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF4B,MAAxB7J,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBACnCtF,GAYX2oB,EAAuCrM,SAAW,SAAkBtc,EAASgY,GACpEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO7W,cAAgB,IAEF,MAArBtF,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC3D,MAAzBhY,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eAC5B6W,GAUXwM,EAAuCjO,UAAU+B,OAAS,WACtD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiM,EApNkC,GAuN7CthB,EAAGuhB,uCAA0C,WAkBzC,SAASA,EAAuCpO,GAE5C,GADA1b,KAAKkJ,SAAW,GACZwS,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAojB,EAAuClO,UAAUwL,UAAY,KAQ7D0C,EAAuClO,UAAU1S,SAAWwQ,EAAMgL,WAUlEoF,EAAuC7P,OAAS,SAAgByB,GAC5D,OAAO,IAAIoO,EAAuCpO,IAYtDoO,EAAuC7N,OAAS,SAAgB/a,EAASgb,GAKrE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQgI,UAAoBhI,EAAQgI,SAASvC,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcjG,OAAO/a,EAAQgI,SAASxC,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYX4N,EAAuCtN,gBAAkB,SAAyBtb,EAASgb,GACvF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqN,EAAuCpN,OAAS,SAAgBC,EAAQhW,GAC9DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuhB,uCAChGnN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQgI,UAAYhI,EAAQgI,SAASvC,SACvCzF,EAAQgI,SAAW,IACvBhI,EAAQgI,SAASkN,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcxF,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4oB,EAAuC5M,gBAAkB,SAAyBP,GAG9E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0N,EAAuC3M,OAAS,SAAgBjc,GAC5D,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQgI,UAAoBhI,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQgI,UACvB,MAAO,2BACX,IAAK,IAAIxC,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc/E,OAAOjc,EAAQgI,SAASxC,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWX6oB,EAAuCtY,WAAa,SAAoB6L,GACpE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGuhB,uCACxC,OAAOzM,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuhB,uCACxC,GAAwB,MAApBzM,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,sFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOnU,SAAU,CACjB,IAAKrI,MAAMC,QAAQuc,EAAOnU,UACtB,MAAM0Y,UAAU,oFACpB1gB,EAAQgI,SAAW,GACnB,IAAK,IAAIxC,EAAI,EAAGA,EAAI2W,EAAOnU,SAASvC,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOnU,SAASxC,GACvB,MAAMkb,UAAU,qFACpB1gB,EAAQgI,SAASxC,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1Q,WAAW6L,EAAOnU,SAASxC,KAG7F,OAAOxF,GAYX4oB,EAAuCtM,SAAW,SAAkBtc,EAASgY,GACpEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOnU,SAAW,IAClBgQ,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQgI,UAAYhI,EAAQgI,SAASvC,OAAQ,CAC7C0W,EAAOnU,SAAW,GAClB,IAAK,IAAI2b,EAAI,EAAGA,EAAI3jB,EAAQgI,SAASvC,SAAUke,EAC3CxH,EAAOnU,SAAS2b,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1E,SAAStc,EAAQgI,SAAS2b,GAAI3L,GAE/F,OAAOmE,GAUXyM,EAAuClO,UAAU+B,OAAS,WACtD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkM,EAzOkC,GA4O7CvhB,EAAGwhB,qBAAwB,WAiBvB,SAASA,EAAqBrO,GAC1B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAqjB,EAAqBnO,UAAUsL,UAAY,KAU3C6C,EAAqB9P,OAAS,SAAgByB,GAC1C,OAAO,IAAIqO,EAAqBrO,IAYpCqO,EAAqB9N,OAAS,SAAgB/a,EAASgb,GAKnD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYX6N,EAAqBvN,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCsN,EAAqBrN,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwhB,qBAChGpN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX6oB,EAAqB7M,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC2N,EAAqB5M,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWX8oB,EAAqBvY,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGwhB,qBACxC,OAAO1M,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwhB,qBACxC,GAAwB,MAApB1M,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,oEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYX6oB,EAAqBvM,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUX0M,EAAqBnO,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDmM,EA7LgB,GAgM3BxhB,EAAGyhB,qBAAwB,WAkBvB,SAASA,EAAqBtO,GAE1B,GADA1b,KAAK+K,QAAU,GACX2Q,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAsjB,EAAqBpO,UAAUwL,UAAY,KAQ3C4C,EAAqBpO,UAAU7Q,QAAU2O,EAAMgL,WAU/CsF,EAAqB/P,OAAS,SAAgByB,GAC1C,OAAO,IAAIsO,EAAqBtO,IAYpCsO,EAAqB/N,OAAS,SAAgB/a,EAASgb,GAKnD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQ6J,SAAmB7J,EAAQ6J,QAAQpE,OAC3C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ6J,QAAQpE,SAAUD,EAC1CkT,EAAMvR,IAAIC,SAASC,GAAG0F,aAAagO,OAAO/a,EAAQ6J,QAAQrE,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvH,OAAOP,GAYX8N,EAAqBxN,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuN,EAAqBtN,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyhB,qBAChGrN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ6J,SAAW7J,EAAQ6J,QAAQpE,SACrCzF,EAAQ6J,QAAU,IACtB7J,EAAQ6J,QAAQqL,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG0F,aAAayO,OAAOC,EAAQA,EAAOP,WAC9E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8oB,EAAqB9M,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4N,EAAqB7M,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAuB,MAAnBC,EAAQ6J,SAAmB7J,EAAQib,eAAe,WAAY,CAC9D,IAAKtb,MAAMC,QAAQI,EAAQ6J,SACvB,MAAO,0BACX,IAAK,IAAIrE,EAAI,EAAGA,EAAIxF,EAAQ6J,QAAQpE,SAAUD,EAAG,CAC7C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG0F,aAAakP,OAAOjc,EAAQ6J,QAAQrE,IAElE,MAAO,WAAazF,GAGhC,OAAO,MAWX+oB,EAAqBxY,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGyhB,qBACxC,OAAO3M,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyhB,qBACxC,GAAwB,MAApB3M,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,oEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOtS,QAAS,CAChB,IAAKlK,MAAMC,QAAQuc,EAAOtS,SACtB,MAAM6W,UAAU,iEACpB1gB,EAAQ6J,QAAU,GAClB,IAAK,IAAIrE,EAAI,EAAGA,EAAI2W,EAAOtS,QAAQpE,SAAUD,EAAG,CAC5C,GAAiC,kBAAtB2W,EAAOtS,QAAQrE,GACtB,MAAMkb,UAAU,kEACpB1gB,EAAQ6J,QAAQrE,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauD,WAAW6L,EAAOtS,QAAQrE,KAG1F,OAAOxF,GAYX8oB,EAAqBxM,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOtS,QAAU,IACjBmO,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ6J,SAAW7J,EAAQ6J,QAAQpE,OAAQ,CAC3C0W,EAAOtS,QAAU,GACjB,IAAK,IAAI8Z,EAAI,EAAGA,EAAI3jB,EAAQ6J,QAAQpE,SAAUke,EAC1CxH,EAAOtS,QAAQ8Z,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauP,SAAStc,EAAQ6J,QAAQ8Z,GAAI3L,GAE5F,OAAOmE,GAUX2M,EAAqBpO,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoM,EAzOgB,GA4O3BzhB,EAAG0hB,8BAAiC,WAkBhC,SAASA,EAA8BvO,GACnC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAujB,EAA8BrO,UAAUsL,UAAY,KAQpD+C,EAA8BrO,UAAUhS,UAAY,GAUpDqgB,EAA8BhQ,OAAS,SAAgByB,GACnD,OAAO,IAAIuO,EAA8BvO,IAY7CuO,EAA8BhO,OAAS,SAAgB/a,EAASgb,GAO5D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3F,MAArBvb,EAAQ0I,WAAqB1I,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ0I,WACrDsS,GAYX+N,EAA8BzN,gBAAkB,SAAyBtb,EAASgb,GAC9E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCwN,EAA8BvN,OAAS,SAAgBC,EAAQhW,GACrDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0hB,8BAChGtN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ0I,UAAY+S,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX+oB,EAA8B/M,gBAAkB,SAAyBP,GAGrE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC6N,EAA8B9M,OAAS,SAAgBjc,GACnD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAyB,MAArBC,EAAQ0I,WAAqB1I,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQ0I,WACjB,6BACR,MAWXqgB,EAA8BzY,WAAa,SAAoB6L,GAC3D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG0hB,8BACxC,OAAO5M,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0hB,8BACxC,GAAwB,MAApB5M,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,6EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFwB,MAApB7J,EAAOzT,YACP1I,EAAQ0I,UAAY0T,OAAOD,EAAOzT,YAC/B1I,GAYX+oB,EAA8BzM,SAAW,SAAkBtc,EAASgY,GAC3DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOzT,UAAY,IAEE,MAArB1I,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC/D,MAArBhY,EAAQ0I,WAAqB1I,EAAQib,eAAe,eACpDkB,EAAOzT,UAAY1I,EAAQ0I,WACxByT,GAUX4M,EAA8BrO,UAAU+B,OAAS,WAC7C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDqM,EApNyB,GAuNpC1hB,EAAG2hB,8BAAiC,WAkBhC,SAASA,EAA8BxO,GACnC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LAwjB,EAA8BtO,UAAUwL,UAAY,KAQpD8C,EAA8BtO,UAAU7Q,QAAU,KAUlDmf,EAA8BjQ,OAAS,SAAgByB,GACnD,OAAO,IAAIwO,EAA8BxO,IAY7CwO,EAA8BjO,OAAS,SAAgB/a,EAASgb,GAO5D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQ6J,SAAmB7J,EAAQib,eAAe,YAClDvC,EAAMvR,IAAIC,SAASC,GAAG0F,aAAagO,OAAO/a,EAAQ6J,QAASmR,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzGP,GAYXgO,EAA8B1N,gBAAkB,SAAyBtb,EAASgb,GAC9E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCyN,EAA8BxN,OAAS,SAAgBC,EAAQhW,GACrDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2hB,8BAChGvN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ6J,QAAU6O,EAAMvR,IAAIC,SAASC,GAAG0F,aAAayO,OAAOC,EAAQA,EAAOP,UAC3E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXgpB,EAA8BhN,gBAAkB,SAAyBP,GAGrE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC8N,EAA8B/M,OAAS,SAAgBjc,GACnD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAuB,MAAnBC,EAAQ6J,SAAmB7J,EAAQib,eAAe,aAC9Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG0F,aAAakP,OAAOjc,EAAQ6J,UAE1D,MAAO,WAAa9J,EAE5B,OAAO,MAWXipB,EAA8B1Y,WAAa,SAAoB6L,GAC3D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG2hB,8BACxC,OAAO7M,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2hB,8BACxC,GAAwB,MAApB7M,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,6EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAsB,MAAlB/J,EAAOtS,QAAiB,CACxB,GAA8B,kBAAnBsS,EAAOtS,QACd,MAAM6W,UAAU,2EACpB1gB,EAAQ6J,QAAU6O,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauD,WAAW6L,EAAOtS,SAE3E,OAAO7J,GAYXgpB,EAA8B1M,SAAW,SAAkBtc,EAASgY,GAC3DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAOtS,QAAU,MAEI,MAArB7J,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACjE,MAAnBhY,EAAQ6J,SAAmB7J,EAAQib,eAAe,aAClDkB,EAAOtS,QAAU6O,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauP,SAAStc,EAAQ6J,QAASmO,IAC3EmE,GAUX6M,EAA8BtO,UAAU+B,OAAS,WAC7C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDsM,EAzNyB,GA4NpC3hB,EAAG4hB,oCAAuC,WAkBtC,SAASA,EAAoCzO,GACzC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAyjB,EAAoCvO,UAAUsL,UAAY,KAQ1DiD,EAAoCvO,UAAUxI,YAAc,GAU5D+W,EAAoClQ,OAAS,SAAgByB,GACzD,OAAO,IAAIyO,EAAoCzO,IAYnDyO,EAAoClO,OAAS,SAAgB/a,EAASgb,GAOlE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzF,MAAvBvb,EAAQkS,aAAuBlS,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQkS,aACrD8I,GAYXiO,EAAoC3N,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC0N,EAAoCzN,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4hB,oCAChGxN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQkS,YAAcuJ,EAAON,SAC7B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXipB,EAAoCjN,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC+N,EAAoChN,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA2B,MAAvBC,EAAQkS,aAAuBlS,EAAQib,eAAe,iBACjDzC,EAAM0D,SAASlc,EAAQkS,aACjB,+BACR,MAWX+W,EAAoC3Y,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG4hB,oCACxC,OAAO9M,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4hB,oCACxC,GAAwB,MAApB9M,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,mFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF0B,MAAtB7J,EAAOjK,cACPlS,EAAQkS,YAAckK,OAAOD,EAAOjK,cACjClS,GAYXipB,EAAoC3M,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOjK,YAAc,IAEA,MAArBlS,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC7D,MAAvBhY,EAAQkS,aAAuBlS,EAAQib,eAAe,iBACtDkB,EAAOjK,YAAclS,EAAQkS,aAC1BiK,GAUX8M,EAAoCvO,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDuM,EApN+B,GAuN1C5hB,EAAG6hB,oCAAuC,WAkBtC,SAASA,EAAoC1O,GAEzC,GADA1b,KAAK+K,QAAU,GACX2Q,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA0jB,EAAoCxO,UAAUwL,UAAY,KAQ1DgD,EAAoCxO,UAAU7Q,QAAU2O,EAAMgL,WAU9D0F,EAAoCnQ,OAAS,SAAgByB,GACzD,OAAO,IAAI0O,EAAoC1O,IAYnD0O,EAAoCnO,OAAS,SAAgB/a,EAASgb,GAKlE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQ6J,SAAmB7J,EAAQ6J,QAAQpE,OAC3C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ6J,QAAQpE,SAAUD,EAC1CkT,EAAMvR,IAAIC,SAASC,GAAG0F,aAAagO,OAAO/a,EAAQ6J,QAAQrE,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvH,OAAOP,GAYXkO,EAAoC5N,gBAAkB,SAAyBtb,EAASgb,GACpF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC2N,EAAoC1N,OAAS,SAAgBC,EAAQhW,GAC3DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6hB,oCAChGzN,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ6J,SAAW7J,EAAQ6J,QAAQpE,SACrCzF,EAAQ6J,QAAU,IACtB7J,EAAQ6J,QAAQqL,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG0F,aAAayO,OAAOC,EAAQA,EAAOP,WAC9E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXkpB,EAAoClN,gBAAkB,SAAyBP,GAG3E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCgO,EAAoCjN,OAAS,SAAgBjc,GACzD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAuB,MAAnBC,EAAQ6J,SAAmB7J,EAAQib,eAAe,WAAY,CAC9D,IAAKtb,MAAMC,QAAQI,EAAQ6J,SACvB,MAAO,0BACX,IAAK,IAAIrE,EAAI,EAAGA,EAAIxF,EAAQ6J,QAAQpE,SAAUD,EAAG,CAC7C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG0F,aAAakP,OAAOjc,EAAQ6J,QAAQrE,IAElE,MAAO,WAAazF,GAGhC,OAAO,MAWXmpB,EAAoC5Y,WAAa,SAAoB6L,GACjE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG6hB,oCACxC,OAAO/M,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6hB,oCACxC,GAAwB,MAApB/M,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,mFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOtS,QAAS,CAChB,IAAKlK,MAAMC,QAAQuc,EAAOtS,SACtB,MAAM6W,UAAU,gFACpB1gB,EAAQ6J,QAAU,GAClB,IAAK,IAAIrE,EAAI,EAAGA,EAAI2W,EAAOtS,QAAQpE,SAAUD,EAAG,CAC5C,GAAiC,kBAAtB2W,EAAOtS,QAAQrE,GACtB,MAAMkb,UAAU,iFACpB1gB,EAAQ6J,QAAQrE,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauD,WAAW6L,EAAOtS,QAAQrE,KAG1F,OAAOxF,GAYXkpB,EAAoC5M,SAAW,SAAkBtc,EAASgY,GACjEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOtS,QAAU,IACjBmO,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ6J,SAAW7J,EAAQ6J,QAAQpE,OAAQ,CAC3C0W,EAAOtS,QAAU,GACjB,IAAK,IAAI8Z,EAAI,EAAGA,EAAI3jB,EAAQ6J,QAAQpE,SAAUke,EAC1CxH,EAAOtS,QAAQ8Z,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauP,SAAStc,EAAQ6J,QAAQ8Z,GAAI3L,GAE5F,OAAOmE,GAUX+M,EAAoCxO,UAAU+B,OAAS,WACnD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDwM,EAzO+B,GA4O1C7hB,EAAG8hB,sBAAyB,WAiBxB,SAASA,EAAsB3O,GAC3B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA2jB,EAAsBzO,UAAUsL,UAAY,KAU5CmD,EAAsBpQ,OAAS,SAAgByB,GAC3C,OAAO,IAAI2O,EAAsB3O,IAYrC2O,EAAsBpO,OAAS,SAAgB/a,EAASgb,GAKpD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYXmO,EAAsB7N,gBAAkB,SAAyBtb,EAASgb,GACtE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4N,EAAsB3N,OAAS,SAAgBC,EAAQhW,GAC7CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8hB,sBAChG1N,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmpB,EAAsBnN,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiO,EAAsBlN,OAAS,SAAgBjc,GAC3C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXopB,EAAsB7Y,WAAa,SAAoB6L,GACnD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8hB,sBACxC,OAAOhN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8hB,sBACxC,GAAwB,MAApBhN,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,qEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYXmpB,EAAsB7M,SAAW,SAAkBtc,EAASgY,GACnDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUXgN,EAAsBzO,UAAU+B,OAAS,WACrC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyM,EA7LiB,GAgM5B9hB,EAAG+hB,sBAAyB,WAkBxB,SAASA,EAAsB5O,GAE3B,GADA1b,KAAKoG,SAAW,GACZsV,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA4jB,EAAsB1O,UAAUwL,UAAY,KAQ5CkD,EAAsB1O,UAAUxV,SAAWsT,EAAMgL,WAUjD4F,EAAsBrQ,OAAS,SAAgByB,GAC3C,OAAO,IAAI4O,EAAsB5O,IAYrC4O,EAAsBrO,OAAS,SAAgB/a,EAASgb,GAKpD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQkF,SAASO,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAASM,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYXoO,EAAsB9N,gBAAkB,SAAyBtb,EAASgb,GACtE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6N,EAAsB5N,OAAS,SAAgBC,EAAQhW,GAC7CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+hB,sBAChG3N,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQkF,UAAYlF,EAAQkF,SAASO,SACvCzF,EAAQkF,SAAW,IACvBlF,EAAQkF,SAASgQ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXopB,EAAsBpN,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkO,EAAsBnN,OAAS,SAAgBjc,GAC3C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQkF,UACvB,MAAO,2BACX,IAAK,IAAIM,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,SAASM,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWXqpB,EAAsB9Y,WAAa,SAAoB6L,GACnD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+hB,sBACxC,OAAOjN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+hB,sBACxC,GAAwB,MAApBjN,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,qEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOjX,SAAU,CACjB,IAAKvF,MAAMC,QAAQuc,EAAOjX,UACtB,MAAMwb,UAAU,mEACpB1gB,EAAQkF,SAAW,GACnB,IAAK,IAAIM,EAAI,EAAGA,EAAI2W,EAAOjX,SAASO,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOjX,SAASM,GACvB,MAAMkb,UAAU,oEACpB1gB,EAAQkF,SAASM,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,SAASM,KAG7F,OAAOxF,GAYXopB,EAAsB9M,SAAW,SAAkBtc,EAASgY,GACnDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOjX,SAAW,IAClB8S,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQkF,UAAYlF,EAAQkF,SAASO,OAAQ,CAC7C0W,EAAOjX,SAAW,GAClB,IAAK,IAAIye,EAAI,EAAGA,EAAI3jB,EAAQkF,SAASO,SAAUke,EAC3CxH,EAAOjX,SAASye,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAASye,GAAI3L,GAE/F,OAAOmE,GAUXiN,EAAsB1O,UAAU+B,OAAS,WACrC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD0M,EAzOiB,GA4O5B/hB,EAAGgiB,gCAAmC,WAkBlC,SAASA,EAAgC7O,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA6jB,EAAgC3O,UAAUsL,UAAY,KAQtDqD,EAAgC3O,UAAUiC,WAAa,GAUvD0M,EAAgCtQ,OAAS,SAAgByB,GACrD,OAAO,IAAI6O,EAAgC7O,IAY/C6O,EAAgCtO,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC1F,MAAtBvb,EAAQ2c,YAAsB3c,EAAQib,eAAe,eACrDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQ2c,YACrD3B,GAYXqO,EAAgC/N,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC8N,EAAgC7N,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGgiB,gCAChG5N,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQ2c,WAAalB,EAAON,SAC5B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXqpB,EAAgCrN,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCmO,EAAgCpN,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA0B,MAAtBC,EAAQ2c,YAAsB3c,EAAQib,eAAe,gBAChDzC,EAAM0D,SAASlc,EAAQ2c,YACjB,8BACR,MAWX0M,EAAgC/Y,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGgiB,gCACxC,OAAOlN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGgiB,gCACxC,GAAwB,MAApBlN,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,+EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFyB,MAArB7J,EAAOQ,aACP3c,EAAQ2c,WAAaP,OAAOD,EAAOQ,aAChC3c,GAYXqpB,EAAgC/M,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAOQ,WAAa,IAEC,MAArB3c,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC9D,MAAtBhY,EAAQ2c,YAAsB3c,EAAQib,eAAe,gBACrDkB,EAAOQ,WAAa3c,EAAQ2c,YACzBR,GAUXkN,EAAgC3O,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD2M,EApN2B,GAuNtChiB,EAAGiiB,gCAAmC,WAkBlC,SAASA,EAAgC9O,GACrC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAmMhD,OA1LA8jB,EAAgC5O,UAAUwL,UAAY,KAQtDoD,EAAgC5O,UAAUxV,SAAW,KAUrDokB,EAAgCvQ,OAAS,SAAgByB,GACrD,OAAO,IAAI8O,EAAgC9O,IAY/C8O,EAAgCvO,OAAS,SAAgB/a,EAASgb,GAO9D,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3GP,GAYXsO,EAAgChO,gBAAkB,SAAyBtb,EAASgb,GAChF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC+N,EAAgC9N,OAAS,SAAgBC,EAAQhW,GACvDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGiiB,gCAChG7N,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXspB,EAAgCtN,gBAAkB,SAAyBP,GAGvE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCoO,EAAgCrN,OAAS,SAAgBjc,GACrD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKID,EANR,GAAyB,MAArBC,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,cAC/Clb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,WAE3D,MAAO,YAAcnF,EAE7B,OAAO,MAWXupB,EAAgChZ,WAAa,SAAoB6L,GAC7D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGiiB,gCACxC,OAAOnN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGiiB,gCACxC,GAAwB,MAApBnN,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,+EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAuB,MAAnB/J,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,8EACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAE7E,OAAOlF,GAYXspB,EAAgChN,SAAW,SAAkBtc,EAASgY,GAC7DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO+J,UAAY,KACnB/J,EAAOjX,SAAW,MAEG,MAArBlF,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IAChE,MAApBhY,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC9EmE,GAUXmN,EAAgC5O,UAAU+B,OAAS,WAC/C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD4M,EAzN2B,GA4NtCjiB,EAAGkiB,uCAA0C,WAkBzC,SAASA,EAAuC/O,GAC5C,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLA+jB,EAAuC7O,UAAUsL,UAAY,KAQ7DuD,EAAuC7O,UAAUpV,cAAgB,GAUjEikB,EAAuCxQ,OAAS,SAAgByB,GAC5D,OAAO,IAAI+O,EAAuC/O,IAYtD+O,EAAuCxO,OAAS,SAAgB/a,EAASgb,GAOrE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvF,MAAzBvb,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACrD0V,GAYXuO,EAAuCjO,gBAAkB,SAAyBtb,EAASgb,GACvF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCgO,EAAuC/N,OAAS,SAAgBC,EAAQhW,GAC9DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkiB,uCAChG9N,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXupB,EAAuCvN,gBAAkB,SAAyBP,GAG9E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCqO,EAAuCtN,OAAS,SAAgBjc,GAC5D,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA6B,MAAzBC,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACjB,iCACR,MAWXikB,EAAuCjZ,WAAa,SAAoB6L,GACpE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkiB,uCACxC,OAAOpN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkiB,uCACxC,GAAwB,MAApBpN,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,sFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAF4B,MAAxB7J,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBACnCtF,GAYXupB,EAAuCjN,SAAW,SAAkBtc,EAASgY,GACpEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO7W,cAAgB,IAEF,MAArBtF,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC3D,MAAzBhY,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eAC5B6W,GAUXoN,EAAuC7O,UAAU+B,OAAS,WACtD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD6M,EApNkC,GAuN7CliB,EAAGmiB,uCAA0C,WAkBzC,SAASA,EAAuChP,GAE5C,GADA1b,KAAKoG,SAAW,GACZsV,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAgkB,EAAuC9O,UAAUwL,UAAY,KAQ7DsD,EAAuC9O,UAAUxV,SAAWsT,EAAMgL,WAUlEgG,EAAuCzQ,OAAS,SAAgByB,GAC5D,OAAO,IAAIgP,EAAuChP,IAYtDgP,EAAuCzO,OAAS,SAAgB/a,EAASgb,GAKrE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQkF,SAASO,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAASM,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYXwO,EAAuClO,gBAAkB,SAAyBtb,EAASgb,GACvF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCiO,EAAuChO,OAAS,SAAgBC,EAAQhW,GAC9DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmiB,uCAChG/N,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQkF,UAAYlF,EAAQkF,SAASO,SACvCzF,EAAQkF,SAAW,IACvBlF,EAAQkF,SAASgQ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwpB,EAAuCxN,gBAAkB,SAAyBP,GAG9E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCsO,EAAuCvN,OAAS,SAAgBjc,GAC5D,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQkF,UACvB,MAAO,2BACX,IAAK,IAAIM,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,SAASM,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWXypB,EAAuClZ,WAAa,SAAoB6L,GACpE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmiB,uCACxC,OAAOrN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmiB,uCACxC,GAAwB,MAApBrN,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,sFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOjX,SAAU,CACjB,IAAKvF,MAAMC,QAAQuc,EAAOjX,UACtB,MAAMwb,UAAU,oFACpB1gB,EAAQkF,SAAW,GACnB,IAAK,IAAIM,EAAI,EAAGA,EAAI2W,EAAOjX,SAASO,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOjX,SAASM,GACvB,MAAMkb,UAAU,qFACpB1gB,EAAQkF,SAASM,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,SAASM,KAG7F,OAAOxF,GAYXwpB,EAAuClN,SAAW,SAAkBtc,EAASgY,GACpEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOjX,SAAW,IAClB8S,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQkF,UAAYlF,EAAQkF,SAASO,OAAQ,CAC7C0W,EAAOjX,SAAW,GAClB,IAAK,IAAIye,EAAI,EAAGA,EAAI3jB,EAAQkF,SAASO,SAAUke,EAC3CxH,EAAOjX,SAASye,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAASye,GAAI3L,GAE/F,OAAOmE,GAUXqN,EAAuC9O,UAAU+B,OAAS,WACtD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD8M,EAzOkC,GA4O7CniB,EAAGoiB,mCAAsC,WAkBrC,SAASA,EAAmCjP,GACxC,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA8LhD,OArLAikB,EAAmC/O,UAAUsL,UAAY,KAQzDyD,EAAmC/O,UAAUtZ,UAAY,GAUzDqoB,EAAmC1Q,OAAS,SAAgByB,GACxD,OAAO,IAAIiP,EAAmCjP,IAYlDiP,EAAmC1O,OAAS,SAAgB/a,EAASgb,GAOjE,OANKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3F,MAArBvb,EAAQoB,WAAqBpB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQoB,WACrD4Z,GAYXyO,EAAmCnO,gBAAkB,SAAyBtb,EAASgb,GACnF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCkO,EAAmCjO,OAAS,SAAgBC,EAAQhW,GAC1DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGoiB,mCAChGhO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoB,UAAYqa,EAAON,SAC3B,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXypB,EAAmCzN,gBAAkB,SAAyBP,GAG1E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCuO,EAAmCxN,OAAS,SAAgBjc,GACxD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAyB,MAArBC,EAAQoB,WAAqBpB,EAAQib,eAAe,eAC/CzC,EAAM0D,SAASlc,EAAQoB,WACjB,6BACR,MAWXqoB,EAAmCnZ,WAAa,SAAoB6L,GAChE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGoiB,mCACxC,OAAOtN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGoiB,mCACxC,GAAwB,MAApBtN,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,kFACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAI/E,OAFwB,MAApB7J,EAAO/a,YACPpB,EAAQoB,UAAYgb,OAAOD,EAAO/a,YAC/BpB,GAYXypB,EAAmCnN,SAAW,SAAkBtc,EAASgY,GAChEA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,OARInE,EAAQuE,WACRJ,EAAO6J,UAAY,KACnB7J,EAAO/a,UAAY,IAEE,MAArBpB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC/D,MAArBhY,EAAQoB,WAAqBpB,EAAQib,eAAe,eACpDkB,EAAO/a,UAAYpB,EAAQoB,WACxB+a,GAUXsN,EAAmC/O,UAAU+B,OAAS,WAClD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD+M,EApN8B,GAuNzCpiB,EAAGqiB,mCAAsC,WAkBrC,SAASA,EAAmClP,GAExC,GADA1b,KAAKoG,SAAW,GACZsV,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAkkB,EAAmChP,UAAUwL,UAAY,KAQzDwD,EAAmChP,UAAUxV,SAAWsT,EAAMgL,WAU9DkG,EAAmC3Q,OAAS,SAAgByB,GACxD,OAAO,IAAIkP,EAAmClP,IAYlDkP,EAAmC3O,OAAS,SAAgB/a,EAASgb,GAKjE,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQkF,SAASO,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAASM,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYX0O,EAAmCpO,gBAAkB,SAAyBtb,EAASgb,GACnF,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmO,EAAmClO,OAAS,SAAgBC,EAAQhW,GAC1DgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqiB,mCAChGjO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQkF,UAAYlF,EAAQkF,SAASO,SACvCzF,EAAQkF,SAAW,IACvBlF,EAAQkF,SAASgQ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0pB,EAAmC1N,gBAAkB,SAAyBP,GAG1E,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwO,EAAmCzN,OAAS,SAAgBjc,GACxD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQkF,UACvB,MAAO,2BACX,IAAK,IAAIM,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,SAASM,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWX2pB,EAAmCpZ,WAAa,SAAoB6L,GAChE,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqiB,mCACxC,OAAOvN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqiB,mCACxC,GAAwB,MAApBvN,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,kFACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOjX,SAAU,CACjB,IAAKvF,MAAMC,QAAQuc,EAAOjX,UACtB,MAAMwb,UAAU,gFACpB1gB,EAAQkF,SAAW,GACnB,IAAK,IAAIM,EAAI,EAAGA,EAAI2W,EAAOjX,SAASO,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOjX,SAASM,GACvB,MAAMkb,UAAU,iFACpB1gB,EAAQkF,SAASM,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,SAASM,KAG7F,OAAOxF,GAYX0pB,EAAmCpN,SAAW,SAAkBtc,EAASgY,GAChEA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOjX,SAAW,IAClB8S,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQkF,UAAYlF,EAAQkF,SAASO,OAAQ,CAC7C0W,EAAOjX,SAAW,GAClB,IAAK,IAAIye,EAAI,EAAGA,EAAI3jB,EAAQkF,SAASO,SAAUke,EAC3CxH,EAAOjX,SAASye,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAASye,GAAI3L,GAE/F,OAAOmE,GAUXuN,EAAmChP,UAAU+B,OAAS,WAClD,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgN,EAzO8B,GA4OzCriB,EAAGsiB,+BAAkC,WAkBjC,SAASA,EAA+BnP,GAEpC,GADA1b,KAAKqC,QAAU,GACXqZ,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAmkB,EAA+BjP,UAAUsL,UAAY,KAQrD2D,EAA+BjP,UAAUvZ,QAAUqX,EAAMgL,WAUzDmG,EAA+B5Q,OAAS,SAAgByB,GACpD,OAAO,IAAImP,EAA+BnP,IAY9CmP,EAA+B5O,OAAS,SAAgB/a,EAASgb,GAK7D,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7F,MAAnBvb,EAAQmB,SAAmBnB,EAAQmB,QAAQsE,OAC3C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQmB,QAAQsE,SAAUD,EAC1CkT,EAAMvR,IAAIC,SAASC,GAAGkT,aAAaQ,OAAO/a,EAAQmB,QAAQqE,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvH,OAAOP,GAYX2O,EAA+BrO,gBAAkB,SAAyBtb,EAASgb,GAC/E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoO,EAA+BnO,OAAS,SAAgBC,EAAQhW,GACtDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsiB,+BAChGlO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQmB,SAAWnB,EAAQmB,QAAQsE,SACrCzF,EAAQmB,QAAU,IACtBnB,EAAQmB,QAAQ+T,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGkT,aAAaiB,OAAOC,EAAQA,EAAOP,WAC9E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2pB,EAA+B3N,gBAAkB,SAAyBP,GAGtE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyO,EAA+B1N,OAAS,SAAgBjc,GACpD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,YAE5D,MAAO,aAAejmB,EAE9B,GAAuB,MAAnBC,EAAQmB,SAAmBnB,EAAQib,eAAe,WAAY,CAC9D,IAAKtb,MAAMC,QAAQI,EAAQmB,SACvB,MAAO,0BACX,IAAK,IAAIqE,EAAI,EAAGA,EAAIxF,EAAQmB,QAAQsE,SAAUD,EAAG,CAC7C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGkT,aAAa0B,OAAOjc,EAAQmB,QAAQqE,IAElE,MAAO,WAAazF,GAGhC,OAAO,MAWX4pB,EAA+BrZ,WAAa,SAAoB6L,GAC5D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGsiB,+BACxC,OAAOxN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsiB,+BACxC,GAAwB,MAApBxN,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,8EACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,GAAI7J,EAAOhb,QAAS,CAChB,IAAKxB,MAAMC,QAAQuc,EAAOhb,SACtB,MAAMuf,UAAU,2EACpB1gB,EAAQmB,QAAU,GAClB,IAAK,IAAIqE,EAAI,EAAGA,EAAI2W,EAAOhb,QAAQsE,SAAUD,EAAG,CAC5C,GAAiC,kBAAtB2W,EAAOhb,QAAQqE,GACtB,MAAMkb,UAAU,4EACpB1gB,EAAQmB,QAAQqE,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGkT,aAAajK,WAAW6L,EAAOhb,QAAQqE,KAG1F,OAAOxF,GAYX2pB,EAA+BrN,SAAW,SAAkBtc,EAASgY,GAC5DA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOhb,QAAU,IACjB6W,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACpFhY,EAAQmB,SAAWnB,EAAQmB,QAAQsE,OAAQ,CAC3C0W,EAAOhb,QAAU,GACjB,IAAK,IAAIwiB,EAAI,EAAGA,EAAI3jB,EAAQmB,QAAQsE,SAAUke,EAC1CxH,EAAOhb,QAAQwiB,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGkT,aAAa+B,SAAStc,EAAQmB,QAAQwiB,GAAI3L,GAE5F,OAAOmE,GAUXwN,EAA+BjP,UAAU+B,OAAS,WAC9C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiN,EAzO0B,GA4OrCtiB,EAAGuiB,+BAAkC,WAmBjC,SAASA,EAA+BpP,GAGpC,GAFA1b,KAAK+qB,eAAiB,GACtB/qB,KAAKgrB,mBAAqB,GACtBtP,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA4PhD,OAnPAokB,EAA+BlP,UAAUwL,UAAY,KAQrD0D,EAA+BlP,UAAUmP,eAAiBrR,EAAMgL,WAQhEoG,EAA+BlP,UAAUoP,mBAAqBtR,EAAMgL,WAUpEoG,EAA+B7Q,OAAS,SAAgByB,GACpD,OAAO,IAAIoP,EAA+BpP,IAY9CoP,EAA+B7O,OAAS,SAAgB/a,EAASgb,GAK7D,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACtF,MAA1Bvb,EAAQ6pB,gBAA0B7pB,EAAQ6pB,eAAepkB,OACzD,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ6pB,eAAepkB,SAAUD,EACjDkT,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBrJ,OAAO/a,EAAQ6pB,eAAerkB,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACrI,GAAkC,MAA9Bvb,EAAQ8pB,oBAA8B9pB,EAAQ8pB,mBAAmBrkB,OACjE,IAASD,EAAI,EAAGA,EAAIxF,EAAQ8pB,mBAAmBrkB,SAAUD,EACrDkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQ8pB,mBAAmBtkB,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnI,OAAOP,GAYX4O,EAA+BtO,gBAAkB,SAAyBtb,EAASgb,GAC/E,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqO,EAA+BpO,OAAS,SAAgBC,EAAQhW,GACtDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuiB,+BAChGnO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQ6pB,gBAAkB7pB,EAAQ6pB,eAAepkB,SACnDzF,EAAQ6pB,eAAiB,IAC7B7pB,EAAQ6pB,eAAe3U,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoB5I,OAAOC,EAAQA,EAAOP,WAC5F,MACJ,KAAK,EACKlb,EAAQ8pB,oBAAsB9pB,EAAQ8pB,mBAAmBrkB,SAC3DzF,EAAQ8pB,mBAAqB,IACjC9pB,EAAQ8pB,mBAAmB5U,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,WAC1F,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4pB,EAA+B5N,gBAAkB,SAAyBP,GAGtE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0O,EAA+B3N,OAAS,SAAgBjc,GACpD,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAA8B,MAA1BC,EAAQ6pB,gBAA0B7pB,EAAQib,eAAe,kBAAmB,CAC5E,IAAKtb,MAAMC,QAAQI,EAAQ6pB,gBACvB,MAAO,iCACX,IAAK,IAAIrkB,EAAI,EAAGA,EAAIxF,EAAQ6pB,eAAepkB,SAAUD,EAAG,CAEpD,GADIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoBnI,OAAOjc,EAAQ6pB,eAAerkB,IAEhF,MAAO,kBAAoBzF,GAGvC,GAAkC,MAA9BC,EAAQ8pB,oBAA8B9pB,EAAQib,eAAe,sBAAuB,CACpF,IAAKtb,MAAMC,QAAQI,EAAQ8pB,oBACvB,MAAO,qCACX,IAAStkB,EAAI,EAAGA,EAAIxF,EAAQ8pB,mBAAmBrkB,SAAUD,EAAG,CACxD,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQ8pB,mBAAmBtkB,IAE9E,MAAO,sBAAwBzF,GAG3C,OAAO,MAWX6pB,EAA+BtZ,WAAa,SAAoB6L,GAC5D,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGuiB,+BACxC,OAAOzN,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGuiB,+BACxC,GAAwB,MAApBzN,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,8EACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAO0N,eAAgB,CACvB,IAAKlqB,MAAMC,QAAQuc,EAAO0N,gBACtB,MAAMnJ,UAAU,kFACpB1gB,EAAQ6pB,eAAiB,GACzB,IAAK,IAAIrkB,EAAI,EAAGA,EAAI2W,EAAO0N,eAAepkB,SAAUD,EAAG,CACnD,GAAwC,kBAA7B2W,EAAO0N,eAAerkB,GAC7B,MAAMkb,UAAU,mFACpB1gB,EAAQ6pB,eAAerkB,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoB9T,WAAW6L,EAAO0N,eAAerkB,KAG/G,GAAI2W,EAAO2N,mBAAoB,CAC3B,IAAKnqB,MAAMC,QAAQuc,EAAO2N,oBACtB,MAAMpJ,UAAU,sFACpB1gB,EAAQ8pB,mBAAqB,GAC7B,IAAStkB,EAAI,EAAGA,EAAI2W,EAAO2N,mBAAmBrkB,SAAUD,EAAG,CACvD,GAA4C,kBAAjC2W,EAAO2N,mBAAmBtkB,GACjC,MAAMkb,UAAU,uFACpB1gB,EAAQ8pB,mBAAmBtkB,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAO2N,mBAAmBtkB,KAGjH,OAAOxF,GAYX4pB,EAA+BtN,SAAW,SAAkBtc,EAASgY,GAC5DA,IACDA,EAAU,IACd,IAAImE,EAAS,GASb,IARInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAO0N,eAAiB,GACxB1N,EAAO2N,mBAAqB,IAE5B9R,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQ6pB,gBAAkB7pB,EAAQ6pB,eAAepkB,OAAQ,CACzD0W,EAAO0N,eAAiB,GACxB,IAAK,IAAIlG,EAAI,EAAGA,EAAI3jB,EAAQ6pB,eAAepkB,SAAUke,EACjDxH,EAAO0N,eAAelG,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG+c,oBAAoB9H,SAAStc,EAAQ6pB,eAAelG,GAAI3L,GAEjH,GAAIhY,EAAQ8pB,oBAAsB9pB,EAAQ8pB,mBAAmBrkB,OAAQ,CACjE0W,EAAO2N,mBAAqB,GAC5B,IAASnG,EAAI,EAAGA,EAAI3jB,EAAQ8pB,mBAAmBrkB,SAAUke,EACrDxH,EAAO2N,mBAAmBnG,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQ8pB,mBAAmBnG,GAAI3L,GAEnH,OAAOmE,GAUXyN,EAA+BlP,UAAU+B,OAAS,WAC9C,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkN,EArR0B,GAwRrCviB,EAAG0iB,yBAA4B,WAiB3B,SAASA,EAAyBvP,GAC9B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAukB,EAAyBrP,UAAUsL,UAAY,KAU/C+D,EAAyBhR,OAAS,SAAgByB,GAC9C,OAAO,IAAIuP,EAAyBvP,IAYxCuP,EAAyBhP,OAAS,SAAgB/a,EAASgb,GAKvD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYX+O,EAAyBzO,gBAAkB,SAAyBtb,EAASgb,GACzE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCwO,EAAyBvO,OAAS,SAAgBC,EAAQhW,GAChDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0iB,yBAChGtO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX+pB,EAAyB/N,gBAAkB,SAAyBP,GAGhE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC6O,EAAyB9N,OAAS,SAAgBjc,GAC9C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXgqB,EAAyBzZ,WAAa,SAAoB6L,GACtD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG0iB,yBACxC,OAAO5N,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG0iB,yBACxC,GAAwB,MAApB5N,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,wEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYX+pB,EAAyBzN,SAAW,SAAkBtc,EAASgY,GACtDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUX4N,EAAyBrP,UAAU+B,OAAS,WACxC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDqN,EA7LoB,GAgM/B1iB,EAAG2iB,yBAA4B,WAkB3B,SAASA,EAAyBxP,GAE9B,GADA1b,KAAKoG,SAAW,GACZsV,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAwkB,EAAyBtP,UAAUwL,UAAY,KAQ/C8D,EAAyBtP,UAAUxV,SAAWsT,EAAMgL,WAUpDwG,EAAyBjR,OAAS,SAAgByB,GAC9C,OAAO,IAAIwP,EAAyBxP,IAYxCwP,EAAyBjP,OAAS,SAAgB/a,EAASgb,GAKvD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC5F,MAApBvb,EAAQkF,UAAoBlF,EAAQkF,SAASO,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAASM,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYXgP,EAAyB1O,gBAAkB,SAAyBtb,EAASgb,GACzE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCyO,EAAyBxO,OAAS,SAAgBC,EAAQhW,GAChDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2iB,yBAChGvO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQkF,UAAYlF,EAAQkF,SAASO,SACvCzF,EAAQkF,SAAW,IACvBlF,EAAQkF,SAASgQ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXgqB,EAAyBhO,gBAAkB,SAAyBP,GAGhE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC8O,EAAyB/N,OAAS,SAAgBjc,GAC9C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAwB,MAApBC,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQkF,UACvB,MAAO,2BACX,IAAK,IAAIM,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAAG,CAC9C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,SAASM,IAEpE,MAAO,YAAczF,GAGjC,OAAO,MAWXiqB,EAAyB1Z,WAAa,SAAoB6L,GACtD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG2iB,yBACxC,OAAO7N,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG2iB,yBACxC,GAAwB,MAApB7N,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,wEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOjX,SAAU,CACjB,IAAKvF,MAAMC,QAAQuc,EAAOjX,UACtB,MAAMwb,UAAU,sEACpB1gB,EAAQkF,SAAW,GACnB,IAAK,IAAIM,EAAI,EAAGA,EAAI2W,EAAOjX,SAASO,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOjX,SAASM,GACvB,MAAMkb,UAAU,uEACpB1gB,EAAQkF,SAASM,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,SAASM,KAG7F,OAAOxF,GAYXgqB,EAAyB1N,SAAW,SAAkBtc,EAASgY,GACtDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOjX,SAAW,IAClB8S,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQkF,UAAYlF,EAAQkF,SAASO,OAAQ,CAC7C0W,EAAOjX,SAAW,GAClB,IAAK,IAAIye,EAAI,EAAGA,EAAI3jB,EAAQkF,SAASO,SAAUke,EAC3CxH,EAAOjX,SAASye,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAASye,GAAI3L,GAE/F,OAAOmE,GAUX6N,EAAyBtP,UAAU+B,OAAS,WACxC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDsN,EAzOoB,GA4O/B3iB,EAAG4iB,kBAAqB,WAiBpB,SAASA,EAAkBzP,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAykB,EAAkBvP,UAAUsL,UAAY,KAUxCiE,EAAkBlR,OAAS,SAAgByB,GACvC,OAAO,IAAIyP,EAAkBzP,IAYjCyP,EAAkBlP,OAAS,SAAgB/a,EAASgb,GAKhD,OAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC7GP,GAYXiP,EAAkB3O,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC0O,EAAkBzO,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4iB,kBAChGxO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXiqB,EAAkBjO,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC+O,EAAkBhO,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAAO,MAWXkqB,EAAkB3Z,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG4iB,kBACxC,OAAO9N,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4iB,kBACxC,GAAwB,MAApB9N,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,iEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAE/E,OAAOhmB,GAYXiqB,EAAkB3N,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO6J,UAAY,MACE,MAArBhmB,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IACjFmE,GAUX8N,EAAkBvP,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDuN,EA7La,GAgMxB5iB,EAAG6iB,kBAAqB,WAkBpB,SAASA,EAAkB1P,GAEvB,GADA1b,KAAK0Q,KAAO,GACRgL,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMA0kB,EAAkBxP,UAAUwL,UAAY,KAQxCgE,EAAkBxP,UAAUlL,KAAOgJ,EAAMgL,WAUzC0G,EAAkBnR,OAAS,SAAgByB,GACvC,OAAO,IAAI0P,EAAkB1P,IAYjC0P,EAAkBnP,OAAS,SAAgB/a,EAASgb,GAKhD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAChG,MAAhBvb,EAAQwP,MAAgBxP,EAAQwP,KAAK/J,OACrC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQwP,KAAK/J,SAAUD,EACvCkT,EAAMvR,IAAIC,SAASC,GAAGya,UAAU/G,OAAO/a,EAAQwP,KAAKhK,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACjH,OAAOP,GAYXkP,EAAkB5O,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC2O,EAAkB1O,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6iB,kBAChGzO,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQwP,MAAQxP,EAAQwP,KAAK/J,SAC/BzF,EAAQwP,KAAO,IACnBxP,EAAQwP,KAAK0F,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGya,UAAUtG,OAAOC,EAAQA,EAAOP,WACxE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXkqB,EAAkBlO,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCgP,EAAkBjO,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAoB,MAAhBC,EAAQwP,MAAgBxP,EAAQib,eAAe,QAAS,CACxD,IAAKtb,MAAMC,QAAQI,EAAQwP,MACvB,MAAO,uBACX,IAAK,IAAIhK,EAAI,EAAGA,EAAIxF,EAAQwP,KAAK/J,SAAUD,EAAG,CAC1C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGya,UAAU7F,OAAOjc,EAAQwP,KAAKhK,IAE5D,MAAO,QAAUzF,GAG7B,OAAO,MAWXmqB,EAAkB5Z,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG6iB,kBACxC,OAAO/N,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6iB,kBACxC,GAAwB,MAApB/N,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,iEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAO3M,KAAM,CACb,IAAK7P,MAAMC,QAAQuc,EAAO3M,MACtB,MAAMkR,UAAU,2DACpB1gB,EAAQwP,KAAO,GACf,IAAK,IAAIhK,EAAI,EAAGA,EAAI2W,EAAO3M,KAAK/J,SAAUD,EAAG,CACzC,GAA8B,kBAAnB2W,EAAO3M,KAAKhK,GACnB,MAAMkb,UAAU,4DACpB1gB,EAAQwP,KAAKhK,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxR,WAAW6L,EAAO3M,KAAKhK,KAGjF,OAAOxF,GAYXkqB,EAAkB5N,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAO3M,KAAO,IACdwI,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQwP,MAAQxP,EAAQwP,KAAK/J,OAAQ,CACrC0W,EAAO3M,KAAO,GACd,IAAK,IAAImU,EAAI,EAAGA,EAAI3jB,EAAQwP,KAAK/J,SAAUke,EACvCxH,EAAO3M,KAAKmU,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxF,SAAStc,EAAQwP,KAAKmU,GAAI3L,GAEnF,OAAOmE,GAUX+N,EAAkBxP,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDwN,EAzOa,GA4OxB7iB,EAAG8iB,qBAAwB,WAsBvB,SAASA,EAAqB3P,GAC1B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAiWhD,OAxVA2kB,EAAqBzP,UAAUsL,UAAY,KAQ3CmE,EAAqBzP,UAAU0P,eAAiB5R,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ9F2L,EAAqBzP,UAAU2P,aAAe7R,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ5F2L,EAAqBzP,UAAUpV,cAAgB,GAQ/C6kB,EAAqBzP,UAAU4P,UAAY,EAQ3CH,EAAqBzP,UAAU6P,iBAAmB,EAUlDJ,EAAqBpR,OAAS,SAAgByB,GAC1C,OAAO,IAAI2P,EAAqB3P,IAYpC2P,EAAqBpP,OAAS,SAAgB/a,EAASgb,GAenD,OAdKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACtF,MAA1Bvb,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQoqB,gBACjC,MAAxBpqB,EAAQqqB,cAAwBrqB,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQqqB,cAChC,MAAzBrqB,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACnC,MAArBtF,EAAQsqB,WAAqBtqB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQsqB,WAC3B,MAA5BtqB,EAAQuqB,kBAA4BvqB,EAAQib,eAAe,qBAC3DD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQuqB,kBACpDvP,GAYXmP,EAAqB7O,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4O,EAAqB3O,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8iB,qBAChG1O,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoqB,eAAiB3O,EAAOgD,UAChC,MACJ,KAAK,EACDze,EAAQqqB,aAAe5O,EAAOgD,UAC9B,MACJ,KAAK,EACDze,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQsqB,UAAY7O,EAAOL,QAC3B,MACJ,KAAK,EACDpb,EAAQuqB,iBAAmB9O,EAAOL,QAClC,MACJ,QACIK,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmqB,EAAqBnO,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiP,EAAqBlO,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,GAA8B,MAA1BC,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,oBACpDzC,EAAMyF,UAAUje,EAAQoqB,mBAAqBpqB,EAAQoqB,gBAAkB5R,EAAMyF,UAAUje,EAAQoqB,eAAe1L,MAAQlG,EAAMyF,UAAUje,EAAQoqB,eAAezL,OAC9J,MAAO,wCACf,GAA4B,MAAxB3e,EAAQqqB,cAAwBrqB,EAAQib,eAAe,kBAClDzC,EAAMyF,UAAUje,EAAQqqB,iBAAmBrqB,EAAQqqB,cAAgB7R,EAAMyF,UAAUje,EAAQqqB,aAAa3L,MAAQlG,EAAMyF,UAAUje,EAAQqqB,aAAa1L,OACtJ,MAAO,sCACf,GAA6B,MAAzB3e,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACxB,MAAO,iCACf,GAAyB,MAArBtF,EAAQsqB,WAAqBtqB,EAAQib,eAAe,aACpD,OAAQjb,EAAQsqB,WAChB,QACI,MAAO,iCACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAGT,GAAgC,MAA5BtqB,EAAQuqB,kBAA4BvqB,EAAQib,eAAe,oBAC3D,OAAQjb,EAAQuqB,kBAChB,QACI,MAAO,wCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAO,MAWXJ,EAAqB7Z,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8iB,qBACxC,OAAOhO,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8iB,qBACxC,GAAwB,MAApBhO,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,oEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAsB/E,OApB6B,MAAzB7J,EAAOiO,iBACH5R,EAAM+F,MACLve,EAAQoqB,eAAiB5R,EAAM+F,KAAKK,UAAUzC,EAAOiO,iBAAiBvL,UAAW,EAC5C,kBAA1B1C,EAAOiO,eACnBpqB,EAAQoqB,eAAiBna,SAASkM,EAAOiO,eAAgB,IACnB,kBAA1BjO,EAAOiO,eACnBpqB,EAAQoqB,eAAiBjO,EAAOiO,eACM,kBAA1BjO,EAAOiO,iBACnBpqB,EAAQoqB,eAAiB,IAAI5R,EAAMsG,SAAS3C,EAAOiO,eAAe1L,MAAQ,EAAGvC,EAAOiO,eAAezL,OAAS,GAAGI,aAC5F,MAAvB5C,EAAOkO,eACH7R,EAAM+F,MACLve,EAAQqqB,aAAe7R,EAAM+F,KAAKK,UAAUzC,EAAOkO,eAAexL,UAAW,EAC1C,kBAAxB1C,EAAOkO,aACnBrqB,EAAQqqB,aAAepa,SAASkM,EAAOkO,aAAc,IACjB,kBAAxBlO,EAAOkO,aACnBrqB,EAAQqqB,aAAelO,EAAOkO,aACM,kBAAxBlO,EAAOkO,eACnBrqB,EAAQqqB,aAAe,IAAI7R,EAAMsG,SAAS3C,EAAOkO,aAAa3L,MAAQ,EAAGvC,EAAOkO,aAAa1L,OAAS,GAAGI,aACrF,MAAxB5C,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBAClC6W,EAAOmO,WACf,IAAK,SACL,KAAK,EACDtqB,EAAQsqB,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDtqB,EAAQsqB,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDtqB,EAAQsqB,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDtqB,EAAQsqB,UAAY,EACpB,MACJ,IAAK,UACL,KAAK,EACDtqB,EAAQsqB,UAAY,EACpB,MACJ,IAAK,SACL,KAAK,EACDtqB,EAAQsqB,UAAY,EAGxB,OAAQnO,EAAOoO,kBACf,IAAK,WACL,KAAK,EACDvqB,EAAQuqB,iBAAmB,EAC3B,MACJ,IAAK,UACL,KAAK,EACDvqB,EAAQuqB,iBAAmB,EAC3B,MACJ,IAAK,YACL,KAAK,EACDvqB,EAAQuqB,iBAAmB,EAG/B,OAAOvqB,GAYXmqB,EAAqB7N,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAElB,GADAJ,EAAO6J,UAAY,KACfxN,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAElH7C,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS,IAAM,EAC7D,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEhH7C,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS,IAAM,EAC3DD,EAAO7W,cAAgB,GACvB6W,EAAOmO,UAAYtS,EAAQwE,QAAUJ,OAAS,SAAW,EACzDD,EAAOoO,iBAAmBvS,EAAQwE,QAAUJ,OAAS,WAAa,EAoBtE,OAlByB,MAArBpc,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC1D,MAA1BhY,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,oBACnB,kBAA3Bjb,EAAQoqB,eACfjO,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQoqB,gBAAkBpqB,EAAQoqB,eAE5FjO,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQoqB,gBAAkBpS,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQoqB,eAAe1L,MAAQ,EAAG1e,EAAQoqB,eAAezL,OAAS,GAAGI,WAAa/e,EAAQoqB,gBACpO,MAAxBpqB,EAAQqqB,cAAwBrqB,EAAQib,eAAe,kBACnB,kBAAzBjb,EAAQqqB,aACflO,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQqqB,cAAgBrqB,EAAQqqB,aAExFlO,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQqqB,cAAgBrS,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQqqB,aAAa3L,MAAQ,EAAG1e,EAAQqqB,aAAa1L,OAAS,GAAGI,WAAa/e,EAAQqqB,cAC3N,MAAzBrqB,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eACV,MAArBtF,EAAQsqB,WAAqBtqB,EAAQib,eAAe,eACpDkB,EAAOmO,UAAYtS,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAGgS,cAAcrZ,EAAQsqB,WAAatqB,EAAQsqB,WACnF,MAA5BtqB,EAAQuqB,kBAA4BvqB,EAAQib,eAAe,sBAC3DkB,EAAOoO,iBAAmBvS,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG+R,qBAAqBpZ,EAAQuqB,kBAAoBvqB,EAAQuqB,kBACjIpO,GAUXgO,EAAqBzP,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyN,EA3XgB,GA8X3B9iB,EAAGmjB,qBAAwB,WAkBvB,SAASA,EAAqBhQ,GAE1B,GADA1b,KAAK2rB,IAAM,GACPjQ,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAglB,EAAqB9P,UAAUwL,UAAY,KAQ3CsE,EAAqB9P,UAAU+P,IAAMjS,EAAMgL,WAU3CgH,EAAqBzR,OAAS,SAAgByB,GAC1C,OAAO,IAAIgQ,EAAqBhQ,IAYpCgQ,EAAqBzP,OAAS,SAAgB/a,EAASgb,GAKnD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACjG,MAAfvb,EAAQyqB,KAAezqB,EAAQyqB,IAAIhlB,OACnC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQyqB,IAAIhlB,SAAUD,EACtCkT,EAAMvR,IAAIC,SAASC,GAAGuc,SAAS7I,OAAO/a,EAAQyqB,IAAIjlB,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/G,OAAOP,GAYXwP,EAAqBlP,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCiP,EAAqBhP,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmjB,qBAChG/O,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQyqB,KAAOzqB,EAAQyqB,IAAIhlB,SAC7BzF,EAAQyqB,IAAM,IAClBzqB,EAAQyqB,IAAIvV,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGuc,SAASpI,OAAOC,EAAQA,EAAOP,WACtE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwqB,EAAqBxO,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCsP,EAAqBvO,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAmB,MAAfC,EAAQyqB,KAAezqB,EAAQib,eAAe,OAAQ,CACtD,IAAKtb,MAAMC,QAAQI,EAAQyqB,KACvB,MAAO,sBACX,IAAK,IAAIjlB,EAAI,EAAGA,EAAIxF,EAAQyqB,IAAIhlB,SAAUD,EAAG,CACzC,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGuc,SAAS3H,OAAOjc,EAAQyqB,IAAIjlB,IAE1D,MAAO,OAASzF,GAG5B,OAAO,MAWXyqB,EAAqBla,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmjB,qBACxC,OAAOrO,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmjB,qBACxC,GAAwB,MAApBrO,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,oEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOsO,IAAK,CACZ,IAAK9qB,MAAMC,QAAQuc,EAAOsO,KACtB,MAAM/J,UAAU,6DACpB1gB,EAAQyqB,IAAM,GACd,IAAK,IAAIjlB,EAAI,EAAGA,EAAI2W,EAAOsO,IAAIhlB,SAAUD,EAAG,CACxC,GAA6B,kBAAlB2W,EAAOsO,IAAIjlB,GAClB,MAAMkb,UAAU,8DACpB1gB,EAAQyqB,IAAIjlB,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGuc,SAAStT,WAAW6L,EAAOsO,IAAIjlB,KAG9E,OAAOxF,GAYXwqB,EAAqBlO,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOsO,IAAM,IACbzS,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQyqB,KAAOzqB,EAAQyqB,IAAIhlB,OAAQ,CACnC0W,EAAOsO,IAAM,GACb,IAAK,IAAI9G,EAAI,EAAGA,EAAI3jB,EAAQyqB,IAAIhlB,SAAUke,EACtCxH,EAAOsO,IAAI9G,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGuc,SAAStH,SAAStc,EAAQyqB,IAAI9G,GAAI3L,GAEhF,OAAOmE,GAUXqO,EAAqB9P,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD8N,EAzOgB,GA4O3BnjB,EAAGqjB,sBAAyB,WAqBxB,SAASA,EAAsBlQ,GAC3B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KA2ShD,OAlSAklB,EAAsBhQ,UAAUsL,UAAY,KAQ5C0E,EAAsBhQ,UAAU0P,eAAiB5R,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ/FkM,EAAsBhQ,UAAU2P,aAAe7R,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ7FkM,EAAsBhQ,UAAUpV,cAAgB,GAQhDolB,EAAsBhQ,UAAU6P,iBAAmB,EAUnDG,EAAsB3R,OAAS,SAAgByB,GAC3C,OAAO,IAAIkQ,EAAsBlQ,IAYrCkQ,EAAsB3P,OAAS,SAAgB/a,EAASgb,GAapD,OAZKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACtF,MAA1Bvb,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQoqB,gBACjC,MAAxBpqB,EAAQqqB,cAAwBrqB,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQqqB,cAChC,MAAzBrqB,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eAC5B,MAA5BtF,EAAQuqB,kBAA4BvqB,EAAQib,eAAe,qBAC3DD,EAAOE,OAA8B,IAAIE,MAAMpb,EAAQuqB,kBACpDvP,GAYX0P,EAAsBpP,gBAAkB,SAAyBtb,EAASgb,GACtE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmP,EAAsBlP,OAAS,SAAgBC,EAAQhW,GAC7CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqjB,sBAChGjP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoqB,eAAiB3O,EAAOgD,UAChC,MACJ,KAAK,EACDze,EAAQqqB,aAAe5O,EAAOgD,UAC9B,MACJ,KAAK,EACDze,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQuqB,iBAAmB9O,EAAOL,QAClC,MACJ,QACIK,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0qB,EAAsB1O,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwP,EAAsBzO,OAAS,SAAgBjc,GAC3C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,GAA8B,MAA1BC,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,oBACpDzC,EAAMyF,UAAUje,EAAQoqB,mBAAqBpqB,EAAQoqB,gBAAkB5R,EAAMyF,UAAUje,EAAQoqB,eAAe1L,MAAQlG,EAAMyF,UAAUje,EAAQoqB,eAAezL,OAC9J,MAAO,wCACf,GAA4B,MAAxB3e,EAAQqqB,cAAwBrqB,EAAQib,eAAe,kBAClDzC,EAAMyF,UAAUje,EAAQqqB,iBAAmBrqB,EAAQqqB,cAAgB7R,EAAMyF,UAAUje,EAAQqqB,aAAa3L,MAAQlG,EAAMyF,UAAUje,EAAQqqB,aAAa1L,OACtJ,MAAO,sCACf,GAA6B,MAAzB3e,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACxB,MAAO,iCACf,GAAgC,MAA5BtF,EAAQuqB,kBAA4BvqB,EAAQib,eAAe,oBAC3D,OAAQjb,EAAQuqB,kBAChB,QACI,MAAO,wCACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAO,MAWXG,EAAsBpa,WAAa,SAAoB6L,GACnD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqjB,sBACxC,OAAOvO,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqjB,sBACxC,GAAwB,MAApBvO,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,qEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAsB/E,OApB6B,MAAzB7J,EAAOiO,iBACH5R,EAAM+F,MACLve,EAAQoqB,eAAiB5R,EAAM+F,KAAKK,UAAUzC,EAAOiO,iBAAiBvL,UAAW,EAC5C,kBAA1B1C,EAAOiO,eACnBpqB,EAAQoqB,eAAiBna,SAASkM,EAAOiO,eAAgB,IACnB,kBAA1BjO,EAAOiO,eACnBpqB,EAAQoqB,eAAiBjO,EAAOiO,eACM,kBAA1BjO,EAAOiO,iBACnBpqB,EAAQoqB,eAAiB,IAAI5R,EAAMsG,SAAS3C,EAAOiO,eAAe1L,MAAQ,EAAGvC,EAAOiO,eAAezL,OAAS,GAAGI,aAC5F,MAAvB5C,EAAOkO,eACH7R,EAAM+F,MACLve,EAAQqqB,aAAe7R,EAAM+F,KAAKK,UAAUzC,EAAOkO,eAAexL,UAAW,EAC1C,kBAAxB1C,EAAOkO,aACnBrqB,EAAQqqB,aAAepa,SAASkM,EAAOkO,aAAc,IACjB,kBAAxBlO,EAAOkO,aACnBrqB,EAAQqqB,aAAelO,EAAOkO,aACM,kBAAxBlO,EAAOkO,eACnBrqB,EAAQqqB,aAAe,IAAI7R,EAAMsG,SAAS3C,EAAOkO,aAAa3L,MAAQ,EAAGvC,EAAOkO,aAAa1L,OAAS,GAAGI,aACrF,MAAxB5C,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBAClC6W,EAAOoO,kBACf,IAAK,WACL,KAAK,EACDvqB,EAAQuqB,iBAAmB,EAC3B,MACJ,IAAK,UACL,KAAK,EACDvqB,EAAQuqB,iBAAmB,EAC3B,MACJ,IAAK,YACL,KAAK,EACDvqB,EAAQuqB,iBAAmB,EAG/B,OAAOvqB,GAYX0qB,EAAsBpO,SAAW,SAAkBtc,EAASgY,GACnDA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAElB,GADAJ,EAAO6J,UAAY,KACfxN,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAElH7C,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS,IAAM,EAC7D,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEhH7C,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS,IAAM,EAC3DD,EAAO7W,cAAgB,GACvB6W,EAAOoO,iBAAmBvS,EAAQwE,QAAUJ,OAAS,WAAa,EAkBtE,OAhByB,MAArBpc,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC1D,MAA1BhY,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,oBACnB,kBAA3Bjb,EAAQoqB,eACfjO,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQoqB,gBAAkBpqB,EAAQoqB,eAE5FjO,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQoqB,gBAAkBpS,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQoqB,eAAe1L,MAAQ,EAAG1e,EAAQoqB,eAAezL,OAAS,GAAGI,WAAa/e,EAAQoqB,gBACpO,MAAxBpqB,EAAQqqB,cAAwBrqB,EAAQib,eAAe,kBACnB,kBAAzBjb,EAAQqqB,aACflO,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQqqB,cAAgBrqB,EAAQqqB,aAExFlO,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQqqB,cAAgBrS,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQqqB,aAAa3L,MAAQ,EAAG1e,EAAQqqB,aAAa1L,OAAS,GAAGI,WAAa/e,EAAQqqB,cAC3N,MAAzBrqB,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eACH,MAA5BtF,EAAQuqB,kBAA4BvqB,EAAQib,eAAe,sBAC3DkB,EAAOoO,iBAAmBvS,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG+R,qBAAqBpZ,EAAQuqB,kBAAoBvqB,EAAQuqB,kBACjIpO,GAUXuO,EAAsBhQ,UAAU+B,OAAS,WACrC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgO,EApUiB,GAuU5BrjB,EAAGsjB,sBAAyB,WAkBxB,SAASA,EAAsBnQ,GAE3B,GADA1b,KAAK0Q,KAAO,GACRgL,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAmlB,EAAsBjQ,UAAUwL,UAAY,KAQ5CyE,EAAsBjQ,UAAUlL,KAAOgJ,EAAMgL,WAU7CmH,EAAsB5R,OAAS,SAAgByB,GAC3C,OAAO,IAAImQ,EAAsBnQ,IAYrCmQ,EAAsB5P,OAAS,SAAgB/a,EAASgb,GAKpD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SAChG,MAAhBvb,EAAQwP,MAAgBxP,EAAQwP,KAAK/J,OACrC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQwP,KAAK/J,SAAUD,EACvCkT,EAAMvR,IAAIC,SAASC,GAAGya,UAAU/G,OAAO/a,EAAQwP,KAAKhK,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACjH,OAAOP,GAYX2P,EAAsBrP,gBAAkB,SAAyBtb,EAASgb,GACtE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoP,EAAsBnP,OAAS,SAAgBC,EAAQhW,GAC7CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsjB,sBAChGlP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQwP,MAAQxP,EAAQwP,KAAK/J,SAC/BzF,EAAQwP,KAAO,IACnBxP,EAAQwP,KAAK0F,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGya,UAAUtG,OAAOC,EAAQA,EAAOP,WACxE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2qB,EAAsB3O,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyP,EAAsB1O,OAAS,SAAgBjc,GAC3C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAoB,MAAhBC,EAAQwP,MAAgBxP,EAAQib,eAAe,QAAS,CACxD,IAAKtb,MAAMC,QAAQI,EAAQwP,MACvB,MAAO,uBACX,IAAK,IAAIhK,EAAI,EAAGA,EAAIxF,EAAQwP,KAAK/J,SAAUD,EAAG,CAC1C,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGya,UAAU7F,OAAOjc,EAAQwP,KAAKhK,IAE5D,MAAO,QAAUzF,GAG7B,OAAO,MAWX4qB,EAAsBra,WAAa,SAAoB6L,GACnD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGsjB,sBACxC,OAAOxO,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGsjB,sBACxC,GAAwB,MAApBxO,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,qEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAO3M,KAAM,CACb,IAAK7P,MAAMC,QAAQuc,EAAO3M,MACtB,MAAMkR,UAAU,+DACpB1gB,EAAQwP,KAAO,GACf,IAAK,IAAIhK,EAAI,EAAGA,EAAI2W,EAAO3M,KAAK/J,SAAUD,EAAG,CACzC,GAA8B,kBAAnB2W,EAAO3M,KAAKhK,GACnB,MAAMkb,UAAU,gEACpB1gB,EAAQwP,KAAKhK,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxR,WAAW6L,EAAO3M,KAAKhK,KAGjF,OAAOxF,GAYX2qB,EAAsBrO,SAAW,SAAkBtc,EAASgY,GACnDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAO3M,KAAO,IACdwI,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQwP,MAAQxP,EAAQwP,KAAK/J,OAAQ,CACrC0W,EAAO3M,KAAO,GACd,IAAK,IAAImU,EAAI,EAAGA,EAAI3jB,EAAQwP,KAAK/J,SAAUke,EACvCxH,EAAO3M,KAAKmU,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxF,SAAStc,EAAQwP,KAAKmU,GAAI3L,GAEnF,OAAOmE,GAUXwO,EAAsBjQ,UAAU+B,OAAS,WACrC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiO,EAzOiB,GA4O5BtjB,EAAGujB,yBAA4B,WAqB3B,SAASA,EAAyBpQ,GAC9B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAyRhD,OAhRAolB,EAAyBlQ,UAAUsL,UAAY,KAQ/C4E,EAAyBlQ,UAAU0P,eAAiB5R,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQlGoM,EAAyBlQ,UAAU2P,aAAe7R,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQhGoM,EAAyBlQ,UAAUpV,cAAgB,GAQnDslB,EAAyBlQ,UAAUjN,OAAS,EAU5Cmd,EAAyB7R,OAAS,SAAgByB,GAC9C,OAAO,IAAIoQ,EAAyBpQ,IAYxCoQ,EAAyB7P,OAAS,SAAgB/a,EAASgb,GAavD,OAZKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQgmB,WAAqBhmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe/I,OAAO/a,EAAQgmB,UAAWhL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACtF,MAA1Bvb,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,mBACzDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQoqB,gBACjC,MAAxBpqB,EAAQqqB,cAAwBrqB,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQqqB,cAChC,MAAzBrqB,EAAQsF,eAAyBtF,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQsF,eACtC,MAAlBtF,EAAQyN,QAAkBzN,EAAQib,eAAe,WACjDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQyN,QACtDuN,GAYX4P,EAAyBtP,gBAAkB,SAAyBtb,EAASgb,GACzE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqP,EAAyBpP,OAAS,SAAgBC,EAAQhW,GAChDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGujB,yBAChGnP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAetI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACDlb,EAAQoqB,eAAiB3O,EAAOgD,UAChC,MACJ,KAAK,EACDze,EAAQqqB,aAAe5O,EAAOgD,UAC9B,MACJ,KAAK,EACDze,EAAQsF,cAAgBmW,EAAON,SAC/B,MACJ,KAAK,EACDnb,EAAQyN,OAASgO,EAAOuC,UACxB,MACJ,QACIvC,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4qB,EAAyB5O,gBAAkB,SAAyBP,GAGhE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0P,EAAyB3O,OAAS,SAAgBjc,GAC9C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQgmB,WAAqBhmB,EAAQib,eAAe,aAAc,CAClE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGyc,eAAe7H,OAAOjc,EAAQgmB,WAChE,GAAIjmB,EACA,MAAO,aAAeA,EAE9B,OAA8B,MAA1BC,EAAQoqB,iBAA0BpqB,EAAQib,eAAe,mBACpDzC,EAAMyF,UAAUje,EAAQoqB,iBAAqBpqB,EAAQoqB,gBAAkB5R,EAAMyF,UAAUje,EAAQoqB,eAAe1L,MAAQlG,EAAMyF,UAAUje,EAAQoqB,eAAezL,MAE1I,MAAxB3e,EAAQqqB,eAAwBrqB,EAAQib,eAAe,iBAClDzC,EAAMyF,UAAUje,EAAQqqB,eAAmBrqB,EAAQqqB,cAAgB7R,EAAMyF,UAAUje,EAAQqqB,aAAa3L,MAAQlG,EAAMyF,UAAUje,EAAQqqB,aAAa1L,MAEjI,MAAzB3e,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACnDzC,EAAM0D,SAASlc,EAAQsF,eACjB,iCACO,MAAlBtF,EAAQyN,QAAkBzN,EAAQib,eAAe,YAC5CzC,EAAMyF,UAAUje,EAAQyN,QAClB,2BACR,KAPQ,sCAHA,yCAqBnBmd,EAAyBta,WAAa,SAAoB6L,GACtD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGujB,yBACxC,OAAOzO,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGujB,yBACxC,GAAwB,MAApBzO,EAAO6J,UAAmB,CAC1B,GAAgC,kBAArB7J,EAAO6J,UACd,MAAMtF,UAAU,wEACpB1gB,EAAQgmB,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexT,WAAW6L,EAAO6J,WAwB/E,OAtB6B,MAAzB7J,EAAOiO,iBACH5R,EAAM+F,MACLve,EAAQoqB,eAAiB5R,EAAM+F,KAAKK,UAAUzC,EAAOiO,iBAAiBvL,UAAW,EAC5C,kBAA1B1C,EAAOiO,eACnBpqB,EAAQoqB,eAAiBna,SAASkM,EAAOiO,eAAgB,IACnB,kBAA1BjO,EAAOiO,eACnBpqB,EAAQoqB,eAAiBjO,EAAOiO,eACM,kBAA1BjO,EAAOiO,iBACnBpqB,EAAQoqB,eAAiB,IAAI5R,EAAMsG,SAAS3C,EAAOiO,eAAe1L,MAAQ,EAAGvC,EAAOiO,eAAezL,OAAS,GAAGI,aAC5F,MAAvB5C,EAAOkO,eACH7R,EAAM+F,MACLve,EAAQqqB,aAAe7R,EAAM+F,KAAKK,UAAUzC,EAAOkO,eAAexL,UAAW,EAC1C,kBAAxB1C,EAAOkO,aACnBrqB,EAAQqqB,aAAepa,SAASkM,EAAOkO,aAAc,IACjB,kBAAxBlO,EAAOkO,aACnBrqB,EAAQqqB,aAAelO,EAAOkO,aACM,kBAAxBlO,EAAOkO,eACnBrqB,EAAQqqB,aAAe,IAAI7R,EAAMsG,SAAS3C,EAAOkO,aAAa3L,MAAQ,EAAGvC,EAAOkO,aAAa1L,OAAS,GAAGI,aACrF,MAAxB5C,EAAO7W,gBACPtF,EAAQsF,cAAgB8W,OAAOD,EAAO7W,gBACrB,MAAjB6W,EAAO1O,SACPzN,EAAQyN,OAAS0O,EAAO1O,SAAW,GAChCzN,GAYX4qB,EAAyBtO,SAAW,SAAkBtc,EAASgY,GACtDA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAElB,GADAJ,EAAO6J,UAAY,KACfxN,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAElH7C,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS,IAAM,EAC7D,GAAI5D,EAAM+F,KAAM,CACRS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAEhH7C,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS,IAAM,EAC3DD,EAAO7W,cAAgB,GACvB6W,EAAO1O,OAAS,EAkBpB,OAhByB,MAArBzN,EAAQgmB,WAAqBhmB,EAAQib,eAAe,eACpDkB,EAAO6J,UAAYtN,EAAMvR,IAAIC,SAASC,GAAGyc,eAAexH,SAAStc,EAAQgmB,UAAWhO,IAC1D,MAA1BhY,EAAQoqB,gBAA0BpqB,EAAQib,eAAe,oBACnB,kBAA3Bjb,EAAQoqB,eACfjO,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQoqB,gBAAkBpqB,EAAQoqB,eAE5FjO,EAAOiO,eAAiBpS,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQoqB,gBAAkBpS,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQoqB,eAAe1L,MAAQ,EAAG1e,EAAQoqB,eAAezL,OAAS,GAAGI,WAAa/e,EAAQoqB,gBACpO,MAAxBpqB,EAAQqqB,cAAwBrqB,EAAQib,eAAe,kBACnB,kBAAzBjb,EAAQqqB,aACflO,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQqqB,cAAgBrqB,EAAQqqB,aAExFlO,EAAOkO,aAAerS,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQqqB,cAAgBrS,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQqqB,aAAa3L,MAAQ,EAAG1e,EAAQqqB,aAAa1L,OAAS,GAAGI,WAAa/e,EAAQqqB,cAC3N,MAAzBrqB,EAAQsF,eAAyBtF,EAAQib,eAAe,mBACxDkB,EAAO7W,cAAgBtF,EAAQsF,eACb,MAAlBtF,EAAQyN,QAAkBzN,EAAQib,eAAe,YACjDkB,EAAO1O,OAASzN,EAAQyN,QACrB0O,GAUXyO,EAAyBlQ,UAAU+B,OAAS,WACxC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkO,EAlToB,GAqT/BvjB,EAAGwjB,yBAA4B,WAkB3B,SAASA,EAAyBrQ,GAE9B,GADA1b,KAAK2rB,IAAM,GACPjQ,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAkNhD,OAzMAqlB,EAAyBnQ,UAAUwL,UAAY,KAQ/C2E,EAAyBnQ,UAAU+P,IAAMjS,EAAMgL,WAU/CqH,EAAyB9R,OAAS,SAAgByB,GAC9C,OAAO,IAAIqQ,EAAyBrQ,IAYxCqQ,EAAyB9P,OAAS,SAAgB/a,EAASgb,GAKvD,GAJKA,IACDA,EAAS1C,EAAQS,UACI,MAArB/Y,EAAQkmB,WAAqBlmB,EAAQib,eAAe,cACpDvC,EAAMvR,IAAIC,SAASC,GAAG2c,eAAejJ,OAAO/a,EAAQkmB,UAAWlL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACjG,MAAfvb,EAAQyqB,KAAezqB,EAAQyqB,IAAIhlB,OACnC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQyqB,IAAIhlB,SAAUD,EACtCkT,EAAMvR,IAAIC,SAASC,GAAGuc,SAAS7I,OAAO/a,EAAQyqB,IAAIjlB,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC/G,OAAOP,GAYX6P,EAAyBvP,gBAAkB,SAAyBtb,EAASgb,GACzE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCsP,EAAyBrP,OAAS,SAAgBC,EAAQhW,GAChDgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwjB,yBAChGpP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAexI,OAAOC,EAAQA,EAAOP,UAC/E,MACJ,KAAK,EACKlb,EAAQyqB,KAAOzqB,EAAQyqB,IAAIhlB,SAC7BzF,EAAQyqB,IAAM,IAClBzqB,EAAQyqB,IAAIvV,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGuc,SAASpI,OAAOC,EAAQA,EAAOP,WACtE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX6qB,EAAyB7O,gBAAkB,SAAyBP,GAGhE,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC2P,EAAyB5O,OAAS,SAAgBjc,GAC9C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eAChDlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe/H,OAAOjc,EAAQkmB,YAE5D,MAAO,aAAenmB,EAE9B,GAAmB,MAAfC,EAAQyqB,KAAezqB,EAAQib,eAAe,OAAQ,CACtD,IAAKtb,MAAMC,QAAQI,EAAQyqB,KACvB,MAAO,sBACX,IAAK,IAAIjlB,EAAI,EAAGA,EAAIxF,EAAQyqB,IAAIhlB,SAAUD,EAAG,CACzC,IAAIzF,EACJ,GADIA,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGuc,SAAS3H,OAAOjc,EAAQyqB,IAAIjlB,IAE1D,MAAO,OAASzF,GAG5B,OAAO,MAWX8qB,EAAyBva,WAAa,SAAoB6L,GACtD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGwjB,yBACxC,OAAO1O,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwjB,yBACxC,GAAwB,MAApB1O,EAAO+J,UAAmB,CAC1B,GAAgC,kBAArB/J,EAAO+J,UACd,MAAMxF,UAAU,wEACpB1gB,EAAQkmB,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1T,WAAW6L,EAAO+J,WAE/E,GAAI/J,EAAOsO,IAAK,CACZ,IAAK9qB,MAAMC,QAAQuc,EAAOsO,KACtB,MAAM/J,UAAU,iEACpB1gB,EAAQyqB,IAAM,GACd,IAAK,IAAIjlB,EAAI,EAAGA,EAAI2W,EAAOsO,IAAIhlB,SAAUD,EAAG,CACxC,GAA6B,kBAAlB2W,EAAOsO,IAAIjlB,GAClB,MAAMkb,UAAU,kEACpB1gB,EAAQyqB,IAAIjlB,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGuc,SAAStT,WAAW6L,EAAOsO,IAAIjlB,KAG9E,OAAOxF,GAYX6qB,EAAyBvO,SAAW,SAAkBtc,EAASgY,GACtDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAOb,IANInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOsO,IAAM,IACbzS,EAAQuE,WACRJ,EAAO+J,UAAY,MACE,MAArBlmB,EAAQkmB,WAAqBlmB,EAAQib,eAAe,eACpDkB,EAAO+J,UAAYxN,EAAMvR,IAAIC,SAASC,GAAG2c,eAAe1H,SAAStc,EAAQkmB,UAAWlO,IACpFhY,EAAQyqB,KAAOzqB,EAAQyqB,IAAIhlB,OAAQ,CACnC0W,EAAOsO,IAAM,GACb,IAAK,IAAI9G,EAAI,EAAGA,EAAI3jB,EAAQyqB,IAAIhlB,SAAUke,EACtCxH,EAAOsO,IAAI9G,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGuc,SAAStH,SAAStc,EAAQyqB,IAAI9G,GAAI3L,GAEhF,OAAOmE,GAUX0O,EAAyBnQ,UAAU+B,OAAS,WACxC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDmO,EAzOoB,GA4O/BxjB,EAAGyjB,gBAAmB,WAoBlB,SAASA,EAAgBtQ,GACrB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAiPhD,OAxOAslB,EAAgBpQ,UAAUqQ,cAAgB,EAQ1CD,EAAgBpQ,UAAUsQ,sBAAwB,GAQlDF,EAAgBpQ,UAAUuQ,kBAAoBzS,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ5FsM,EAAgBpQ,UAAUzG,KAAO,GAUjC6W,EAAgB/R,OAAS,SAAgByB,GACrC,OAAO,IAAIsQ,EAAgBtQ,IAY/BsQ,EAAgB/P,OAAS,SAAgB/a,EAASgb,GAW9C,OAVKA,IACDA,EAAS1C,EAAQS,UACQ,MAAzB/Y,EAAQ+qB,eAAyB/qB,EAAQib,eAAe,kBACxDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQ+qB,eACxB,MAAjC/qB,EAAQgrB,uBAAiChrB,EAAQib,eAAe,0BAChED,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQgrB,uBAC3B,MAA7BhrB,EAAQirB,mBAA6BjrB,EAAQib,eAAe,sBAC5DD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQirB,mBACzC,MAAhBjrB,EAAQiU,MAAgBjU,EAAQib,eAAe,SAC/CD,EAAOE,OAA8B,IAAIC,OAAOnb,EAAQiU,MACrD+G,GAYX8P,EAAgBxP,gBAAkB,SAAyBtb,EAASgb,GAChE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuP,EAAgBtP,OAAS,SAAgBC,EAAQhW,GACvCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyjB,gBAChGrP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ+qB,cAAgBtP,EAAOuC,UAC/B,MACJ,KAAK,EACDhe,EAAQgrB,sBAAwBvP,EAAON,SACvC,MACJ,KAAK,EACDnb,EAAQirB,kBAAoBxP,EAAOgD,UACnC,MACJ,KAAK,EACDze,EAAQiU,KAAOwH,EAAON,SACtB,MACJ,QACIM,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8qB,EAAgB9O,gBAAkB,SAAyBP,GAGvD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4P,EAAgB7O,OAAS,SAAgBjc,GACrC,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACkB,MAAzBA,EAAQ+qB,eAAyB/qB,EAAQib,eAAe,mBACnDzC,EAAMyF,UAAUje,EAAQ+qB,eAClB,kCACsB,MAAjC/qB,EAAQgrB,uBAAiChrB,EAAQib,eAAe,2BAC3DzC,EAAM0D,SAASlc,EAAQgrB,uBACjB,yCACkB,MAA7BhrB,EAAQirB,oBAA6BjrB,EAAQib,eAAe,sBACvDzC,EAAMyF,UAAUje,EAAQirB,oBAAwBjrB,EAAQirB,mBAAqBzS,EAAMyF,UAAUje,EAAQirB,kBAAkBvM,MAAQlG,EAAMyF,UAAUje,EAAQirB,kBAAkBtM,MAE9J,MAAhB3e,EAAQiU,MAAgBjU,EAAQib,eAAe,UAC1CzC,EAAM0D,SAASlc,EAAQiU,MACjB,wBACR,KAJQ,4CAenB6W,EAAgBxa,WAAa,SAAoB6L,GAC7C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGyjB,gBACxC,OAAO3O,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGyjB,gBAgBxC,OAf4B,MAAxB3O,EAAO4O,gBACP/qB,EAAQ+qB,cAAgB5O,EAAO4O,gBAAkB,GACjB,MAAhC5O,EAAO6O,wBACPhrB,EAAQgrB,sBAAwB5O,OAAOD,EAAO6O,wBAClB,MAA5B7O,EAAO8O,oBACHzS,EAAM+F,MACLve,EAAQirB,kBAAoBzS,EAAM+F,KAAKK,UAAUzC,EAAO8O,oBAAoBpM,UAAW,EAC/C,kBAA7B1C,EAAO8O,kBACnBjrB,EAAQirB,kBAAoBhb,SAASkM,EAAO8O,kBAAmB,IACtB,kBAA7B9O,EAAO8O,kBACnBjrB,EAAQirB,kBAAoB9O,EAAO8O,kBACM,kBAA7B9O,EAAO8O,oBACnBjrB,EAAQirB,kBAAoB,IAAIzS,EAAMsG,SAAS3C,EAAO8O,kBAAkBvM,MAAQ,EAAGvC,EAAO8O,kBAAkBtM,OAAS,GAAGI,aAC7G,MAAf5C,EAAOlI,OACPjU,EAAQiU,KAAOmI,OAAOD,EAAOlI,OAC1BjU,GAYX8qB,EAAgBxO,SAAW,SAAkBtc,EAASgY,GAC7CA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAAU,CAGlB,GAFAJ,EAAO4O,cAAgB,EACvB5O,EAAO6O,sBAAwB,GAC3BxS,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAO8O,kBAAoBjT,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAErH7C,EAAO8O,kBAAoBjT,EAAQiH,QAAU7C,OAAS,IAAM,EAChED,EAAOlI,KAAO,GAalB,OAX6B,MAAzBjU,EAAQ+qB,eAAyB/qB,EAAQib,eAAe,mBACxDkB,EAAO4O,cAAgB/qB,EAAQ+qB,eACE,MAAjC/qB,EAAQgrB,uBAAiChrB,EAAQib,eAAe,2BAChEkB,EAAO6O,sBAAwBhrB,EAAQgrB,uBACV,MAA7BhrB,EAAQirB,mBAA6BjrB,EAAQib,eAAe,uBACnB,kBAA9Bjb,EAAQirB,kBACf9O,EAAO8O,kBAAoBjT,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQirB,mBAAqBjrB,EAAQirB,kBAElG9O,EAAO8O,kBAAoBjT,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQirB,mBAAqBjT,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQirB,kBAAkBvM,MAAQ,EAAG1e,EAAQirB,kBAAkBtM,OAAS,GAAGI,WAAa/e,EAAQirB,mBACxP,MAAhBjrB,EAAQiU,MAAgBjU,EAAQib,eAAe,UAC/CkB,EAAOlI,KAAOjU,EAAQiU,MACnBkI,GAUX2O,EAAgBpQ,UAAU+B,OAAS,WAC/B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoO,EAzQW,GA4QtBzjB,EAAG6jB,YAAe,WAiBd,SAASA,EAAY1Q,GACjB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA0lB,EAAYxQ,UAAUvU,MAAQ,KAU9B+kB,EAAYnS,OAAS,SAAgByB,GACjC,OAAO,IAAI0Q,EAAY1Q,IAY3B0Q,EAAYnQ,OAAS,SAAgB/a,EAASgb,GAK1C,OAJKA,IACDA,EAAS1C,EAAQS,UACA,MAAjB/Y,EAAQmG,OAAiBnG,EAAQib,eAAe,UAChDvC,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAO6U,EAAOE,OAA8B,IAAIuF,QAAQlF,SACrGP,GAYXkQ,EAAY5P,gBAAkB,SAAyBtb,EAASgb,GAC5D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC2P,EAAY1P,OAAS,SAAgBC,EAAQhW,GACnCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6jB,YAChGzP,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQmG,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,UACvE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXkrB,EAAYlP,gBAAkB,SAAyBP,GAGnD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCgQ,EAAYjP,OAAS,SAAgBjc,GACjC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQmG,OAAiBnG,EAAQib,eAAe,SAAU,CAC1D,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,OAC5D,GAAIpG,EACA,MAAO,SAAWA,EAE1B,OAAO,MAWXmrB,EAAY5a,WAAa,SAAoB6L,GACzC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG6jB,YACxC,OAAO/O,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG6jB,YACxC,GAAoB,MAAhB/O,EAAOhW,MAAe,CACtB,GAA4B,kBAAjBgW,EAAOhW,MACd,MAAMua,UAAU,uDACpB1gB,EAAQmG,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,OAEvE,OAAOnG,GAYXkrB,EAAY5O,SAAW,SAAkBtc,EAASgY,GACzCA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAOhW,MAAQ,MACE,MAAjBnG,EAAQmG,OAAiBnG,EAAQib,eAAe,WAChDkB,EAAOhW,MAAQuS,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAO6R,IACrEmE,GAUX+O,EAAYxQ,UAAU+B,OAAS,WAC3B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDwO,EA7LO,GAgMlB7jB,EAAG8jB,YAAe,WAiBd,SAASA,EAAY3Q,GACjB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA2lB,EAAYzQ,UAAU/O,MAAQ,KAU9Bwf,EAAYpS,OAAS,SAAgByB,GACjC,OAAO,IAAI2Q,EAAY3Q,IAY3B2Q,EAAYpQ,OAAS,SAAgB/a,EAASgb,GAK1C,OAJKA,IACDA,EAAS1C,EAAQS,UACA,MAAjB/Y,EAAQ2L,OAAiB3L,EAAQib,eAAe,UAChDvC,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAOqP,EAAOE,OAA8B,IAAIuF,QAAQlF,SACrGP,GAYXmQ,EAAY7P,gBAAkB,SAAyBtb,EAASgb,GAC5D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC4P,EAAY3P,OAAS,SAAgBC,EAAQhW,GACnCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8jB,YAChG1P,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ2L,MAAQ+M,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,UACvE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXmrB,EAAYnP,gBAAkB,SAAyBP,GAGnD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCiQ,EAAYlP,OAAS,SAAgBjc,GACjC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,OAC5D,GAAI5L,EACA,MAAO,SAAWA,EAE1B,OAAO,MAWXorB,EAAY7a,WAAa,SAAoB6L,GACzC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG8jB,YACxC,OAAOhP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG8jB,YACxC,GAAoB,MAAhBhP,EAAOxQ,MAAe,CACtB,GAA4B,kBAAjBwQ,EAAOxQ,MACd,MAAM+U,UAAU,uDACpB1gB,EAAQ2L,MAAQ+M,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,OAEvE,OAAO3L,GAYXmrB,EAAY7O,SAAW,SAAkBtc,EAASgY,GACzCA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAOxQ,MAAQ,MACE,MAAjB3L,EAAQ2L,OAAiB3L,EAAQib,eAAe,WAChDkB,EAAOxQ,MAAQ+M,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAOqM,IACrEmE,GAUXgP,EAAYzQ,UAAU+B,OAAS,WAC3B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDyO,EA7LO,GAgMlB9jB,EAAG+jB,eAAkB,WAiBjB,SAASA,EAAe5Q,GACpB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA4lB,EAAe1Q,UAAUxV,SAAW,KAUpCkmB,EAAerS,OAAS,SAAgByB,GACpC,OAAO,IAAI4Q,EAAe5Q,IAY9B4Q,EAAerQ,OAAS,SAAgB/a,EAASgb,GAK7C,OAJKA,IACDA,EAAS1C,EAAQS,UACG,MAApB/Y,EAAQkF,UAAoBlF,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAAU8V,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3GP,GAYXoQ,EAAe9P,gBAAkB,SAAyBtb,EAASgb,GAC/D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC6P,EAAe5P,OAAS,SAAgBC,EAAQhW,GACtCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+jB,eAChG3P,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXorB,EAAepP,gBAAkB,SAAyBP,GAGtD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCkQ,EAAenP,OAAS,SAAgBjc,GACpC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,UAC/D,GAAInF,EACA,MAAO,YAAcA,EAE7B,OAAO,MAWXqrB,EAAe9a,WAAa,SAAoB6L,GAC5C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG+jB,eACxC,OAAOjP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG+jB,eACxC,GAAuB,MAAnBjP,EAAOjX,SAAkB,CACzB,GAA+B,kBAApBiX,EAAOjX,SACd,MAAMwb,UAAU,6DACpB1gB,EAAQkF,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,UAE7E,OAAOlF,GAYXorB,EAAe9O,SAAW,SAAkBtc,EAASgY,GAC5CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAOjX,SAAW,MACE,MAApBlF,EAAQkF,UAAoBlF,EAAQib,eAAe,cACnDkB,EAAOjX,SAAWwT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAAU8S,IAC9EmE,GAUXiP,EAAe1Q,UAAU+B,OAAS,WAC9B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD0O,EA7LU,GAgMrB/jB,EAAGgkB,eAAkB,WAiBjB,SAASA,EAAe7Q,GACpB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA6lB,EAAe3Q,UAAU1S,SAAW,KAUpCqjB,EAAetS,OAAS,SAAgByB,GACpC,OAAO,IAAI6Q,EAAe7Q,IAY9B6Q,EAAetQ,OAAS,SAAgB/a,EAASgb,GAK7C,OAJKA,IACDA,EAAS1C,EAAQS,UACG,MAApB/Y,EAAQgI,UAAoBhI,EAAQib,eAAe,aACnDvC,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcjG,OAAO/a,EAAQgI,SAAUgT,EAAOE,OAA8B,IAAIuF,QAAQlF,SAC3GP,GAYXqQ,EAAe/P,gBAAkB,SAAyBtb,EAASgb,GAC/D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC8P,EAAe7P,OAAS,SAAgBC,EAAQhW,GACtCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGgkB,eAChG5P,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQgI,SAAW0Q,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcxF,OAAOC,EAAQA,EAAOP,UAC7E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXqrB,EAAerP,gBAAkB,SAAyBP,GAGtD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCmQ,EAAepP,OAAS,SAAgBjc,GACpC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQgI,UAAoBhI,EAAQib,eAAe,YAAa,CAChE,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc/E,OAAOjc,EAAQgI,UAC/D,GAAIjI,EACA,MAAO,YAAcA,EAE7B,OAAO,MAWXsrB,EAAe/a,WAAa,SAAoB6L,GAC5C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGgkB,eACxC,OAAOlP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGgkB,eACxC,GAAuB,MAAnBlP,EAAOnU,SAAkB,CACzB,GAA+B,kBAApBmU,EAAOnU,SACd,MAAM0Y,UAAU,6DACpB1gB,EAAQgI,SAAW0Q,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1Q,WAAW6L,EAAOnU,UAE7E,OAAOhI,GAYXqrB,EAAe/O,SAAW,SAAkBtc,EAASgY,GAC5CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAOnU,SAAW,MACE,MAApBhI,EAAQgI,UAAoBhI,EAAQib,eAAe,cACnDkB,EAAOnU,SAAW0Q,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1E,SAAStc,EAAQgI,SAAUgQ,IAC9EmE,GAUXkP,EAAe3Q,UAAU+B,OAAS,WAC9B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD2O,EA7LU,GAgMrBhkB,EAAGikB,cAAiB,WAiBhB,SAASA,EAAc9Q,GACnB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA8lB,EAAc5Q,UAAU7Q,QAAU,KAUlCyhB,EAAcvS,OAAS,SAAgByB,GACnC,OAAO,IAAI8Q,EAAc9Q,IAY7B8Q,EAAcvQ,OAAS,SAAgB/a,EAASgb,GAK5C,OAJKA,IACDA,EAAS1C,EAAQS,UACE,MAAnB/Y,EAAQ6J,SAAmB7J,EAAQib,eAAe,YAClDvC,EAAMvR,IAAIC,SAASC,GAAG0F,aAAagO,OAAO/a,EAAQ6J,QAASmR,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzGP,GAYXsQ,EAAchQ,gBAAkB,SAAyBtb,EAASgb,GAC9D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC+P,EAAc9P,OAAS,SAAgBC,EAAQhW,GACrCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGikB,cAChG7P,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ6J,QAAU6O,EAAMvR,IAAIC,SAASC,GAAG0F,aAAayO,OAAOC,EAAQA,EAAOP,UAC3E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXsrB,EAActP,gBAAkB,SAAyBP,GAGrD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCoQ,EAAcrP,OAAS,SAAgBjc,GACnC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAuB,MAAnBA,EAAQ6J,SAAmB7J,EAAQib,eAAe,WAAY,CAC9D,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG0F,aAAakP,OAAOjc,EAAQ6J,SAC9D,GAAI9J,EACA,MAAO,WAAaA,EAE5B,OAAO,MAWXurB,EAAchb,WAAa,SAAoB6L,GAC3C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGikB,cACxC,OAAOnP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGikB,cACxC,GAAsB,MAAlBnP,EAAOtS,QAAiB,CACxB,GAA8B,kBAAnBsS,EAAOtS,QACd,MAAM6W,UAAU,2DACpB1gB,EAAQ6J,QAAU6O,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauD,WAAW6L,EAAOtS,SAE3E,OAAO7J,GAYXsrB,EAAchP,SAAW,SAAkBtc,EAASgY,GAC3CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAOtS,QAAU,MACE,MAAnB7J,EAAQ6J,SAAmB7J,EAAQib,eAAe,aAClDkB,EAAOtS,QAAU6O,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauP,SAAStc,EAAQ6J,QAASmO,IAC3EmE,GAUXmP,EAAc5Q,UAAU+B,OAAS,WAC7B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD4O,EA7LS,GAgMpBjkB,EAAGkkB,WAAc,WAiBb,SAASA,EAAW/Q,GAChB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JA+lB,EAAW7Q,UAAUlL,KAAO,KAU5B+b,EAAWxS,OAAS,SAAgByB,GAChC,OAAO,IAAI+Q,EAAW/Q,IAY1B+Q,EAAWxQ,OAAS,SAAgB/a,EAASgb,GAKzC,OAJKA,IACDA,EAAS1C,EAAQS,UACD,MAAhB/Y,EAAQwP,MAAgBxP,EAAQib,eAAe,SAC/CvC,EAAMvR,IAAIC,SAASC,GAAGya,UAAU/G,OAAO/a,EAAQwP,KAAMwL,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnGP,GAYXuQ,EAAWjQ,gBAAkB,SAAyBtb,EAASgb,GAC3D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCgQ,EAAW/P,OAAS,SAAgBC,EAAQhW,GAClCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkkB,WAChG9P,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQwP,KAAOkJ,EAAMvR,IAAIC,SAASC,GAAGya,UAAUtG,OAAOC,EAAQA,EAAOP,UACrE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXurB,EAAWvP,gBAAkB,SAAyBP,GAGlD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCqQ,EAAWtP,OAAS,SAAgBjc,GAChC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQwP,MAAgBxP,EAAQib,eAAe,QAAS,CACxD,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGya,UAAU7F,OAAOjc,EAAQwP,MAC3D,GAAIzP,EACA,MAAO,QAAUA,EAEzB,OAAO,MAWXwrB,EAAWjb,WAAa,SAAoB6L,GACxC,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGkkB,WACxC,OAAOpP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGkkB,WACxC,GAAmB,MAAfpP,EAAO3M,KAAc,CACrB,GAA2B,kBAAhB2M,EAAO3M,KACd,MAAMkR,UAAU,qDACpB1gB,EAAQwP,KAAOkJ,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxR,WAAW6L,EAAO3M,MAErE,OAAOxP,GAYXurB,EAAWjP,SAAW,SAAkBtc,EAASgY,GACxCA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO3M,KAAO,MACE,MAAhBxP,EAAQwP,MAAgBxP,EAAQib,eAAe,UAC/CkB,EAAO3M,KAAOkJ,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxF,SAAStc,EAAQwP,KAAMwI,IAClEmE,GAUXoP,EAAW7Q,UAAU+B,OAAS,WAC1B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD6O,EA7LM,GAgMjBlkB,EAAGmkB,gBAAmB,WAiBlB,SAASA,EAAgBhR,GAErB,GADA1b,KAAKqH,MAAQ,GACTqU,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAuLhD,OA9KAgmB,EAAgB9Q,UAAUvU,MAAQqS,EAAMgL,WAUxCgI,EAAgBzS,OAAS,SAAgByB,GACrC,OAAO,IAAIgR,EAAgBhR,IAY/BgR,EAAgBzQ,OAAS,SAAgB/a,EAASgb,GAG9C,GAFKA,IACDA,EAAS1C,EAAQS,UACA,MAAjB/Y,EAAQmG,OAAiBnG,EAAQmG,MAAMV,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWrE,OAAO/a,EAAQmG,MAAMX,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXwQ,EAAgBlQ,gBAAkB,SAAyBtb,EAASgb,GAChE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCiQ,EAAgBhQ,OAAS,SAAgBC,EAAQhW,GACvCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmkB,gBAChG/P,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACK9b,EAAQmG,OAASnG,EAAQmG,MAAMV,SACjCzF,EAAQmG,MAAQ,IACpBnG,EAAQmG,MAAM+O,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW5D,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXwrB,EAAgBxP,gBAAkB,SAAyBP,GAGvD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCsQ,EAAgBvP,OAAS,SAAgBjc,GACrC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQmG,OAAiBnG,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQmG,OACvB,MAAO,wBACX,IAAK,IAAIX,EAAI,EAAGA,EAAIxF,EAAQmG,MAAMV,SAAUD,EAAG,CAC3C,IAAIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG+X,WAAWnD,OAAOjc,EAAQmG,MAAMX,IAClE,GAAIzF,EACA,MAAO,SAAWA,GAG9B,OAAO,MAWXyrB,EAAgBlb,WAAa,SAAoB6L,GAC7C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGmkB,gBACxC,OAAOrP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGmkB,gBACxC,GAAIrP,EAAOhW,MAAO,CACd,IAAKxG,MAAMC,QAAQuc,EAAOhW,OACtB,MAAMua,UAAU,0DACpB1gB,EAAQmG,MAAQ,GAChB,IAAK,IAAIX,EAAI,EAAGA,EAAI2W,EAAOhW,MAAMV,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOhW,MAAMX,GACpB,MAAMkb,UAAU,2DACpB1gB,EAAQmG,MAAMX,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9O,WAAW6L,EAAOhW,MAAMX,KAGpF,OAAOxF,GAYXwrB,EAAgBlP,SAAW,SAAkBtc,EAASgY,GAC7CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAGb,IAFInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOhW,MAAQ,IACfnG,EAAQmG,OAASnG,EAAQmG,MAAMV,OAAQ,CACvC0W,EAAOhW,MAAQ,GACf,IAAK,IAAIwd,EAAI,EAAGA,EAAI3jB,EAAQmG,MAAMV,SAAUke,EACxCxH,EAAOhW,MAAMwd,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG+X,WAAW9C,SAAStc,EAAQmG,MAAMwd,GAAI3L,GAEtF,OAAOmE,GAUXqP,EAAgB9Q,UAAU+B,OAAS,WAC/B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD8O,EA7MW,GAgNtBnkB,EAAGokB,gBAAmB,WAiBlB,SAASA,EAAgBjR,GAErB,GADA1b,KAAK6M,MAAQ,GACT6O,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAuLhD,OA9KAimB,EAAgB/Q,UAAU/O,MAAQ6M,EAAMgL,WAUxCiI,EAAgB1S,OAAS,SAAgByB,GACrC,OAAO,IAAIiR,EAAgBjR,IAY/BiR,EAAgB1Q,OAAS,SAAgB/a,EAASgb,GAG9C,GAFKA,IACDA,EAAS1C,EAAQS,UACA,MAAjB/Y,EAAQ2L,OAAiB3L,EAAQ2L,MAAMlG,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EACxCkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW5F,OAAO/a,EAAQ2L,MAAMnG,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACnH,OAAOP,GAYXyQ,EAAgBnQ,gBAAkB,SAAyBtb,EAASgb,GAChE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCkQ,EAAgBjQ,OAAS,SAAgBC,EAAQhW,GACvCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGokB,gBAChGhQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACK9b,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,SACjCzF,EAAQ2L,MAAQ,IACpB3L,EAAQ2L,MAAMuJ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWnF,OAAOC,EAAQA,EAAOP,WAC1E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXyrB,EAAgBzP,gBAAkB,SAAyBP,GAGvD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCuQ,EAAgBxP,OAAS,SAAgBjc,GACrC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQ2L,OAAiB3L,EAAQib,eAAe,SAAU,CAC1D,IAAKtb,MAAMC,QAAQI,EAAQ2L,OACvB,MAAO,wBACX,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAQ2L,MAAMlG,SAAUD,EAAG,CAC3C,IAAIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAW1E,OAAOjc,EAAQ2L,MAAMnG,IAClE,GAAIzF,EACA,MAAO,SAAWA,GAG9B,OAAO,MAWX0rB,EAAgBnb,WAAa,SAAoB6L,GAC7C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGokB,gBACxC,OAAOtP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGokB,gBACxC,GAAItP,EAAOxQ,MAAO,CACd,IAAKhM,MAAMC,QAAQuc,EAAOxQ,OACtB,MAAM+U,UAAU,0DACpB1gB,EAAQ2L,MAAQ,GAChB,IAAK,IAAInG,EAAI,EAAGA,EAAI2W,EAAOxQ,MAAMlG,SAAUD,EAAG,CAC1C,GAA+B,kBAApB2W,EAAOxQ,MAAMnG,GACpB,MAAMkb,UAAU,2DACpB1gB,EAAQ2L,MAAMnG,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrQ,WAAW6L,EAAOxQ,MAAMnG,KAGpF,OAAOxF,GAYXyrB,EAAgBnP,SAAW,SAAkBtc,EAASgY,GAC7CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAGb,IAFInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOxQ,MAAQ,IACf3L,EAAQ2L,OAAS3L,EAAQ2L,MAAMlG,OAAQ,CACvC0W,EAAOxQ,MAAQ,GACf,IAAK,IAAIgY,EAAI,EAAGA,EAAI3jB,EAAQ2L,MAAMlG,SAAUke,EACxCxH,EAAOxQ,MAAMgY,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGsZ,WAAWrE,SAAStc,EAAQ2L,MAAMgY,GAAI3L,GAEtF,OAAOmE,GAUXsP,EAAgB/Q,UAAU+B,OAAS,WAC/B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnD+O,EA7MW,GAgNtBpkB,EAAGqkB,mBAAsB,WAiBrB,SAASA,EAAmBlR,GAExB,GADA1b,KAAKoG,SAAW,GACZsV,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAuLhD,OA9KAkmB,EAAmBhR,UAAUxV,SAAWsT,EAAMgL,WAU9CkI,EAAmB3S,OAAS,SAAgByB,GACxC,OAAO,IAAIkR,EAAmBlR,IAYlCkR,EAAmB3Q,OAAS,SAAgB/a,EAASgb,GAGjD,GAFKA,IACDA,EAAS1C,EAAQS,UACG,MAApB/Y,EAAQkF,UAAoBlF,EAAQkF,SAASO,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcuO,OAAO/a,EAAQkF,SAASM,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYX0Q,EAAmBpQ,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCmQ,EAAmBlQ,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqkB,mBAChGjQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACK9b,EAAQkF,UAAYlF,EAAQkF,SAASO,SACvCzF,EAAQkF,SAAW,IACvBlF,EAAQkF,SAASgQ,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcgP,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX0rB,EAAmB1P,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCwQ,EAAmBzP,OAAS,SAAgBjc,GACxC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQkF,UAAoBlF,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQkF,UACvB,MAAO,2BACX,IAAK,IAAIM,EAAI,EAAGA,EAAIxF,EAAQkF,SAASO,SAAUD,EAAG,CAC9C,IAAIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGmF,cAAcyP,OAAOjc,EAAQkF,SAASM,IACxE,GAAIzF,EACA,MAAO,YAAcA,GAGjC,OAAO,MAWX2rB,EAAmBpb,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGqkB,mBACxC,OAAOvP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGqkB,mBACxC,GAAIvP,EAAOjX,SAAU,CACjB,IAAKvF,MAAMC,QAAQuc,EAAOjX,UACtB,MAAMwb,UAAU,gEACpB1gB,EAAQkF,SAAW,GACnB,IAAK,IAAIM,EAAI,EAAGA,EAAI2W,EAAOjX,SAASO,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOjX,SAASM,GACvB,MAAMkb,UAAU,iEACpB1gB,EAAQkF,SAASM,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8D,WAAW6L,EAAOjX,SAASM,KAG7F,OAAOxF,GAYX0rB,EAAmBpP,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAGb,IAFInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOjX,SAAW,IAClBlF,EAAQkF,UAAYlF,EAAQkF,SAASO,OAAQ,CAC7C0W,EAAOjX,SAAW,GAClB,IAAK,IAAIye,EAAI,EAAGA,EAAI3jB,EAAQkF,SAASO,SAAUke,EAC3CxH,EAAOjX,SAASye,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGmF,cAAc8P,SAAStc,EAAQkF,SAASye,GAAI3L,GAE/F,OAAOmE,GAUXuP,EAAmBhR,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDgP,EA7Mc,GAgNzBrkB,EAAGskB,mBAAsB,WAiBrB,SAASA,EAAmBnR,GAExB,GADA1b,KAAKkJ,SAAW,GACZwS,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAuLhD,OA9KAmmB,EAAmBjR,UAAU1S,SAAWwQ,EAAMgL,WAU9CmI,EAAmB5S,OAAS,SAAgByB,GACxC,OAAO,IAAImR,EAAmBnR,IAYlCmR,EAAmB5Q,OAAS,SAAgB/a,EAASgb,GAGjD,GAFKA,IACDA,EAAS1C,EAAQS,UACG,MAApB/Y,EAAQgI,UAAoBhI,EAAQgI,SAASvC,OAC7C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAC3CkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcjG,OAAO/a,EAAQgI,SAASxC,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACzH,OAAOP,GAYX2Q,EAAmBrQ,gBAAkB,SAAyBtb,EAASgb,GACnE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCoQ,EAAmBnQ,OAAS,SAAgBC,EAAQhW,GAC1CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGskB,mBAChGlQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACK9b,EAAQgI,UAAYhI,EAAQgI,SAASvC,SACvCzF,EAAQgI,SAAW,IACvBhI,EAAQgI,SAASkN,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAcxF,OAAOC,EAAQA,EAAOP,WAChF,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX2rB,EAAmB3P,gBAAkB,SAAyBP,GAG1D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtCyQ,EAAmB1P,OAAS,SAAgBjc,GACxC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQgI,UAAoBhI,EAAQib,eAAe,YAAa,CAChE,IAAKtb,MAAMC,QAAQI,EAAQgI,UACvB,MAAO,2BACX,IAAK,IAAIxC,EAAI,EAAGA,EAAIxF,EAAQgI,SAASvC,SAAUD,EAAG,CAC9C,IAAIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc/E,OAAOjc,EAAQgI,SAASxC,IACxE,GAAIzF,EACA,MAAO,YAAcA,GAGjC,OAAO,MAWX4rB,EAAmBrb,WAAa,SAAoB6L,GAChD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGskB,mBACxC,OAAOxP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGskB,mBACxC,GAAIxP,EAAOnU,SAAU,CACjB,IAAKrI,MAAMC,QAAQuc,EAAOnU,UACtB,MAAM0Y,UAAU,gEACpB1gB,EAAQgI,SAAW,GACnB,IAAK,IAAIxC,EAAI,EAAGA,EAAI2W,EAAOnU,SAASvC,SAAUD,EAAG,CAC7C,GAAkC,kBAAvB2W,EAAOnU,SAASxC,GACvB,MAAMkb,UAAU,iEACpB1gB,EAAQgI,SAASxC,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1Q,WAAW6L,EAAOnU,SAASxC,KAG7F,OAAOxF,GAYX2rB,EAAmBrP,SAAW,SAAkBtc,EAASgY,GAChDA,IACDA,EAAU,IACd,IAAImE,EAAS,GAGb,IAFInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOnU,SAAW,IAClBhI,EAAQgI,UAAYhI,EAAQgI,SAASvC,OAAQ,CAC7C0W,EAAOnU,SAAW,GAClB,IAAK,IAAI2b,EAAI,EAAGA,EAAI3jB,EAAQgI,SAASvC,SAAUke,EAC3CxH,EAAOnU,SAAS2b,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG2Z,cAAc1E,SAAStc,EAAQgI,SAAS2b,GAAI3L,GAE/F,OAAOmE,GAUXwP,EAAmBjR,UAAU+B,OAAS,WAClC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDiP,EA7Mc,GAgNzBtkB,EAAGukB,kBAAqB,WAiBpB,SAASA,EAAkBpR,GAEvB,GADA1b,KAAK+K,QAAU,GACX2Q,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAuLhD,OA9KAomB,EAAkBlR,UAAU7Q,QAAU2O,EAAMgL,WAU5CoI,EAAkB7S,OAAS,SAAgByB,GACvC,OAAO,IAAIoR,EAAkBpR,IAYjCoR,EAAkB7Q,OAAS,SAAgB/a,EAASgb,GAGhD,GAFKA,IACDA,EAAS1C,EAAQS,UACE,MAAnB/Y,EAAQ6J,SAAmB7J,EAAQ6J,QAAQpE,OAC3C,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQ6J,QAAQpE,SAAUD,EAC1CkT,EAAMvR,IAAIC,SAASC,GAAG0F,aAAagO,OAAO/a,EAAQ6J,QAAQrE,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvH,OAAOP,GAYX4Q,EAAkBtQ,gBAAkB,SAAyBtb,EAASgb,GAClE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCqQ,EAAkBpQ,OAAS,SAAgBC,EAAQhW,GACzCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGukB,kBAChGnQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACK9b,EAAQ6J,SAAW7J,EAAQ6J,QAAQpE,SACrCzF,EAAQ6J,QAAU,IACtB7J,EAAQ6J,QAAQqL,KAAKwD,EAAMvR,IAAIC,SAASC,GAAG0F,aAAayO,OAAOC,EAAQA,EAAOP,WAC9E,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX4rB,EAAkB5P,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC0Q,EAAkB3P,OAAS,SAAgBjc,GACvC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAuB,MAAnBA,EAAQ6J,SAAmB7J,EAAQib,eAAe,WAAY,CAC9D,IAAKtb,MAAMC,QAAQI,EAAQ6J,SACvB,MAAO,0BACX,IAAK,IAAIrE,EAAI,EAAGA,EAAIxF,EAAQ6J,QAAQpE,SAAUD,EAAG,CAC7C,IAAIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAG0F,aAAakP,OAAOjc,EAAQ6J,QAAQrE,IACtE,GAAIzF,EACA,MAAO,WAAaA,GAGhC,OAAO,MAWX6rB,EAAkBtb,WAAa,SAAoB6L,GAC/C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGukB,kBACxC,OAAOzP,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGukB,kBACxC,GAAIzP,EAAOtS,QAAS,CAChB,IAAKlK,MAAMC,QAAQuc,EAAOtS,SACtB,MAAM6W,UAAU,8DACpB1gB,EAAQ6J,QAAU,GAClB,IAAK,IAAIrE,EAAI,EAAGA,EAAI2W,EAAOtS,QAAQpE,SAAUD,EAAG,CAC5C,GAAiC,kBAAtB2W,EAAOtS,QAAQrE,GACtB,MAAMkb,UAAU,+DACpB1gB,EAAQ6J,QAAQrE,GAAKkT,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauD,WAAW6L,EAAOtS,QAAQrE,KAG1F,OAAOxF,GAYX4rB,EAAkBtP,SAAW,SAAkBtc,EAASgY,GAC/CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAGb,IAFInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAOtS,QAAU,IACjB7J,EAAQ6J,SAAW7J,EAAQ6J,QAAQpE,OAAQ,CAC3C0W,EAAOtS,QAAU,GACjB,IAAK,IAAI8Z,EAAI,EAAGA,EAAI3jB,EAAQ6J,QAAQpE,SAAUke,EAC1CxH,EAAOtS,QAAQ8Z,GAAKjL,EAAMvR,IAAIC,SAASC,GAAG0F,aAAauP,SAAStc,EAAQ6J,QAAQ8Z,GAAI3L,GAE5F,OAAOmE,GAUXyP,EAAkBlR,UAAU+B,OAAS,WACjC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDkP,EA7Ma,GAgNxBvkB,EAAGwkB,eAAkB,WAiBjB,SAASA,EAAerR,GAEpB,GADA1b,KAAK0Q,KAAO,GACRgL,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAuLhD,OA9KAqmB,EAAenR,UAAUlL,KAAOgJ,EAAMgL,WAUtCqI,EAAe9S,OAAS,SAAgByB,GACpC,OAAO,IAAIqR,EAAerR,IAY9BqR,EAAe9Q,OAAS,SAAgB/a,EAASgb,GAG7C,GAFKA,IACDA,EAAS1C,EAAQS,UACD,MAAhB/Y,EAAQwP,MAAgBxP,EAAQwP,KAAK/J,OACrC,IAAK,IAAID,EAAI,EAAGA,EAAIxF,EAAQwP,KAAK/J,SAAUD,EACvCkT,EAAMvR,IAAIC,SAASC,GAAGya,UAAU/G,OAAO/a,EAAQwP,KAAKhK,GAAIwV,EAAOE,OAA8B,IAAIuF,QAAQlF,SACjH,OAAOP,GAYX6Q,EAAevQ,gBAAkB,SAAyBtb,EAASgb,GAC/D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCsQ,EAAerQ,OAAS,SAAgBC,EAAQhW,GACtCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwkB,eAChGpQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACK9b,EAAQwP,MAAQxP,EAAQwP,KAAK/J,SAC/BzF,EAAQwP,KAAO,IACnBxP,EAAQwP,KAAK0F,KAAKwD,EAAMvR,IAAIC,SAASC,GAAGya,UAAUtG,OAAOC,EAAQA,EAAOP,WACxE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX6rB,EAAe7P,gBAAkB,SAAyBP,GAGtD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC2Q,EAAe5P,OAAS,SAAgBjc,GACpC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQwP,MAAgBxP,EAAQib,eAAe,QAAS,CACxD,IAAKtb,MAAMC,QAAQI,EAAQwP,MACvB,MAAO,uBACX,IAAK,IAAIhK,EAAI,EAAGA,EAAIxF,EAAQwP,KAAK/J,SAAUD,EAAG,CAC1C,IAAIzF,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGya,UAAU7F,OAAOjc,EAAQwP,KAAKhK,IAChE,GAAIzF,EACA,MAAO,QAAUA,GAG7B,OAAO,MAWX8rB,EAAevb,WAAa,SAAoB6L,GAC5C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGwkB,eACxC,OAAO1P,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGwkB,eACxC,GAAI1P,EAAO3M,KAAM,CACb,IAAK7P,MAAMC,QAAQuc,EAAO3M,MACtB,MAAMkR,UAAU,wDACpB1gB,EAAQwP,KAAO,GACf,IAAK,IAAIhK,EAAI,EAAGA,EAAI2W,EAAO3M,KAAK/J,SAAUD,EAAG,CACzC,GAA8B,kBAAnB2W,EAAO3M,KAAKhK,GACnB,MAAMkb,UAAU,yDACpB1gB,EAAQwP,KAAKhK,GAAKkT,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxR,WAAW6L,EAAO3M,KAAKhK,KAGjF,OAAOxF,GAYX6rB,EAAevP,SAAW,SAAkBtc,EAASgY,GAC5CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAGb,IAFInE,EAAQ0L,QAAU1L,EAAQuE,YAC1BJ,EAAO3M,KAAO,IACdxP,EAAQwP,MAAQxP,EAAQwP,KAAK/J,OAAQ,CACrC0W,EAAO3M,KAAO,GACd,IAAK,IAAImU,EAAI,EAAGA,EAAI3jB,EAAQwP,KAAK/J,SAAUke,EACvCxH,EAAO3M,KAAKmU,GAAKjL,EAAMvR,IAAIC,SAASC,GAAGya,UAAUxF,SAAStc,EAAQwP,KAAKmU,GAAI3L,GAEnF,OAAOmE,GAUX0P,EAAenR,UAAU+B,OAAS,WAC9B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDmP,EA7MU,GAgNrBxkB,EAAGykB,aAAgB,WAiBf,SAASA,EAAatR,GAClB,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAwKhD,OA/JAsmB,EAAapR,UAAUqR,OAAS,KAUhCD,EAAa/S,OAAS,SAAgByB,GAClC,OAAO,IAAIsR,EAAatR,IAY5BsR,EAAa/Q,OAAS,SAAgB/a,EAASgb,GAK3C,OAJKA,IACDA,EAAS1C,EAAQS,UACC,MAAlB/Y,EAAQ+rB,QAAkB/rB,EAAQib,eAAe,WACjDvC,EAAMvR,IAAIC,SAASC,GAAGye,YAAY/K,OAAO/a,EAAQ+rB,OAAQ/Q,EAAOE,OAA8B,IAAIuF,QAAQlF,SACvGP,GAYX8Q,EAAaxQ,gBAAkB,SAAyBtb,EAASgb,GAC7D,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxCuQ,EAAatQ,OAAS,SAAgBC,EAAQhW,GACpCgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGykB,aAChGrQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQ+rB,OAASrT,EAAMvR,IAAIC,SAASC,GAAGye,YAAYtK,OAAOC,EAAQA,EAAOP,UACzE,MACJ,QACIO,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaX8rB,EAAa9P,gBAAkB,SAAyBP,GAGpD,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC4Q,EAAa7P,OAAS,SAAgBjc,GAClC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAsB,MAAlBA,EAAQ+rB,QAAkB/rB,EAAQib,eAAe,UAAW,CAC5D,IAAIlb,EAAQ2Y,EAAMvR,IAAIC,SAASC,GAAGye,YAAY7J,OAAOjc,EAAQ+rB,QAC7D,GAAIhsB,EACA,MAAO,UAAYA,EAE3B,OAAO,MAWX+rB,EAAaxb,WAAa,SAAoB6L,GAC1C,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAGykB,aACxC,OAAO3P,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAGykB,aACxC,GAAqB,MAAjB3P,EAAO4P,OAAgB,CACvB,GAA6B,kBAAlB5P,EAAO4P,OACd,MAAMrL,UAAU,yDACpB1gB,EAAQ+rB,OAASrT,EAAMvR,IAAIC,SAASC,GAAGye,YAAYxV,WAAW6L,EAAO4P,QAEzE,OAAO/rB,GAYX8rB,EAAaxP,SAAW,SAAkBtc,EAASgY,GAC1CA,IACDA,EAAU,IACd,IAAImE,EAAS,GAKb,OAJInE,EAAQuE,WACRJ,EAAO4P,OAAS,MACE,MAAlB/rB,EAAQ+rB,QAAkB/rB,EAAQib,eAAe,YACjDkB,EAAO4P,OAASrT,EAAMvR,IAAIC,SAASC,GAAGye,YAAYxJ,SAAStc,EAAQ+rB,OAAQ/T,IACxEmE,GAUX2P,EAAapR,UAAU+B,OAAS,WAC5B,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAGnDoP,EA7LQ,GAwRnBzkB,EAAG2kB,MAAS,WACR,IAAInT,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAoF5C,OAnFAnT,EAAOmT,EAAW,GAAK,kBAAoB,EAC3CnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,iBAAmB,EAC1CnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,mBAAqB,EAC5CnT,EAAOmT,EAAW,GAAK,oBAAsB,EAC7CnT,EAAOmT,EAAW,GAAK,oBAAsB,EAC7CnT,EAAOmT,EAAW,GAAK,oBAAsB,EAC7CnT,EAAOmT,EAAW,GAAK,oBAAsB,EAC7CnT,EAAOmT,EAAW,GAAK,uBAAyB,EAChDnT,EAAOmT,EAAW,IAAM,uBAAyB,GACjDnT,EAAOmT,EAAW,IAAM,sBAAwB,GAChDnT,EAAOmT,EAAW,IAAM,sBAAwB,GAChDnT,EAAOmT,EAAW,IAAM,8BAAgC,GACxDnT,EAAOmT,EAAW,IAAM,8BAAgC,GACxDnT,EAAOmT,EAAW,IAAM,+BAAiC,GACzDnT,EAAOmT,EAAW,IAAM,+BAAiC,GACzDnT,EAAOmT,EAAW,IAAM,sCAAwC,GAChEnT,EAAOmT,EAAW,IAAM,sCAAwC,GAChEnT,EAAOmT,EAAW,IAAM,sCAAwC,GAChEnT,EAAOmT,EAAW,IAAM,sCAAwC,GAChEnT,EAAOmT,EAAW,IAAM,0CAA4C,GACpEnT,EAAOmT,EAAW,IAAM,0CAA4C,GACpEnT,EAAOmT,EAAW,IAAM,sBAAwB,GAChDnT,EAAOmT,EAAW,IAAM,sBAAwB,GAChDnT,EAAOmT,EAAW,IAAM,+BAAiC,GACzDnT,EAAOmT,EAAW,IAAM,+BAAiC,GACzDnT,EAAOmT,EAAW,IAAM,0CAA4C,GACpEnT,EAAOmT,EAAW,IAAM,0CAA4C,GACpEnT,EAAOmT,EAAW,IAAM,sCAAwC,GAChEnT,EAAOmT,EAAW,IAAM,sCAAwC,GAChEnT,EAAOmT,EAAW,IAAM,oCAAsC,GAC9DnT,EAAOmT,EAAW,IAAM,oCAAsC,GAC9DnT,EAAOmT,EAAW,IAAM,2CAA6C,GACrEnT,EAAOmT,EAAW,IAAM,2CAA6C,GACrEnT,EAAOmT,EAAW,IAAM,yBAA2B,GACnDnT,EAAOmT,EAAW,IAAM,yBAA2B,GACnDnT,EAAOmT,EAAW,IAAM,qCAAuC,GAC/DnT,EAAOmT,EAAW,IAAM,qCAAuC,GAC/DnT,EAAOmT,EAAW,IAAM,yCAA2C,GACnEnT,EAAOmT,EAAW,IAAM,yCAA2C,GACnEnT,EAAOmT,EAAW,IAAM,6CAA+C,GACvEnT,EAAOmT,EAAW,IAAM,6CAA+C,GACvEnT,EAAOmT,EAAW,IAAM,wBAA0B,GAClDnT,EAAOmT,EAAW,IAAM,wBAA0B,GAClDnT,EAAOmT,EAAW,IAAM,mCAAqC,GAC7DnT,EAAOmT,EAAW,IAAM,mCAAqC,GAC7DnT,EAAOmT,EAAW,IAAM,0CAA4C,GACpEnT,EAAOmT,EAAW,IAAM,0CAA4C,GACpEnT,EAAOmT,EAAW,IAAM,yBAA2B,GACnDnT,EAAOmT,EAAW,IAAM,yBAA2B,GACnDnT,EAAOmT,EAAW,IAAM,qCAAuC,GAC/DnT,EAAOmT,EAAW,IAAM,qCAAuC,GAC/DnT,EAAOmT,EAAW,IAAM,6CAA+C,GACvEnT,EAAOmT,EAAW,IAAM,6CAA+C,GACvEnT,EAAOmT,EAAW,IAAM,yCAA2C,GACnEnT,EAAOmT,EAAW,IAAM,yCAA2C,GACnEnT,EAAOmT,EAAW,IAAM,oCAAsC,GAC9DnT,EAAOmT,EAAW,IAAM,oCAAsC,GAC9DnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,IAAM,qBAAuB,GAC/CnT,EAAOmT,EAAW,IAAM,qBAAuB,GAC/CnT,EAAOmT,EAAW,IAAM,yBAA2B,GACnDnT,EAAOmT,EAAW,IAAM,yBAA2B,GACnDnT,EAAOmT,EAAW,IAAM,0BAA4B,GACpDnT,EAAOmT,EAAW,IAAM,0BAA4B,GACpDnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,IAAM,6BAA+B,GACvDnT,EAAOmT,EAAW,QAAU,iBAAmB,OAC/CnT,EAAOmT,EAAW,MAAQ,aAAe,KACzCnT,EAAOmT,EAAW,MAAQ,aAAe,KACzCnT,EAAOmT,EAAW,MAAQ,gBAAkB,KAC5CnT,EAAOmT,EAAW,MAAQ,gBAAkB,KAC5CnT,EAAOmT,EAAW,MAAQ,eAAiB,KAC3CnT,EAAOmT,EAAW,MAAQ,YAAc,KACxCnT,EAAOmT,EAAW,MAAQ,kBAAoB,KAC9CnT,EAAOmT,EAAW,MAAQ,kBAAoB,KAC9CnT,EAAOmT,EAAW,MAAQ,qBAAuB,KACjDnT,EAAOmT,EAAW,MAAQ,qBAAuB,KACjDnT,EAAOmT,EAAW,MAAQ,oBAAsB,KAChDnT,EAAOmT,EAAW,MAAQ,iBAAmB,KAC7CnT,EAAOmT,EAAW,MAAQ,cAAgB,KACnCnT,EArFC,GAwFZ2B,EAAG4kB,qBAAwB,WAoBvB,SAASA,EAAqBzR,GAC1B,GAAIA,EACA,IAAK,IAAIC,EAAO3B,OAAO2B,KAAKD,GAAahV,EAAI,EAAGA,EAAIiV,EAAKhV,SAAUD,EACpC,MAAvBgV,EAAWC,EAAKjV,MAChB1G,KAAK2b,EAAKjV,IAAMgV,EAAWC,EAAKjV,KAqRhD,OA5QAymB,EAAqBvR,UAAUwR,YAAc,EAQ7CD,EAAqBvR,UAAUyR,MAAQ,EAQvCF,EAAqBvR,UAAU0R,aAAe5T,EAAM6T,UAAU,IAQ9DJ,EAAqBvR,UAAUkL,UAAYpN,EAAM+F,KAAO/F,EAAM+F,KAAKC,SAAS,EAAE,GAAE,GAAS,EAUzFyN,EAAqBlT,OAAS,SAAgByB,GAC1C,OAAO,IAAIyR,EAAqBzR,IAYpCyR,EAAqBlR,OAAS,SAAgB/a,EAASgb,GAWnD,OAVKA,IACDA,EAAS1C,EAAQS,UACM,MAAvB/Y,EAAQksB,aAAuBlsB,EAAQib,eAAe,gBACtDD,EAAOE,OAA8B,GAAGE,MAAMpb,EAAQksB,aACrC,MAAjBlsB,EAAQmsB,OAAiBnsB,EAAQib,eAAe,UAChDD,EAAOE,OAA8B,IAAI8C,QAAQhe,EAAQmsB,OACjC,MAAxBnsB,EAAQosB,cAAwBpsB,EAAQib,eAAe,iBACvDD,EAAOE,OAA8B,IAAIoR,MAAMtsB,EAAQosB,cAClC,MAArBpsB,EAAQ4lB,WAAqB5lB,EAAQib,eAAe,cACpDD,EAAOE,OAA8B,IAAIuD,QAAQze,EAAQ4lB,WACtD5K,GAYXiR,EAAqB3Q,gBAAkB,SAAyBtb,EAASgb,GACrE,OAAOlc,KAAKic,OAAO/a,EAASgb,GAAQO,UAcxC0Q,EAAqBzQ,OAAS,SAAgBC,EAAQhW,GAC5CgW,aAAkBrD,IACpBqD,EAASrD,EAAQW,OAAO0C,IAE5B,IADA,IAAIC,OAAiBC,IAAXlW,EAAuBgW,EAAOG,IAAMH,EAAOI,IAAMpW,EAAQzF,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4kB,qBAChGxQ,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOP,SACjB,OAAQY,IAAQ,GAChB,KAAK,EACD9b,EAAQksB,YAAczQ,EAAOL,QAC7B,MACJ,KAAK,EACDpb,EAAQmsB,MAAQ1Q,EAAOuC,UACvB,MACJ,KAAK,EACDhe,EAAQosB,aAAe3Q,EAAO6Q,QAC9B,MACJ,KAAK,EACDtsB,EAAQ4lB,UAAYnK,EAAOgD,UAC3B,MACJ,QACIhD,EAAOM,SAAe,EAAND,IAIxB,OAAO9b,GAaXisB,EAAqBjQ,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrD,IACpBqD,EAAS,IAAIrD,EAAQqD,IAClB3c,KAAK0c,OAAOC,EAAQA,EAAOP,WAWtC+Q,EAAqBhQ,OAAS,SAAgBjc,GAC1C,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA2B,MAAvBA,EAAQksB,aAAuBlsB,EAAQib,eAAe,eACtD,OAAQjb,EAAQksB,aAChB,QACI,MAAO,mCACX,KAAK,EACL,KAAK,GAGT,OAAqB,MAAjBlsB,EAAQmsB,OAAiBnsB,EAAQib,eAAe,WAC3CzC,EAAMyF,UAAUje,EAAQmsB,OAClB,0BACa,MAAxBnsB,EAAQosB,cAAwBpsB,EAAQib,eAAe,mBACjDjb,EAAQosB,cAAuD,kBAAhCpsB,EAAQosB,aAAa3mB,QAAuB+S,EAAM0D,SAASlc,EAAQosB,eAC7F,gCACU,MAArBpsB,EAAQ4lB,YAAqB5lB,EAAQib,eAAe,cAC/CzC,EAAMyF,UAAUje,EAAQ4lB,YAAgB5lB,EAAQ4lB,WAAapN,EAAMyF,UAAUje,EAAQ4lB,UAAUlH,MAAQlG,EAAMyF,UAAUje,EAAQ4lB,UAAUjH,MAE3I,KADQ,oCAYnBsN,EAAqB3b,WAAa,SAAoB6L,GAClD,GAAIA,aAAkBzD,EAAMvR,IAAIC,SAASC,GAAG4kB,qBACxC,OAAO9P,EACX,IAAInc,EAAU,IAAI0Y,EAAMvR,IAAIC,SAASC,GAAG4kB,qBACxC,OAAQ9P,EAAO+P,aACf,IAAK,UACL,KAAK,EACDlsB,EAAQksB,YAAc,EACtB,MACJ,IAAK,iBACL,KAAK,EACDlsB,EAAQksB,YAAc,EAmB1B,OAhBoB,MAAhB/P,EAAOgQ,QACPnsB,EAAQmsB,MAAQhQ,EAAOgQ,QAAU,GACV,MAAvBhQ,EAAOiQ,eAC4B,kBAAxBjQ,EAAOiQ,aACd5T,EAAM+T,OAAO/Q,OAAOW,EAAOiQ,aAAcpsB,EAAQosB,aAAe5T,EAAM6T,UAAU7T,EAAM+T,OAAO9mB,OAAO0W,EAAOiQ,eAAgB,GACtHjQ,EAAOiQ,aAAa3mB,SACzBzF,EAAQosB,aAAejQ,EAAOiQ,eACd,MAApBjQ,EAAOyJ,YACHpN,EAAM+F,MACLve,EAAQ4lB,UAAYpN,EAAM+F,KAAKK,UAAUzC,EAAOyJ,YAAY/G,UAAW,EACvC,kBAArB1C,EAAOyJ,UACnB5lB,EAAQ4lB,UAAY3V,SAASkM,EAAOyJ,UAAW,IACd,kBAArBzJ,EAAOyJ,UACnB5lB,EAAQ4lB,UAAYzJ,EAAOyJ,UACM,kBAArBzJ,EAAOyJ,YACnB5lB,EAAQ4lB,UAAY,IAAIpN,EAAMsG,SAAS3C,EAAOyJ,UAAUlH,MAAQ,EAAGvC,EAAOyJ,UAAUjH,OAAS,GAAGI,aACjG/e,GAYXisB,EAAqB3P,SAAW,SAAkBtc,EAASgY,GAClDA,IACDA,EAAU,IACd,IAAImE,EAAS,GACb,GAAInE,EAAQuE,SAUR,GATAJ,EAAO+P,YAAclU,EAAQwE,QAAUJ,OAAS,UAAY,EAC5DD,EAAOgQ,MAAQ,EACXnU,EAAQsU,QAAUlQ,OAClBD,EAAOiQ,aAAe,IAEtBjQ,EAAOiQ,aAAe,GAClBpU,EAAQsU,QAAU3sB,QAClBwc,EAAOiQ,aAAe5T,EAAM6T,UAAUlQ,EAAOiQ,gBAEjD5T,EAAM+F,KAAM,CACZ,IAAIS,EAAO,IAAIxG,EAAM+F,KAAK,EAAG,GAAG,GAChCpC,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS4C,EAAKE,WAAalH,EAAQiH,QAAUlP,OAASiP,EAAKD,WAAaC,OAE7G7C,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS,IAAM,EAa5D,OAX2B,MAAvBpc,EAAQksB,aAAuBlsB,EAAQib,eAAe,iBACtDkB,EAAO+P,YAAclU,EAAQwE,QAAUJ,OAAS1D,EAAMvR,IAAIC,SAASC,GAAG4kB,qBAAqBO,YAAYxsB,EAAQksB,aAAelsB,EAAQksB,aACrH,MAAjBlsB,EAAQmsB,OAAiBnsB,EAAQib,eAAe,WAChDkB,EAAOgQ,MAAQnsB,EAAQmsB,OACC,MAAxBnsB,EAAQosB,cAAwBpsB,EAAQib,eAAe,kBACvDkB,EAAOiQ,aAAepU,EAAQsU,QAAUlQ,OAAS5D,EAAM+T,OAAOxR,OAAO/a,EAAQosB,aAAc,EAAGpsB,EAAQosB,aAAa3mB,QAAUuS,EAAQsU,QAAU3sB,MAAQA,MAAM+a,UAAU+R,MAAMtN,KAAKnf,EAAQosB,cAAgBpsB,EAAQosB,cAC7L,MAArBpsB,EAAQ4lB,WAAqB5lB,EAAQib,eAAe,eACnB,kBAAtBjb,EAAQ4lB,UACfzJ,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAASA,OAAOpc,EAAQ4lB,WAAa5lB,EAAQ4lB,UAElFzJ,EAAOyJ,UAAY5N,EAAQiH,QAAU7C,OAAS5D,EAAM+F,KAAK7D,UAAUwE,SAASC,KAAKnf,EAAQ4lB,WAAa5N,EAAQiH,QAAUlP,OAAS,IAAIyI,EAAMsG,SAAS9e,EAAQ4lB,UAAUlH,MAAQ,EAAG1e,EAAQ4lB,UAAUjH,OAAS,GAAGI,WAAa/e,EAAQ4lB,WACrOzJ,GAUX8P,EAAqBvR,UAAU+B,OAAS,WACpC,OAAO3d,KAAKH,YAAY2d,SAASxd,KAAMoZ,EAAUO,KAAKiE,gBAU1DuP,EAAqBO,YAAe,WAChC,IAAI3T,EAAa,GAAInT,EAASoT,OAAOC,OAAOF,GAG5C,OAFAnT,EAAOmT,EAAW,GAAK,WAAa,EACpCnT,EAAOmT,EAAW,GAAK,kBAAoB,EACpCnT,EAJyB,GAO7BumB,EA7SgB,GAgTpB5kB,EAzp7BI,GA4p7BRD,EArq7BK,GAwq7BTD,EAjr7BE,GAor7BbulB,EAAOC,QAAUjU,G,wHC/r7BjB,sEAKA,MAAM,MACFsT,EADE,gBAEFjG,EAFE,kBAGFI,EAHE,kBAIFE,EAJE,kBAKFG,EALE,qBAMFG,EANE,qBAOFkC,EAPE,yBAQFkB,EARE,sBASF1B,EATE,mBAUFxB,EAVE,mBAWFY,EAXE,kBAYFwC,EAZE,eAaFnG,EAbE,oBAcFK,GACAhd,MAAIC,SAASC,GAEjB,MAAMulB,EAUMjuB,cAAe,KAGfkuB,kBAAqB9I,IACzB,MAAM1hB,EAAaJ,IAAoBI,WACjC2jB,EAAY,IAAIlC,EAItB,OAHAkC,EAAU3jB,WAAaA,EACvB2jB,EAAUjC,cAAgBA,EAEnBiC,GATW,KAYf7W,eAAkBjK,IACrB,MAAM6e,EAAgB+I,cAEhBC,EAAkB,IAAIhH,EAK5B,OAJAgH,EAAgB/G,UAAYlnB,KAAK+tB,kBAAkB9I,GACnDgJ,EAAgB7nB,SAAWA,EAC3B6nB,EAAgB7nB,SAAS9D,UAAY,GAE9B4rB,IAAiBC,QAAQjB,EAAMkB,cAAenJ,EAAegC,EAAgBhL,OAAOgS,GAAiBI,WApB1F,KAwBfC,iBAAmB,CAACloB,EAAyC9D,KAChE,MAAM2iB,EAAgB+I,cAEhBO,EAAoB,IAAIlH,EAM9B,OAJAkH,EAAkBrH,UAAYlnB,KAAK+tB,kBAAkB9I,GACrDsJ,EAAkBnoB,SAAWA,EAC7BmoB,EAAkBjsB,UAAYA,EAEvB4rB,IAAiBC,QAAQjB,EAAMsB,gBAAiBvJ,EAAeoC,EAAkBpL,OAAOsS,GAAmBF,WAjChG,KAsCf7a,iBAAoBgU,IACvB,MAAMvC,EAAgB+I,cAEhBS,EAAoB,IAAIlH,EAK9B,OAHAkH,EAAkBvH,UAAYlnB,KAAK+tB,kBAAkB9I,GACrDwJ,EAAkBjH,eAAiBA,EAE5B0G,IAAiBC,QAAQjB,EAAMwB,iBAAkBzJ,EAAesC,EAAkBtL,OAAOwS,GAAmBJ,WA9CjG,KAkDf5a,iBAAmB,CAACnM,EAAiBgK,KACxC,MAAM2T,EAAgB+I,cAEhBrG,EAAiB,IAAItC,EAC3BsC,EAAergB,QAAUA,EACrBgK,IACAqW,EAAerW,cAAgBA,GAGnC,MAAMqd,EAAoB,IAAIjH,EAI9B,OAHAiH,EAAkBzH,UAAYlnB,KAAK+tB,kBAAkB9I,GACrD0J,EAAkBhH,eAAiBA,EAE5BuG,IAAiBC,QAAQjB,EAAM0B,iBAAkB3J,EAAeyC,EAAkBzL,OAAO0S,GAAmBN,WA/DjG,KAoEfQ,oBAAuBzoB,IAC1B,MAAM6e,EAAgB+I,cAEhBc,EAAuB,IAAIjH,EAKjC,OAHAiH,EAAqB5H,UAAYlnB,KAAK+tB,kBAAkB9I,GACxD6J,EAAqB1oB,SAAWA,EAEzB8nB,IAAiBC,QAAQjB,EAAM6B,oBAAqB9J,EAAe4C,EAAqB5L,OAAO6S,GAAsBT,WA5E1G,KAiFfvjB,oBAAsB,KACzB,MAAMma,EAAgB+I,cAChBgB,EAAuB,IAAIjF,EAIjC,OAFAiF,EAAqB9H,UAAYlnB,KAAK+tB,kBAAkB9I,GAEjDiJ,IAAiBe,iBAAiB/B,EAAMgC,qBAAsBjK,EAAe8E,EAAqB9N,OAAO+S,GAAsBX,WAvFpH,KA2FfloB,wBAA0B,KAC7B,MAAM8e,EAAgB+I,cAEhBmB,EAA2B,IAAIlE,EAIrC,OAFAkE,EAAyBjI,UAAYlnB,KAAK+tB,kBAAkB9I,GAErDiJ,IAAiBe,iBAAiB/B,EAAMkC,0BAA2BnK,EAAegG,EAAyBhP,OAAOkT,GAA0Bd,WAlGjI,KAsGfplB,qBAAuB,KAC1B,MAAMgc,EAAgB+I,cAEhBqB,EAAwB,IAAI9F,EAIlC,OAFA8F,EAAsBnI,UAAYlnB,KAAK+tB,kBAAkB9I,GAElDiJ,IAAiBe,iBAAiB/B,EAAMoC,sBAAuBrK,EAAesE,EAAsBtN,OAAOoT,GAAuBhB,WA7GvH,KAiHfjnB,kBAAoB,KACvB,MAAM6d,EAAgB+I,cAEhBuB,EAAqB,IAAIxH,EAI/B,OAFAwH,EAAmBrI,UAAYlnB,KAAK+tB,kBAAkB9I,GAE/CiJ,IAAiBe,iBAAiB/B,EAAMsC,mBAAoBvK,EAAe8C,EAAmB9L,OAAOsT,GAAoBlB,WAxH9G,KA4HfzhB,kBAAoB,KACvB,MAAMqY,EAAgB+I,cAEhByB,EAAqB,IAAI9G,EAI/B,OAFA8G,EAAmBvI,UAAYlnB,KAAK+tB,kBAAkB9I,GAE/CiJ,IAAiBe,iBAAiB/B,EAAMwC,mBAAoBzK,EAAe0D,EAAmB1M,OAAOwT,GAAoBpB,WAnI9G,KAsIfsB,iBAAmB,KACtB,MAAM1K,EAAgB+I,cAEhB4B,EAAoB,IAAIzE,EAI9B,OAFAyE,EAAkB1I,UAAYlnB,KAAK+tB,kBAAkB9I,GAE9CiJ,IAAiBe,iBAAiB/B,EAAM2C,kBAAmB5K,EAAekG,EAAkBlP,OAAO2T,GAAmBvB,YAvJ/HP,EACYgC,YAAc,KACnBhC,EAAaiC,WACdjC,EAAaiC,SAAW,IAAIjC,GAEzBA,EAAaiC,UALtBjC,EAQaiC,c,EAsJnB,MAAM7pB,EAAe4nB,EAAagC,e,wIC7K3B,MAAME,EAAiBC,YAAO,eAAPA,CAAuBC,YAAS,cAA6BC,YAAsB,eAAD,oBAEvG9Z,MAAQ,CAAE+Z,YAAa,YAFgF,KA6B9GC,YAAeC,IACb,MAAM,QAAEna,GAAYnW,KAAKuwB,MACrBD,GACFna,EAAQC,KAAKka,EAAKC,MAAMC,UA5BrBC,SACL,MAAM,OAAEC,EAAF,SAAUxa,GAAalW,KAAKuwB,MAElC,IAAII,EAAqB,GAOzB,OANAD,EAAOE,KAAI,CAACC,EAAYnqB,KAClBwP,EAAS4a,SAASC,WAAWF,EAAMG,QACrCL,EAAqBE,EAAMG,SAK7B,cAACC,EAAA,EAAD,CACEN,mBAAoBA,EACpBN,YAAarwB,KAAKqwB,YAClBa,OAAQ,CAAEC,eAAgB,CAAEC,OAAQ,IAAMC,KAAM,CAAED,OAAQ,IAAME,YAAa,CAAEF,OAAQ,IAAMG,KAAM,CAAEH,OAAQ,IAAMI,KAAM,CAAEC,WAAY,KAHzI,SAKGf,EAAOE,KAAI,CAACC,EAAYnqB,IACvB,cAACgrB,EAAA,EAAD,CAA8ClB,QAASK,EAAMG,KAAMW,WAAYd,EAAMhV,KAArF,SACE,cAAC,GAAD,IAAwBgV,KADT,gBAAeA,EAAMhV,gBAiBjC+V,kBAAW5B,G,6KCzB1B,MAAM6B,EAAoC,CACxCC,OAAQ,CAAEC,YAAa,IACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAGdC,EAAWhC,YAAO,YAAPA,CAAoBC,YAAS,cAAuBC,YAAsB,eAAD,oBAExF9Z,MAAQ,CACb6b,gBAAgB,EAChBC,aAAc,GACdC,mBAAoB,GACpBC,wBAAwB,EACxBC,gBAAiB,KACjBC,4BAA4B,EAC5BC,eAAgB,KAChBC,oBAAqB,GACrBC,WAAY,KACZC,gCAAgC,EAChCC,iBAAkBxuB,OAAOyuB,WACzBC,kBAAmB1uB,OAAO2uB,aAdmE,KA6B/FC,OAAS,KACPhzB,KAAKizB,SAAS,CAAE,iBAAoB7uB,OAAOyuB,WAAY,kBAAqBzuB,OAAO2uB,eA9BU,KAgWvFG,mBAAqB,CAAC3xB,EAAgB4xB,KAC5CnzB,KAAKizB,SAAS,CAAEd,aAAcgB,EAAOf,mBAAoB7wB,EAAQ2wB,gBAAgB,KAjWY,KAoWvFkB,oBAAsB,KAC5BpzB,KAAKizB,SAAS,CAAEf,gBAAgB,EAAOC,aAAc,GAAIC,mBAAoB,MArWgB,KAwWvFiB,qBAAwB9xB,IAC9BvB,KAAKizB,SAAS,CAAEX,gBAAiB/wB,EAAQ8wB,wBAAwB,KAzW4B,KA4WvFiB,sBAAwB,KAC9BtzB,KAAKizB,SAAS,CAAEZ,wBAAwB,EAAMC,gBAAiB,QA7W8B,KAgXvFjyB,mBAAqB,KAC3B,MAAM,UAAET,GAAcI,KAAKuwB,MAC3B3wB,EAAUS,mBAAmBL,KAAKqW,MAAMic,iBACxCtyB,KAAKszB,yBAnXwF,KAsXvFC,yBAA4BhyB,IAClCvB,KAAKizB,SAAS,CAAET,eAAgBjxB,EAAQgxB,4BAA4B,KAvXyB,KA0XvFiB,0BAA4B,KAClCxzB,KAAKizB,SAAS,CAAEV,4BAA4B,EAAMC,eAAgB,QA3X2B,KA8XvFlyB,uBAAyB,KAC/B,MAAM,UAAEV,GAAcI,KAAKuwB,MAC3B3wB,EAAUU,uBAAuBN,KAAKqW,MAAMmc,gBAC5CxyB,KAAKwzB,6BAjYwF,KAoYvFC,+BAAiC,CAAClyB,EAAgBG,KACxD1B,KAAKizB,SAAS,CAAEP,WAAYnxB,EAAQkxB,oBAAqB/wB,EAAaixB,gCAAgC,KArYT,KAwYvFe,gCAAkC,KACxC1zB,KAAKizB,SAAS,CAAEN,gCAAgC,EAAOD,WAAY,KAAMD,oBAAqB,MAzYD,KA4YvFlyB,8BAAgC,KACtCP,KAAKuwB,MAAM3wB,UAAUW,8BAA8BP,KAAKqW,MAAMqc,WAAY1yB,KAAKqW,MAAMoc,qBACrFzyB,KAAK0zB,mCA9YwF,KAqZvFC,mBAAqB,KAE3B,MAAM,UAAE/zB,GAAcI,KAAKuwB,MAC3B,MAAO,CACL,CACEqD,IAAK,MACL/X,KAAM,eACNgY,UAAW,CACTC,SAAU,OAEZC,QAAS,IAAMn0B,EAAUQ,cAE3B,CACEwzB,IAAK,UACL/X,KAAM,eACNgY,UAAW,CACTC,SAAU,WAEZC,QAAS,IAAMn0B,EAAUM,iBAtZ/B8zB,oBACEh0B,KAAKgzB,SACL5uB,OAAO6vB,iBAAiB,SAAUj0B,KAAKgzB,QACvC,MAAM,UAAEpzB,GAAcI,KAAKuwB,MAE3B3wB,EAAUM,cAGZg0B,uBACE9vB,OAAO+vB,oBAAoB,SAAUn0B,KAAKgzB,QAQrCvC,SAIL,MAAM2D,EAAqB,CAAC,CAC1BR,IAAK,SACL/X,KAAM,KACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK/uB,UAIlB,CACEqyB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACW,IAAhBA,EAAK1vB,OAEL,sBAAM6zB,MAAO,CAAEC,MAAO,OAAtB,sCAEuB,IAAhBpE,EAAK1vB,OAEZ,sBAAM6zB,MAAO,CAAEC,MAAO,SAAtB,sCAIF,sBAAMD,MAAO,CAAEC,MAAO,QAAtB,SAAiCpE,EAAK1vB,UAGzC,CACDgzB,IAAK,cACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK5uB,eAGf,CACDkyB,IAAK,oBACL/X,KAAM,mCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKqE,qBAGf,CACDf,IAAK,oBACL/X,KAAM,mCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKsE,qBAGf,CACDhB,IAAK,eACL/X,KAAM,iCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKuE,gBAGf,CACDjB,IAAK,oBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKwE,qBAGf,CACDlB,IAAK,qBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKyE,sBAGf,CACDnB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,cAAC0E,EAAA,EAAD,CACEC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACTC,MAAO,CACL,CACE3B,IAAK,YACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,aAEZC,QAAS,IAAM/zB,KAAKkzB,mBAAmB5C,EAAK/uB,OAAQ+uB,EAAK6C,QAE3D,CACES,IAAK,aACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,oBAEZC,QAAS,IAAM/zB,KAAKuzB,yBAAyBjD,EAAK/uB,SAEpD,CACEqyB,IAAK,oBACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,YAEZC,QAAS,IAAM/zB,KAAKyzB,+BAA+BnD,EAAK/uB,OAAQ+uB,EAAK5uB,cAEvE,CACEkyB,IAAK,SACLpC,KAAM,eACNqC,UAAW,CACTC,SAAU,cAEZC,QAAS,IAAM/zB,KAAKqzB,qBAAqB/C,EAAK/uB,gBAYtD,UAAE3B,GAAcI,KAAKuwB,MAErBiF,EAAaC,YAAe,CAChCC,QAAS,CACPtE,OAAWpxB,KAAKqW,MAAMyc,kBAAoB,GAAjC,KACT5pB,SAAU,WACVysB,UAAW,aAIf,OACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEN,MAAOv1B,KAAK2zB,uBAOd,qBAAKmC,UAAWN,EAAWE,QAA3B,SACE,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CAEEZ,MAAO31B,EAAUE,SACjBs2B,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,KACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,cAO7B,cAACE,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAM6b,eACnB8F,YAAY,EACZC,UAAW,IAAMj4B,KAAKozB,sBAHxB,SAKE,cAACwC,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,SACE,cAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,SACE,eAAC1C,EAAA,EAAD,IAAW/D,EAAX,UACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,iBAAOC,aAAcz4B,KAAKqW,MAAM+b,mBAAoBsG,UAAU,IAC/E,cAACH,EAAA,EAAD,CAAWC,MAAM,eAAKC,aAAcz4B,KAAKqW,MAAM8b,aAAcwG,UAAU,eAOjF,cAACC,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAMgc,uBACnB4F,UAAW,IAAMj4B,KAAKszB,wBACtBwF,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,2BACPC,QAAU,gDAAYl5B,KAAKqW,MAAMic,oGAEnC6G,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAKK,qBAAsBmxB,KAAK,iBAC9D,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAKszB,wBAAyB9B,KAAK,sBAIrE,cAACoH,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAMkc,2BACnB0F,UAAWj4B,KAAKwzB,0BAChBsF,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,mDACPC,QAAU,4DAAcl5B,KAAKqW,MAAMmc,mGAErC2G,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAKM,yBAA0BkxB,KAAK,iBAClE,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAKwzB,4BAA6BhC,KAAK,sBAIzE,cAACsG,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMsc,+BACnBqF,YAAY,EACZC,UAAW,IAAMj4B,KAAK0zB,kCAHxB,SAKE,eAACkC,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UAGE,cAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,sBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,6BAAqD55B,KAAKqW,MAAMqc,kBAE7E,cAACkD,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,EAAX,SACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,2BAAOqB,WAAW,EAAMC,WAAW,EAAMrB,aAAcz4B,KAAKqW,MAAMoc,oBAAsBzyB,KAAKqW,MAAMoc,oBAAsB,GAAIsH,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk6B,4BAA4BF,WAOlO,cAACpE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,eAAC4D,EAAA,EAAD,IAAW/D,EAAX,UACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAKO,kCAC7C,cAACi5B,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK0zB,mDA4DrDwG,4BAA4BF,GAClCh6B,KAAKizB,SAAS,CAAER,oBAAqBuH,EAAMG,OAAOC,YA0FvCxI,kBAAWK,G,iDC/e1B,MAAM,gBAAE/X,EAAF,uBAAmBC,EAAnB,kBAA2CK,GAAsBnS,MAAIC,SAASC,GAG9E8xB,EAAgBC,YAAY,CAChCC,MAAO,CACLC,OAAQ,CACNC,WAAY,0BACZf,SAAU,WAKVgB,EAAoC,CACxCnJ,KAAM,CACJmI,SAAU,OACVtI,OAAQ,KAINuJ,EAA2C,CAC/CC,SAAU,CAAE5I,MAAO,MAGfH,EAAoC,CACxCC,OAAQ,CAAEC,YAAa,IACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAGrB6I,EAAwC,CAC5C,CAAEjH,IAAK,EAAGpC,KAAM,kCAChB,CAAEoC,IAAK,EAAGpC,KAAM,gBAChB,CAAEoC,IAAK,EAAGpC,KAAM,iBAGZsJ,EAA+C,CACnD,CAAElH,IAAK,EAAGpC,KAAM,OAChB,CAAEoC,IAAK,EAAGpC,KAAM,MAChB,CAAEoC,IAAK,EAAGpC,KAAM,WAGZuJ,EAAsD,CAC1D,CAAEnH,IAAK,sDAAuDpC,KAAM,uDACpE,CAAEoC,IAAK,wDAAyDpC,KAAM,yDACtE,CAAEoC,IAAK,wDAAyDpC,KAAM,0DAI3DwJ,EAAc/K,YAAO,eAAPA,CAAuBC,YAAS,cAA0BC,YAAsB,eAAD,oBAEjG9Z,MAAQ,CACb4kB,+BAA+B,EAC/BC,uBAAwB,GAExBC,2BAA2B,EAC3BC,mBAAoB,KAEpBC,gCAAgC,EAChCC,mCAAmC,EAEnCC,sBAAsB,EAEtBC,cAAe,GACfC,gBAAiB,GACjBC,4BAA6B,GAC7BC,uBAAwB,GACxBC,wBAAyB,IACzBC,oCAAqC,GACrCC,8BAA+B,GAC/BC,0CAA2C,GAC3CC,gBAAiB,EACjBC,uBAAwB,EACxBC,0BAA2B,GAC3BC,4BAA6B,GAC7BC,wCAAyC,GACzCC,8BAA+B,GAC/BC,0CAA2C,GAC3CC,4BAA6B,GAC7BC,wCAAyC,GACzCC,4BAA6B,EAC7BC,wCAAyC,GACzCC,4BAA6B,GAC7BC,wCAAyC,GACzCC,4BAA6B,EAC7BC,wCAAyC,GACzCC,qCAAsC,GACtCC,8BAA+B,GAC/BC,8BAA+B,GAC/BC,0CAA2C,GAC3CC,2BAA4B,GAC5BC,6BAA8B,EAC9BC,yBAA0B,YAC1BC,qCAAsC,GACtCC,yBAA0B,KAC1BC,qCAAsC,GACtC5K,iBAAkBxuB,OAAOyuB,WACzBC,kBAAmB1uB,OAAO2uB,aAhD4E,KAgExGC,OAAS,KACPhzB,KAAKizB,SAAS,CAAE,iBAAoB7uB,OAAOyuB,WAAY,kBAAqBzuB,OAAO2uB,eAjEmB,KA6jBhG0K,6BAA+B,KACrCz9B,KAAKizB,SAAS,CAAEoI,gCAAgC,KA9jBsD,KAikBhGqC,8BAAgC,KACtC19B,KAAKizB,SAAS,CAAEoI,gCAAgC,KAlkBsD,KAokBhGl5B,mBAAqB,KAC3B,MAAM,aAAER,GAAiB3B,KAAKuwB,MAC9B5uB,EAAaQ,qBACbnC,KAAK09B,iCAvkBiG,KA0kBhGC,gCAAkC,KACxC39B,KAAKizB,SAAS,CAAEqI,mCAAmC,KA3kBmD,KA8kBhGsC,iCAAmC,KACzC59B,KAAKizB,SAAS,CAAEqI,mCAAmC,KA/kBmD,KAilBhGp5B,sBAAwB,KAC9B,MAAM,aAAEP,GAAiB3B,KAAKuwB,MAC9B5uB,EAAaO,wBACblC,KAAK49B,oCAplBiG,KAulBhGC,4BAA+Bv7B,IACrCtC,KAAKizB,SAAS,CAAEiI,uBAAwB54B,EAAW24B,+BAA+B,KAxlBoB,KA2lBhG6C,6BAA+B,KACrC99B,KAAKizB,SAAS,CAAEgI,+BAA+B,EAAMC,uBAAwB,MA5lByB,KA8lBhGj5B,6BAA+B,KACrC,MAAM,aAAEN,GAAiB3B,KAAKuwB,MAC9B5uB,EAAaM,6BAA6BjC,KAAKqW,MAAM6kB,wBACrDl7B,KAAK89B,gCAjmBiG,KAomBhGC,wBAA2Bz7B,IACjCtC,KAAKizB,SAAS,CAAEmI,mBAAoB94B,EAAW64B,2BAA2B,KArmB4B,KAwmBhG6C,yBAA2B,KACjCh+B,KAAKizB,SAAS,CAAEkI,2BAA2B,EAAMC,mBAAoB,QAzmBiC,KA4mBhGr5B,yBAA2B,KACjC,MAAM,aAAEJ,GAAiB3B,KAAKuwB,MAC9B5uB,EAAaI,yBAAyB/B,KAAKqW,MAAM+kB,oBACjDp7B,KAAKg+B,4BA/mBiG,KAknBhGrK,mBAAqB,KAE3B,MAAM,aAAEhyB,GAAiB3B,KAAKuwB,MAC9B,MAAO,CACL,CACEqD,IAAK,MACL/X,KAAM,eACNgY,UAAW,CACTC,SAAU,OAEZC,QAAS,IAAM/zB,KAAKi+B,qBAAqB,OAE3C,CACErK,IAAK,UACL/X,KAAM,eACNgY,UAAW,CACTC,SAAU,WAEZC,QAAS,IAAMpyB,EAAaE,kBAE9B,CACE+xB,IAAK,aACL/X,KAAM,2BACNgY,UAAW,CACTC,SAAU,iBAEZC,QAAS,IAAM/zB,KAAKy9B,gCAEtB,CACE7J,IAAK,gBACL/X,KAAM,2BACNgY,UAAW,CACTC,SAAU,oBAEZC,QAAS,IAAM/zB,KAAK29B,qCAjmB1B3J,oBACEh0B,KAAKgzB,SACL5uB,OAAO6vB,iBAAiB,SAAUj0B,KAAKgzB,QACvC,MAAM,aAAErxB,GAAiB3B,KAAKuwB,MAE9B5uB,EAAaE,iBAIfqyB,uBACE9vB,OAAO+vB,oBAAoB,SAAUn0B,KAAKgzB,QAOrCvC,SAIL,MAAM2D,EAAqB,CAAC,CAC1BR,IAAK,YACL/X,KAAM,KACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKhuB,aAIlB,CACEsxB,IAAK,SACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,UACN+yB,SAAWlE,GACLA,EAAK1vB,SAAW4Z,EAAkB0jB,gBAElC,sBAAMzJ,MAAO,CAAEC,MAAO,OAAtB,sCAEOpE,EAAK1vB,SAAW4Z,EAAkB2jB,aAEzC,sBAAM1J,MAAO,CAAEC,MAAO,SAAtB,sCAEOpE,EAAK1vB,SAAW4Z,EAAkB4jB,iBAEzC,sBAAM3J,MAAO,CAAEC,MAAO,UAAtB,sCAEOpE,EAAK1vB,SAAW4Z,EAAkB6jB,cAEzC,sBAAM5J,MAAO,CAAEC,MAAO,UAAtB,sCAIF,sBAAMD,MAAO,CAAEC,MAAO,QAAtB,SAAiCpE,EAAK1vB,UAGzC,CACDgzB,IAAK,wBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKzK,yBAGf,CACD+N,IAAK,cACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK/K,eAGf,CACDqO,IAAK,qBACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK9K,sBAGf,CACDoO,IAAK,qBACL/X,KAAM,iCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK7K,sBAGf,CACDmO,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACLA,EAAKxU,cAAgB5B,EAAgBokB,uBAErC,kEAEOhO,EAAKxU,cAAgB5B,EAAgBqkB,eAE5C,gDAEOjO,EAAKxU,cAAgB5B,EAAgBskB,UAE5C,gDAIF,+BAAOlO,EAAKxU,eAIf,CACD8X,IAAK,qBACL/X,KAAM,6CACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACLA,EAAKvU,qBAAuB5B,EAAuBskB,QAEnD,uCAEOnO,EAAKvU,qBAAuB5B,EAAuBukB,OAE1D,sCAEOpO,EAAKvU,qBAAuB5B,EAAuBwkB,WAE1D,0CAIF,+BAAOrO,EAAKvU,sBAGf,CACD6X,IAAK,eACL/X,KAAM,6BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKsO,gBAGf,CACDhL,IAAK,SACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,iCAEKA,EAAK1vB,SAAW4Z,EAAkB2jB,cAAgB7N,EAAK1vB,SAAW4Z,EAAkB6jB,cACnF,cAACQ,EAAA,EAAD,CACEhL,UAAW,CAAEC,SAAU,iBACvBgL,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACThL,QAAS,IAAM/zB,KAAK69B,4BAA4BvN,EAAKhuB,WACrD4uB,OAAQwJ,EANV,0BAUA,cAACmE,EAAA,EAAD,CACEhL,UAAW,CAAEC,SAAU,oBACvBgL,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACThL,QAAS,IAAM/zB,KAAKuwB,MAAM5uB,aAAaK,0BAA0BsuB,EAAKhuB,WACtE4uB,OAAQwJ,EANV,0BAYJ,cAAC1F,EAAA,EAAD,CACEC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACTC,MAAO,CACL,CACE3B,IAAK,OACLpC,KAAM,eACNqC,UAAW,CACTC,SAAU,YAEZC,QAAS,IAAM/zB,KAAKi+B,qBAAqB3N,IAE3C,CACEsD,IAAK,SACLpC,KAAM,eACNqC,UAAW,CACTC,SAAU,cAEZC,QAAS,IAAM/zB,KAAK+9B,wBAAwBzN,EAAKhuB,sBAY3D,aAAEX,GAAiB3B,KAAKuwB,MACxBiF,EAAaC,YAAe,CAChCC,QAAS,CACPtE,OAAWpxB,KAAKqW,MAAMyc,kBAAoB,GAAjC,KACT5pB,SAAU,WACVysB,UAAW,aAIf,OACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEN,MAAOv1B,KAAK2zB,uBAEd,qBAAKmC,UAAWN,EAAWE,QAA3B,SACE,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CAEEZ,MAAO5zB,EAAaC,YACpBw0B,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,KACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,cAQ7B,cAACE,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMklB,qBACnBvD,YAAY,EAFd,SAIE,eAACpC,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UAEE,cAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,0CAEb,cAAChE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,eAAC4D,EAAA,EAAD,IAAW/D,EAAX,UACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,iBAAOwG,GAAG,gBAAgBtG,UAAU,EAAMD,aAAcz4B,KAAKqW,MAAMmlB,gBACpF,cAACjD,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAG,kBAAkBvG,aAAcz4B,KAAKqW,MAAMolB,gBAAiBwD,aAAcj/B,KAAKqW,MAAMqlB,4BAA6B3B,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KACxO,cAAC1B,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAG,yBAAyBvG,aAAcz4B,KAAKqW,MAAMslB,uBAAwB5B,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAChM,cAAC1B,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAG,0BAA0BrqB,KAAK,SAAS8jB,aAAe,GAAEz4B,KAAKqW,MAAMulB,0BAA2BqD,aAAcj/B,KAAKqW,MAAMwlB,oCAAqC9B,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,QAGrR,eAACrE,EAAA,EAAD,IAAW/D,EAAX,UAEE,cAACsN,EAAA,EAAD,CACE3G,MAAM,iCACNwG,GAAG,gCACHI,eAAe,EACfC,aAAc,MACdnmB,QAAS6hB,EACThB,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,UAChDvd,IAAXyiB,GACFt/B,KAAKk/B,wBAAwB,gCAAiCI,EAAO9N,OAGzEgO,sBAAuB,CAACF,EAA0BC,EAAgBnF,UAClDvd,IAAVud,GACFp6B,KAAKk/B,wBAAwB,gCAAiC9E,IAGlE6E,aAAcj/B,KAAKqW,MAAM0lB,0CACzBvK,KAAMxxB,KAAKqW,MAAMylB,gCAGnB,cAAC2D,EAAA,EAAD,CACET,GAAG,kBACHxG,MAAM,2BACN7H,mBAAoB3wB,KAAKqW,MAAM2lB,gBAC/B9iB,QAAS2hB,EACT3J,OAAQyJ,EACRZ,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,IAAmBp6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAIO,KAGpI,cAACE,EAAA,EAAD,CACET,GAAG,yBACHxG,MAAM,6CACN7H,mBAAoB3wB,KAAKqW,MAAM4lB,uBAC/B/iB,QAAS4hB,EACT5J,OAAQyJ,EACRZ,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,IAAmBp6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAIO,KAGpI,cAAChH,EAAA,EAAD,CAAWC,MAAM,8DAA2BwG,GAAG,4BAA4BrqB,KAAK,SAAS8jB,aAAe,GAAEz4B,KAAKqW,MAAM6lB,4BAA6BnC,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,aAMlPj6B,KAAKqW,MAAM4lB,yBAA2B9hB,EAAuBskB,QAC5D,cAAC7I,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,iCACG,KAEjB55B,KAAKqW,MAAM4lB,yBAA2B9hB,EAAuBskB,QAC5D,cAAC7I,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,eAAC4D,EAAA,EAAD,IAAW/D,EAAX,UACI7xB,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBokB,wBAA0Bt+B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBqkB,eACxH,cAAChG,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAI,8BAA+BvG,aAAcz4B,KAAKqW,MAAMkmB,4BAA6B0C,aAAcj/B,KAAKqW,MAAMmmB,wCAAyCzC,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAAgB,KAE9Rj6B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBokB,wBAA0Bt+B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBskB,UACxH,cAACjG,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAI,8BAA+BvG,aAAcz4B,KAAKqW,MAAMsmB,4BAA6BsC,aAAcj/B,KAAKqW,MAAMumB,wCAAyC7C,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAAgB,KAEhS,cAAC1B,EAAA,EAAD,CAAWC,MAAM,qBAAMwG,GAAI,8BAA+BvG,aAAcz4B,KAAKqW,MAAM8lB,4BAA6B8C,aAAcj/B,KAAKqW,MAAM+lB,wCAAyCrC,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAC7Q,cAAC1B,EAAA,EAAD,CAAWC,MAAM,kBAAkBwG,GAAI,uCAAwCvG,aAAcz4B,KAAKqW,MAAM0mB,qCAAsChD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KACzO,cAAC1B,EAAA,EAAD,CAAWC,MAAM,QAAQwG,GAAG,6BAA6BvG,aAAcz4B,KAAKqW,MAAM8mB,2BAA4BpD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,QAE3M,eAACrE,EAAA,EAAD,IAAW/D,EAAX,UAcI7xB,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBokB,wBAA0Bt+B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBqkB,eACxH,cAAChG,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAG,8BAA8BrqB,KAAK,SAAS8jB,aAAe,GAAEz4B,KAAKqW,MAAMomB,8BAA+BwC,aAAcj/B,KAAKqW,MAAMqmB,wCAAyC3C,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAAgB,KAE/Sj6B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBokB,wBAA0Bt+B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBskB,UACxH,cAACjG,EAAA,EAAD,CAAWC,MAAM,2BAAOwG,GAAG,8BAA8BrqB,KAAK,SAAS8jB,aAAe,GAAEz4B,KAAKqW,MAAMwmB,8BAA+BoC,aAAcj/B,KAAKqW,MAAMymB,wCAAyC/C,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAAgB,KAEjT,cAAC1B,EAAA,EAAD,CAAWC,MAAM,eAAKwG,GAAG,gCAAgCrqB,KAAK,WAAW8jB,aAAcz4B,KAAKqW,MAAMgmB,8BAA+B4C,aAAcj/B,KAAKqW,MAAMimB,0CAA2CvC,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAChS,cAAC1B,EAAA,EAAD,CAAWC,MAAM,WAAWwG,GAAG,gCAAgCvG,aAAcz4B,KAAKqW,MAAM2mB,8BAA+BjD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KAElN,cAAC1B,EAAA,EAAD,CAAWC,MAAM,WAAWwG,GAAG,gCAAgCvG,aAAcz4B,KAAKqW,MAAM4mB,8BAA+BgC,aAAcj/B,KAAKqW,MAAM6mB,0CAA2CnD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,aAI5Q,KAEjBj6B,KAAKqW,MAAM4lB,yBAA2B9hB,EAAuBukB,OAC5D,cAAC9I,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,CAAWY,MAAOA,EAAlB,8BACc,KAGjBr6B,KAAKqW,MAAM4lB,yBAA2B9hB,EAAuBukB,OAC5D,cAAC9I,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,eAAC4D,EAAA,EAAD,IAAW/D,EAAX,UACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,eAAKwG,GAAG,2BAA2BvG,aAAcz4B,KAAKqW,MAAMgnB,yBAA0B4B,aAAcj/B,KAAKqW,MAAMinB,qCAAsCvD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,KACjQ,cAAC1B,EAAA,EAAD,CAAWC,MAAM,uBAAQwG,GAAG,+BAA+BrqB,KAAK,SAAS8jB,aAAe,GAAEz4B,KAAKqW,MAAM+mB,+BAAgCrD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,QAElO,cAACrE,EAAA,EAAD,IAAW/D,EAAX,SACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,eAAKwG,GAAG,2BAA2BrqB,KAAK,SAAS8jB,aAAe,GAAEz4B,KAAKqW,MAAMknB,2BAA4B0B,aAAcj/B,KAAKqW,MAAMmnB,qCAAsCzD,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKk/B,wBAAwBlF,EAAMG,OAAO6E,GAAI/E,YAG1Q,KAGlB,cAACrE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,IAAW/D,EAAX,SACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK0/B,sBAE/C,cAAC9J,EAAA,EAAD,IAAW/D,EAAX,SACE,cAAC2H,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK2/B,sCAQvD,cAAC/G,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAM4kB,8BACnBhD,UAAW,IAAMj4B,KAAK89B,+BACtBhF,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,2BACPC,QAAU,gDAAYl5B,KAAKqW,MAAM6kB,0BAEnC/B,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAKiC,+BAAgCuvB,KAAK,iBACxE,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAK89B,+BAAgCtM,KAAK,sBAK5E,cAACoH,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAM8kB,0BACnBlD,UAAWj4B,KAAKg+B,yBAChBlF,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,2BACPC,QAAU,gDAAYl5B,KAAKqW,MAAM+kB,+HAEnCjC,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAK+B,2BAA4ByvB,KAAK,iBACpE,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAKg+B,2BAA4BxM,KAAK,sBAIxE,cAACoH,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAMglB,+BACnBpD,UAAWj4B,KAAK09B,8BAChB5E,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,2BACPC,QAAS,qDAEXC,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAKmC,qBAAsBqvB,KAAK,6BAC9D,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAK09B,gCAAiClM,KAAK,sBAI7E,cAACoH,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAMilB,kCACnBrD,UAAWj4B,KAAK49B,iCAChB9E,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,2BACPC,QAAS,qDAEXC,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAKkC,wBAAyBsvB,KAAK,6BACjE,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAK49B,mCAAoCpM,KAAK,yBAoG9E0N,wBAAwBF,EAAY5E,GAC1Cp6B,KAAKizB,SAAS,CAAE,CAAC+L,GAAK5E,IAAS,IAAMp6B,KAAK4/B,qBAKpCC,0BACN,OAAK7/B,KAAKqW,MAAMolB,iBAAkD,KAA/Bz7B,KAAKqW,MAAMolB,gBAGvC,CAAE76B,QAAQ,EAAMM,QAAS,CAAE,4BAA+B,KAFxD,CAAEN,QAAQ,EAAOM,QAAS,CAAE,4BAA+B,yCAK9D4+B,kCACN,OAAK9/B,KAAKqW,MAAMulB,yBAA4BmE,IAAqBC,KAAM,GAAEhgC,KAAKqW,MAAMulB,2BAG7E,CAAEh7B,QAAQ,EAAMM,QAAS,CAAE,oCAAuC,KAFhE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,oCAAuC,6EAMtE++B,wCACN,OAAKjgC,KAAKqW,MAAMylB,+BAA8E,KAA7C97B,KAAKqW,MAAMylB,8BAGrD,CAAEl7B,QAAQ,EAAMM,QAAS,CAAE,0CAA6C,KAFtE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,0CAA6C,+CAK5Eg/B,sCACN,OAAKlgC,KAAKqW,MAAM8lB,6BAA0E,KAA3Cn8B,KAAKqW,MAAM8lB,4BAGnD,CAAEv7B,QAAQ,EAAMM,QAAS,CAAE,wCAA2C,KAFpE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,wCAA2C,+CAK1Ei/B,wCACN,OAAKngC,KAAKqW,MAAM4mB,+BAA8E,KAA7Cj9B,KAAKqW,MAAM4mB,8BAGrD,CAAEr8B,QAAQ,EAAMM,QAAS,CAAE,0CAA6C,KAFtE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,0CAA6C,+CAK5Ek/B,wCACN,OAAKpgC,KAAKqW,MAAMgmB,+BAA8E,KAA7Cr8B,KAAKqW,MAAMgmB,8BAGrD,CAAEz7B,QAAQ,EAAMM,QAAS,CAAE,0CAA6C,KAFtE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,0CAA6C,yCAM5Em/B,sCACN,OAAKC,IAAgBN,KAAKhgC,KAAKqW,MAAMkmB,8BAAiCgE,IAAkBP,KAAKhgC,KAAKqW,MAAMkmB,6BAGjG,CAAE37B,QAAQ,EAAMM,QAAS,CAAE,wCAA2C,KAFpE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,wCAA2C,mCAK1Es/B,sCACN,OAAKC,IAAYT,KAAM,GAAEhgC,KAAKqW,MAAMomB,+BAG7B,CAAE77B,QAAQ,EAAMM,QAAS,CAAE,wCAA2C,KAFpE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,wCAA2C,mCAK1Ew/B,sCACN,OAAKJ,IAAgBN,KAAKhgC,KAAKqW,MAAMsmB,8BAAiC4D,IAAkBP,KAAKhgC,KAAKqW,MAAMsmB,6BAGjG,CAAE/7B,QAAQ,EAAMM,QAAS,CAAE,wCAA2C,KAFpE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,wCAA2C,mCAK1Ey/B,sCACN,OAAKF,IAAYT,KAAM,GAAEhgC,KAAKqW,MAAMwmB,+BAG7B,CAAEj8B,QAAQ,EAAMM,QAAS,CAAE,wCAA2C,KAFpE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,wCAA2C,mCAK1E0/B,mCACN,OAAKN,IAAgBN,KAAKhgC,KAAKqW,MAAMgnB,2BAA8BkD,IAAkBP,KAAKhgC,KAAKqW,MAAMgnB,0BAG9F,CAAEz8B,QAAQ,EAAMM,QAAS,CAAE,qCAAwC,KAFjE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,qCAAwC,mCAKvE2/B,mCACN,OAAKJ,IAAYT,KAAM,GAAEhgC,KAAKqW,MAAMknB,4BAG7B,CAAE38B,QAAQ,EAAMM,QAAS,CAAE,qCAAwC,KAFjE,CAAEN,QAAQ,EAAOM,QAAS,CAAE,qCAAwC,mCAOvE0+B,mBACN,IAIIkB,EAJAC,EAAoB,GAEpBC,GAAc,EAmGlB,OA/FAF,EAAS9gC,KAAK6/B,0BACdmB,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAGZ4/B,EAAS9gC,KAAK8/B,kCACdkB,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAGZ4/B,EAAS9gC,KAAKigC,wCACde,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAKRlB,KAAKqW,MAAM4lB,yBAA2B9hB,EAAuBskB,SAC/DqC,EAAS9gC,KAAKkgC,sCACdc,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAGZ4/B,EAAS9gC,KAAKogC,wCACdY,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAGZ4/B,EAAS9gC,KAAKmgC,wCACda,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAIRlB,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBokB,wBAA0Bt+B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBqkB,iBAC1HuC,EAAS9gC,KAAKqgC,sCACdW,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAEZ4/B,EAAS9gC,KAAKwgC,sCACdQ,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,UAKVlB,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBokB,wBAA0Bt+B,KAAKqW,MAAM2lB,kBAAoB9hB,EAAgBskB,YAC1HsC,EAAS9gC,KAAK0gC,sCACdM,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAEZ4/B,EAAS9gC,KAAK2gC,sCACdK,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,WAKLlB,KAAKqW,MAAM4lB,yBAA2B9hB,EAAuBwkB,aACtEmC,EAAS9gC,KAAK4gC,mCACdI,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,SAEZ4/B,EAAS9gC,KAAK6gC,mCACdG,EAAcA,GAAeF,EAAOlgC,OACpCmgC,EAAoB,IACfA,KACAD,EAAO5/B,UAKdlB,KAAKizB,SAAS8N,GACPC,EAGD/C,qBAAqB57B,GAC3B,IAAIwU,EAAW,QAGCgG,IAAZxa,GAAqC,OAAZA,IAE3BwU,EAAW,IACNA,EACH,cAAiBxU,EAAQC,UACzB,gBAAmBD,EAAQkjB,YAC3B,wBAA2BljB,EAAQu8B,aACnC,uBAA0Bv8B,EAAQmjB,mBAClC,8BAAiCnjB,EAAQojB,mBACzC,gBAAmBpjB,EAAQyZ,YAC3B,uBAA0BzZ,EAAQ0Z,mBAClC,0BAA6B1Z,EAAQwjB,4BAGZhJ,IAAvBxa,EAAQ4+B,YAAmD,OAAvB5+B,EAAQ4+B,aAC9CpqB,EAAW,IACNA,EACH,4BAA+BxU,EAAQ4+B,WAAWjb,OAClD,8BAAiC3jB,EAAQ4+B,WAAW/9B,SACpD,4BAA+Bb,EAAQ4+B,WAAW7a,OAClD,4BAA+B/jB,EAAQ4+B,WAAW5a,OAClD,4BAA+BhkB,EAAQ4+B,WAAW/a,OAClD,4BAA+B7jB,EAAQ4+B,WAAW9a,OAClD,qCAAwC9jB,EAAQ4+B,WAAW1a,gBAC3D,8BAAiClkB,EAAQ4+B,WAAW3a,SACpD,2BAA8BjkB,EAAQ4+B,WAAWza,MACjD,8BAAiCnkB,EAAQ4+B,WAAWhb,gBAI9BpJ,IAAtBxa,EAAQ6+B,WAAiD,OAAtB7+B,EAAQ6+B,YAC7CrqB,EAAW,IACNA,EACH,6BAAgCxU,EAAQ6+B,UAAUva,SAClD,yBAA4BtkB,EAAQ6+B,UAAUza,KAC9C,yBAA4BpkB,EAAQ6+B,UAAUxa,QAIpD7P,EAAW,IACNA,EACH,sBAAwB,GAE1B7W,KAAKizB,SAASpc,GAIR8oB,wBACN3/B,KAAKizB,SAAS,CACZ,sBAAwB,EAExB,cAAiB,GACjB,gBAAmB,GACnB,4BAA+B,GAC/B,uBAA0B,GAC1B,wBAA2B,IAC3B,oCAAuC,GACvC,8BAAiC,GACjC,0CAA6C,GAC7C,gBAAmB,EACnB,uBAA0B,EAC1B,0BAA6B,GAC7B,4BAA+B,GAC/B,wCAA2C,GAC3C,8BAAiC,GACjC,0CAA6C,GAC7C,4BAA+B,GAC/B,wCAA2C,GAC3C,4BAA+B,EAC/B,wCAA2C,GAC3C,4BAA+B,GAC/B,wCAA2C,GAC3C,4BAA+B,EAC/B,wCAA2C,GAC3C,qCAAwC,GACxC,8BAAiC,GACjC,2BAA8B,GAC9B,8BAAiC,GACjC,0CAA6C,GAC7C,6BAAgC,EAChC,yBAA4B,YAC5B,qCAAwC,GACxC,yBAA4B,KAC5B,qCAAwC,KAIpCyM,kBACN,GAAI1/B,KAAK4/B,mBAAoB,CAC3B,MAAMv9B,EAAU,CACd,UAAarC,KAAKqW,MAAMmlB,cACxB,YAAex7B,KAAKqW,MAAMolB,gBAC1B,aAAgBtqB,SAAU,GAAEnR,KAAKqW,MAAMulB,0BAA2B,GAClE,mBAAsB57B,KAAKqW,MAAMslB,uBACjC,mBAAsB37B,KAAKqW,MAAMylB,8BACjC,YAAe3qB,SAAU,GAAEnR,KAAKqW,MAAM2lB,kBAAmB,GACzD,mBAAsB7qB,SAAU,GAAEnR,KAAKqW,MAAM4lB,yBAA0B,GACvE,sBAAyBj8B,KAAKqW,MAAM6lB,0BACpC,WAAc,CACZ,OAAUl8B,KAAKqW,MAAM8lB,4BACrB,SAAYn8B,KAAKqW,MAAMgmB,8BACvB,OAAUr8B,KAAKqW,MAAMkmB,4BACrB,OAAUprB,SAAU,GAAEnR,KAAKqW,MAAMomB,8BAA+B,GAChE,OAAUz8B,KAAKqW,MAAMsmB,4BACrB,OAAUxrB,SAAU,GAAEnR,KAAKqW,MAAMwmB,8BAA+B,GAChE,gBAAmB78B,KAAKqW,MAAM0mB,qCAC9B,SAAY/8B,KAAKqW,MAAM2mB,8BACvB,MAASh9B,KAAKqW,MAAM8mB,2BACpB,SAAYn9B,KAAKqW,MAAM4mB,+BAEzB,UAAa,CACX,SAAY9rB,SAAU,GAAEnR,KAAKqW,MAAM+mB,+BAAgC,GACnE,KAAQp9B,KAAKqW,MAAMgnB,yBACnB,KAAQlsB,SAAU,GAAEnR,KAAKqW,MAAMknB,2BAA4B,KAG/Dv9B,KAAKuwB,MAAM5uB,aAAaG,oBAAoBO,GAC5CrC,KAAK2/B,6BAEL3+B,IAAMsP,KAAK,kGAOFshB,kBAAWoJ,GC5hC1B,MAAMnJ,GAAoC,CACxCC,OAAQ,CAAEC,YAAa,IACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAGdmP,GAAclR,YAAO,sBAAPA,CAA8BC,YAAS,cAA0BC,YAAsB,eAAD,oBAExG9Z,MAAQ,CAAEnT,SAAU,GAAIkC,YAAa,IAFmE,KAqDvGg8B,qBAAwBpH,IAC9Bh6B,KAAKizB,SAAS,CAAE,SAAY+G,EAAMG,OAAOC,SAtDoE,KAyDvGiH,wBAA2BrH,IACjCh6B,KAAKizB,SAAS,CAAE,YAAe+G,EAAMG,OAAOC,SAtDvC3J,SACL,OACE,eAACmF,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,IAA9B,UACE,cAAC6D,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,0CAEb,cAAChE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0H,EAAA,EAAD,CACEuF,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACTvN,KAAK,eACLuC,QAAS,KACP/zB,KAAKuwB,MAAMptB,oBAAoBe,kBAC/BlE,KAAKuwB,MAAMptB,oBAAoBU,SAC/B7D,KAAKuwB,MAAMpa,QAAQC,KAAK,mBAMlC,cAACwf,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,0CAEb,cAAChE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,qBAAM7jB,KAAK,WAAWolB,SAAU/5B,KAAKohC,qBAAsB3I,aAAcz4B,KAAKqW,MAAMnT,WACrG,cAACq1B,EAAA,EAAD,CAAWC,MAAM,qBAAM7jB,KAAK,WAAWolB,SAAU/5B,KAAKqhC,wBAAyB5I,aAAcz4B,KAAKqW,MAAMjR,cACxG,cAACm0B,EAAA,EAAD,CACEuF,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACTvN,KAAK,eACLuC,QAAS,KACP/zB,KAAKuwB,MAAMptB,oBAAoBgB,eAAenE,KAAKqW,MAAMnT,SAAUlD,KAAKqW,MAAMjR,aAC9EpF,KAAKizB,SAAS,CAAE,SAAY,GAAI,YAAe,sBAqBlDrB,mBAAWuP,I,UCpE1B,MAAMtP,GAAoC,CACxCC,OAAQ,CAAEC,YAAa,IACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAGdsP,GAAYrR,YAAO,sBAAPA,CAA8BC,YAAS,cAAwBC,YAAsB,eAAD,oBAEpG9Z,MAAQ,CACbkrB,cAAe,eAH0F,KA8EnGC,qBAAwBxH,IAC9B,MAAM,oBAAE72B,GAAwBnD,KAAKuwB,MACrCptB,EAAoBO,YAAYs2B,EAAMG,OAAOC,QAhF4D,KAmFnGgH,qBAAwBpH,IAC9B,MAAM,oBAAE72B,GAAwBnD,KAAKuwB,MACrCptB,EAAoBQ,YAAYq2B,EAAMG,OAAOC,QArF4D,KAwFnGqH,0BAA6BzH,IACnC,MAAM,oBAAE72B,GAAwBnD,KAAKuwB,MACrCptB,EAAoBS,sBAAsBo2B,EAAM0H,cAAc3C,UApFzDtO,SACL,MAAM,oBAAEttB,GAAwBnD,KAAKuwB,MAErC,OAAIptB,EAAoBC,gBAEpB,cAAC,IAAD,CAAUu+B,GAAI3hC,KAAKqW,MAAMkrB,gBAK3B,eAAC3L,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,IAA9B,UAEE,cAAC6D,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,0BAEb,cAAChE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,qBAAMwG,GAAG,WAAW5E,MAAOj3B,EAAoBF,SAAU82B,SAAU/5B,KAAKwhC,uBACzF,cAACjJ,EAAA,EAAD,CAAWC,MAAM,eAAK7jB,KAAK,WAAWqqB,GAAG,WAAW5E,MAAOj3B,EAAoBD,SAAU62B,SAAU/5B,KAAKohC,uBACxG,cAACQ,GAAA,EAAD,CAAUpJ,MAAM,uEAAgBuG,QAAS57B,EAAoBG,mBAAoBy2B,SAAU/5B,KAAKyhC,4BAChG,cAAClI,EAAA,EAAD,CACEuF,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACTvN,KAAK,+BACLuC,QAAS,KACP/zB,KAAKuwB,MAAMptB,oBAAoBa,WAGnC,cAACw1B,EAAA,EAAD,CACEsF,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACTvN,KAAK,+CACLuC,QAAS,KACP/zB,KAAKizB,SAAS,CAAE,cAAiB,sBACjCjzB,KAAKuwB,MAAMptB,oBAAoBa,WAGnC,cAACw1B,EAAA,EAAD,CACEsF,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP/zB,KAAKizB,SAAS,CAAE,cAAiB,wBACjCjzB,KAAKuwB,MAAMptB,oBAAoBa,WAGnC,8BACE,cAAC66B,EAAA,EAAD,CACEpK,MAAO,CAAEY,MAAO,QAChBxB,UAAW,CAAEC,SAAU,UACvBgL,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACThL,QAAS,KACP5wB,EAAoBe,mBAPxB,kEAwCD0tB,mBAAW0P,ICzG1B,MAAMjH,GAAgBC,YAAY,CAChCC,MAAO,CACLC,OAAQ,CACNC,WAAY,0BACZf,SAAU,WAKVxI,GAASuE,YAAe,CAC5BlE,KAAM,CACJsQ,WAAYC,IAAeC,eAG7BzR,KAAM,CACJoE,MAAOoN,IAAeE,MACtBH,WAAYC,IAAeG,aAC3B/J,QAAS,KA+BEgK,OA3BMhS,aAAUiS,IAC7B9gC,QAAQC,IAAI6gC,GACZ,MAAM,QAAEhsB,GAAagsB,EAGrB,OAFA9gC,QAAQC,IAAI6U,GAEsB,MAA9BA,EAAQD,SAAS4a,SACX,cAAC,IAAD,CAAU6Q,GAAI,CACpB7Q,SAAU,iBAKZ,eAAC8E,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,IAA9B,UACE,cAAC0H,EAAA,EAAD,CAAWY,MAAOA,GAAlB,uGACA,cAACzE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAStC,UAAW5E,GAAOZ,KAA7C,SACE,cAACiJ,EAAA,EAAD,CACEuF,oBAAoB,EACpBpG,UAAU,EACVqG,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KAAQ5d,EAAQC,KAAK,0BC3BxC,MAAMyb,GAAoC,CACxCC,OAAQ,CAAEC,YAAa,IACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAGdoQ,GAAWnS,YAAO,YAAPA,CAAoBC,YAAS,cAAuBC,YAAsB,eAAD,oBAExF9Z,MAAQ,CACbgsB,wBAAwB,EACxBC,kBAAmB,KACnBC,oBAAqB,GACrBC,aAAc,GACdC,iBAAkB,KAClBC,oBAAoB,EACpBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,iBAAiB,EACjBC,yBAAyB,EACzBC,kBAAkB,EAClBC,qBAAqB,EACrBC,6BAA6B,EAC7BC,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,kBAAkB,EAClBC,gBAAgB,EAChBC,gCAAgC,EAChCC,iCAAiC,EACjCC,gCAAgC,EAChCC,6BAA6B,EAC7BC,yBAAyB,EACzBC,kBAAkB,EAClBhR,iBAAkBxuB,OAAOyuB,WACzBC,kBAAmB1uB,OAAO2uB,aA5BmE,KA6C/FC,OAAS,KACPhzB,KAAKizB,SAAS,CAAE,iBAAoB7uB,OAAOyuB,WAAY,kBAAqBzuB,OAAO2uB,eA9CU,KAifvF8Q,iBAAmB,KACzB7jC,KAAKizB,SAAS,CACZ2Q,kBAAkB,EAClBpB,aAAc,GACdC,iBAAkB,GAClBF,oBAAqB,GACrBG,oBAAoB,EACpBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,iBAAiB,EACjBC,yBAAyB,EACzBC,kBAAkB,EAClBC,qBAAqB,EACrBC,6BAA6B,EAC7BC,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,kBAAkB,EAClBC,gBAAgB,EAChBC,gCAAgC,EAChCC,iCAAiC,KArgB0D,KAygBvFM,kBAAoB,KAC1B9jC,KAAKizB,SAAS,CACZ2Q,kBAAkB,EAClBpB,aAAc,GACdC,iBAAkB,GAClBF,oBAAqB,GACrBG,oBAAoB,EACpBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,iBAAiB,EACjBC,yBAAyB,EACzBC,kBAAkB,EAClBC,qBAAqB,EACrBC,6BAA6B,EAC7BC,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,kBAAkB,EAClBC,gBAAgB,EAChBC,gCAAgC,EAChCC,iCAAiC,KA7hB0D,KAiiBvF9gC,QAAU,KAEhB,MAAM,UAAEH,GAAcvC,KAAKuwB,MAE3B,IAAKvwB,KAAKqW,MAAMmsB,cAA4C,KAA5BxiC,KAAKqW,MAAMmsB,aAEzC,YADAxhC,IAAMC,MAAM,8CAId,IAAKjB,KAAKqW,MAAMosB,kBAAoD,KAAhCziC,KAAKqW,MAAMosB,iBAE7C,YADAzhC,IAAMC,MAAM,wCAId,IAAI89B,GAAU,EASd,GARIx8B,EAAUC,UACZD,EAAUC,SAASoT,SAASC,IACtBA,EAAQ5S,WAAajD,KAAKqW,MAAMmsB,eAClCzD,GAAU,OAKXA,EAEH,YADA/9B,IAAMC,MAAM,8CAId,MAAM+B,EAAO,CACXC,SAAUjD,KAAKqW,MAAMmsB,aACrBp9B,YAAapF,KAAKqW,MAAMosB,iBACxB/gC,YAAa1B,KAAKqW,MAAMksB,oBACxBwB,eAAgB/jC,KAAKqW,MAAMqsB,mBAC3BsB,uBAAwBhkC,KAAKqW,MAAMssB,2BACnCsB,gBAAiBjkC,KAAKqW,MAAMusB,oBAC5BsB,YAAalkC,KAAKqW,MAAMwsB,gBACxBsB,oBAAqBnkC,KAAKqW,MAAMysB,wBAChCsB,aAAcpkC,KAAKqW,MAAM0sB,iBACzBsB,gBAAiBrkC,KAAKqW,MAAM2sB,oBAC5BsB,wBAAyBtkC,KAAKqW,MAAM4sB,4BACpCsB,iBAAkBvkC,KAAKqW,MAAM6sB,qBAC7BsB,YAAaxkC,KAAKqW,MAAM8sB,gBACxBsB,mBAAoBzkC,KAAKqW,MAAM+sB,uBAC/BsB,aAAc1kC,KAAKqW,MAAMgtB,iBACzBsB,WAAY3kC,KAAKqW,MAAMitB,eACvBsB,2BAA4B5kC,KAAKqW,MAAMktB,+BACvCsB,4BAA6B7kC,KAAKqW,MAAMmtB,iCAG1CjhC,EAAUG,QAAQM,GAClBhD,KAAK8jC,qBAnlBwF,KAulBvFgB,wBAA2B9hC,IACjChD,KAAKizB,SAAS,CACZ0Q,yBAAyB,EACzBnB,aAAcx/B,EAAKC,SACnBy/B,qBAAoB1/B,EAAK+gC,eACzBpB,6BAA4B3/B,EAAKghC,uBACjCpB,sBAAqB5/B,EAAKihC,gBAC1BpB,kBAAiB7/B,EAAKkhC,YACtBpB,0BAAyB9/B,EAAKmhC,oBAC9BpB,mBAAkB//B,EAAKohC,aACvBpB,sBAAqBhgC,EAAKqhC,gBAC1BpB,8BAA6BjgC,EAAKshC,wBAClCpB,uBAAsBlgC,EAAKuhC,iBAC3BpB,kBAAiBngC,EAAKwhC,YACtBpB,yBAAwBpgC,EAAKyhC,mBAC7BpB,mBAAkBrgC,EAAK0hC,aACvBpB,iBAAgBtgC,EAAK2hC,WACrBpB,iCAAgCvgC,EAAK4hC,2BACrCpB,kCAAiCxgC,EAAK6hC,+BAzmBqD,KA6mBvFE,yBAA2B,KACjC/kC,KAAKizB,SAAS,CACZ0Q,yBAAyB,EACzBnB,aAAc,GACdE,oBAAoB,EACpBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,iBAAiB,EACjBC,yBAAyB,EACzBC,kBAAkB,EAClBC,qBAAqB,EACrBC,6BAA6B,EAC7BC,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,kBAAkB,EAClBC,gBAAgB,EAChBC,gCAAgC,EAChCC,iCAAiC,KA/nB0D,KAmoBvF1gC,+BAAiC,KACvC,MAAME,EAAO,CACXC,SAAUjD,KAAKqW,MAAMmsB,aACrBuB,eAAgB/jC,KAAKqW,MAAMqsB,mBAC3BsB,uBAAwBhkC,KAAKqW,MAAMssB,2BACnCsB,gBAAiBjkC,KAAKqW,MAAMusB,oBAC5BsB,YAAalkC,KAAKqW,MAAMwsB,gBACxBsB,oBAAqBnkC,KAAKqW,MAAMysB,wBAChCsB,aAAcpkC,KAAKqW,MAAM0sB,iBACzBsB,gBAAiBrkC,KAAKqW,MAAM2sB,oBAC5BsB,wBAAyBtkC,KAAKqW,MAAM4sB,4BACpCsB,iBAAkBvkC,KAAKqW,MAAM6sB,qBAC7BsB,YAAaxkC,KAAKqW,MAAM8sB,gBACxBsB,mBAAoBzkC,KAAKqW,MAAM+sB,uBAC/BsB,aAAc1kC,KAAKqW,MAAMgtB,iBACzBsB,WAAY3kC,KAAKqW,MAAMitB,eACvBsB,2BAA4B5kC,KAAKqW,MAAMktB,+BACvCsB,4BAA6B7kC,KAAKqW,MAAMmtB,iCAE1CxjC,KAAKuwB,MAAMhuB,UAAUO,+BAA+BE,GACpDhD,KAAK+kC,4BAvpBwF,KA0pBvFC,qBAAwB/hC,IAC9BjD,KAAKizB,SAAS,CAAEqP,kBAAmBr/B,EAAUo/B,wBAAwB,KA3pBwB,KA8pBvF4C,sBAAwB,KAC9BjlC,KAAKizB,SAAS,CAAEoP,wBAAwB,EAAMC,kBAAmB,QA/pB4B,KAkqBvF3/B,qBAAuB,KAC7B,MAAM,UAAEJ,GAAcvC,KAAKuwB,MAC3BhuB,EAAUI,qBAAqB3C,KAAKqW,MAAMisB,mBAC1CtiC,KAAKilC,yBArqBwF,KAwqBvFC,4BAA+BjiC,IACrCjD,KAAKizB,SAAS,CAAEuP,aAAcv/B,EAAUygC,6BAA6B,KAzqBwB,KA4qBvFyB,6BAA+B,KACrCnlC,KAAKizB,SAAS,CAAEyQ,6BAA6B,EAAOlB,aAAc,KAAMC,iBAAkB,MA7qBG,KAgrBvF5/B,6BAA+B,KACrC7C,KAAKuwB,MAAMhuB,UAAUM,6BAA6B7C,KAAKqW,MAAMmsB,aAAcxiC,KAAKqW,MAAMosB,kBACtFziC,KAAKmlC,gCAlrBwF,KAqrBvFC,+BAAiC,CAACniC,EAAkBvB,KAC1D1B,KAAKizB,SAAS,CAAEuP,aAAcv/B,EAAUs/B,oBAAqB7gC,EAAa+hC,gCAAgC,KAtrBb,KAyrBvF4B,gCAAkC,KACxCrlC,KAAKizB,SAAS,CAAEwQ,gCAAgC,EAAOjB,aAAc,KAAMD,oBAAqB,MA1rBH,KA6rBvF3/B,gCAAkC,KACxC5C,KAAKuwB,MAAMhuB,UAAUK,gCAAgC5C,KAAKqW,MAAMmsB,aAAcxiC,KAAKqW,MAAMksB,qBACzFviC,KAAKqlC,mCA/rBwF,KA0sBvF1R,mBAAqB,KAE3B,MAAM,UAAEpxB,GAAcvC,KAAKuwB,MAC3B,MAAO,CACL,CACEqD,IAAK,MACL/X,KAAM,eACNgY,UAAW,CACTC,SAAU,OAEZC,QAAS,IAAM/zB,KAAK6jC,oBAEtB,CACEjQ,IAAK,UACL/X,KAAM,eACNgY,UAAW,CACTC,SAAU,WAEZC,QAAS,IAAMxxB,EAAUE,iBA7rB/BuxB,oBACEh0B,KAAKgzB,SACL5uB,OAAO6vB,iBAAiB,SAAUj0B,KAAKgzB,QAEvC,MAAM,UAAEzwB,GAAcvC,KAAKuwB,MAE3BhuB,EAAUE,cAIZyxB,uBACE9vB,OAAO+vB,oBAAoB,SAAUn0B,KAAKgzB,QAQrCvC,SAIL,MAAM2D,EAAqB,CAAC,CAC1BR,IAAK,WACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKrtB,YAGf,CACD2wB,IAAK,aACL/X,KAAM,uBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK/sB,cAGf,CACDqwB,IAAK,cACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAK5uB,eAIlB,CACEkyB,IAAK,aACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKgV,cAGf,CACD1R,IAAK,iBACL/X,KAAM,mCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKiV,kBAGf,CACD3R,IAAK,oBACL/X,KAAM,mCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKqE,qBAGf,CACDf,IAAK,oBACL/X,KAAM,mCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKsE,qBAGf,CACDhB,IAAK,eACL/X,KAAM,iCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKuE,gBAGf,CACDjB,IAAK,oBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKwE,qBAGf,CACDlB,IAAK,qBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,+BAAOA,EAAKyE,sBAGf,CACDnB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,cAAC0E,EAAA,EAAD,CACEC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACTC,MAAO,CACL,CACE3B,IAAK,iBACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,UAEZC,QAAS,IAAM/zB,KAAK8kC,wBAAwBxU,IAE9C,CACEsD,IAAK,qBACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,iBAEZC,QAAS,IAAM/zB,KAAKklC,4BAA4B5U,EAAKrtB,WAEvD,CACE2wB,IAAK,oBACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,YAEZC,QAAS,IAAM/zB,KAAKolC,+BAA+B9U,EAAKrtB,SAAUqtB,EAAK5uB,cAEzE,CACEkyB,IAAK,SACLpC,KAAM,eACNqC,UAAW,CACTC,SAAU,cAEZC,QAAS,IAAM/zB,KAAKglC,qBAAqB1U,EAAKrtB,kBAWtD,UAAEV,GAAcvC,KAAKuwB,MACrBiF,EAAaC,YAAe,CAChCC,QAAS,CACPtE,OAAWpxB,KAAKqW,MAAMyc,kBAAoB,GAAjC,KACT5pB,SAAU,WACVysB,UAAW,aAIf,OACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEN,MAAOv1B,KAAK2zB,uBAOd,qBAAKmC,UAAWN,EAAWE,QAA3B,SACE,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CAEEZ,MAAOhzB,EAAUC,SACjB4zB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,KACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,cAQ7B,cAACE,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMutB,iBACnB5L,YAAY,EACZC,UAAW,IAAMj4B,KAAK8jC,oBAHxB,SAKE,eAAClO,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UACE,cAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,0CAEb,cAAChE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC4H,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUa,QAAlC,8CAIjB,cAAC5E,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,qBAAMuB,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,eAAgBlF,EAAMG,OAAOC,UAC7G,cAAC7B,EAAA,EAAD,CAAWC,MAAM,eAAK7jB,KAAK,WAAWolB,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKwlC,yBAAyBxL,QAEnH,cAACpE,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,2BAAOqB,WAAW,EAAMC,WAAW,EAAMC,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKylC,4BAA4BzL,YAI9I,cAACpE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC4H,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUa,QAAlC,8CAIjB,cAAC5E,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC+P,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMqsB,mBAAoB3I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,qBAAsBlF,EAAM0H,cAAc3C,YAClK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMusB,oBAAqB7I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,sBAAuBlF,EAAM0H,cAAc3C,YACpK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAM0sB,iBAAkBhJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,mBAAoBlF,EAAM0H,cAAc3C,YAC9J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,iCAAQuG,QAAS/+B,KAAKqW,MAAM6sB,qBAAsBnJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,uBAAwBlF,EAAM0H,cAAc3C,YACvK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,uCAASuG,QAAS/+B,KAAKqW,MAAM+sB,uBAAwBrJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,yBAA0BlF,EAAM0H,cAAc3C,YAC5K,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMitB,eAAgBvJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,iBAAkBlF,EAAM0H,cAAc3C,YAC1J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,mDAAWuG,QAAS/+B,KAAKqW,MAAMmtB,gCAAiCzJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,kCAAmClF,EAAM0H,cAAc3C,eAElM,eAACnJ,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC+P,GAAA,EAAD,CAAUpJ,MAAM,uCAASuG,QAAS/+B,KAAKqW,MAAMssB,2BAA4B5I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,6BAA8BlF,EAAM0H,cAAc3C,YACpL,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMwsB,gBAAiB9I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,kBAAmBlF,EAAM0H,cAAc3C,YAC5J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,iCAAQuG,QAAS/+B,KAAKqW,MAAM2sB,oBAAqBjJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,sBAAuBlF,EAAM0H,cAAc3C,YACrK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAM8sB,gBAAiBpJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,kBAAmBlF,EAAM0H,cAAc3C,YAC5J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMgtB,iBAAkBtJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,mBAAoBlF,EAAM0H,cAAc3C,YAC9J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,mDAAWuG,QAAS/+B,KAAKqW,MAAMktB,+BAAgCxJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,iCAAkClF,EAAM0H,cAAc3C,oBAIpM,cAACnJ,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK0C,cAE/C,cAACkzB,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC2H,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK8jC,kCAOvD,cAAChM,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMstB,wBACnB3L,YAAY,EACZC,UAAW,IAAMj4B,KAAK+kC,2BAHxB,SAKE,eAACnP,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UACE,eAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,UACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,oDACX,cAACH,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUa,QAAlC,SAA8Cx6B,KAAKqW,MAAMmsB,oBAEtE,cAAC5M,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC+P,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMqsB,mBAAoB3I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,qBAAsBlF,EAAM0H,cAAc3C,YAClK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMusB,oBAAqB7I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,sBAAuBlF,EAAM0H,cAAc3C,YACpK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAM0sB,iBAAkBhJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,mBAAoBlF,EAAM0H,cAAc3C,YAC9J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,iCAAQuG,QAAS/+B,KAAKqW,MAAM6sB,qBAAsBnJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,uBAAwBlF,EAAM0H,cAAc3C,YACvK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,uCAASuG,QAAS/+B,KAAKqW,MAAM+sB,uBAAwBrJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,yBAA0BlF,EAAM0H,cAAc3C,YAC5K,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMitB,eAAgBvJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,iBAAkBlF,EAAM0H,cAAc3C,YAC1J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,mDAAWuG,QAAS/+B,KAAKqW,MAAMmtB,gCAAiCzJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,kCAAmClF,EAAM0H,cAAc3C,eAElM,eAACnJ,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC+P,GAAA,EAAD,CAAUpJ,MAAM,uCAASuG,QAAS/+B,KAAKqW,MAAMssB,2BAA4B5I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,6BAA8BlF,EAAM0H,cAAc3C,YACpL,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMwsB,gBAAiB9I,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,kBAAmBlF,EAAM0H,cAAc3C,YAC5J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,iCAAQuG,QAAS/+B,KAAKqW,MAAM2sB,oBAAqBjJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,sBAAuBlF,EAAM0H,cAAc3C,YACrK,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAM8sB,gBAAiBpJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,kBAAmBlF,EAAM0H,cAAc3C,YAC5J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,2BAAOuG,QAAS/+B,KAAKqW,MAAMgtB,iBAAkBtJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,mBAAoBlF,EAAM0H,cAAc3C,YAC9J,cAAC6C,GAAA,EAAD,CAAUpJ,MAAM,mDAAWuG,QAAS/+B,KAAKqW,MAAMktB,+BAAgCxJ,SAAWC,IAAiBh6B,KAAKk/B,wBAAwB,iCAAkClF,EAAM0H,cAAc3C,oBAIpM,cAACnJ,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK8C,qCAE/C,cAAC8yB,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC2H,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK+kC,yCAOvD,cAACnM,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAMgsB,uBACnBpK,UAAW,IAAMj4B,KAAKilC,wBACtBnM,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,uCACPC,QAAU,gDAAYl5B,KAAKqW,MAAMisB,sGAEnCnJ,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAK2C,uBAAwB6uB,KAAK,iBAChE,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAKilC,wBAAyBzT,KAAK,sBAIrE,cAACsG,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMotB,+BACnBzL,YAAY,EACZC,UAAW,IAAMj4B,KAAKqlC,kCAHxB,SAKE,eAACzP,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UAGE,eAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,UACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,oDACX,cAACH,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUa,QAAlC,SAA8Cx6B,KAAKqW,MAAMmsB,oBAEtE,cAAC5M,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,2BAAOqB,WAAW,EAAMC,WAAW,EAAMrB,aAAcz4B,KAAKqW,MAAMksB,oBAAsBviC,KAAKqW,MAAMksB,oBAAsB,GAAIxI,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKylC,4BAA4BzL,WAOlO,cAACpE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK4C,oCAC7C,cAAC42B,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAKqlC,gDAOvD,cAACvN,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMqtB,4BACnB1L,YAAY,EACZC,UAAW,IAAMj4B,KAAKmlC,+BAHxB,SAKE,eAACvP,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UAGE,eAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,UACE,cAACqB,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUC,SAAlC,oDACX,cAACH,EAAA,EAAD,UAAW,qBAAKhF,MAAO,CAAEiF,SAAUC,IAAUa,QAAlC,SAA8Cx6B,KAAKqW,MAAMmsB,oBAEtE,cAAC5M,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,qBAAM7jB,KAAK,WAAWolB,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKwlC,yBAAyBxL,WAOxH,cAACpE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK6C,iCAC7C,cAAC22B,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAKmlC,gDAYrDjG,wBAAwBF,EAAY5E,GAC1Cp6B,KAAKizB,SAAS,CAAE,CAAC+L,GAAK5E,IAoNhBqL,4BAA4BzL,GAClCh6B,KAAKizB,SAAS,CAAEsP,oBAAqBvI,EAAMG,OAAOC,QAG5CoL,yBAAyBxL,GAC/Bh6B,KAAKizB,SAAS,CAAEwP,iBAAkBzI,EAAMG,OAAOC,YA0FpCxI,mBAAWwQ,ICpzBXsD,OAJkBxV,aAAS,IACxC,cAAC,IAAD,CAAUyR,GAAG,0BCGAgE,OAJmBzV,aAAS,IACzC,cAAC,IAAD,CAAUyR,GAAG,wBCGAiE,OAJa1V,aAAS,IACnC,cAAC,IAAD,CAAUyR,GAAG,kB,yDCSf,MAAM,aAAEv5B,IAAiBC,MAAIC,SAASC,GAEzBs9B,GAAqB5V,YAAO,sBAAuB,oBAAqB,qBAAnDA,CAAyEC,YAAS,cAAiCC,YAAsB,eAAD,oBAE/J6D,kBAAoB,KACvB,MAAM,kBAAEvqB,GAAsBzJ,KAAKuwB,MACnC9mB,EAAkBiB,wBAAwB,IAAIF,MAG3CimB,SAEH,MAAM,kBAAEhnB,EAAF,mBAAqBjB,GAAuBxI,KAAKuwB,OAEjD,WACFplB,EADE,cAEFC,EAFE,eAGFC,EAHE,eAIFC,EAJE,kBAKFC,EALE,UAMFC,EANE,cAOFC,EAPE,sBAQFC,GACAjC,EAAkBd,WAAWyH,IAAI,QAE/B,iBACF7G,EADE,sBAEFC,GACAhB,EAAmBG,WAAWyH,IAAI,OAEtC,IAAI9F,EAAqB,GACrBb,EAAkBa,cAClBA,EAAcb,EAAkBa,aAGpC,MAWMw7B,EAA8B,IAAIC,KAAU,CAC9CC,mBAAoB,KAZcC,KAClC,MAAMv8B,EAAuB,IAAIc,IAE3B07B,EAAuBD,EAAkBE,eAC/C,IAAK,IAAIz/B,EAAI,EAAGA,EAAIw/B,EAAcv/B,OAAQD,IACtCgD,EAAqB+K,IAAIyxB,EAAcx/B,GAAGkD,WAG9CH,EAAkBiB,wBAAwBhB,IAKtC08B,CAA6BN,OAK/B,gBAAEO,GAAoBrmC,KAAKuwB,MAC3BiF,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWiV,EAAkB,GAApB,KACTn9B,SAAU,WACVysB,UAAW,UACX2Q,aAAc,uBAIhBlS,EAAqB,CAAC,CACxBR,IAAK,OACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAC/H,OACI,cAACC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOjW,EAAKhuB,oBAMzE0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,+BAAO9W,EAAKjd,WAIzB,CACCugB,IAAK,SACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKhR,UAIxB,CACIsU,IAAK,WACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOloB,GAAakoB,EAAKzmB,aAGlC,CACC+pB,IAAK,UACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,IAAI+W,EAAe,GACnB,MAAMC,EAAchX,EAAK3kB,QAAU2kB,EAAK1kB,WAAa0kB,EAAKzkB,SAAWykB,EAAKxkB,QAQ1E,OAPoB,IAAhBw7B,IAEID,EADAC,EAAc,EACC,mBAEA,qBAInB,sBAAMxR,UAAWuR,EAAjB,SAAgCE,YAAajX,EAAK3kB,QAAS,GAAG,OAGvE,CACCioB,IAAK,YACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAK/Q,UAAW,GAAG,MAGhD,CACCqU,IAAK,aACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,IAAIkX,EAAa,OAKjB,OAJIlX,EAAKrkB,QAAUqkB,EAAK3kB,SAA4B,IAAjB2kB,EAAK3kB,UACpC67B,EAAaD,YAAajX,EAAKrkB,OAASqkB,EAAK3kB,QAAU,IAAK,GAAG,IAI/D,iCAAO67B,EAAP,SAGT,CACC5T,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMgX,EAAehX,EAAK3kB,QAAU2kB,EAAK1kB,WAAa0kB,EAAKzkB,SAAWykB,EAAKxkB,QAC3E,IAAIu7B,EAAe,GASnB,OARIC,GAA+B,IAAhBA,IAEXD,EADAC,EAAc,EACC,mBAEA,qBAKnB,gCAAK,sBAAMxR,UAAWuR,EAAjB,SAAiCE,YAAaD,EAAa,GAAG,KAAnE,MAAoFC,YAAaD,EAAchX,EAAK1kB,WAAa,IAAK,GAAG,GAAzI,UAGT,CACCgoB,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,IAAI+W,EAAe,GASnB,OARyB,IAArB/W,EAAKvkB,cAEDs7B,EADA/W,EAAKvkB,YAAc,EACJ,mBAEA,qBAKnB,sBAAM+pB,UAAWuR,EAAjB,SAAiCE,YAAajX,EAAKvkB,YAAa,GAAG,OAG5E,CACC6nB,IAAK,iBACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,IAAI+W,EAAe,GAQnB,OAP4B,IAAxB/W,EAAKtkB,iBAEDq7B,EADA/W,EAAKtkB,eAAiB,EACP,mBAEA,qBAInB,sBAAM8pB,UAAWuR,EAAjB,SAAgCE,YAAajX,EAAKtkB,eAAgB,GAAG,OAG9E,CACC4nB,IAAK,SACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAKrkB,OAAQ,GAAG,MAG7C,CACC2nB,IAAK,aACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAK1kB,WAAY,GAAG,MAGjD,CACCgoB,IAAK,aACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAKpkB,WAAY,GAAG,MAGjD,CACC0nB,IAAK,UACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAKxkB,QAAS,GAAG,MAG9C,CACC8nB,IAAK,WACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAKzkB,SAAU,GAAG,OAOlD,OACI,eAAC+pB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQZ,OAAQ,GAAIkV,aAAc,oBAAqB9O,WAAY,EAAGkC,SAAUC,IAAU8N,SAAtJ,UACI,cAAC7R,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,UAAxE,oDAGA,eAAC7Q,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,UAEQp8B,EAAiB,EACb,uBAAMwqB,UAAU,mBAAhB,UAAoCyR,YAAaj8B,EAAgB,GAAG,GAApE,KAA6Ei8B,YAAaj8B,EAAiBF,EAAgB,IAAK,GAAG,GAAnI,QAAqJ,KAGzJE,EAAiB,EACb,uBAAMwqB,UAAU,oBAAhB,UAAqCyR,YAAaj8B,EAAgB,GAAG,GAArE,KAA8Ei8B,YAAaj8B,EAAiBF,EAAgB,IAAK,GAAG,GAApI,QAAsJ,KAGvI,IAAnBE,EACI,iCAAOi8B,YAAaj8B,EAAgB,GAAG,GAAvC,KAAgDi8B,YAAaj8B,EAAiBF,EAAgB,IAAK,GAAG,GAAtG,QAAwH,QAGpI,cAACwqB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,QAASkB,WAAY,sBAA7F,wDAGA,eAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,UAEQn8B,EAAoB,EAChB,sBAAMuqB,UAAU,mBAAhB,SAAoCyR,YAAah8B,EAAmB,GAAG,KAAgB,KAG3FA,EAAoB,EAChB,sBAAMuqB,UAAU,oBAAhB,SAAqCyR,YAAah8B,EAAmB,GAAG,KAAgB,KAGtE,IAAtBA,EACI,+BAAOg8B,YAAah8B,EAAmB,GAAG,KAAgB,QAGtE,cAACqqB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,QAASkB,WAAY,sBAA7F,wDAGA,eAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,UAEQr8B,EAAiB,EACb,sBAAMyqB,UAAU,mBAAhB,SAAoCyR,YAAal8B,EAAgB,GAAG,KAAgB,KAGxFA,EAAiB,EACb,sBAAMyqB,UAAU,oBAAhB,SAAqCyR,YAAal8B,EAAgB,GAAG,KAAgB,KAGtE,IAAnBA,EACI,+BAAOk8B,YAAal8B,EAAgB,GAAG,KAAgB,aAK3E,cAACuqB,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UAEI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,UAAxE,gCAGA,eAAC7Q,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,UAEQp8B,EAAiB,EACb,sBAAMwqB,UAAU,mBAAhB,SAAoCyR,YAAap8B,EAAY,GAAG,KAAgB,KAGpFG,EAAiB,EACb,sBAAMwqB,UAAU,oBAAhB,SAAqCyR,YAAap8B,EAAY,GAAG,KAAgB,KAGlE,IAAnBG,EACI,+BAAOi8B,YAAap8B,EAAY,GAAG,KAAgB,QAG/D,cAACyqB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,QAASkB,WAAY,sBAA7F,8CAGA,eAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,UACKH,YAAa/7B,EAAW,GAAG,GADhC,KACyC+7B,YAAa/7B,EAAYL,EAAa,IAAK,GAAG,GADvF,QAGA,cAACyqB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,QAASkB,WAAY,sBAA7F,4CAGA,cAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,SACKH,YAAah+B,EAAkB,GAAG,UAK/C,cAACqsB,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,UAAxE,4CAGA,eAAC7Q,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,UAEQl+B,EAAwB,EACpB,sBAAMssB,UAAU,mBAAhB,SAAoCyR,YAAa/9B,EAAuB,GAAG,KAAgB,KAG/FA,EAAwB,EACpB,sBAAMssB,UAAU,oBAAhB,SAAqCyR,YAAa/9B,EAAuB,GAAG,KAAgB,KAGtE,IAA1BA,EACI,+BAAO+9B,YAAa/9B,EAAuB,GAAG,KAAgB,QAG1E,cAACosB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,QAASkB,WAAY,sBAA7F,gCAGA,cAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,SACKH,YAAa97B,EAAe,GAAG,KAEpC,cAACmqB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,SAAUjB,UAAW,QAASkB,WAAY,sBAA7F,sCAGA,cAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0V,WAAY,WAAnD,SACKH,YAAa77B,EAAuB,GAAG,iBAOhE,cAACkqB,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAAC0R,GAAA,EAAD,CAAkBC,UAAW/B,EAA7B,SACI,cAAC3P,EAAA,EAAD,CACIZ,MAAOjrB,EACP8rB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcwR,SAC7BtR,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7B+Q,UAAW/B,EACXiC,gCAAgC,EAKhChR,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAACK,KAAK,CAACiG,WAAW,EAAEpG,OAAO,GAAGK,WAAW,IAAIgG,MAAM,CAACrG,OAAO,mBAAmBsG,YAAY,CAACtG,OAAO,SAkB1HuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,0BAoBxDhG,mBAAWiU,I,kBC1e1B,MAAM,sBAAE/qB,GAAF,aAAyBO,GAAzB,iBAAuCT,GAAkBxS,aAAzD,iBAAuE4F,IAAiB3F,MAAIC,SAASC,GAGrGy/B,GAAuC,CAAExB,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAEvHuB,GAAsBhY,YAAO,sBAAuB,oBAAqB,qBAAsB,mBAAzEA,CAA6FC,YAAS,cAAkCC,YAAsB,eAAD,oBAErL9Z,MAAQ,CAAE6xB,YAAY,EAAOC,WAAW,GAExC1X,SAEH,MAAM,gBAAE4V,EAAF,mBAAmB79B,EAAnB,kBAAuCiB,EAAvC,iBAA0D2E,GAAqBpO,KAAKuwB,OAEpF,WAAEhmB,GAAed,GACjB,iBAAE4E,GAAqBD,EAE7B,IAAI3F,EAAsB,GAC1B,MAAM2/B,EAAiC5/B,EAAmBC,aAE1D,IAAK,IAAI/B,EAAI,EAAGA,EAAI0hC,EAA+BzhC,OAAQD,IAAK,CAC5D,MAAMwC,EAAWk/B,EAA+B1hC,GAC5C+C,EAAkBC,qBAAqBC,IAAIT,EAASU,aAC1B,IAAtBV,EAASA,UAAkBlJ,KAAKqW,MAAM8xB,YACtC1/B,EAAa2N,KAAKlN,GAK9B,GAAIlJ,KAAKqW,MAAM6xB,WAAY,CACvB,MAAMG,EAAoB,IAAI5iC,IAE9B,IAAK,IAAIiB,EAAI,EAAGA,EAAI+B,EAAa9B,OAAQD,IAAK,CAC1C,MAAMwC,EAAWT,EAAa/B,GAC9B,IACI,MAAM4hC,EAAU,GAAEp/B,EAAS9C,SAASI,iBAAiB0C,EAASiZ,oBAC9D,IAAIomB,EACJ,GAAIF,EAAkB1+B,IAAI2+B,GACtBC,EAAcF,EAAkBj4B,IAAIk4B,GACpCC,EAAYv+B,eAAiBd,EAASc,cACtCu+B,EAAYxlB,gBAAkB7Z,EAAS6Z,eACvCwlB,EAAYnmB,QAAUlZ,EAASkZ,OAC/BmmB,EAAYx+B,oBAAsBb,EAASa,mBAC3Cw+B,EAAYr/B,UAAYA,EAASA,SACjCq/B,EAAYv8B,gBAAkB9C,EAAS8C,eACvCu8B,EAAY/lB,UAAYtZ,EAASsZ,SACjC+lB,EAAYhmB,YAAcrZ,EAASqZ,WACnCgmB,EAAYzlB,WAAa5Z,EAAS4Z,UAClCylB,EAAYjmB,UAAYpZ,EAASoZ,SACjCimB,EAAYlmB,YAAcnZ,EAASmZ,eAChC,CACH,MAAMmmB,EAAa,CACf9mC,YAAa,GACbqa,mBAAoB,GACpBzZ,UAAW,GACXwZ,YAAa,GACbD,KAAM,GACNjb,OAAQ,IAGZ2nC,EAAc,CACV3+B,UAAW,GACXxD,SAAUqiC,YAASv/B,EAAS9C,UAC5B4D,cAAed,EAASc,cACxBmY,kBAAmBjZ,EAASiZ,kBAC5BY,eAAgB7Z,EAAS6Z,eACzBX,OAAQlZ,EAASkZ,OACjB/f,QAASmmC,EACT53B,UAAW1H,EAAS0H,UACpB7G,mBAAoBb,EAASa,mBAC7B8Y,wBAAyB,EACzBH,UAAW,EACXC,cAAe,EACfzZ,SAAUA,EAASA,SACnBC,WAAY6kB,eAAS1X,QAAQ,IAAK,IAClCtK,eAAgB9C,EAAS8C,eACzB4W,oBAAqB,EACrBnU,MAAO,EACPgU,UAAW,EACXD,SAAUtZ,EAASsZ,SACnBD,WAAYrZ,EAASqZ,WACrBO,UAAW5Z,EAAS4Z,UACpBR,SAAUpZ,EAASoZ,SACnBD,WAAYnZ,EAASmZ,YAIzBkmB,EAAYniC,SAAS/D,QAAUmmC,EAK/BE,oBAASx/B,EAAS4Z,YAAqC,IAAvB5Z,EAAS4Z,YACzCylB,EAAY3lB,oBAAsB1Z,EAAS8C,eAAiB9C,EAAS4Z,UACrEylB,EAAY1lB,wBAA0B3Z,EAASa,mBAAqBb,EAAS4Z,WAGjFulB,EAAkB9hC,IAAI+hC,EAAQC,GAChC,MAAOtnC,GACLI,QAAQJ,MAAM,mDAAYA,IAKlCwH,EAAe,IAAI4/B,EAAkBzhC,UAGzC,MAAMwtB,EAAqB,CAAC,CACxBR,IAAK,WACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,GAAIA,EAAKlqB,SAAU,CACf,MAAMuiC,EAAyC,CAAEnC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GACtI,IAAIkC,EAAa,GAKjB,OAJIv6B,GAAoBiiB,EAAKlqB,SAASI,gBAAkB6H,EAAiB7H,gBACrEoiC,EAAa,sBAIb,cAACjC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,qBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,UACI,+BAAI,sBAAMzD,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAAS2X,YACrE,+BAAI,sBAAM0W,MAAOkU,EAAb,2BAA0C,+BAAOrY,EAAKlqB,SAASyV,UACnE,+BAAI,sBAAM4Y,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAASmK,cACrE,+BAAI,sBAAMkkB,MAAOkU,EAAb,iCAA2C,+BAAOttB,GAAaiV,EAAKlqB,SAAS4X,eACjF,+BAAI,sBAAMyW,MAAOkU,EAAb,uCAA4C,+BAAO/tB,GAAiB0V,EAAKlqB,SAAS6X,mBACtF,+BAAI,sBAAMwW,MAAOkU,EAAb,mCAA6C,+BAAOrY,EAAKlqB,SAAS0X,kBACtE,+BAAI,sBAAM2W,MAAOkU,EAAb,2BAA0C,+BAAOvgC,GAAakoB,EAAKlqB,SAASyD,eAChF,+BAAI,sBAAM4qB,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAAS8X,gBACrE,+BAAI,sBAAMuW,MAAOkU,EAAb,mDAA8C,+BAAOrY,EAAKlqB,SAAS+X,eACvE,+BAAI,sBAAMsW,MAAOkU,EAAb,qEAAiD,+BAAOrY,EAAKlqB,SAASuY,wCAM9FqoB,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAvBrC,SAyBI,sBAAK3S,MAAO,CAAEoU,OAAQ,WAAa/S,UAAW8S,EAAY7U,QACtD,KACI3lB,EAAiBiB,oBAAoBihB,EAAKlqB,WAFlD,UAKI,8BAAMkqB,EAAKlqB,SAASI,gBACpB,8BAAM8pB,EAAKlqB,SAASyV,YAKhC,OACI,gFAMb,CACC+X,IAAK,YACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKnO,oBAAsBrH,GAAsBguB,QAE7C,sBAAMhT,UAAU,mBAAhB,oBAEGxF,EAAKnO,oBAAsBrH,GAAsBiuB,SAEpD,sBAAMjT,UAAU,oBAAhB,oBAEGxF,EAAKnO,oBAAsBrH,GAAsBkuB,OAEpD,0CAEG1Y,EAAKnO,oBAAsBrH,GAAsBmuB,WAEpD,gDAIA,+BAAO3Y,EAAKnO,qBAIzB,CACCyR,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKrhB,YAAcjB,GAAckB,eAE7B,gDAEGohB,EAAKrhB,YAAcjB,GAAc4E,aAEpC,gDAEG0d,EAAKrhB,YAAcjB,GAAc0E,SAEpC,gDAEG4d,EAAKrhB,YAAcjB,GAAc2E,eAEpC,sDAEG2d,EAAKrhB,YAAcjB,GAAc8E,aAEpC,2IAEGwd,EAAKrhB,YAAcjB,GAAc6E,aAEpC,2IAEGyd,EAAKrhB,YAAcjB,GAAck7B,WAEpC,gDAIA,+BAAO5Y,EAAKrhB,aAIzB,CACC2kB,IAAK,WACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,GAAIA,EAAKnO,oBAAsBrH,GAAsBguB,QACjD,OACI,gCACI,gCAAK,sBAAMrU,MAAOuT,GAAb,2BAAwC,sBAAMlS,UAAU,mBAAhB,SAAoCxF,EAAKpnB,cACtF,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAKlO,eAG9D,GAAIkO,EAAKnO,oBAAsBrH,GAAsBiuB,SACxD,OACI,gCACI,gCAAK,sBAAMtU,MAAOuT,GAAb,2BAAwC,sBAAMlS,UAAU,oBAAhB,SAAqCxF,EAAKpnB,cACvF,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAKlO,eAG9D,GAAIkO,EAAKnO,oBAAsBrH,GAAsBkuB,OAAQ,CAChE,GAAI1Y,EAAKpnB,SAAW,EAChB,OACI,gCACI,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,sBAAMlS,UAAU,mBAAhB,SAAoCxF,EAAKpnB,cACtF,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAKlO,eAG9D,GAAIkO,EAAKpnB,SAAW,EACvB,OACI,gCACI,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,sBAAMlS,UAAU,oBAAhB,SAAqCxF,EAAKpnB,cACvF,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAKlO,eAKzE,OACI,gCACI,gCAAK,sBAAMqS,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAKpnB,cACzD,gCAAK,sBAAMurB,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAKlO,iBAKzE,CACIwR,IAAK,aACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,gCACI,gCAAK,sBAAMmE,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAK/N,gBACzD,gCAAK,sBAAMkS,MAAOuT,GAAb,2BAAwC,+BAAO1X,EAAK9N,kBAItE,CACCoR,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GACHtwB,KAAKqW,MAAM6xB,WACJ,yBAGP,cAAClT,EAAA,EAAD,CACIC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACPC,MAAO,CACH,CACI3B,IAAK,QACLpC,KAAM,+CACNkH,UAAU,EACV7E,UAAW,CACPC,SAAU,YAEdC,QAAS,KAAQ1yB,QAAQC,IAAI,WAEjC,CACIsyB,IAAK,cACLpC,KAAM,qDACNkH,UAAU,EACV7E,UAAW,CACPC,SAAU,YAEdC,QAAS,KAAQ1yB,QAAQC,IAAI,gBAEjC,CACIsyB,IAAK,kBACLpC,KAAM,qDACNkH,UAAU,EACV7E,UAAW,CACPC,SAAU,YAEdC,QAAS,KAAQ1yB,QAAQC,IAAI,oBAC9B,CACCsyB,IAAK,OACLpC,KAAM,+CACNkH,UAAU,EACV7E,UAAW,CACPC,SAAU,QAEdC,QAAS,KAAQ1yB,QAAQC,IAAI,eAQtD,CACCsyB,IAAK,QACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,IAAI6Y,EAAc,EAClB,IAGQA,EADgC,IADP7Y,EAAKlqB,SAAS+X,UAAUiC,WAAWgpB,MAAM,KAC7CziC,OACP,EAEA,CAAC,GAAGA,OAExB,MAAO1F,GACLI,QAAQC,IAAI,iFAAiBL,GAEjC,OACI,gCACI,gCAAK,sBAAMwzB,MAAOuT,GAAb,2BAAwC,+BAAOT,YAAajX,EAAK7hB,MAAO06B,QAC7E,gCAAK,sBAAM1U,MAAOuT,GAAb,2BAAwC,+BAAOT,YAAajX,EAAK5N,UAAWymB,aAI9F,CACCvV,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,gCACI,gCAAK,sBAAMmE,MAAOuT,GAAb,2BAAwC,+BAAOT,YAAajX,EAAK7N,UAAW,QACjF,gCAAK,sBAAMgS,MAAOuT,GAAb,2BAAwC,+BAAOT,YAAajX,EAAK3N,cAAe,YAIlG,CACCiR,IAAK,qBACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKvmB,mBAAqB,EAEtB,sBAAK+rB,UAAU,mBAAf,UACI,8BAAK,+BAAOyR,YAAajX,EAAKvmB,mBAAoB,GAAG,OACrD,8BAAK,iCAAOw9B,YAA4C,IAA/BjX,EAAKzN,wBAA+B,GAAG,GAA3D,YAGNyN,EAAKvmB,mBAAqB,EAE7B,sBAAK+rB,UAAU,oBAAf,UACI,8BAAK,+BAAOyR,YAAajX,EAAKvmB,mBAAoB,GAAG,OACrD,8BAAK,iCAAOw9B,YAA4C,IAA/BjX,EAAKzN,wBAA+B,GAAG,GAA3D,YAKb,gCACI,8BAAK,+BAAO0kB,YAAajX,EAAKvmB,mBAAoB,GAAG,OACrD,8BAAK,iCAAOw9B,YAA4C,IAA/BjX,EAAKzN,wBAA+B,GAAG,GAA3D,aAIlB,CACC+Q,IAAK,iBACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKtkB,eAAiB,EAElB,sBAAK8pB,UAAU,mBAAf,UACI,8BAAK,+BAAOyR,YAAajX,EAAKtkB,eAAgB,GAAG,OACjD,8BAAK,iCAAOu7B,YAAwC,IAA3BjX,EAAK1N,oBAA2B,GAAG,GAAvD,YAGN0N,EAAKtkB,eAAiB,EAEzB,sBAAK8pB,UAAU,oBAAf,UACI,8BAAK,+BAAOyR,YAAajX,EAAKtkB,eAAgB,GAAG,OACjD,8BAAK,iCAAOu7B,YAAwC,IAA3BjX,EAAK1N,oBAA2B,GAAG,GAAvD,YAKb,gCACI,8BAAK,+BAAO2kB,YAAajX,EAAKtkB,eAAgB,GAAG,OACjD,8BAAK,iCAAOu7B,YAAwC,IAA3BjX,EAAK1N,oBAA2B,GAAG,GAAvD,aAIlB,CACCgR,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,IAAI+Y,EAAc,qBAElB,IACI,GAAIrpC,KAAKqW,MAAM6xB,WAAY,CACvB,MAAM,WACF/8B,GACA1B,EAAkBd,WAAWyH,IAAI,OAErCi5B,EAAc9B,YAAajX,EAAKxN,UAAY3X,EAAa,IAAK,GAAG,GAAQ,QACtE,CACH,MAAMJ,EAAUR,EAAW6F,IAAIkgB,EAAK1mB,WAChCmB,EACAs+B,EAAc9B,YAAajX,EAAKxN,UAAY/X,EAAQY,QAAU,IAAK,GAAG,GAAQ,IAE9EtK,QAAQ8T,KAAK,oFAIvB,MAAOlU,GACLI,QAAQC,IAAI,yDAAaL,GAI7B,OACI,8BACKooC,MAId,CACCzV,IAAK,SACL/X,KAAM,qBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,gCACI,gCAAK,sBAAMmE,MAAO,IAAKuT,GAAiBhW,MAAO,IAA1C,iCAA2D,+BAAOuV,YAAajX,EAAKxN,UAAW,GAAG,QACvG,gCAAK,sBAAM2R,MAAO,IAAKuT,GAAiBhW,MAAO,IAA1C,iCAA2D,+BAAOuV,YAAajX,EAAKvN,eAAgB,GAAG,YAIzH,CACC6Q,IAAK,gBACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOiX,YAAajX,EAAKtmB,cAAe,GAAG,MAGpD,CACC4pB,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAE/H,IAAI37B,EAEJ,IACIA,EAAUR,EAAW6F,IAAIkgB,EAAK1mB,WAChC,MAAO3I,GACLI,QAAQC,IAAI,mDAAYL,GAG5B,OAAI8J,GAAWA,EAAQsI,KAEf,cAACszB,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOx7B,EAAQzI,oBAM5E0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,+BAAOr8B,EAAQsI,SAMvB,qEAUNmiB,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWiV,EAAkB,GAApB,KACTn9B,SAAU,WACVysB,UAAW,aAInB,OACI,eAACC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAACC,EAAA,EAAD,CAEIZ,MAAO9sB,EACP2tB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,KACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAACK,KAAK,CAACiG,WAAW,EAAEpG,OAAO,GAAGK,WAAW,IAAIgG,MAAM,CAACrG,OAAO,mBAAmBsG,YAAY,CAACtG,OAAO,SAO1HuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,iBAenD,cAAChC,EAAA,EAAMuC,KAAP,UACI,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAAjC,SACI,cAACwQ,GAAA,EAAD,CAAUpJ,MAAM,2BAAOtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAAOvP,SAAWC,IAClEh6B,KAAKizB,SAAS,CAAE,WAAc+G,EAAM0H,cAAc3C,eAG1D,cAACnJ,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAAjC,SACI,cAACwQ,GAAA,EAAD,CAAUpJ,MAAM,2BAAOtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAAOvK,QAAS/+B,KAAKqW,MAAM8xB,UAAWpO,SAAWC,IACjGh6B,KAAKizB,SAAS,CAAE,UAAa+G,EAAM0H,cAAc3C,2BAelEnN,mBAAWqW,I,UCrpB1B,MAAM,gBAAEvtB,GAAF,cAAmB9M,GAAnB,eAAkCC,GAAlC,kBAAkDC,GAAmB8M,iBAArE,GAAuFS,aAAvF,GAAqGjT,aAArG,sBAAmHuF,GAAoBK,cAAvI,uBAAsJD,GAAtJ,wBAA2KG,IAA2B7F,MAAIC,SAASC,GAGnNy/B,GAAuC,CAAExB,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAEvH6C,GAAmBtZ,YAAO,sBAAuB,kBAAmB,oBAAqB,mBAAtEA,CAA0FC,YAAS,cAA+BC,YAAsB,eAAD,oBAE5K9Z,MAAQ,CAAEmzB,aAAc,MAAOC,cAAc,GAE7ChZ,SAEH,MAAM,gBAAE4V,EAAF,gBAAmBx/B,EAAnB,kBAAoC4C,EAApC,iBAAuD2E,GAAqBpO,KAAKuwB,OAEjF,WAAEhmB,GAAed,GACjB,iBAAE4E,GAAqBD,EAEvBtH,EAAmB,GACnB4iC,EAA6B7iC,EAAgBC,UAEnD,IAAK,IAAIJ,EAAI,EAAGA,EAAIgjC,EAA2B/iC,OAAQD,IAAK,CACxD,MAAMW,EAAQqiC,EAA2BhjC,GAErC+C,EAAkBC,qBAAqBC,IAAItC,EAAMuC,aACjB,QAA5B5J,KAAKqW,MAAMmzB,cACPniC,EAAMsZ,cAAgBjG,GAAgBivB,cAAgBtiC,EAAMsZ,cAAgBjG,GAAgBkvB,aAAeviC,EAAMsZ,cAAgBjG,GAAgBmvB,aAA2C,eAA5B7pC,KAAKqW,MAAMmzB,cAC3KniC,EAAMsZ,cAAgBjG,GAAgBkvB,aAA2C,cAA5B5pC,KAAKqW,MAAMmzB,gBAE/DniC,EAAMsZ,cAAgBjG,GAAgBmvB,aAAe7pC,KAAKqW,MAAMozB,cAC9DpiC,EAAMsZ,cAAgBjG,GAAgBmvB,cAEzC/iC,EAAUsP,KAAK/O,GAM/B,MAAM+sB,EAAqB,CAAC,CACxBR,IAAK,WACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,GAAIA,EAAKlqB,SAAU,CACf,MAAMuiC,EAAyC,CAAEnC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GACtI,IAAIkC,EAAa,GAKjB,OAJIv6B,GAAoBiiB,EAAKlqB,SAASI,gBAAkB6H,EAAiB7H,gBACrEoiC,EAAa,sBAIb,cAACjC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,qBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,UACI,+BAAI,sBAAMzD,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAAS2X,YACrE,+BAAI,sBAAM0W,MAAOkU,EAAb,2BAA0C,+BAAOrY,EAAKlqB,SAASyV,UACnE,+BAAI,sBAAM4Y,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAASmK,cACrE,+BAAI,sBAAMkkB,MAAOkU,EAAb,iCAA2C,+BAAOttB,GAAaiV,EAAKlqB,SAAS4X,eACjF,+BAAI,sBAAMyW,MAAOkU,EAAb,uCAA4C,+BAAO/tB,GAAiB0V,EAAKlqB,SAAS6X,mBACtF,+BAAI,sBAAMwW,MAAOkU,EAAb,mCAA6C,+BAAOrY,EAAKlqB,SAAS0X,kBACtE,+BAAI,sBAAM2W,MAAOkU,EAAb,2BAA0C,+BAAOvgC,GAAakoB,EAAKlqB,SAASyD,eAChF,+BAAI,sBAAM4qB,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAAS8X,gBACrE,+BAAI,sBAAMuW,MAAOkU,EAAb,mDAA8C,+BAAOrY,EAAKlqB,SAAS+X,eACvE,+BAAI,sBAAMsW,MAAOkU,EAAb,qEAAiD,+BAAOrY,EAAKlqB,SAASuY,wCAM9FqoB,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAvBrC,SAyBI,sBAAK3S,MAAO,CAAEoU,OAAQ,WAAa/S,UAAW8S,EAAY7U,QACtD,KACI3lB,EAAiBiB,oBAAoBihB,EAAKlqB,WAFlD,UAKI,8BAAMkqB,EAAKlqB,SAASI,gBACpB,8BAAM8pB,EAAKlqB,SAASyV,YAKhC,OACI,gFAKb,CACC+X,IAAK,YACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKlf,YAAcxD,GAAcoE,MAE7B,sBAAM8jB,UAAU,mBAAhB,oBAEGxF,EAAKlf,YAAcxD,GAAcqE,OAEpC,sBAAM6jB,UAAU,oBAAhB,oBAIA,+BAAOxF,EAAKlf,aAIzB,CACCwiB,IAAK,aACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKjf,aAAexD,GAAeqE,QAE/B,gDAEGoe,EAAKjf,aAAexD,GAAesE,SAEtC,gDAEGme,EAAKjf,aAAexD,GAAewE,kBAEtC,gDAEGie,EAAKjf,aAAexD,GAAeuE,cAEtC,gDAEGke,EAAKjf,aAAexD,GAAei8B,WAEtC,gDAIA,iCAAOxZ,EAAKjf,WAAZ,QAIb,CACCuiB,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKrhB,YAAcjB,GAAckB,eAE7B,gDAEGohB,EAAKrhB,YAAcjB,GAAc4E,aAEpC,gDAEG0d,EAAKrhB,YAAcjB,GAAc0E,SAEpC,gDAEI4d,EAAKrhB,YAAcjB,GAAc2E,eAErC,sDAEG2d,EAAKrhB,YAAcjB,GAAc8E,aAEpC,2IAEGwd,EAAKrhB,YAAcjB,GAAc6E,aAEpC,2IAEGyd,EAAKrhB,YAAcjB,GAAck7B,WAEpC,gDAIA,+BAAO5Y,EAAKrhB,aAIzB,CACC2kB,IAAK,iBACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKhiB,iBAAmBX,GAAmBY,eAEvC,gDAEG+hB,EAAKhiB,iBAAmBX,GAAmB+D,aAE9C,gDAEG4e,EAAKhiB,iBAAmBX,GAAmBiE,cAE9C,sDAEI0e,EAAKhiB,iBAAmBX,GAAmBkE,cAE/C,sDAEGye,EAAKhiB,iBAAmBX,GAAmBmE,0BAE9C,oFAEGwe,EAAKhiB,iBAAmBX,GAAmBoE,4BAE9C,oFAEGue,EAAKhiB,iBAAmBX,GAAmBo8B,YAE9C,gDAIA,+BAAOzZ,EAAKhiB,kBAIzB,CACCslB,IAAK,QACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,sBAAMwF,UAAU,mBAAhB,SAAoCxF,EAAK7hB,SAGlD,CACCmlB,IAAK,SACL/X,KAAM,SACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,gCACI,gCAAK,sBAAMmE,MAAOuT,GAAb,2BAAwC,sBAAMlS,UAAU,mBAAhB,SAAoCxF,EAAK1P,iBACtF,gCAAK,sBAAM6T,MAAOuT,GAAb,2BAAwC,sBAAMlS,UAAU,mBAAhB,SAAoCxF,EAAKzP,sBAKtG,CACI+S,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEH,cAAC0E,EAAA,EAAD,CACIC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACPC,MAAO,CACH,CACI3B,IAAK,SACLpC,KAAM,eACNqC,UAAW,CACPC,SAAU,gBAEdC,QAAS,KACL3lB,EAAiB8B,YAAYogB,EAAKhpB,WAI1C,CACIssB,IAAK,0BACLpC,KAAM,yCACNkH,UAAU,EACV7E,UAAW,CACPC,SAAU,uBAEdC,QAAS,KACL1yB,QAAQJ,MAAM,6BAQ3C,CACC2yB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAK3P,cAAgBjG,GAAgBivB,aAEjC,4DAEGrZ,EAAK3P,cAAgBjG,GAAgBkvB,YAExC,sDAEGtZ,EAAK3P,cAAgBjG,GAAgBmvB,YAExC,sDAEGvZ,EAAK3P,cAAgBjG,GAAgBsvB,sBAExC,sBAAMlU,UAAU,qBAAhB,oEAEGxF,EAAK3P,cAAgBjG,GAAgBuvB,yBAExC,sBAAMnU,UAAU,qBAAhB,oEAEGxF,EAAK3P,cAAgBjG,GAAgBwvB,mBAExC,sBAAMpU,UAAU,qBAAhB,8DAEGxF,EAAK3P,cAAgBjG,GAAgByvB,sBAExC,sBAAMrU,UAAU,qBAAhB,8DAEGxF,EAAK3P,cAAgBjG,GAAgB0vB,WAExC,sDAEG9Z,EAAK3P,cAAgBjG,GAAgB2vB,cAExC,sBAAMvU,UAAU,qBAAhB,sCAEGxF,EAAK3P,cAAgBjG,GAAgB4vB,WAExC,gDAIA,sBAAMxU,UAAU,qBAAhB,SAAsCxF,EAAK3P,eAIxD,CACCiT,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/O,aAIxB,CACIqS,IAAK,OACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,gCACI,8BAAMA,EAAKxoB,YACX,8BAAMwoB,EAAKvoB,gBAK3B,CACI6rB,IAAK,gBACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEHA,EAAK1hB,gBAAkBd,GAAkBwE,OAErC,8BACI,wEAKRge,EAAK1hB,gBAAkBd,GAAkBe,OAErC,8BACI,kEAKRyhB,EAAK1hB,gBAAkBd,GAAkBy8B,OAErC,8BACI,8EAMRja,EAAK1hB,gBAAkBd,GAAkB08B,OAErC,8BACI,kEAMRla,EAAK1hB,gBAAkBd,GAAkB28B,OAErC,8BACI,oFAKRna,EAAK1hB,gBAAkBd,GAAkByE,OAErC,8BACI,gGAKR+d,EAAK1hB,gBAAkBd,GAAkB48B,WAErC,8BACI,iDAMR,8BACI,8BAAMpa,EAAK1hB,mBAIxB,CACCglB,IAAK,kBACL/X,KAAM,iCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKxhB,kBAAoBf,GAAoBgB,MAEzC,4DAEGuhB,EAAKxhB,kBAAoBf,GAAoByE,MAEhD,4DAEG8d,EAAKxhB,kBAAoBf,GAAoB0E,MAEhD,4DAEG6d,EAAKxhB,kBAAoBf,GAAoB48B,WAEhD,gDAIA,+BAAOra,EAAKxhB,mBAIzB,CACC8kB,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKthB,aAGrB,CACC4kB,IAAK,sBACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKnhB,sBAAwBjB,GAAwBkB,eAEjD,gDAEGkhB,EAAKnhB,sBAAwBjB,GAAwB6E,kCAExD,gGAEGud,EAAKnhB,sBAAwBjB,GAAwB8E,iCAExD,gGAEGsd,EAAKnhB,sBAAwBjB,GAAwB+E,uCAExD,8GAEGqd,EAAKnhB,sBAAwBjB,GAAwBgF,sCAExD,8GAEGod,EAAKnhB,sBAAwBjB,GAAwB08B,WAExD,gDAIA,+BAAOta,EAAKnhB,uBAK1B,CACEykB,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK5hB,aAIxB,CACIklB,IAAK,iBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKroB,kBAGrB,CACC2rB,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAE/H,IAAI37B,EAEJ,IACIA,EAAUR,EAAW6F,IAAIkgB,EAAK1mB,WAChC,MAAO3I,GACLI,QAAQC,IAAI,mDAAYL,GAG5B,OAAI8J,GAAWA,EAAQsI,KAEf,cAACszB,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOx7B,EAAQzI,oBAM5E0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,+BAAOr8B,EAAQsI,SAMvB,qEAUNmiB,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWiV,EAAkB,GAApB,KACTn9B,SAAU,WACVysB,UAAW,aAInB,OACI,eAACC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAACC,EAAA,EAAD,CAEIZ,MAAOzuB,EACPsvB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,KACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAACK,KAAK,CAACiG,WAAW,EAAEpG,OAAO,GAAGK,WAAW,IAAIgG,MAAM,CAACrG,OAAO,mBAAmBsG,YAAY,CAACtG,OAAO,SAO1HuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,KAG3BiT,cACI,CAACva,EAAWiP,KACRnxB,EAAiB8B,YAAYogB,EAAKhpB,sBASlE,cAACsuB,EAAA,EAAMuC,KAAP,UACI,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAAjC,SACI,cAAC0Z,GAAA,EAAD,CACIna,mBAAmB,MACnBzX,QAAS,CACL,CACI0a,IAAK,MACLpC,KAAM,eACNN,OAAQ,CACJK,KAAM,CACFS,MAAO,IACPqD,MAAO,OACPiU,UAAW,KAIvB,CACI1V,IAAK,aACLpC,KAAM,qBACNN,OAAQ,CACJK,KAAM,CACFS,MAAO,IACPqD,MAAO,OACPiU,UAAW,KAIvB,CACI1V,IAAK,YACLpC,KAAM,qBACNN,OAAQ,CACJK,KAAM,CACFS,MAAO,IACPqD,MAAO,OACPiU,UAAW,MAK3BvP,SAAU,CAACgR,EAAsDzL,KACzDA,GACAt/B,KAAKizB,SAAS,CAAE,aAAgBqM,EAAO1L,WAOvD,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAAjC,SACI,cAACwQ,GAAA,EAAD,CACIpJ,MAAM,2BACNtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAC7BvP,SAAWC,IACPh6B,KAAKizB,SAAS,CAAE,aAAgB+G,EAAM0H,cAAc3C,2BAczEnN,mBAAW2X,ICvuB1B,MAAQnhC,aAAF,GAAgBiT,aAAhB,GAA8BT,iBAA9B,mBAAgDU,IAAoBjT,MAAIC,SAASC,GAI1EyiC,GAAsB/a,YAAO,sBAAuB,qBAAsB,mBAAoB,iBAAkB,2BAA1FA,CAAsHC,YAAS,cAAkCC,YAAsB,eAAD,oBAErN9Z,MAAQ,CACJ40B,eAAgB,KAChBC,mBAAoB,KACpBC,eAAgB,KAChBC,aAAc,GACdC,uBAAwB,GACxBC,mBAAoB,GACpBC,WAAY,GACZC,mCAAoC,IAV6K,KAa9MxX,kBAAoB,KACvBh0B,KAAK8F,sBAd4M,KAiB9MA,mBAAqB,KACxB,MAAM,mBAAER,GAAuBtF,KAAKuwB,MACpCjrB,EAAmBQ,sBAGhB2qB,SAEH,MAAM,mBAAEnrB,EAAF,iBAAsB8I,EAAtB,eAAwC8F,EAAxC,yBAAwDU,GAA6B5U,KAAKuwB,OAE1F,iBAAEliB,GAAqBD,EAE7B,IAAI7I,EAAkB,GACtB,GAAmC,OAA9BvF,KAAKqW,MAAM80B,iBAA6BnrC,KAAKqW,MAAM80B,gBAAgD,IAA9BnrC,KAAKqW,MAAM80B,iBAC/C,OAA9BnrC,KAAKqW,MAAM40B,iBAA6BjrC,KAAKqW,MAAM40B,gBAAgD,IAA9BjrC,KAAKqW,MAAM40B,iBAC9C,OAAlCjrC,KAAKqW,MAAM60B,qBAAiClrC,KAAKqW,MAAM60B,oBAAwD,IAAlClrC,KAAKqW,MAAM60B,qBAC5D,KAA5BlrC,KAAKqW,MAAM+0B,cAAwBprC,KAAKqW,MAAM+0B,cACI,KAAlDprC,KAAKqW,MAAMm1B,oCAA8CxrC,KAAKqW,MAAMm1B,oCAClC,KAAlCxrC,KAAKqW,MAAMi1B,oBAA8BtrC,KAAKqW,MAAMi1B,oBAC1B,KAA1BtrC,KAAKqW,MAAMk1B,YAAsBvrC,KAAKqW,MAAMk1B,YACN,KAAtCvrC,KAAKqW,MAAMg1B,wBAAkCrrC,KAAKqW,MAAMg1B,uBAI5D,IAAK,IAAI3kC,EAAI,EAAGA,EAAKpB,EAAmBC,gBAAgBoB,OAAQD,IAAK,CACjE,MAAMN,EAAWd,EAAmBC,gBAAgBmB,GAEpD,IAAI+kC,GAAO,EACXA,EAAqC,OAA9BzrC,KAAKqW,MAAM80B,iBAA6BnrC,KAAKqW,MAAM80B,gBAAgD,IAA9BnrC,KAAKqW,MAAM80B,gBAAyB/kC,EAASyD,WAAa7J,KAAKqW,MAAM80B,eACjJM,EAAOA,IAAuC,OAA9BzrC,KAAKqW,MAAM40B,iBAA6BjrC,KAAKqW,MAAM40B,gBAAgD,IAA9BjrC,KAAKqW,MAAM40B,gBAAyB7kC,EAAS4X,WAAahe,KAAKqW,MAAM40B,gBAC1JQ,EAAOA,IAA2C,OAAlCzrC,KAAKqW,MAAM60B,qBAAiClrC,KAAKqW,MAAM60B,oBAAwD,IAAlClrC,KAAKqW,MAAM60B,oBAA6B9kC,EAAS6X,eAAiBje,KAAKqW,MAAM60B,oBAC1KO,EAAOA,IAAqC,KAA5BzrC,KAAKqW,MAAM+0B,eAAwBprC,KAAKqW,MAAM+0B,cAAiBhlC,EAAS2X,SAAqE,IAA1D,GAAE3X,EAAS2X,SAAS2tB,QAAQ1rC,KAAKqW,MAAM+0B,eAC1IK,EAAOA,IAA2D,KAAlDzrC,KAAKqW,MAAMm1B,qCAA8CxrC,KAAKqW,MAAMm1B,oCAAuCplC,EAASuY,+BAAuI,IAAtG,GAAEvY,EAASuY,+BAA+B+sB,QAAQ1rC,KAAKqW,MAAMm1B,qCAClOC,EAAOA,IAA+C,KAAtCzrC,KAAKqW,MAAMg1B,yBAAkCrrC,KAAKqW,MAAMg1B,wBAA2BjlC,EAASmY,mBAAmG,IAA9E,GAAEnY,EAASmY,mBAAmBmtB,QAAQ1rC,KAAKqW,MAAMg1B,yBAClLI,EAAOA,IAA2C,KAAlCzrC,KAAKqW,MAAMi1B,qBAA8BtrC,KAAKqW,MAAMi1B,oBAAuBllC,EAAS0X,eAAuF,IAAtE,GAAE1X,EAAS0X,eAAe4tB,QAAQ1rC,KAAKqW,MAAMi1B,qBAClKG,EAAOA,IAAmC,KAA1BzrC,KAAKqW,MAAMk1B,aAAsBvrC,KAAKqW,MAAMk1B,YAAenlC,EAASyV,OAA+D,IAAtD,GAAEzV,EAASyV,OAAO6vB,QAAQ1rC,KAAKqW,MAAMk1B,aAAwBnlC,EAASmK,WAAuE,IAA1D,GAAEnK,EAASmK,WAAWm7B,QAAQ1rC,KAAKqW,MAAMk1B,aAErNE,GACAlmC,EAAgB6Q,KAAKhQ,QAjB7Bb,EAAkBD,EAAmBC,gBAuBzC,MAAM,gBAAE8gC,GAAoBrmC,KAAKuwB,MAC3BiF,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWiV,EAAkB,IAApB,KACTn9B,SAAU,WACVysB,UAAW,UACX2Q,aAAc,uBAIhBlS,EAAqB,CACvB,CACIR,IAAK,gBACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAE/H,IAAIkC,EAAa,GAKjB,OAJIv6B,GAAoBiiB,EAAK9pB,gBAAkB6H,EAAiB7H,gBAC5DoiC,EAAa,sBAIb,cAACjC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOjW,EAAKhuB,oBAMzE0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,qBAAKtR,UAAW8S,EAAY7U,QACxB,KACI3lB,EAAiBiB,oBAAoBihB,IAF7C,SAKI,sBAAMmE,MAAO,CAAEoU,OAAQ,WAAvB,SAAqCvY,EAAK9pB,sBAM9D,CACIotB,IAAK,YACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKzU,QAGrB,CACC+X,IAAK,WACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/f,YAIxB,CACIqjB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEH,cAAC0E,EAAA,EAAD,CACIC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACPC,MAAO,CACH,CACI3B,IAAK,gBACLpC,KAAM,2BACNqC,UAAW,CACPC,SAAU,kBAEdC,QAAS,KACL7f,EAAeI,mCAAmCgc,EAAK9pB,iBAI/D,CACIotB,IAAK,2BAELpC,KAAM,uCACNqC,UAAW,CACPC,SAAU,kBAEdC,QAAS,KACLnf,EAAyBI,2BAA2Bsb,EAAK9pB,sBAQtF,CACCotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKvS,UAGrB,CACC6V,IAAK,WACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOjV,GAAaiV,EAAKtS,aAGlC,CACC4V,IAAK,eACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAO1V,GAAiB0V,EAAKrS,iBAIzC,CACI2V,IAAK,+BACL/X,KAAM,yDACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK3R,gCAIxB,CACIiV,IAAK,WACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOloB,GAAakoB,EAAKzmB,aAIrC,CACI+pB,IAAK,eACL/X,KAAM,uBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKxS,gBAIxB,CACI8V,IAAK,aACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKpS,cAIxB,CACI0V,IAAK,YACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKnS,aAGrB,CACCyV,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAK7R,cAAgBnD,GAAgBqwB,cAEjC,gDAGJrb,EAAK7R,cAAgBnD,GAAgBswB,aAEjC,gDAGJtb,EAAK7R,cAAgBnD,GAAgBuwB,UAEjC,gDAIJ,+BAAOvb,EAAK7R,eAIxB,CACImV,IAAK,mBACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/R,oBAIxB,CACIqV,IAAK,uBACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK5R,wBAIxB,CACIkV,IAAK,cACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK9R,gBAO5B,OACI,eAACoX,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQZ,OAAQ,IAAKkV,aAAc,oBAAqB9O,WAAY,EAAGkC,SAAUC,IAAU8N,SAAvJ,UACI,cAAC7R,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,qBAEZ7H,mBAAoB3wB,KAAKqW,MAAM40B,eAC/B/xB,QACI6yB,IAEJhS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEgY,eAAgB3L,EAAO1L,WAMvD,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,2BACZ7H,mBAAoB3wB,KAAKqW,MAAM60B,mBAC/BhyB,QACI8yB,IAEJjS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEiY,mBAAoB5L,EAAO1L,WAM3D,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,eACZ7H,mBAAoB3wB,KAAKqW,MAAM80B,eAC/BjyB,QACI+yB,IAEJlS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEkY,eAAgB7L,EAAO1L,gBAO/D,cAACgC,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAM+0B,aAAc5S,MAAM,2BAAOuB,SAAU,CAACC,EAAYC,KAClFj6B,KAAKizB,SAAS,CAAEmY,aAAcnR,SAItC,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMm1B,mCAAoChT,MAAM,yDAAYuB,SAAU,CAACC,EAAYC,KAC7Gj6B,KAAKizB,SAAS,CAAEuY,mCAAoCvR,SAI5D,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMi1B,mBAAoB9S,MAAM,uBAAQuB,SAAU,CAACC,EAAYC,KACzFj6B,KAAKizB,SAAS,CAAEqY,mBAAoBrR,cAMpD,cAACrE,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMg1B,uBAAwB7S,MAAM,uCAASuB,SAAU,CAACC,EAAYC,KAC9Fj6B,KAAKizB,SAAS,CAAEoY,uBAAwBpR,SAIhD,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMk1B,WAAY/S,MAAM,eAAKuB,SAAU,CAACC,EAAYC,KAC9Ej6B,KAAKizB,SAAS,CAAEsY,WAAYtR,SAIpC,eAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,UACI,cAACnN,EAAA,EAAD,CACI/H,KAAK,mCACLuC,QAAS,KACL1yB,QAAQC,IAAI,MAEhBo3B,UAAU,EACVoG,oBAAoB,IAExB,cAACtF,EAAA,EAAD,CACIhI,KAAK,eACLuC,QAAS,KACLzuB,EAAmBQ,sBAEvBg5B,oBAAoB,mBAQhD,cAAClJ,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAACC,EAAA,EAAD,CACIZ,MAAOhwB,EACP6wB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAACK,KAAK,CAACiG,WAAW,EAAEpG,OAAO,GAAGK,WAAW,IAAIgG,MAAM,CAACrG,OAAO,mBAAmBsG,YAAY,CAACtG,OAAO,SAO1HuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,wBAmBpDhG,mBAAWoZ,ICtgB1B,MAAQ5iC,aAAF,GAAgBiT,aAAhB,GAA8BT,iBAA9B,GAAgDU,gBAAhD,IAAoEjT,MAAIC,SAASC,GAI1E2jC,GAA8Bjc,YAAO,sBAAuB,qBAAsB,mBAAoB,iBAAkB,2BAA1FA,CAAsHC,YAAS,cAA0CC,YAAsB,eAAD,oBAErO9Z,MAAQ,CACJ40B,eAAgB,KAChBC,mBAAoB,KACpBC,eAAgB,KAChBC,aAAc,GACdC,uBAAwB,GACxBC,mBAAoB,GACpBC,WAAY,GACZC,mCAAoC,IAV6L,KAa9NxX,kBAAoB,KACvBh0B,KAAKqU,2BAd4N,KAiB9NA,wBAA0B,KAC7B,MAAM,eAAEH,EAAF,mBAAkB5O,GAAuBtF,KAAKuwB,MACpDjrB,EAAmBQ,qBACnBoO,EAAeG,2BAGZoc,SAEH,MAAM,eAAEvc,EAAF,iBAAkB9F,EAAlB,yBAAoCwG,GAA6B5U,KAAKuwB,OAEtE,iBAAEliB,GAAqBD,EAE7B,IAAI+F,EAAuB,GAC3B,GAAmC,OAA9BnU,KAAKqW,MAAM80B,iBAA6BnrC,KAAKqW,MAAM80B,gBAAgD,IAA9BnrC,KAAKqW,MAAM80B,iBAC/C,OAA9BnrC,KAAKqW,MAAM40B,iBAA6BjrC,KAAKqW,MAAM40B,gBAAgD,IAA9BjrC,KAAKqW,MAAM40B,iBAC9C,OAAlCjrC,KAAKqW,MAAM60B,qBAAiClrC,KAAKqW,MAAM60B,oBAAwD,IAAlClrC,KAAKqW,MAAM60B,qBAC5D,KAA5BlrC,KAAKqW,MAAM+0B,cAAwBprC,KAAKqW,MAAM+0B,cACI,KAAlDprC,KAAKqW,MAAMm1B,oCAA8CxrC,KAAKqW,MAAMm1B,oCAClC,KAAlCxrC,KAAKqW,MAAMi1B,oBAA8BtrC,KAAKqW,MAAMi1B,oBAC1B,KAA1BtrC,KAAKqW,MAAMk1B,YAAsBvrC,KAAKqW,MAAMk1B,YACN,KAAtCvrC,KAAKqW,MAAMg1B,wBAAkCrrC,KAAKqW,MAAMg1B,uBAI5D,IAAK,IAAI3kC,EAAI,EAAGA,EAAIwN,EAAeC,qBAAqBxN,OAAQD,IAAK,CACjE,MAAMN,EAAW8N,EAAeC,qBAAqBzN,GAErD,IAAI+kC,GAAO,EACXA,EAAqC,OAA9BzrC,KAAKqW,MAAM80B,iBAA6BnrC,KAAKqW,MAAM80B,gBAAgD,IAA9BnrC,KAAKqW,MAAM80B,gBAAyB/kC,EAASyD,WAAa7J,KAAKqW,MAAM80B,eAEjJM,EAAOA,IAAuC,OAA9BzrC,KAAKqW,MAAM40B,iBAA6BjrC,KAAKqW,MAAM40B,gBAAgD,IAA9BjrC,KAAKqW,MAAM40B,gBAAyB7kC,EAAS4X,WAAahe,KAAKqW,MAAM40B,gBAE1JQ,EAAOA,IAA2C,OAAlCzrC,KAAKqW,MAAM60B,qBAAiClrC,KAAKqW,MAAM60B,oBAAwD,IAAlClrC,KAAKqW,MAAM60B,oBAA6B9kC,EAAS6X,eAAiBje,KAAKqW,MAAM60B,oBAE1KO,EAAOA,IAAqC,KAA5BzrC,KAAKqW,MAAM+0B,eAAwBprC,KAAKqW,MAAM+0B,cAAiBhlC,EAAS2X,SAAqE,IAA1D,GAAE3X,EAAS2X,SAAS2tB,QAAQ1rC,KAAKqW,MAAM+0B,eAE1IK,EAAOA,IAAqC,KAA5BzrC,KAAKqW,MAAM+0B,eAAwBprC,KAAKqW,MAAM+0B,cAAiBhlC,EAAS2X,SAAqE,IAA1D,GAAE3X,EAAS2X,SAAS2tB,QAAQ1rC,KAAKqW,MAAM+0B,eAE1IK,EAAOA,IAA2D,KAAlDzrC,KAAKqW,MAAMm1B,qCAA8CxrC,KAAKqW,MAAMm1B,oCAAuCplC,EAASuY,+BAAuI,IAAtG,GAAEvY,EAASuY,+BAA+B+sB,QAAQ1rC,KAAKqW,MAAMm1B,qCAElOC,EAAOA,IAA+C,KAAtCzrC,KAAKqW,MAAMg1B,yBAAkCrrC,KAAKqW,MAAMg1B,wBAA2BjlC,EAASmY,mBAAmG,IAA9E,GAAEnY,EAASmY,mBAAmBmtB,QAAQ1rC,KAAKqW,MAAMg1B,yBAElLI,EAAOA,IAA2C,KAAlCzrC,KAAKqW,MAAMi1B,qBAA8BtrC,KAAKqW,MAAMi1B,oBAAuBllC,EAAS0X,eAAuF,IAAtE,GAAE1X,EAAS0X,eAAe4tB,QAAQ1rC,KAAKqW,MAAMi1B,qBAElKG,EAAOA,IAAmC,KAA1BzrC,KAAKqW,MAAMk1B,aAAsBvrC,KAAKqW,MAAMk1B,YAAenlC,EAASyV,OAA+D,IAAtD,GAAEzV,EAASyV,OAAO6vB,QAAQ1rC,KAAKqW,MAAMk1B,aAAwBnlC,EAASmK,WAAuE,IAA1D,GAAEnK,EAASmK,WAAWm7B,QAAQ1rC,KAAKqW,MAAMk1B,aAGrNE,GACAt3B,EAAqBiC,KAAKhQ,QA3BlC+N,EAAuBD,EAAeC,qBAiC1C,MAAM,gBAAEkyB,GAAoBrmC,KAAKuwB,MAC3BiF,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWiV,EAAkB,IAApB,KACTn9B,SAAU,WACVysB,UAAW,UACX2Q,aAAc,uBAIhBlS,EAAqB,CACvB,CACIR,IAAK,gBACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAE/H,IAAIkC,EAAa,GAKjB,OAJIv6B,GAAoBiiB,EAAK9pB,gBAAkB6H,EAAiB7H,gBAC5DoiC,EAAa,sBAIb,cAACjC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOjW,EAAKhuB,oBAMzE0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,qBAAKtR,UAAW8S,EAAY7U,QACxB,KACI3lB,EAAiBiB,oBAAoBihB,IAF7C,SAKI,sBAAMmE,MAAO,CAAEoU,OAAQ,WAAvB,SAAqCvY,EAAK9pB,sBAM9D,CACIotB,IAAK,YACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKzU,QAGrB,CACC+X,IAAK,WACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/f,YAIxB,CACIqjB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEH,cAAC0E,EAAA,EAAD,CACIC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACPC,MAAO,CACH,CACI3B,IAAK,wCACLpC,KAAM,uCACNqC,UAAW,CACPC,SAAU,UAEdC,QAAS,KACL7f,EAAeK,sCAAsC+b,EAAK9pB,iBAGlE,CACIotB,IAAK,2BAELpC,KAAM,uCACNqC,UAAW,CACPC,SAAU,kBAEdC,QAAS,KACLnf,EAAyBI,2BAA2Bsb,EAAK9pB,sBAQtF,CACCotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKvS,UAGrB,CACC6V,IAAK,WACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOjV,GAAaiV,EAAKtS,aAGlC,CACC4V,IAAK,eACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAO1V,GAAiB0V,EAAKrS,iBAIzC,CACI2V,IAAK,+BACL/X,KAAM,yDACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK3R,gCAIxB,CACIiV,IAAK,WACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOloB,GAAakoB,EAAKzmB,aAIrC,CACI+pB,IAAK,eACL/X,KAAM,uBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKxS,gBAIxB,CACI8V,IAAK,aACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKpS,cAIxB,CACI0V,IAAK,YACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKnS,aAGrB,CACCyV,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAK7R,cAAgBnD,GAAgBqwB,cAEjC,gDAGJrb,EAAK7R,cAAgBnD,GAAgBswB,aAEjC,gDAGJtb,EAAK7R,cAAgBnD,GAAgBuwB,UAEjC,gDAIJ,+BAAOvb,EAAK7R,eAIxB,CACImV,IAAK,mBACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/R,oBAIxB,CACIqV,IAAK,uBACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK5R,wBAIxB,CACIkV,IAAK,cACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK9R,gBAO5B,OACI,eAACoX,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQZ,OAAQ,IAAKkV,aAAc,oBAAqB9O,WAAY,EAAGkC,SAAUC,IAAU8N,SAAvJ,UACI,cAAC7R,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,qBAEZ7H,mBAAoB3wB,KAAKqW,MAAM40B,eAC/B/xB,QACI6yB,IAEJhS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEgY,eAAgB3L,EAAO1L,WAMvD,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,2BACZ7H,mBAAoB3wB,KAAKqW,MAAM60B,mBAC/BhyB,QACI8yB,IAEJjS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEiY,mBAAoB5L,EAAO1L,WAM3D,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,eACZ7H,mBAAoB3wB,KAAKqW,MAAM80B,eAC/BjyB,QACI+yB,IAEJlS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEkY,eAAgB7L,EAAO1L,gBAO/D,cAACgC,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAM+0B,aAAc5S,MAAM,2BAAOuB,SAAU,CAACC,EAAYC,KAClFj6B,KAAKizB,SAAS,CAAEmY,aAAcnR,SAItC,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMm1B,mCAAoChT,MAAM,yDAAYuB,SAAU,CAACC,EAAYC,KAC7Gj6B,KAAKizB,SAAS,CAAEuY,mCAAoCvR,SAI5D,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMi1B,mBAAoB9S,MAAM,uBAAQuB,SAAU,CAACC,EAAYC,KACzFj6B,KAAKizB,SAAS,CAAEqY,mBAAoBrR,cAMpD,cAACrE,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMg1B,uBAAwB7S,MAAM,uCAASuB,SAAU,CAACC,EAAYC,KAC9Fj6B,KAAKizB,SAAS,CAAEoY,uBAAwBpR,SAIhD,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMk1B,WAAY/S,MAAM,eAAKuB,SAAU,CAACC,EAAYC,KAC9Ej6B,KAAKizB,SAAS,CAAEsY,WAAYtR,SAIpC,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,EAAGlP,WAAY,KAApF,SACI,cAACgC,EAAA,EAAD,CACIhI,KAAK,eACLuC,QAAS,KACL/zB,KAAKqU,2BAETyqB,oBAAoB,kBAQhD,cAAClJ,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAACC,EAAA,EAAD,CACIZ,MAAOphB,EACPiiB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAACK,KAAK,CAACiG,WAAW,EAAEpG,OAAO,GAAGK,WAAW,IAAIgG,MAAM,CAACrG,OAAO,mBAAmBsG,YAAY,CAACtG,OAAO,SAO1HuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,wBAmBpDhG,mBAAWsa,ICzgB1B,MAAQt+B,cAAF,GAAiBC,eAAjB,GAAiC+M,iBAAjC,GAAmDS,aAAnD,GAAiEjT,aAAjE,GAA+E4F,cAA/E,IAAiG3F,MAAIC,SAASC,GAIvG4jC,GAAmBlc,YAAO,sBAAuB,kBAAmB,oBAAqB,mBAAtEA,CAA0FC,YAAS,cAA+BC,YAAsB,eAAD,oBAC5K9Z,MAAQ,CAAE+1B,gBAAiB,MAAOlE,YAAY,GAC9CzX,SAGH,MAAM,gBAAE4V,EAAF,gBAAmBh6B,EAAnB,kBAAoC5C,EAApC,iBAAuD2E,GAAqBpO,KAAKuwB,OAEjF,WAAEhmB,GAAed,GACjB,iBAAE4E,GAAqBD,EAE7B,IAAI9B,EAAmB,GACvB,MAAM+/B,EAA2BhgC,EAAgBC,UACjD,IAAK,IAAI5F,EAAI,EAAGA,EAAI2lC,EAAyB1lC,OAAQD,IAAK,CACtD,MAAMmG,EAAQw/B,EAAyB3lC,GACnC+C,EAAkBC,qBAAqBC,IAAIkD,EAAMjD,aACd,QAA/B5J,KAAKqW,MAAM+1B,iBACwB,SAA/BpsC,KAAKqW,MAAM+1B,iBAA8Bv/B,EAAMuE,YAAcxD,GAAcoE,OAC5C,UAA/BhS,KAAKqW,MAAM+1B,iBAA+Bv/B,EAAMuE,YAAcxD,GAAcqE,SAEhF3F,EAAU8J,KAAKvJ,GAK3B,GAAI7M,KAAKqW,MAAM6xB,WAAY,CAEvB,MAAMoE,EAAiB,IAAI7mC,IAE3B,IAAK,IAAIiB,EAAI,EAAGA,EAAI4F,EAAU3F,OAAQD,IAAK,CACvC,MAAMmG,EAAQP,EAAU5F,GACxB,IACI,MAAM4hC,EAAU,GAAEz7B,EAAMzG,SAASI,iBAAiBqG,EAAMuE,aAAavE,EAAMwE,aAC3E,IAAIk7B,EACJ,GAAID,EAAe3iC,IAAI2+B,GACnBiE,EAAWD,EAAel8B,IAAIk4B,GAC9BiE,EAAS59B,QAAU9B,EAAM8B,WACtB,CACH,MAAM65B,EAAa,CACf9mC,YAAa,GACbqa,mBAAoB,GACpBzZ,UAAW,GACXwZ,YAAa,GACbD,KAAM,GACNjb,OAAQ,IAEZ2rC,EAAW,CACP3iC,UAAW,GACX3B,eAAgB,GAChBsF,eAAgB,GAChBnH,SAAUqiC,YAAS57B,EAAMzG,UACzBgL,UAAWvE,EAAMuE,UACjB/O,QAASmmC,EACTn3B,WAAYxE,EAAMwE,WAClB/J,QAAS,GACTgK,cAAe,GACf7C,MAAO,EACPpB,UAAW,GACXP,QAASkhB,eAAS1X,QAAQ,IAAK,IAC/BhJ,UAAW,GACX2U,eAAgB,GAChBf,WAAY,GACZvS,OAAQ9B,EAAM8B,QAElB49B,EAASnmC,SAAS/D,QAAUmmC,EAGhC8D,EAAe/lC,IAAI+hC,EAAQiE,GAC7B,MAAOtrC,GACLI,QAAQJ,MAAM,mDAAYA,IAIlCqL,EAAY,IAAIggC,EAAe1lC,UAKnC,MAAMwtB,EAAqB,CAAC,CACxBR,IAAK,WACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,GAAIA,EAAKlqB,SAAU,CACf,MAAMuiC,EAAyC,CAAEnC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GACtI,IAAIkC,EAAa,GAIjB,OAHIv6B,GAAoBiiB,EAAKlqB,SAASI,gBAAkB6H,EAAiB7H,gBACrEoiC,EAAa,sBAGb,cAACjC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,qBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,UACI,+BAAI,sBAAMzD,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAAS2X,YACrE,+BAAI,sBAAM0W,MAAOkU,EAAb,2BAA0C,+BAAOrY,EAAKlqB,SAASyV,UACnE,+BAAI,sBAAM4Y,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAASmK,cACrE,+BAAI,sBAAMkkB,MAAOkU,EAAb,iCAA2C,+BAAOttB,GAAaiV,EAAKlqB,SAAS4X,eACjF,+BAAI,sBAAMyW,MAAOkU,EAAb,uCAA4C,+BAAO/tB,GAAiB0V,EAAKlqB,SAAS6X,mBACtF,+BAAI,sBAAMwW,MAAOkU,EAAb,mCAA6C,+BAAOrY,EAAKlqB,SAAS0X,kBACtE,+BAAI,sBAAM2W,MAAOkU,EAAb,2BAA0C,+BAAOvgC,GAAakoB,EAAKlqB,SAASyD,eAChF,+BAAI,sBAAM4qB,MAAOkU,EAAb,uCAA4C,+BAAOrY,EAAKlqB,SAAS8X,gBACrE,+BAAI,sBAAMuW,MAAOkU,EAAb,mDAA8C,+BAAOrY,EAAKlqB,SAAS+X,eACvE,+BAAI,sBAAMsW,MAAOkU,EAAb,qEAAiD,+BAAOrY,EAAKlqB,SAASuY,wCAM9FqoB,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAvBrC,SAyBI,sBAAK3S,MAAO,CAAEoU,OAAQ,WAAa/S,UAAW8S,EAAY7U,QACtD,KACI3lB,EAAiBiB,oBAAoBihB,EAAKlqB,WAFlD,UAKI,8BAAMkqB,EAAKlqB,SAASI,gBACpB,8BAAM8pB,EAAKlqB,SAASyV,YAKhC,OACI,gFAKb,CACC+X,IAAK,YACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKlf,YAAcxD,GAAcoE,MAE7B,sBAAM8jB,UAAU,mBAAhB,oBAEGxF,EAAKlf,YAAcxD,GAAcqE,OAEpC,sBAAM6jB,UAAU,oBAAhB,oBAIA,+BAAOxF,EAAKlf,aAIzB,CACCwiB,IAAK,YACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKrhB,YAAcjB,GAAckB,eAE7B,gDAEGohB,EAAKrhB,YAAcjB,GAAc4E,aAEpC,gDAEG0d,EAAKrhB,YAAcjB,GAAc0E,SAEpC,gDAEI4d,EAAKrhB,YAAcjB,GAAc2E,eAErC,sDAEG2d,EAAKrhB,YAAcjB,GAAc8E,aAEpC,2IAEGwd,EAAKrhB,YAAcjB,GAAc6E,aAEpC,2IAEGyd,EAAKrhB,YAAcjB,GAAck7B,WAEpC,gDAIA,+BAAO5Y,EAAKrhB,aAIzB,CACC2kB,IAAK,aACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAKjf,aAAexD,GAAeqE,QAE/B,gDAEGoe,EAAKjf,aAAexD,GAAesE,SAEtC,gDAEGme,EAAKjf,aAAexD,GAAewE,kBAEtC,gDAEGie,EAAKjf,aAAexD,GAAeuE,cAEtC,gDAEGke,EAAKjf,aAAexD,GAAei8B,WAEtC,gDAIA,iCAAOxZ,EAAKjf,WAAZ,QAIb,CACCuiB,IAAK,QACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,sBAAMwF,UAAU,mBAAhB,SAAoCxF,EAAK7hB,SAGlD,CACCmlB,IAAK,SACL/X,KAAM,SACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK3hB,UAIxB,CACIilB,IAAK,OACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,gCACI,8BAAMA,EAAKjjB,YACX,8BAAMijB,EAAKhjB,gBAK3B,CACIsmB,IAAK,iBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKroB,kBAIxB,CACI2rB,IAAK,iBACL/X,KAAM,6CACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/iB,kBAGrB,CACCqmB,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAE/H,IAAI37B,EAEJ,IACIA,EAAUR,EAAW6F,IAAIkgB,EAAK1mB,WAChC,MAAO3I,GACLI,QAAQC,IAAI,mDAAYL,GAG5B,OAAI8J,GAAWA,EAAQsI,KAEf,cAACszB,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOx7B,EAAQzI,oBAM5E0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,+BAAOr8B,EAAQsI,SAMvB,qEAUNmiB,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWiV,EAAkB,GAApB,KACTn9B,SAAU,WACVysB,UAAW,aAInB,OACI,eAACC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAACC,EAAA,EAAD,CAEIZ,MAAOjpB,EACP8pB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,KACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAACK,KAAK,CAACiG,WAAW,EAAEpG,OAAO,GAAGK,WAAW,IAAIgG,MAAM,CAACrG,OAAO,mBAAmBsG,YAAY,CAACtG,OAAO,SAM1HuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,iBASnD,cAAChC,EAAA,EAAMuC,KAAP,UACI,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAAjC,SACI,cAAC0Z,GAAA,EAAD,CACIna,mBAAmB,MACnBzX,QAAS,CACL,CACI0a,IAAK,MACLpC,KAAM,eACNN,OAAQ,CACJK,KAAM,CACFS,MAAO,IACPqD,MAAO,OACPiU,UAAW,KAIvB,CACI1V,IAAK,OACLpC,KAAM,2BACNN,OAAQ,CACJK,KAAM,CACFS,MAAO,IACPqD,MAAO,OACPiU,UAAW,KAIvB,CACI1V,IAAK,QACLpC,KAAM,2BACNN,OAAQ,CACJK,KAAM,CACFS,MAAO,IACPqD,MAAO,OACPiU,UAAW,MAM3BvP,SAAU,CAACgR,EAAsDzL,KACzDA,GACAt/B,KAAKizB,SAAS,CAAE,gBAAmBqM,EAAO1L,WAK1D,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAAjC,SACI,cAACwQ,GAAA,EAAD,CAAUpJ,MAAM,2BAAOtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAAOvP,SAAWC,IAClEh6B,KAAKizB,SAAS,CAAE,WAAc+G,EAAM0H,cAAc3C,2BAenEnN,mBAAWua,I,UCvd1B,MACI9wB,aADE,GAEFT,iBAFE,GAGFxS,aAHE,GAIFuF,mBAJE,GAKFC,cALE,GAMFC,eANE,GAOFC,kBAPE,GAQFC,oBARE,GASFG,wBATE,GAUFF,cAVE,IAWD3F,MAAIC,SAASC,GAGLikC,GAAiBvc,YAAO,sBAAuB,mBAAoB,oBAAlDA,CAAuEC,YAAS,cAA6BC,YAAsB,eAAD,oBAErJ9Z,MAAQ,CAAEo2B,sBAAsB,EAAOC,aAAc,KAAMC,WAAY,IAF8E,KAkvB5JC,sBAAwB,KACpB,MAAM/1B,EAAW,GACjBmD,OAAO2B,KAAK3b,KAAKqW,OAAOT,SACnBC,IACQ,GAAEA,IAAUkb,WAAW,yBACxBla,EAAU,OAAMhB,KAAa7V,KAAKqW,MAAMR,GACxCgB,EAAShB,QAAWgH,MAIhC7c,KAAKizB,SAAS,CAAEwZ,sBAAsB,EAAOC,aAAc,KAAMC,WAAY,MAAO91B,KA5vBoE,KA+vB5Jg2B,qBAAuB,CAACF,EAAoBl+B,KAExC,MAAM,iBAAEL,EAAF,kBAAoB3E,GAAsBzJ,KAAKuwB,MACrD,IAAKniB,EAAiBC,iBAElB,YADArN,IAAMC,MAAM,kCAGhB,IAAKwI,EAAkBC,sBAAwBD,EAAkBC,qBAAqBojC,MAAQ,EAE1F,YADA9rC,IAAMC,MAAM,0DAIhB,IAAIwN,GAAiB,KAAVA,EAEP,YADAzN,IAAMC,MAAM,kCAIhB,MAAM4V,EAAW,GACjB,IAAIk2B,EAAU,EACdtjC,EAAkBC,qBAAqBkM,SAAShM,IACxC5J,KAAKqW,MAAO,sBAAqBzM,MAAkE,IAAlD5J,KAAKqW,MAAO,sBAAqBzM,MAClFiN,EAAU,sBAAqBjN,KAAe5J,KAAKqW,MAAO,sBAAqBzM,KAC/EmjC,GAAW,GACJ3+B,EAAiBO,QAAsC,IAA5BP,EAAiBO,SACnDkI,EAAU,sBAAqBjN,KAAewE,EAAiBO,OAC/Do+B,GAAW,MAGfA,EAAU,GACV3+B,EAAiBmB,UAAU,GAC3BvP,KAAKizB,SAAS,CAAEwZ,sBAAsB,EAAMC,aAAcj+B,EAAO,WAAck+B,KAAe91B,KAE9F7V,IAAMC,MAAM,6EA/xBwI,KAmyB5J+rC,YAAc,KAEV,MAAM,kBAAEvjC,GAAsBzJ,KAAKuwB,MAE7B1Z,EAAW,GAEjB,IAAKpN,EAAkBC,sBAAwBD,EAAkBC,qBAAqBojC,MAAQ,EAE1F,YADA9rC,IAAMC,MAAM,0DAIhB,IAAI8rC,EAAU,EACdtjC,EAAkBC,qBAAqBkM,SAAShM,IACxC5J,KAAKqW,MAAO,0BAAyBzM,KACrCiN,EAAU,sBAAqBjN,KAAe5J,KAAKqW,MAAO,0BAAyBzM,MAEnFiN,EAAU,sBAAqBjN,KAAe,EAC9CmjC,GAAW,MAIfA,EAAU,GACV/rC,IAAMsP,KAAK,2DAGftQ,KAAKizB,SAASpc,IA5zB0I,KAi0B5Jo2B,YAAc,KAEV,MAAM,iBAAE7+B,GAAqBpO,KAAKuwB,MAC5B1Z,EAAW,GAEjBmD,OAAO2B,KAAK3b,KAAKqW,OAAOT,SACnBC,IACQ,GAAEA,IAAUkb,WAAW,yBACxBla,EAAShB,QAAWgH,MAIhCzO,EAAiBmB,UAAU,GAE3BvP,KAAKizB,SAASpc,IA10BX4Z,SAEH,MAAM,iBAAEriB,EAAF,kBAAoB3E,GAAsBzJ,KAAKuwB,MAErD,IAAIpS,EAAY,KACZ3X,EAAgB,GAChB0mC,EAAY,GACZ9+B,EAAiBC,mBACbD,EAAiBC,iBAAiB8P,YAClCA,EAAY/P,EAAiBC,iBAAiB8P,WAG9C/P,EAAiBC,iBAAiB7H,gBAClCA,EAAgB4H,EAAiBC,iBAAiB7H,eAGlD4H,EAAiBC,iBAAiBwN,OAClCqxB,EAAY9+B,EAAiBC,iBAAiBwN,OAItD,MAAMsxB,EAA4BC,IAE9B,MAAMC,EAAiC,GAEvC,IAAIzZ,EAAM,EA+FV,OA9FAnqB,EAAkBC,qBAAqBkM,SAASC,IAE5C,GADA+d,IACInqB,EAAkBc,WAAWZ,IAAIkM,GAAU,CAC3C,MAAM9K,EAAUtB,EAAkBc,WAAW6F,IAAIyF,GAC3Cy3B,EAActtC,KAAKqW,MAAO,sBAAqBtL,EAAQnB,aAAe5J,KAAKqW,MAAO,sBAAqBtL,EAAQnB,aAAewE,EAAiBO,SAChJy+B,GAAYE,GAAeA,EAAc,IAC1CD,EAAwBj3B,KACpB,cAACwf,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,SACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEzC,MAAO,QAAUyG,aAAc1tB,EAAQuU,OAAQoZ,UAAU,MAEjF,cAAC9C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,SACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEzC,MAAO,QAAUyG,aAAc1tB,EAAQnB,UAAW8uB,UAAU,MAEpF,cAAC9C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,cAAhC,SACI,cAACuG,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,oBAAqB1C,MAAO,QAC5C8D,UAAU,mBACV2C,aAAe,GAAE6U,IACjB34B,KAAK,SACL44B,KAAM,EACNC,IAAK,EACLzT,SAAU,CAACC,EAAYC,KACf5zB,KACAhF,QAAQC,IAAK,eAAIyJ,EAAQnB,oCAAgBqwB,KAE7C,MAAMpjB,EAAW,GACjBA,EAAU,sBAAqB9L,EAAQnB,aAAeqwB,EACtDj6B,KAAKizB,SAASpc,YAtBoB+c,QAkC/B,IAAnCyZ,EAAwB1mC,SACpBymC,EAEAC,EAAwBj3B,KACpB,cAACwf,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,SACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEzC,MAAO,QAAUyG,aAAc,uFAAkBC,UAAU,MAEnF,cAAC9C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,SACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEzC,MAAO,QAAUyG,aAAc,uFAAkBC,UAAU,MAEnF,cAAC9C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,cAAhC,SACI,cAACuG,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,oBAAqB1C,MAAO,QAC5C8D,UAAU,mBACV2C,aAAc,IACd9jB,KAAK,SACL44B,KAAM,EACNC,IAAK,EACL9U,UAAU,UAhB4B9E,IAuB1DyZ,EAAwBj3B,KACpB,cAACwf,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,SACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEzC,MAAO,QAAUyG,aAAc,qBAAOC,UAAU,MAExE,cAAC9C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,SACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEzC,MAAO,QAAUyG,aAAc,uCAAUC,UAAU,MAE3E,cAAC9C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,cAAhC,SACI,cAACuG,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,oBAAqB1C,MAAO,QAC5C8D,UAAU,mBACV2C,aAAc,IACd9jB,KAAK,SACL44B,KAAM,EACNC,IAAK,EACL9U,UAAU,UAhB4B9E,KAyB3DyZ,GAGLI,EAAuBN,GAAyB,GAEhDO,EAAa,CAACt8B,EAAmBC,KACnC,GAAwC,QAApCjD,EAAiBE,iBAA6BtO,KAAKqW,MAAMq2B,aAEzD,YADA1rC,IAAMC,MAAO,2DAIjB,IAAI0sC,GAAa,EACjBlkC,EAAkBC,qBAAqBkM,SAAShM,IAC5C,MAAM0jC,EAActtC,KAAKqW,MAAO,sBAAqBzM,KAAe5J,KAAKqW,MAAO,sBAAqBzM,KAAewE,EAAiBO,QAEhI2+B,GAAeA,GAAe,EAC/BjsC,QAAQiP,KAAM,yEAAiB1G,kBAAgB0jC,MAE/CK,GAAa,EACbv/B,EAAiB6B,YACb7B,EAAiBC,iBACjB+C,EACAC,EACArR,KAAKqW,MAAMq2B,aACXt+B,EAAiBE,eACjBg/B,EACAl/B,EAAiBQ,cACjBR,EAAiBU,gBACjBV,EAAiBa,UACjBb,EAAiBY,UACjBpF,EACAwE,EAAiBM,UACjBN,EAAiBe,oBACjB6e,oBAGR2f,GACA3sC,YAAM,kFAAkB,CAAE0T,UAAW,IAAMC,KAAM,SAErD3U,KAAK4sC,yBAIHgB,EACF,cAAChY,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACI,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,UACI,cAAC1C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,SACLuC,QACI,IAAM2Z,EAAW9/B,GAAcoE,MAAOnE,GAAeqE,aAIjE,cAAC0jB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAC1B0N,oBAAoB,EACpBtN,KAAK,iCACLuC,QACI,KACI/zB,KAAK4sC,iCAnBG,qBA4B9BiB,EAAsB,CACxB,cAACjY,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACI,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,UACI,cAAC1C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,qBACLuC,QACI,IAAM2Z,EAAW9/B,GAAcoE,MAAOnE,GAAewE,uBAIjE,cAACujB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,qBACLuC,QACI,IAAM2Z,EAAW9/B,GAAcoE,MAAOnE,GAAeuE,uBAlBzC,wBAwBhC,cAACwjB,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACI,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,UACI,cAAC1C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,eACLuC,QACI,IAAM2Z,EAAW9/B,GAAcoE,MAAOnE,GAAesE,cAIjE,cAACyjB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAC1B0N,oBAAoB,EACpBtN,KAAK,iCACLuC,QACI,KACI/zB,KAAK4sC,iCAnBG,yBA4B9BkB,EACF,cAAClY,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACI,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,UACI,cAAC1C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,SACLuC,QACI,IAAM2Z,EAAW9/B,GAAcqE,OAAQpE,GAAeqE,aAIlE,cAAC0jB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAC1B0N,oBAAoB,EACpBtN,KAAK,iCACLuC,QACI,KACI/zB,KAAK4sC,iCAnBG,uBA4B9BmB,EAAqB,CAEvB,cAACnY,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACI,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,UACI,cAAC1C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,qBACLuC,QACI,IAAM2Z,EAAW9/B,GAAcqE,OAAQpE,GAAewE,uBAIlE,cAACujB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,qBACLuC,QACI,IAAM2Z,EAAW9/B,GAAcqE,OAAQpE,GAAeuE,uBAlB1C,uBAwBhC,cAACwjB,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACI,eAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsG,UAAW,SAAlG,UACI,cAAC1C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,GAAIyQ,WAAY,YAC1C/C,oBAAoB,EACpBtN,KAAK,eACLuC,QACI,IAAM2Z,EAAW9/B,GAAcqE,OAAQpE,GAAesE,cAIlE,cAACyjB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,KAC1B0N,oBAAoB,EACpBtN,KAAK,iCACLuC,QACI,KACI/zB,KAAK4sC,iCAnBG,wBA4B9BjE,EAAyC,CAAEnC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAEtI,OACI,eAAC9Q,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQ8Z,YAAa,IAArD,UACI,cAAClW,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMnH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAlD,UACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,kBAAmBgc,YAAa,4BAA5F,UACI,cAACpY,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAASlH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQ6P,WAAY,kBAAxE,SACI,cAACjM,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQwF,WAAY,EAAGyW,cAAe,IAAlG,4BAIJ,cAACrY,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAASlH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAApD,SACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,IAAKY,MAAO,OAAQ0U,aAAc,EAAGwH,UAAW,SAA7G,UACI,cAACzO,EAAA,EAAD,CAAUjH,MAAM,2BACZ7H,mBAAoBviB,EAAiBE,eACrC4K,QACI,CACI,CAAE0a,IAAKjmB,GAAmBY,eAAgBijB,KAAM,gBAChD,CAAEoC,IAAKjmB,GAAmB+D,aAAc8f,KAAM,gBAC9C,CAAEoC,IAAKjmB,GAAmBgE,mBAAoB6f,KAAM,gBACpD,CAAEoC,IAAKjmB,GAAmBiE,cAAe4f,KAAM,sBAC/C,CAAEoC,IAAKjmB,GAAmBkE,cAAe2f,KAAM,sBAC/C,CAAEoC,IAAKjmB,GAAmBmE,0BAA2B0f,KAAM,0DAC3D,CAAEoC,IAAKjmB,GAAmBoE,4BAA6Byf,KAAM,2DAGrEuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiB2B,kBAAkBuvB,EAAO1L,QAItD,cAAC6L,EAAA,EAAD,CAAUjH,MAAM,2BACZ7H,mBAAoBviB,EAAiBI,uBACrC0K,QACI,CACI,CAAE0a,IAAK,OAAQpC,KAAM,gBACrB,CAAEoC,IAAK,cAAepC,KAAM,gBAC5B,CAAEoC,IAAK,OAAQpC,KAAM,gBACrB,CAAEoC,IAAK,OAAQpC,KAAM,gBACrB,CAAEoC,IAAK,cAAepC,KAAM,gBAC5B,CAAEoC,IAAK,SAAUpC,KAAM,iBAG/BuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiB4B,0BAA0BsvB,EAAO1L,QAI9D,cAAC2E,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,qBAChB8D,MAAM,eACN7jB,KAAK,SACL44B,KAAMpvB,EACNic,MAAOhsB,EAAiBK,MACxBsrB,SAAU,CAACC,EAAYC,IAAmB7rB,EAAiBsB,SAASuqB,KAExE,cAAC1B,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,qBAChBoB,UAAU,mBACV2C,aAAe,GAAErqB,EAAiBO,SAClC6pB,MAAM,eACN7jB,KAAK,SACL44B,KAAM,EACNC,IAAK,EACLzT,SAAU,CAACC,EAAYC,IAAmB7rB,EAAiBmB,UAAU0qB,KAEzE,cAACwF,EAAA,EAAD,CAAUjH,MAAM,uCACZtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,MAC7B3Y,mBAAoBviB,EAAiBa,UACrCiK,QACI,CACI,CAAE0a,IAAK5lB,GAAckB,eAAgBsiB,KAAM,gBAC3C,CAAEoC,IAAK5lB,GAAc4E,aAAc4e,KAAM,gBACzC,CAAEoC,IAAK5lB,GAAc0E,SAAU8e,KAAM,gBACrC,CAAEoC,IAAK5lB,GAAc2E,eAAgB6e,KAAM,sBAC3C,CAAEoC,IAAK5lB,GAAc6E,aAAc2e,KAAM,+FACzC,CAAEoC,IAAK5lB,GAAc8E,aAAc0e,KAAM,gGAIjDuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiBqB,aAAa6vB,EAAO1L,QAIjD,cAAC6L,EAAA,EAAD,CAAUjH,MAAM,2BACZtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,MAC7B3Y,mBAAoBviB,EAAiBQ,cACrCsK,QACI,CACI,CAAE0a,IAAK9lB,GAAkBe,OAAQ2iB,KAAM,iCACvC,CAAEoC,IAAK9lB,GAAkBwE,OAAQkf,KAAM,uCACvC,CAAEoC,IAAK9lB,GAAkByE,OAAQif,KAAM,2DAG/CuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiBwB,iBAAiB0vB,EAAO1L,QAKrD,cAAC6L,EAAA,EAAD,CAAUjH,MAAM,iCACZtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,MAC7B3Y,mBAAoBviB,EAAiBU,gBACrCoK,QACI,CACI,CAAE0a,IAAK7lB,GAAoBgB,MAAOyiB,KAAM,gCACxC,CAAEoC,IAAK7lB,GAAoByE,MAAOgf,KAAM,gCACxC,CAAEoC,IAAK7lB,GAAoBgB,MAAOyiB,KAAM,iCAGhDuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiB0B,mBAAmBwvB,EAAO1L,QAKvD,cAAC2E,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,qBAChBoB,UAAU,mBACV2C,aAAe,GAAErqB,EAAiBY,YAClCwpB,MAAM,iCACN7jB,KAAK,SACL44B,KAAM,EACNC,IAAK,EACLzT,SAAU,CAACC,EAAYC,IAAmB7rB,EAAiBoB,aAAayqB,KAE5E,cAACwF,EAAA,EAAD,CAAUjH,MAAM,2BACZtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,MAC7B3Y,mBAAoBviB,EAAiBe,oBACrC+J,QACI,CACI,CAAE0a,IAAK1lB,GAAwBkB,eAAgBoiB,KAAM,gBACrD,CAAEoC,IAAK1lB,GAAwB6E,kCAAmCye,KAAM,gEACxE,CAAEoC,IAAK1lB,GAAwB8E,iCAAkCwe,KAAM,gEACvE,CAAEoC,IAAK1lB,GAAwB+E,uCAAwCue,KAAM,8EAC7E,CAAEoC,IAAK1lB,GAAwBgF,sCAAuCse,KAAM,+EAGpFuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiByB,uBAAuByvB,EAAO1L,QAK3D,cAAC2E,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,qBAChB8D,MAAM,2BACN7jB,KAAK,SACL44B,KAAMpvB,EACNsa,aAAcrqB,EAAiBM,UAC/BqrB,SAAU,CAACC,EAAYC,IAAmB7rB,EAAiBuB,aAAasqB,aAOxF,eAACrE,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAA5D,UACI,cAAC4D,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAASlH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQ6P,WAAY,kBAAxE,SACI,eAACjM,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQwF,WAAY,EAAGyW,cAAe,EAAGnC,YAAa,IAApI,UACI,cAAClW,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAAhC,0BAGA,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAAhC,4BAGA,cAAC4D,EAAA,EAAD,4CAKR,cAACA,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQZ,OAAQ,IAAK0a,YAAa,IAAvE,SACI,cAAClW,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAEH,OAAQ,OAAQY,MAAO,OAAQkc,UAAW,SAA/F,SACKT,MAGT,cAAC7X,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAASlH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAApD,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMnH,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAlD,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEua,YAAa,EAAGpF,aAAc,EAAGrS,SAAU,KAC7DyK,oBAAoB,EACpBtN,KAAK,2BACLuC,QACI,KACI/zB,KAAKgtC,mBAKrB,cAACpX,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAAhC,qBAMJ,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMnH,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAlD,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0U,aAAc,IAArD,SACI,cAAClN,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEsQ,WAAY,UAAWiK,YAAa,EAAGpF,aAAc,EAAGrS,SAAU,KACpFyK,oBAAoB,EACpBtN,KAAK,SACLuC,QACI,KACI/zB,KAAK6sC,qBAAqB,kBAAmBz+B,EAAiBK,YAM9E,cAACmnB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,IAApD,SACI,cAACtS,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEsQ,WAAY,UAAWiK,YAAa,EAAGpF,aAAc,EAAGrS,SAAU,KACpFyK,oBAAoB,EACpBtN,KAAK,SACLuC,QACI,KACI/zB,KAAK6sC,qBAAqB,oBAAqBz+B,EAAiBK,oBAW5F,cAACmnB,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAASlH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAApD,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UAEI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMnH,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAlD,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAAhC,SACI,cAACwH,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEua,YAAa,EAAGpF,aAAc,EAAGrS,SAAU,KAC7DyK,oBAAoB,EACpBtN,KAAK,2BACLuC,QACI,KACI/zB,KAAKitC,mBAKrB,cAACrX,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAAhC,qBAMJ,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMnH,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAlD,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO0U,aAAc,IAArD,SACI,cAAClN,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEsQ,WAAY,UAAWiK,YAAa,EAAGpF,aAAc,EAAGrS,SAAU,KACpFyK,oBAAoB,EACpBtN,KAAK,eACLuC,QACI,KACI/zB,KAAK6sC,qBAAqB,oBAAqBz+B,EAAiBK,YAKhF,cAACmnB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,IAApD,SACI,cAACtS,EAAA,EAAD,CACItI,OAAQ,CAAEK,KAAM,CAAEsQ,WAAY,UAAWiK,YAAa,EAAGpF,aAAc,EAAGrS,SAAU,KACpFyK,oBAAoB,EACpBtN,KAAK,eACLuC,QACI,KACI/zB,KAAK6sC,qBAAqB,mBAAoBz+B,EAAiBK,4BAevG,cAACqpB,EAAA,EAAD,CACIC,OAAQ/3B,KAAKqW,MAAMo2B,qBACnBzU,YAAY,EACZC,UAAW,IAAMj4B,KAAK4sC,wBACtBuB,YACI,CACIC,iBAAkB,OAClBC,kBAAmB,QACnBC,KAAMC,MARlB,SAYI,eAAC3Y,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,EAAGmG,QAAQ,IAAzC,UACI,eAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAASlH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAApD,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEkV,UAAW,SAAU/M,SAAUC,IAAU6U,QAAlE,sCAGA,eAAC5Y,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAA5D,UAEQ5jB,EAAiBC,iBACb,cAACs4B,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,qBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,UACI,+BAAI,sBAAMzD,MAAOkU,EAAb,uCAA4C,+BAAOv6B,EAAiBC,iBAAiB0P,YACzF,+BAAI,sBAAM0W,MAAOkU,EAAb,2BAA0C,+BAAOv6B,EAAiBC,iBAAiBwN,UACvF,+BAAI,sBAAM4Y,MAAOkU,EAAb,uCAA4C,+BAAOv6B,EAAiBC,iBAAiBkC,cACzF,+BAAI,sBAAMkkB,MAAOkU,EAAb,iCAA2C,+BAAOttB,GAAajN,EAAiBC,iBAAiB2P,eACrG,+BAAI,sBAAMyW,MAAOkU,EAAb,uCAA4C,+BAAO/tB,GAAiBxM,EAAiBC,iBAAiB4P,mBAC1G,+BAAI,sBAAMwW,MAAOkU,EAAb,mCAA6C,+BAAOv6B,EAAiBC,iBAAiByP,kBAC1F,+BAAI,sBAAM2W,MAAOkU,EAAb,2BAA0C,+BAAOvgC,GAAagG,EAAiBC,iBAAiBxE,eACpG,+BAAI,sBAAM4qB,MAAOkU,EAAb,uCAA4C,+BAAOv6B,EAAiBC,iBAAiB6P,gBACzF,+BAAI,sBAAMuW,MAAOkU,EAAb,mDAA8C,+BAAOv6B,EAAiBC,iBAAiB8P,eAC3F,+BAAI,sBAAMsW,MAAOkU,EAAb,qEAAiD,+BAAOv6B,EAAiBC,iBAAiBsQ,wCAMlHqoB,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAvBrC,SAyBI,cAAC7O,EAAA,EAAD,CAAW9D,MAAO,CAAEC,MAAO,qBAAuBoB,UAAU,+BAA+B0C,MAAM,2BAAOC,aAAcjyB,EAAekyB,UAAU,MAClI,KAGrBtqB,EAAiBC,iBAAmB,KAChC,cAACkqB,EAAA,EAAD,CAAWC,MAAM,2BAAOC,aAAcjyB,EAAekyB,UAAU,IAEvE,cAAC+G,EAAA,EAAD,CAAUjH,MAAM,2BACZ7H,mBAAoBviB,EAAiBE,eACrC4K,QACI,CACI,CAAE0a,IAAKjmB,GAAmBY,eAAgBijB,KAAM,gBAChD,CAAEoC,IAAKjmB,GAAmB+D,aAAc8f,KAAM,gBAC9C,CAAEoC,IAAKjmB,GAAmBgE,mBAAoB6f,KAAM,iBAI5DuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiB2B,kBAAkBuvB,EAAO1L,QAItD,cAAC2E,EAAA,EAAD,CACI9D,MAAO,CAAEC,MAAO,qBAChB8D,MAAM,2BACN7jB,KAAK,SACL44B,KAAMpvB,EACNqvB,IAAK,EACL/U,aAAe,GAAEz4B,KAAKqW,MAAMq2B,eAC5B3S,SAAU,CAACC,EAAYC,IAAmBA,EAAWj6B,KAAKizB,SAAS,CAAEyZ,aAAczS,IAAc,UAEzG,eAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,oBAAhC,UACI,cAACuG,EAAA,EAAD,CAAW9D,MAAO,CAAEC,MAAO,qBAAuBoB,UAAU,+BAA+B0C,MAAM,2BAAOC,aAAcyU,EAAWxU,UAAU,IAC3I,cAAC+G,EAAA,EAAD,CAAUjH,MAAM,2BACZtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,MAC7B3Y,mBAAoBviB,EAAiBQ,cACrCsK,QACI,CACI,CAAE0a,IAAK9lB,GAAkBe,OAAQ2iB,KAAM,iCACvC,CAAEoC,IAAK9lB,GAAkBwE,OAAQkf,KAAM,uCACvC,CAAEoC,IAAK9lB,GAAkByE,OAAQif,KAAM,2DAG/CuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiBwB,iBAAiB0vB,EAAO1L,QAIrD,cAAC6L,EAAA,EAAD,CAAUjH,MAAM,iCACZtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,MAC7B3Y,mBAAoBviB,EAAiBU,gBACrCoK,QACI,CACI,CAAE0a,IAAK7lB,GAAoBgB,MAAOyiB,KAAM,gCACxC,CAAEoC,IAAK7lB,GAAoByE,MAAOgf,KAAM,gCACxC,CAAEoC,IAAK7lB,GAAoBgB,MAAOyiB,KAAM,iCAGhDuI,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAlxB,EAAiB0B,mBAAmBwvB,EAAO1L,iBAQlEuZ,GAAyB,GACC,oBAA1BntC,KAAKqW,MAAMs2B,WAAmCiB,EAAoB,KACxC,qBAA1B5tC,KAAKqW,MAAMs2B,WAAoCoB,EAAqB,KAC1C,sBAA1B/tC,KAAKqW,MAAMs2B,WAAqCmB,EAAsB,KAC5C,sBAA1B9tC,KAAKqW,MAAMs2B,WAAqCkB,EAAsB,iBA0GhFjc,mBAAW4a,ICz2B1B,MAAO5xB,iBAAD,GAAmBS,aAAnB,GAAiCjT,aAAjC,IAAiDC,MAAIC,SAASC,GAIvDkmC,GAAoBxe,YAAO,sBAAuB,mBAAoB,iBAAlDA,CAAoEC,YAAS,cAAgCC,YAAsB,eAAD,oBAExJ9Z,MAAQ,CAAEnT,SAAU,GAAIkC,YAAa,IAGrCqrB,SAEH,MAAM,iBAAEriB,EAAF,eAAoBoC,GAAmBxQ,KAAKuwB,OAE5C,aAAE5c,GAAiBnD,EAEzB,IAAIk+B,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KAEbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KACbC,EAA6B,KAC7BC,EAAqB,GACrBC,EAAa,KAIb3/B,EAA6B,KAC7B4/B,EAAqB,GACrB/tB,EAA6B,KAC7BguB,EAA6B,KAC7B/tB,EAA6B,KAC7BguB,EAAqB,GACrBlsB,EAA6B,KAC7BmsB,EAAqB,GACrBlsB,EAA4B,KAC5BmsB,EAAoB,GACpB//B,EAA8B,KAC9BC,EAA8B,KAC9BuT,EAAiC,KACjCE,EAAkC,KAClCD,EAA+B,KAC/BusB,EAAuB,GACvBliC,EAAS,KACTkV,GAAc,KACdK,GAAe,KACf4sB,GAAwB,KACxBC,GAAO,KAEX,GAAIp9B,EACA,IACI,IAQIq9B,EARAC,EAAwB,EAC5B,GAAI7iC,EAAiBC,kBAAoBD,EAAiBC,iBAAiB8P,WAAa/P,EAAiBC,iBAAiB8P,UAAY,EAAG,CACrI,MAAM+yB,EAA2BC,YAAyB/iC,EAAiBC,iBAAiB8P,YACxF+yB,GAAyD,IAA7BA,KAC5BD,EAAwBC,GAK5Bv9B,EAAa4Q,gBAAkD,IAAhC5Q,EAAa4Q,gBAAwB5Q,EAAa4Q,iBAAmBtT,OAAOC,UAC3G8/B,EAAoBr9B,EAAa4Q,eAC1B5Q,EAAa0Q,eAAgD,IAA/B1Q,EAAa0Q,eAAuB1Q,EAAa0Q,gBAAkBpT,OAAOC,YAC/G8/B,EAAoBr9B,EAAa0Q,eAGjC1Q,GAAgBA,EAAa3C,UAAY2C,EAAa3C,SAASrK,QAAU,GAAKgN,EAAa3C,SAAS,KAAOC,OAAOC,YAClHw9B,EAAY/6B,EAAa3C,SAAS,GAC9BggC,IACItC,EAAYsC,EACZrC,EAAqB,mBACdD,EAAYsC,IACnBrC,EAAqB,sBAG7BD,EAAYnH,YAAat2B,OAAOy9B,GAAYuC,IAE5Ct9B,GAAgBA,EAAauP,WAAavP,EAAauP,UAAUvc,QAAU,GAAKgN,EAAauP,UAAU,KAAOjS,OAAOC,YACrH09B,EAAaj7B,EAAauP,UAAU,IAGpCvP,GAAgBA,EAAa3C,UAAY2C,EAAa3C,SAASrK,QAAU,GAAKgN,EAAa3C,SAAS,KAAOC,OAAOC,YAClH29B,EAAYl7B,EAAa3C,SAAS,GAC9BggC,IACInC,EAAYmC,EACZlC,EAAqB,mBACdD,EAAYmC,IACnBlC,EAAqB,sBAG7BD,EAAYtH,YAAat2B,OAAO49B,GAAYoC,IAE5Ct9B,GAAgBA,EAAauP,WAAavP,EAAauP,UAAUvc,QAAU,GAAKgN,EAAauP,UAAU,KAAOjS,OAAOC,YACrH69B,EAAap7B,EAAauP,UAAU,IAGpCvP,GAAgBA,EAAa3C,UAAY2C,EAAa3C,SAASrK,QAAU,GAAKgN,EAAa3C,SAAS,KAAOC,OAAOC,YAClH89B,EAAYr7B,EAAa3C,SAAS,GAC9BggC,IACIhC,EAAYgC,EACZ/B,EAAqB,mBACdD,EAAYgC,IACnB/B,EAAqB,sBAG7BD,EAAYzH,YAAat2B,OAAO+9B,GAAYiC,IAE5Ct9B,GAAgBA,EAAauP,WAAavP,EAAauP,UAAUvc,QAAU,GAAKgN,EAAauP,UAAU,KAAOjS,OAAOC,YACrHg+B,EAAav7B,EAAauP,UAAU,IAGpCvP,GAAgBA,EAAa3C,UAAY2C,EAAa3C,SAASrK,QAAU,GAAKgN,EAAa3C,SAAS,KAAOC,OAAOC,YAClHi+B,EAAYx7B,EAAa3C,SAAS,GAC9BggC,IACI7B,EAAY6B,EACZ5B,EAAqB,mBACdD,EAAY6B,IACnB5B,EAAqB,sBAG7BD,EAAY5H,YAAat2B,OAAOk+B,GAAY8B,IAE5Ct9B,GAAgBA,EAAauP,WAAavP,EAAauP,UAAUvc,QAAU,GAAKgN,EAAauP,UAAU,KAAOjS,OAAOC,YACrHm+B,EAAa17B,EAAauP,UAAU,IAGpCvP,GAAgBA,EAAa3C,UAAY2C,EAAa3C,SAASrK,QAAU,GAAKgN,EAAa3C,SAAS,KAAOC,OAAOC,YAClHo+B,EAAY37B,EAAa3C,SAAS,GAC9BggC,IACI1B,EAAY0B,EACZzB,EAAqB,mBACdD,EAAY0B,IACnBzB,EAAqB,sBAG7BD,EAAY/H,YAAat2B,OAAOq+B,GAAY2B,IAE5Ct9B,GAAgBA,EAAauP,WAAavP,EAAauP,UAAUvc,QAAU,GAAKgN,EAAauP,UAAU,KAAOjS,OAAOC,YACrHs+B,EAAa77B,EAAauP,UAAU,IAGpCvP,GAAgBA,EAAa5C,UAAY4C,EAAa5C,SAASpK,QAAU,GAAKgN,EAAa5C,SAAS,KAAOE,OAAOC,YAClHu+B,EAAY97B,EAAa5C,SAAS,GAC9BigC,IACIvB,EAAYuB,EACZtB,EAAqB,mBACdD,EAAYuB,IACnBtB,EAAqB,sBAG7BD,EAAYlI,YAAat2B,OAAOw+B,GAAYwB,IAE5Ct9B,GAAgBA,EAAasP,WAAatP,EAAasP,UAAUtc,QAAU,GAAKgN,EAAasP,UAAU,KAAOhS,OAAOC,YACrHy+B,EAAah8B,EAAasP,UAAU,IAGpCtP,GAAgBA,EAAa5C,UAAY4C,EAAa5C,SAASpK,QAAU,GAAKgN,EAAa5C,SAAS,KAAOE,OAAOC,YAClH0+B,EAAYj8B,EAAa5C,SAAS,GAC9BigC,IACIpB,EAAYoB,EACZnB,EAAqB,mBACdD,EAAYoB,IACnBnB,EAAqB,sBAG7BD,EAAYrI,YAAat2B,OAAO2+B,GAAYqB,IAE5Ct9B,GAAgBA,EAAasP,WAAatP,EAAasP,UAAUtc,QAAU,GAAKgN,EAAasP,UAAU,KAAOhS,OAAOC,YACrH4+B,EAAan8B,EAAasP,UAAU,IAGpCtP,GAAgBA,EAAa5C,UAAY4C,EAAa5C,SAASpK,QAAU,GAAKgN,EAAa5C,SAAS,KAAOE,OAAOC,YAClH6+B,EAAYp8B,EAAa5C,SAAS,GAC9BigC,IACIjB,EAAYiB,EACZhB,EAAqB,mBACdD,EAAYiB,IACnBhB,EAAqB,sBAG7BD,EAAYxI,YAAat2B,OAAO8+B,GAAYkB,IAE5Ct9B,GAAgBA,EAAasP,WAAatP,EAAasP,UAAUtc,QAAU,GAAKgN,EAAasP,UAAU,KAAOhS,OAAOC,YACrH++B,EAAat8B,EAAasP,UAAU,IAGpCtP,GAAgBA,EAAa5C,UAAY4C,EAAa5C,SAASpK,QAAU,GAAKgN,EAAa5C,SAAS,KAAOE,OAAOC,YAClHg/B,EAAYv8B,EAAa5C,SAAS,GAC9BigC,IACId,EAAYc,EACZb,EAAqB,mBACdD,EAAYc,IACnBb,EAAqB,sBAG7BD,EAAY3I,YAAat2B,OAAOi/B,GAAYe,IAE5Ct9B,GAAgBA,EAAasP,WAAatP,EAAasP,UAAUtc,QAAU,GAAKgN,EAAasP,UAAU,KAAOhS,OAAOC,YACrHk/B,EAAaz8B,EAAasP,UAAU,IAGpCtP,GAAgBA,EAAa5C,UAAY4C,EAAa5C,SAASpK,QAAU,GAAKgN,EAAa5C,SAAS,KAAOE,OAAOC,YAClHm/B,EAAY18B,EAAa5C,SAAS,GAC9BigC,IACIX,EAAYW,EACZV,EAAqB,mBACdD,EAAYW,IACnBV,EAAqB,sBAG7BD,EAAY9I,YAAat2B,OAAOo/B,GAAYY,IAE5Ct9B,GAAgBA,EAAasP,WAAatP,EAAasP,UAAUtc,QAAU,GAAKgN,EAAasP,UAAU,KAAOhS,OAAOC,YACrHq/B,EAAa58B,EAAasP,UAAU,IAKpCmuB,YAAqBz9B,EAAa/C,aAClCA,EAAY+C,EAAa/C,UACrBogC,IACIpgC,EAAYogC,EACZR,EAAqB,mBACd5/B,EAAYogC,IACnBR,EAAqB,qBAEzB/tB,EAAYxR,OAAOL,GAAaogC,EAChCP,EAAYlJ,YAAa9kB,EAAYuuB,EAAoB,IAAK,GAC9DvuB,EAAY8kB,YAAat2B,OAAOwR,GAAYwuB,IAEhDrgC,EAAY22B,YAAat2B,OAAOL,GAAYqgC,IAG5CG,YAAqBz9B,EAAa+O,aAClCA,EAAY/O,EAAa+O,UACrBsuB,IACItuB,EAAYsuB,EACZN,EAAqB,mBACdhuB,EAAYsuB,IACnBN,EAAqB,sBAG7BhuB,EAAY6kB,YAAat2B,OAAOyR,GAAYuuB,IAG5CG,YAAqBz9B,EAAa6Q,aAClCA,EAAY7Q,EAAa6Q,UACrBwsB,IACIxsB,EAAYwsB,EACZL,EAAqB,mBACdnsB,EAAYwsB,IACnBL,EAAqB,sBAG7BnsB,EAAY+iB,YAAat2B,OAAOuT,GAAYysB,IAG5CG,YAAqBz9B,EAAa8Q,YAClCA,EAAW9Q,EAAa8Q,SACpBusB,IACIvsB,EAAWusB,EACXJ,EAAoB,mBACbnsB,EAAWusB,IAClBJ,EAAoB,sBAG5BnsB,EAAW8iB,YAAat2B,OAAOwT,GAAWwsB,IAG1CG,YAAqBz9B,EAAa2Q,eAClCA,EAAc3Q,EAAa2Q,YACvB0sB,IACI1sB,EAAc0sB,EACdH,EAAuB,mBAChBvsB,EAAc0sB,IACrBH,EAAuB,sBAG/BvsB,EAAcijB,YAAat2B,OAAOqT,GAAc2sB,IAGhDG,YAAqBz9B,EAAa9C,cAClCA,EAAa8C,EAAa9C,WAC1BA,EAAa02B,YAAat2B,OAAOJ,GAAaogC,IAG9CG,YAAqBz9B,EAAa7C,cAClCA,EAAa6C,EAAa7C,WAC1BA,EAAay2B,YAAat2B,OAAOH,GAAamgC,IAG9CG,YAAqBz9B,EAAa0Q,iBAClCA,EAAgB1Q,EAAa0Q,cAC7BA,EAAgBkjB,YAAat2B,OAAOoT,GAAgB4sB,IAGpDG,YAAqBz9B,EAAa4Q,kBAClCA,EAAiB5Q,EAAa4Q,eAC9BA,EAAiBgjB,YAAat2B,OAAOsT,GAAiB0sB,IAGtDG,YAAqBz9B,EAAahF,UAClCA,EAASgF,EAAahF,QAEtByiC,YAAqBz9B,EAAakQ,eAClCA,GAAclQ,EAAakQ,aAI3ButB,YAAqBz9B,EAAauQ,gBAClCA,GAAevQ,EAAauQ,cAG5BktB,YAAqBz9B,EAAauQ,eAC/BktB,YAAqBz9B,EAAayQ,mBACrC0sB,GAAyB,IAAEn9B,EAAauQ,aAAevQ,EAAayQ,kBAGpEskB,oBAAS/0B,EAAa0P,mBACtB0tB,GAAOM,YAAgB19B,EAAa0P,gBAAiB,iBAG3D,MAAOpiB,IACLI,QAAQJ,MAAMA,IAKtB,MAAM,iBAAEoN,IAAqBD,GAGvB,gBAAEi4B,IAAoBrmC,KAAKuwB,MAGjC,OACI,cAACqF,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAEH,OAAQiV,GAAiBxE,WAAY,gBAAiB7P,MAAO,OAAQwF,WAAY,EAAGkC,SAAUC,IAAU8N,OAAQyG,UAAW,SAAhL,UACI,cAACtY,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,sBAA3D,SACI,cAAC1Q,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQyU,UAAW,SAAU/M,SAAUC,IAAU2X,SAAhH,SACKjjC,GAAmBA,GAAiBwN,KAAO,4CAIxD,cAAC+Z,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,sBAA3D,SACI,cAAC1Q,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQyU,UAAW,SAAU/M,SAAUC,IAAU2X,SAAhH,SACI,cAAC3K,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,KACb,MAAM4B,EAAyC,CAAEnC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GACtI,OAAIr4B,GAEI,8BACI,qBAAIomB,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,UACI,+BAAI,sBAAMzD,MAAOkU,EAAb,uCAA4C,+BAAOt6B,GAAiB0P,YACxE,+BAAI,sBAAM0W,MAAOkU,EAAb,2BAA0C,+BAAOt6B,GAAiBwN,UACtE,+BAAI,sBAAM4Y,MAAOkU,EAAb,uCAA4C,+BAAOt6B,GAAiBkC,cACxE,+BAAI,sBAAMkkB,MAAOkU,EAAb,iCAA2C,+BAAOttB,GAAahN,GAAiB2P,eACpF,+BAAI,sBAAMyW,MAAOkU,EAAb,uCAA4C,+BAAO/tB,GAAiBvM,GAAiB4P,mBACzF,+BAAI,sBAAMwW,MAAOkU,EAAb,mCAA6C,+BAAOt6B,GAAiByP,kBACzE,+BAAI,sBAAM2W,MAAOkU,EAAb,2BAA0C,+BAAOvgC,GAAaiG,GAAiBxE,eACnF,+BAAI,sBAAM4qB,MAAOkU,EAAb,uCAA4C,+BAAOt6B,GAAiB6P,gBACxE,+BAAI,sBAAMuW,MAAOkU,EAAb,mDAA8C,+BAAOt6B,GAAiB8P,eAC1E,+BAAI,sBAAMsW,MAAOkU,EAAb,qEAAiD,+BAAOt6B,GAAiBsQ,uCAMrF,mEAKhBqoB,MAAOC,KAAasK,KACpBrK,gBAAiBC,KAAgBC,aA9BrC,SAgCI,uBAAM3S,MAAO,CAAEoU,OAAQ,QAAvB,cAAmCx6B,GAAmBA,GAAiB0P,OAAS,gBAKhG,cAAC6X,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWyZ,EAAoBre,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQ4I,IAGR,cAAC1Z,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQ8I,SAKhB,cAAC5Z,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWsZ,EAAoBle,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQyI,IAGR,cAACvZ,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQ2I,SAKhB,cAACzZ,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWmZ,EAAoB/d,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQsI,IAGR,cAACpZ,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQwI,SAKhB,cAACtZ,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,sBAA3D,SACI,eAAC1Q,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWgZ,EAAoB5d,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQmI,IAGR,cAACjZ,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQqI,SAKhB,cAACnZ,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,sBAA3D,SACI,eAAC1Q,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,IAAvE,0BAGA,cAAClW,EAAA,EAAD,CAAOE,UAAW6Y,EAAoBzd,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,EAAGhN,SAAUC,IAAU6U,QAA/H,SAEQE,IAGR,cAAC9Y,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,EAAGhN,SAAUC,IAAU6U,QAA/H,SAEQI,SAKhB,cAAChZ,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,sBAA3D,SACI,eAAC1Q,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,IAAvE,0BAGA,cAAClW,EAAA,EAAD,CAAOE,UAAW4Z,EAAoBxe,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,EAAGhN,SAAUC,IAAU6U,QAA/H,SAEQiB,IAGR,cAAC7Z,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,EAAGhN,SAAUC,IAAU6U,QAA/H,SAEQmB,SAKhB,cAAC/Z,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAW+Z,EAAoB3e,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQkJ,IAGR,cAACha,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQoJ,SAKhB,cAACla,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWka,EAAoB9e,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQqJ,IAGR,cAACna,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQuJ,SAKhB,cAACra,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWqa,EAAoBjf,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQwJ,IAGR,cAACta,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQ0J,SAKhB,cAACxa,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,sBAA3D,SACI,eAAC1Q,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAWwa,EAAoBpf,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQ2J,IAGR,cAACza,EAAA,EAAD,CAAOE,UAAU,qBAAqB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SAEQ6J,SAMhB,cAAC3a,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAW0a,EAAoBtf,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SACK91B,IAEL,cAACglB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,eAAC/R,EAAA,EAAD,CAAOE,UAAW0a,EAAoBtf,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,UACK+J,EADL,YAKR,cAAC7a,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAU,mBAAmB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAtG,SACK7iB,KAEL,cAAC+R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAzE,SACKjkB,SAIb,cAACmT,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAU,mBAAmB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAtG,SACK/3B,IAEL,cAACinB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAOE,UAAW4a,EAAoBxf,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SACKhkB,SAIb,cAACkT,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAU,mBAAmB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAtG,SACKxiB,KAEL,cAAC0R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAOE,UAAW6a,EAAoBzf,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAxG,SACKliB,SAIb,cAACoR,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAOE,UAAU,mBAAmB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAtG,SACKoK,KAEL,cAAClb,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAOE,UAAW8a,EAAmB1f,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAvG,SACKjiB,SAIb,cAACmR,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAzE,SACKriB,IAEL,cAACuR,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAOE,UAAU,mBAAmB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAtG,SACK71B,SAIb,cAAC+kB,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,0BAGA,cAACkB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAzE,SACKniB,IAEL,cAACqR,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAOE,UAAU,oBAAoB5E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAvG,SACK51B,SAIb,cAAC8kB,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,SAAjF,gCAGA,cAACkB,EAAA,EAAD,CAAOE,UAAW+a,EAAsB3f,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAA1G,SACKpiB,IAEL,cAACsR,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,OAAQqF,YAAa,EAAGpX,MAAO,OAAQiT,WAAY,sBAArG,0BAGA,cAAC/R,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAOyU,UAAW,QAASC,aAAc,IAAzE,SACKqK,uBAe1Bnf,mBAAW6c,ICzsBnB,MAAM+C,GAAgBvhB,YAAO,sBAAPA,CAA8BC,YAAS,cAA4BC,YAAsB,eAAD,oBAE5G9Z,MAAQ,CACbuc,iBAAkBxuB,OAAOyuB,WACzBC,kBAAmB1uB,OAAO2uB,aAJuF,KAmBnHC,OAAS,KACPhzB,KAAKizB,SAAS,CAAE,iBAAoB7uB,OAAOyuB,WAAY,kBAAqBzuB,OAAO2uB,eAbrFiB,oBACE,MAAM,oBAAE7wB,GAAwBnD,KAAKuwB,MACrCptB,EAAoBY,mBACpB/D,KAAKgzB,SACL5uB,OAAO6vB,iBAAiB,SAAUj0B,KAAKgzB,QAIzCkB,uBACE9vB,OAAO+vB,oBAAoB,SAAUn0B,KAAKgzB,QAOrCvC,SAEL,OACE,eAACmF,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACE,eAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEsQ,WAAY,UAAW7P,MAAO,SAAvD,UACE,cAAC4D,EAAA,EAAMuC,KAAP,UACE,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,4BAApG,UACE,cAAC1Q,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,QAASgc,YAAa,+BAAtD,SACE,cAAC,GAAD,CAAmB3H,gBAAiB,QAEtC,cAACzQ,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,uBAAhC,SACE,cAAC,GAAD,CAAgBqU,gBAAiB,aAIvC,cAACzQ,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,eAACf,EAAA,EAAD,CACEC,OAAQ,CAACC,eAAe,CAACC,OAAO,IAAIC,KAAK,CAACD,OAAO,IAAIE,YAAY,CAACF,OAAO,IAAIG,KAAK,CAACH,OAAO,IAAII,KAAK,CAACC,WAAW,KADjH,UAGE,cAACC,EAAA,EAAD,CACEC,WAAW,eADb,SAGE,cAAC,GAAD,CAAkB0U,gBAAiBrmC,KAAKqW,MAAMyc,kBAAoB,GAAK,QAEzE,cAACpB,EAAA,EAAD,CAAWC,WAAW,eAAtB,SACE,cAAC,GAAD,CAAkB0U,gBAAiBrmC,KAAKqW,MAAMyc,kBAAoB,GAAK,oBAOnF,cAAC8C,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,cAAC4D,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAEsQ,WAAY,UAAW7P,MAAO,SAAvD,SACE,eAACf,EAAA,EAAD,CACEC,OAAQ,CAACC,eAAe,CAACC,OAAO,IAAIC,KAAK,CAACD,OAAO,IAAIE,YAAY,CAACF,OAAO,IAAIG,KAAK,CAACH,OAAO,IAAII,KAAK,CAACC,WAAW,KADjH,UAGE,cAACC,EAAA,EAAD,CACEC,WAAW,2BADb,SAGE,eAACiE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACE,cAAC4D,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC,GAAD,CAAoBqU,iBAAkBrmC,KAAKqW,MAAMyc,kBAAoB,IAAM,QAG/E,cAAC8C,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,cAAC,GAAD,CAAqBqU,iBAAkBrmC,KAAKqW,MAAMyc,kBAAoB,IAAM,eAMtF,cAACpB,EAAA,EAAD,CAAWC,WAAW,2BAAtB,SACE,cAACiE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,cAAC4D,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,cAAC,GAAD,CAA6BqU,gBAAiBrmC,KAAKqW,MAAMyc,kBAAoB,eAMvF,cAACpB,EAAA,EAAD,CAAWC,WAAW,yCAAtB,SACE,cAACiE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,cAAC4D,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACE,cAAC,GAAD,CAAqBqU,gBAAiBrmC,KAAKqW,MAAMyc,kBAAoB,iCAoBlFlB,mBAAW4f,I,OC5HnB,MAAMC,GAAYxhB,YAAO,eAAPA,CAAuBC,YAAS,cAAwBC,YAAsB,eAAD,oBAE7F9Z,MAAQ,CAAE+Z,YAAa,YAFsE,KA2BpGC,YAAeC,IACb,MAAM,QAAEna,GAAYnW,KAAKuwB,MACtBD,GACDna,EAAQC,KAAKka,EAAKC,MAAMC,UA1BrBC,SACL,MAAM,OAAEC,EAAF,SAAUxa,GAAalW,KAAKuwB,MAElC,IAAII,EAAqB,GAOzB,OANAD,EAAOE,KAAI,CAACC,EAAYnqB,KAClBwP,EAAS4a,SAASC,WAAWF,EAAMG,QACrCL,EAAqBE,EAAMG,SAK7B,cAACC,EAAA,EAAD,CAAON,mBAAoBA,EAAoBN,YAAarwB,KAAKqwB,YAAaoE,MAAO,CAAErD,OAAQ,QAC7FF,OAAQ,CAACC,eAAe,CAACC,OAAO,IAAIC,KAAK,CAACD,OAAO,IAAIE,YAAY,CAACF,OAAO,IAAIG,KAAK,CAACH,OAAO,IAAII,KAAK,CAACC,WAAW,KADjH,SAGGf,EAAOE,KAAI,CAACC,EAAYnqB,IACvB,cAACgrB,EAAA,EAAD,CAA8ClB,QAASK,EAAMG,KAAMW,WAAYd,EAAMhV,KAAM4Y,MAAO,CAAErD,OAAQ,qBAA5G,SACE,cAAC,GAAD,IAAwBP,KADT,gBAAeA,EAAMhV,gBAiBjC+V,mBAAW6f,ICzCnB,MAAMC,GAAsBzhB,YAAO,sBAAPA,CAA8BC,YAAS,cAAkCC,YAAsB,eAAD,oBAExH9Z,MAAQ,CAAEnT,SAAU,GAAIkC,YAAa,IAErCqrB,SACL,OACE,yDAMSmB,YAAW8f,I,OCPnB,MAAMC,GAAkB1hB,YAAO,eAAPA,CAAuBC,YAAS,cAA8BC,YAAsB,eAAD,oBAEzG9Z,MAAQ,CAAE+Z,YAAa,YAFkF,KA4BhHC,YAAeC,IACb,MAAM,QAAEna,GAAYnW,KAAKuwB,MACtBD,GACDna,EAAQC,KAAKka,EAAKC,MAAMC,UA3BrBC,SACL,MAAM,OAAEC,EAAF,SAAUxa,GAAalW,KAAKuwB,MAElC,IAAII,EAAqB,GAOzB,OANAD,EAAOE,KAAI,CAACC,EAAYnqB,KAClBwP,EAAS4a,SAASC,WAAWF,EAAMG,QACrCL,EAAqBE,EAAMG,SAK7B,cAACC,EAAA,EAAD,CACEN,mBAAoBA,EAAoBN,YAAarwB,KAAKqwB,YAC1Da,OAAQ,CAACC,eAAe,CAACC,OAAO,IAAIC,KAAK,CAACD,OAAO,IAAIE,YAAY,CAACF,OAAO,IAAIG,KAAK,CAACH,OAAO,IAAII,KAAK,CAACC,WAAW,KAFjH,SAIGf,EAAOE,KAAI,CAACC,EAAYnqB,IACvB,cAACgrB,EAAA,EAAD,CAA8ClB,QAASK,EAAMG,KAAMW,WAAYd,EAAMhV,KAArF,SACE,cAAC,GAAD,IAAwBgV,KADT,gBAAeA,EAAMhV,gBAiBjC+V,YAAW+f,IC7B1B,MAAM9f,GAAoC,CACxCC,OAAQ,CAAEC,YAAa,IACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAGrB0I,GAAoC,CACxCnJ,KAAM,CACJmI,SAAU,OACVtI,OAAQ,KAICwgB,GAAW3hB,YAAO,sBAAuB,gBAA9BA,CAA+CC,YAAS,cAAuBC,YAAsB,eAAD,oBAE1H9Z,MAAQ,CACNw7B,4BAA4B,EAC5BC,oCAAoC,EACpCC,+BAAgC,KAChCC,wBAAyB,GACzBC,oBAAqB,KACrBrf,iBAAkBxuB,OAAOyuB,WACzBC,kBAAmB1uB,OAAO2uB,YAC1Bmf,mBAAoB,GAEpBC,gCAAiC,GACjCC,8BAA+B,GAC/BC,iCAAkC,GAClCC,+BAAgC,GAChCC,qCAAsC,GACtCC,mCAAoC,GACpCC,yCAA0C,GAC1CC,uCAAwC,IAnBgF,KAyBlHC,kBAA+B,IAAI5M,KAAU,CACnDC,mBAAoB,KAClB,MAAM4M,EAAiB5yC,KAAK2yC,kBAAkBE,mBAC9C,GAAuB,IAAnBD,EACoC,KAAlC5yC,KAAKqW,MAAM67B,oBACblyC,KAAKizB,SAAS,CAAE,mBAAsB,UAGnC,GAAI2f,EAAiB,EAAG,CAC7B,MAAM98B,EAAgB9V,KAAK2yC,kBAAkBxM,eAAe,GACxDnmC,KAAKqW,MAAM67B,qBAAuBp8B,EAASvS,YAC7CvD,KAAKizB,SAAS,CAAE,mBAAsBnd,EAASvS,iBApCmE,KAkhDlHuvC,mCAAqC,CAACvvC,EAAoB7B,KAChE1B,KAAKizB,SAAS,CAAE8e,+BAAgCxuC,EAAYyuC,wBAAyBtwC,EAAaowC,oCAAoC,KAnhDd,KAshDlHiB,oCAAsC,KAC5C/yC,KAAKizB,SAAS,CAAE6e,oCAAoC,EAAOC,+BAAgC,KAAMC,wBAAyB,MAvhDF,KA0hDlHgB,sCAAwC,KAC9C,MAAMzvC,EAAavD,KAAKqW,MAAM07B,+BACxBkB,EAAsBjzC,KAAKqW,MAAM27B,wBACvC,GAAIhyC,KAAKuwB,MAAMnb,cAAcE,YAAY3L,IAAIpG,GAAa,CACxD,MAAMuS,EAAW9V,KAAKuwB,MAAMnb,cAAcE,YAAYlF,IAAI7M,GAC1DuS,EAASpU,YAAcuxC,EACvBjzC,KAAKuwB,MAAMnb,cAAcI,qBAAqBM,QAE9C9U,YAAM,6EAAkB,CAAE2T,KAAM,UAGlC3U,KAAK+yC,uCA3/CP/e,oBACEh0B,KAAKuwB,MAAMnb,cAAcG,kBACzBvV,KAAKgzB,SACL5uB,OAAO6vB,iBAAiB,UAAU,KAAQj0B,KAAKgzB,YAGjDkB,uBACE9vB,OAAO+vB,oBAAoB,SAAUn0B,KAAKgzB,QAI5CvC,SAME,MAAMyiB,EAAgBlzC,KAAKuwB,MAAMnb,cAAcC,aAAasY,QAE5D,IAAIwlB,GAAqB,EACzB,MAAMC,EAAwC,GACxCC,EAAsC,GAE5C,IAAIC,GAAsB,EAC1B,MAAMC,EAAyC,GACzCC,EAAuC,GAE7C,IAAIC,GAAuB,EAC3B,MAAMC,EAA6C,GAC7CC,EAA2C,GAEjD,IAAIC,GAA2B,EAC/B,MAAMC,EAAiD,GACjDC,EAA+C,IAG/C,cAAE1+B,GAAkBpV,KAAKuwB,MAE/B,IAAIwjB,EAAwB,KAExB/zC,KAAKqW,MAAM67B,qBAGT98B,EAAcE,YAAY3L,IAAI3J,KAAKqW,MAAM67B,qBAG3C6B,EAAmB3+B,EAAcE,YAAYlF,IAAIpQ,KAAKqW,MAAM67B,oBAGxD6B,EAAiBZ,qBACnBA,GAAqB,GAGnBY,EAAiBC,+BACnBD,EAAiBC,8BAA8Bp+B,SAASC,IACtDu9B,EAA+Bh9B,KAAK,CAClC,UAAaP,EACb,WAAc7V,KAAKqW,MAAM67B,wBAK3B6B,EAAiBE,6BACnBF,EAAiBE,4BAA4Br+B,SAASC,IACpDw9B,EAA6Bj9B,KAAK,CAChC,UAAaP,EACb,WAAc7V,KAAKqW,MAAM67B,wBAM3B6B,EAAiBT,sBACnBA,GAAsB,GAGpBS,EAAiBG,gCACnBH,EAAiBG,+BAA+Bt+B,SAASC,IACvD09B,EAAgCn9B,KAAK,CACnC,UAAaP,EACb,WAAc7V,KAAKqW,MAAM67B,wBAM3B6B,EAAiBI,8BACnBJ,EAAiBI,6BAA6Bv+B,SAASC,IACrD29B,EAA8Bp9B,KAAK,CACjC,UAAaP,EACb,WAAc7V,KAAKqW,MAAM67B,wBAO3B6B,EAAiBN,uBACnBA,GAAuB,GAGrBM,EAAiBK,oCACnBL,EAAiBK,mCAAmCx+B,SAASC,IAC3D69B,EAAoCt9B,KAAK,CACvC,cAAiBP,EACjB,WAAc7V,KAAKqW,MAAM67B,wBAK3B6B,EAAiBM,kCACnBN,EAAiBM,iCAAiCz+B,SAASC,IACzD89B,EAAkCv9B,KAAK,CACrC,cAAiBP,EACjB,WAAc7V,KAAKqW,MAAM67B,wBAM3B6B,EAAiBH,2BACnBA,GAA2B,GAGzBG,EAAiBO,wCACnBP,EAAiBO,uCAAuC1+B,SAASC,IAC/Dg+B,EAAwCz9B,KAAK,CAC3C,cAAiBP,EACjB,WAAc7V,KAAKqW,MAAM67B,wBAK3B6B,EAAiBQ,sCACnBR,EAAiBQ,qCAAqC3+B,SAASC,IAC7Di+B,EAAsC19B,KAAK,CACzC,cAAiBP,EACjB,WAAc7V,KAAKqW,MAAM67B,yBAK/BlyC,KAAKizB,SAAS,CAAE,uBAA0B,MAM9C,MAKMuhB,EAAyC,CAC7C1iB,OAAQ,CAAEC,YAAa,GACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAOhyB,KAAKqW,MAAMuc,iBAAmB,IAAKxB,OAAQpxB,KAAKqW,MAAMyc,kBAAoB,GAAIob,UAAW,UAG9GuG,EAA6B,CACjC,CACE7gB,IAAK,aACL/X,KAAM,KACNwY,SAAU,IACVgF,SAAU,IACV/E,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK/sB,gBAIjB,CACDqwB,IAAK,WACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAKrtB,cAIjB,CACD2wB,IAAK,cACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK5uB,iBAKpB,CACEkyB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,cAAC0E,EAAA,EAAD,CACEC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACTC,MAAO,CACL,CACE3B,IAAK,SACLpC,KAAM,eACNkH,SAAUpI,EAAKokB,iBACf7gB,UAAW,CACTC,SAAU,cAEZC,QAAS,KACP/zB,KAAK20C,yBAAyBrkB,KAIlC,CACEsD,IAAK,oBACLpC,KAAM,2BACNqC,UAAW,CACTC,SAAU,YAEZC,QAAS,KACP/zB,KAAK8yC,mCAAmCxiB,EAAK/sB,WAAY+sB,EAAK5uB,qBAW1EkzC,EAAkD,CACtD,CACEhhB,IAAK,YACL/X,KAAM,iBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK1mB,eAKpB,CACEgqB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBC,gCACnBa,EAAS,IAAIrqC,IAAIupC,EAAiBC,gCAEpCa,EAAOC,OAAOxkB,EAAK1mB,WACnBmqC,EAAiBC,8BAAgC,IAAIa,GACrD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJogC,EAAgD,CACpD,CACEnhB,IAAK,YACL/X,KAAM,iBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK1mB,eAKpB,CACEgqB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBE,8BACnBY,EAAS,IAAIrqC,IAAIupC,EAAiBE,8BAEpCY,EAAOC,OAAOxkB,EAAK1mB,WACnBmqC,EAAiBE,4BAA8B,IAAIY,GACnD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJqgC,EAAmD,CACvD,CACEphB,IAAK,YACL/X,KAAM,iBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK1mB,eAKpB,CACEgqB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBG,iCACnBW,EAAS,IAAIrqC,IAAIupC,EAAiBG,iCAEpCW,EAAOC,OAAOxkB,EAAK1mB,WACnBmqC,EAAiBG,+BAAiC,IAAIW,GACtD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJsgC,EAAiD,CACrD,CACErhB,IAAK,YACL/X,KAAM,iBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK1mB,eAKpB,CACEgqB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBI,+BACnBU,EAAS,IAAIrqC,IAAIupC,EAAiBI,+BAEpCU,EAAOC,OAAOxkB,EAAK1mB,WACnBmqC,EAAiBI,6BAA+B,IAAIU,GACpD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJugC,EAAuD,CAC3D,CACEthB,IAAK,gBACL/X,KAAM,uCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK9pB,mBAKpB,CACEotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBK,qCACnBS,EAAS,IAAIrqC,IAAIupC,EAAiBK,qCAEpCS,EAAOC,OAAOxkB,EAAK9pB,eACnButC,EAAiBK,mCAAqC,IAAIS,GAC1D70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJwgC,EAAqD,CACzD,CACEvhB,IAAK,gBACL/X,KAAM,uCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK9pB,mBAKpB,CACEotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBM,mCACnBQ,EAAS,IAAIrqC,IAAIupC,EAAiBM,mCAEpCQ,EAAOC,OAAOxkB,EAAK9pB,eACnButC,EAAiBM,iCAAmC,IAAIQ,GACxD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA4BJygC,EAA2D,CAC/D,CACExhB,IAAK,gBACL/X,KAAM,uCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK9pB,mBAKpB,CACEotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBO,yCACnBO,EAAS,IAAIrqC,IAAIupC,EAAiBO,yCAEpCO,EAAOC,OAAOxkB,EAAK9pB,eACnButC,EAAiBO,uCAAyC,IAAIO,GAC9D70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJ0gC,EAAyD,CAC7D,CACEzhB,IAAK,gBACL/X,KAAM,uCACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEP,8BACE,+BAAOA,EAAK9pB,mBAKpB,CACEotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEP,+BACE,cAACuO,EAAA,EAAD,CACEC,oBAAoB,EACpBC,SAAS,EACT7N,OAAQwJ,GACR3G,QAAS,KACP,GAAIggB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBQ,uCACnBM,EAAS,IAAIrqC,IAAIupC,EAAiBQ,uCAEpCM,EAAOC,OAAOxkB,EAAK9pB,eACnButC,EAAiBQ,qCAAuC,IAAIM,GAC5D70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,QAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,WAd9B,8BA0BJ6gB,EAAaC,YAAe,CAChC6f,mBAAoB,CAClBlkB,OAAQpxB,KAAKqW,MAAMyc,kBAAoB,GACvC5pB,SAAU,WACVysB,UAAW,WAEb4f,kBAAmB,CACjBnkB,OAAQ,IACRloB,SAAU,WACVysB,UAAW,UACX2Q,aAAc,uBAOlB,OAEE,eAAC1Q,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAAMhH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAzE,UACE,cAAC4D,EAAA,EAAMuC,KAAP,UACE,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACE,cAAC4D,EAAA,EAAD,CAphBN9D,OAAQ,CAAEC,YAAa,GACvBb,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAKgc,YAAa,sBAmhBrC,SACE,cAACpY,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMnH,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAlD,SACE,eAAC4D,EAAA,EAAD,CAAa9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAKwF,WAAY,IAAnF,UACE,cAACoQ,GAAA,EAAD,CAAkBC,UAAW7nC,KAAK2yC,kBAAmB6C,WAAW,EAAhE,SACE,qBAAK1f,UAAWN,EAAW8f,mBAA3B,SACE,cAACvf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAO2d,EACP9c,SAAS,EACThC,QAASqgB,EACTpe,cAAeC,IAAcmf,OAC7Bjf,OAAO,aACPqR,UAAW7nC,KAAK2yC,kBAChBlc,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,aAO7B,cAAC2B,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,eACLuC,QAAS,KACP/zB,KAAK0V,6BAOjB,eAACkgB,EAAA,EAAD,IAAW4e,EAAX,UACE,cAAC5e,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,KAD/E,SAIG6b,EACC,gCAAK,sBAAMtf,MAAO,CAAEiF,SAAUC,IAAU+b,MAAOlP,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAASC,aAAc,GAAhH,oCAAmI,sBAAMjS,MAAO,CAAEiF,SAAUC,IAAU2X,QAAnC,SAA+CyC,EAAiBxwC,gBACtM,gCAAK,sBAAMkxB,MAAO,CAAEiF,SAAUC,IAAU+b,MAAOlP,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAASC,aAAc,GAAhH,oCAAmI,sBAAMjS,MAAO,CAAEiF,SAAUC,IAAUa,QAAnC,2BAKlJ,cAAC5E,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,KAD/E,SAIG6b,EACC,gCAAK,sBAAMtf,MAAO,CAAEiF,SAAUC,IAAU+b,MAAOlP,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAASC,aAAc,GAAhH,kCAAiI,sBAAMjS,MAAO,CAAEiF,SAAUC,IAAU2X,QAAnC,SAA+CyC,EAAiB9wC,cACpM,gCAAK,sBAAMwxB,MAAO,CAAEiF,SAAUC,IAAU+b,MAAOlP,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAASC,aAAc,GAAhH,kCAAiI,sBAAMjS,MAAO,CAAEiF,SAAUC,IAAUa,QAAnC,2BAKhJ,cAAC5E,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,KAD/E,SAGG6b,EACC,gCAAK,sBAAMtf,MAAO,CAAEiF,SAAUC,IAAU+b,MAAOlP,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAASC,aAAc,GAAhH,4BAAgI,sBAAMjS,MAAO,CAAEiF,SAAUC,IAAU6U,OAAnC,SAA8CuF,EAAiBryC,iBAClM,gCAAK,sBAAM+yB,MAAO,CAAEiF,SAAUC,IAAU+b,MAAOlP,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAASC,aAAc,GAAhH,4BAAgI,sBAAMjS,MAAO,CAAEiF,SAAUC,IAAU6U,OAAnC,2BAK/I,cAAC5Y,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,KAD/E,sDAOJ,cAACtC,EAAA,EAAMuC,KAAP,UACE,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK8Z,YAAa,KAAlD,SACE,cAAClK,GAAA,EAAD,CACEpJ,MAAM,mDACNtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAC7BvK,QAASoU,EACTpZ,SAAU,CAACC,EAAY+E,KACjBgV,GACFA,EAAiBZ,mBAAqBpU,EACtC/+B,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,IAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,eAKhC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAO6d,EACPhd,SAAS,EACThC,QAASwgB,EACTve,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,iBACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAM87B,gCACzBpY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,gCAAmCgH,MAElG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAM87B,iCAAkF,KAA/CnyC,KAAKqW,MAAM87B,gCAC3D,GAAI4B,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBC,gCACnBa,EAAS,IAAIrqC,IAAIupC,EAAiBC,gCAEpCa,EAAOpgC,IAAIzU,KAAKqW,MAAM87B,iCACtB4B,EAAiBC,8BAAgC,IAAIa,GACrD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,gCAAmC,UAEnDjyB,YAAM,uCAAU,CAAE2T,KAAM,gBAMlC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAO8d,EACPjd,SAAS,EACThC,QAAS2gB,EACT1e,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,iBACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAM+7B,8BACzBrY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,8BAAiCgH,MAEhG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAM+7B,+BAA8E,KAA7CpyC,KAAKqW,MAAM+7B,8BACzD,GAAI2B,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBE,8BACnBY,EAAS,IAAIrqC,IAAIupC,EAAiBE,8BAEpCY,EAAOpgC,IAAIzU,KAAKqW,MAAM+7B,+BACtB2B,EAAiBE,4BAA8B,IAAIY,GACnD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,8BAAiC,UAEjDjyB,YAAM,uCAAU,CAAE2T,KAAM,qBAQtC,cAACihB,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQ4jB,UAAW,oBAAqBtP,aAAc,oBAAqBpO,QAAS,KAD/G,sDAOJ,cAACtC,EAAA,EAAMuC,KAAP,UACE,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK8Z,YAAa,KAAlD,SACE,cAAClK,GAAA,EAAD,CACEpJ,MAAM,mDACNtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAC7BvK,QAASuU,EACTvZ,SAAU,CAACC,EAAY+E,KACjBgV,GACFA,EAAiBT,oBAAsBvU,EACvC/+B,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,IAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,eAKhC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAOge,EACPnd,SAAS,EACThC,QAAS4gB,EACT3e,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,iBACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAMg8B,iCACzBtY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,iCAAoCgH,MAEnG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAMg8B,kCAAoF,KAAhDryC,KAAKqW,MAAMg8B,iCAC5D,GAAI0B,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBG,iCACnBW,EAAS,IAAIrqC,IAAIupC,EAAiBG,iCAEpCW,EAAOpgC,IAAIzU,KAAKqW,MAAMg8B,kCACtB0B,EAAiBG,+BAAiC,IAAIW,GACtD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,iCAAoC,UAEpDjyB,YAAM,uCAAU,CAAE2T,KAAM,gBAMlC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAOie,EACPpd,SAAS,EACThC,QAAS6gB,EACT5e,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,iBACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAMi8B,+BACzBvY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,+BAAkCgH,MAEjG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAMi8B,gCAAgF,KAA9CtyC,KAAKqW,MAAMi8B,+BAC1D,GAAIyB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBI,+BACnBU,EAAS,IAAIrqC,IAAIupC,EAAiBI,+BAEpCU,EAAOpgC,IAAIzU,KAAKqW,MAAMi8B,gCACtByB,EAAiBI,6BAA+B,IAAIU,GACpD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,+BAAkC,UAElDjyB,YAAM,uCAAU,CAAE2T,KAAM,qBAQtC,cAACihB,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQ4jB,UAAW,oBAAqBtP,aAAc,oBAAqBpO,QAAS,KAD/G,sDAOJ,cAACtC,EAAA,EAAMuC,KAAP,UACE,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK8Z,YAAa,KAAlD,SACE,cAAClK,GAAA,EAAD,CACEpJ,MAAM,mDACNtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAC7BvK,QAAS0U,EACT1Z,SAAU,CAACC,EAAY+E,KACjBgV,GACFA,EAAiBN,qBAAuB1U,EACxC/+B,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,IAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,eAKhC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAOme,EACPtd,SAAS,EACThC,QAAS8gB,EACT7e,cAAeC,IAAcC,KAC7BC,OAAO,gBACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,uCACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAMk8B,qCACzBxY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,qCAAwCgH,MAEvG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAMk8B,sCAA4F,KAApDvyC,KAAKqW,MAAMk8B,qCAChE,GAAIwB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBK,qCACnBS,EAAS,IAAIrqC,IAAIupC,EAAiBK,qCAEpCS,EAAOpgC,IAAIzU,KAAKqW,MAAMk8B,sCACtBwB,EAAiBK,mCAAqC,IAAIS,GAC1D70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,qCAAwC,UAExDjyB,YAAM,uCAAU,CAAE2T,KAAM,gBAMlC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAOoe,EACPvd,SAAS,EACThC,QAAS+gB,EACT9e,cAAeC,IAAcC,KAC7BC,OAAO,0BACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,uCACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAMm8B,mCACzBzY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,mCAAsCgH,MAErG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAMm8B,oCAAwF,KAAlDxyC,KAAKqW,MAAMm8B,mCAC9D,GAAIuB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBM,mCACnBQ,EAAS,IAAIrqC,IAAIupC,EAAiBM,mCAEpCQ,EAAOpgC,IAAIzU,KAAKqW,MAAMm8B,oCACtBuB,EAAiBM,iCAAmC,IAAIQ,GACxD70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,mCAAsC,UAEtDjyB,YAAM,uCAAU,CAAE2T,KAAM,qBAQtC,cAACihB,EAAA,EAAMuC,KAAP,UACE,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACE,cAAC4D,EAAA,EAAD,CACE1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQ4jB,UAAW,oBAAqBtP,aAAc,oBAAqBpO,QAAS,KAD/G,sDAOJ,cAACtC,EAAA,EAAMuC,KAAP,UACE,eAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,UACE,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK8Z,YAAa,KAAlD,SACE,cAAClK,GAAA,EAAD,CACEpJ,MAAM,mDACNtH,OAAQ,CAAEK,KAAM,CAAE+X,UAAW,IAC7BvK,QAAS6U,EACT7Z,SAAU,CAACC,EAAY+E,KACjBgV,GACFA,EAAiBH,yBAA2B7U,EAC5C/+B,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,IAE9C/yC,YAAM,uCAAU,CAAE2T,KAAM,eAKhC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAOse,EACPzd,SAAS,EACThC,QAASghB,EACT/e,cAAeC,IAAcC,KAC7BC,OAAO,gBACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,uCACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAMo8B,yCACzB1Y,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,yCAA4CgH,MAE3G,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAMo8B,0CAAoG,KAAxDzyC,KAAKqW,MAAMo8B,yCACpE,GAAIsB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBO,yCACnBO,EAAS,IAAIrqC,IAAIupC,EAAiBO,yCAEpCO,EAAOpgC,IAAIzU,KAAKqW,MAAMo8B,0CACtBsB,EAAiBO,uCAAyC,IAAIO,GAC9D70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,yCAA4C,UAE5DjyB,YAAM,uCAAU,CAAE2T,KAAM,gBAMlC,eAACihB,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,IAAK2V,WAAY,oBAAqBqG,YAAa,sBAAnF,UACE,qBAAKvZ,MAAO,CAAEzC,MAAO,OAAQsU,aAAc,oBAAqBpO,QAAS,GAAzE,sCAGA,qBAAKpC,UAAWN,EAAW+f,kBAA3B,SACE,cAACxf,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACE,cAACC,EAAA,EAAD,CACEZ,MAAOue,EACP1d,SAAS,EACThC,QAASihB,EACThf,cAAeC,IAAcC,KAC7BC,OAAO,gBACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAC7BiR,gCAAgC,EAIhChR,sBAEE,CAACC,EAAyCC,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACE,cAACC,EAAA,EAAD,IACMP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAOpIuG,sBAEE,CAACC,EAAyCX,IACxC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACGL,EAAcW,WAM3B,cAACW,EAAA,EAAD,CAAWC,MAAM,uCACfmd,YAAY,SACZld,aAAcz4B,KAAKqW,MAAMq8B,uCACzB3Y,SAAU,CAACC,EAAYC,IAAsBj6B,KAAKizB,SAAS,CAAE,uCAA0CgH,MAEzG,cAACV,EAAA,EAAD,CACEuF,oBAAoB,EACpBC,SAAS,EACTvN,KAAK,2BACLuC,QAAS,KACP,GAAI/zB,KAAKqW,MAAMq8B,wCAAgG,KAAtD1yC,KAAKqW,MAAMq8B,uCAClE,GAAIqB,EAAkB,CACpB,IAAIc,EAAS,IAAIrqC,IACbupC,EAAiBQ,uCACnBM,EAAS,IAAIrqC,IAAIupC,EAAiBQ,uCAEpCM,EAAOpgC,IAAIzU,KAAKqW,MAAMq8B,wCACtBqB,EAAiBQ,qCAAuC,IAAIM,GAC5D70C,KAAKuwB,MAAMnb,cAAcI,qBAAqBu+B,GAC9C/zC,KAAKizB,SAAS,CAAE,uCAA0C,UAE1DjyB,YAAM,uCAAU,CAAE2T,KAAM,6BAa5C,cAACikB,EAAA,EAAD,CACEC,OAAQ74B,KAAKqW,MAAMw7B,2BACnB5Z,UAAW,IAAMj4B,KAAK61C,4BACtB/c,mBAAoB,CAClBnkB,KAAMokB,IAAWC,OACjBC,MAAO,6CACPC,QAAU,8CAAUl5B,KAAKqW,MAAM47B,kEAEjC9Y,WAAY,CACVnB,YAAY,EACZ9G,OAAQ,CAAEkI,KAAM,CAAEC,SAAU,OAVhC,SAaE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAexF,QAAS,IAAM/zB,KAAK81C,qBAAsBtkB,KAAK,iBAC9D,cAACgI,EAAA,EAAD,CAAezF,QAAS,IAAM/zB,KAAK61C,4BAA6BrkB,KAAK,sBAIzE,cAACsG,EAAA,EAAD,CACEC,OAAQ/3B,KAAKqW,MAAMy7B,mCACnB9Z,YAAY,EACZC,UAAW,IAAMj4B,KAAK+yC,sCAHxB,SAKE,eAACnd,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAImG,QAAQ,IAA1C,UAEE,cAACtC,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,sBAAK3D,MAAO,CAAEiF,SAAUC,IAAUa,QAAlC,mCAAqDx6B,KAAKqW,MAAM07B,oCAElE,cAACnc,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,cAAC4D,EAAA,EAAD,IAAW/D,GAAX,SACE,cAAC0G,EAAA,EAAD,CAAWC,MAAM,iCAAQqB,WAAW,EAAMC,WAAW,EAAMrB,aAAcz4B,KAAKqW,MAAM27B,wBAA0BhyC,KAAKqW,MAAM27B,wBAA0B,GAAIjY,SAAU,CAACC,EAAYC,IAAsBj6B,KAAK+1C,gCAAgC/b,WAK/O,cAACpE,EAAA,EAAMuC,KAAP,CAAYC,MAAM,SAAlB,SACE,cAACxC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,IAAMb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA/E,SACE,eAAC4D,EAAA,EAAD,IAAW/D,GAAX,UACE,cAAC0H,EAAA,EAAD,CAAe/H,KAAK,eAAKuC,QAAS,IAAM/zB,KAAKgzC,0CAC7C,cAACxZ,EAAA,EAAD,CAAehI,KAAK,eAAKuC,QAAS,IAAM/zB,KAAK+yC,uDAWrD/f,SACNhzB,KAAKizB,SAAS,CAAE,iBAAoB7uB,OAAOyuB,WAAY,kBAAqBzuB,OAAO2uB,cAG7Erd,iBACN1V,KAAKuwB,MAAMnb,cAAcM,iBAInBi/B,yBAAyB7+B,GAC/B9V,KAAKizB,SAAS,CAAEgf,oBAAqBn8B,EAASvS,WAAYsuC,4BAA4B,IAGhFiE,qBACN91C,KAAK2yC,kBAAkBqD,gBAAe,GACtCh2C,KAAKuwB,MAAMnb,cAAcK,2BAA2BzV,KAAKqW,MAAM47B,qBAC/DjyC,KAAK61C,4BAGCA,4BACN71C,KAAKizB,SAAS,CAAEgf,oBAAqB,KAAMJ,4BAA4B,IAyBjEkE,gCAAgC/b,GACtCh6B,KAAKizB,SAAS,CAAE+e,wBAAyBhY,EAAMG,OAAOC,YAO3CxI,mBAAWggB,IC5jD1B,MAAQxpC,aAAF,GAAgBiT,aAAhB,GAA8BT,iBAA9B,GAAgDU,gBAAhD,IAAoEjT,MAAIC,SAASC,GAE1E0tC,GAA0BhmB,YAAO,sBAAuB,qBAAsB,mBAAoB,iBAAkB,2BAA1FA,CAAsHC,YAAS,cAAsCC,YAAsB,eAAD,oBAE7N9Z,MAAQ,CACJ40B,eAAgB,KAChBC,mBAAoB,KACpBC,eAAgB,KAChBC,aAAc,GACdC,uBAAwB,GACxBC,mBAAoB,GACpBC,WAAY,GACZC,mCAAoC,GACpC5Y,iBAAkBxuB,OAAOyuB,WACzBC,kBAAmB1uB,OAAO2uB,aAZ+L,KAyB7NC,OAAS,KACLhzB,KAAKizB,SAAS,CAAE,iBAAoB7uB,OAAOyuB,WAAY,kBAAqBzuB,OAAO2uB,eA1BsI,KA6BtNhe,gBAAkB,KACrB,MAAM,yBAAEH,GAA6B5U,KAAKuwB,MAC1C3b,EAAyBG,mBAhB7Bif,oBACIh0B,KAAKgzB,SACL5uB,OAAO6vB,iBAAiB,SAAUj0B,KAAKgzB,QACvChzB,KAAK+U,kBAGTmf,uBACI9vB,OAAO+vB,oBAAoB,SAAUn0B,KAAKgzB,QAYvCvC,SAEH,MAAM,eAAEvc,EAAF,iBAAkB9F,EAAlB,yBAAoCwG,GAA6B5U,KAAKuwB,OAEtE,iBAAEliB,GAAqBD,EAE7B,IAAIyG,EAAe,GACnB,GAAmC,OAA9B7U,KAAKqW,MAAM80B,iBAA6BnrC,KAAKqW,MAAM80B,gBAAgD,IAA9BnrC,KAAKqW,MAAM80B,iBAC/C,OAA9BnrC,KAAKqW,MAAM40B,iBAA6BjrC,KAAKqW,MAAM40B,gBAAgD,IAA9BjrC,KAAKqW,MAAM40B,iBAC9C,OAAlCjrC,KAAKqW,MAAM60B,qBAAiClrC,KAAKqW,MAAM60B,oBAAwD,IAAlClrC,KAAKqW,MAAM60B,qBAC5D,KAA5BlrC,KAAKqW,MAAM+0B,cAAwBprC,KAAKqW,MAAM+0B,cACI,KAAlDprC,KAAKqW,MAAMm1B,oCAA8CxrC,KAAKqW,MAAMm1B,oCAClC,KAAlCxrC,KAAKqW,MAAMi1B,oBAA8BtrC,KAAKqW,MAAMi1B,oBAC1B,KAA1BtrC,KAAKqW,MAAMk1B,YAAsBvrC,KAAKqW,MAAMk1B,YACN,KAAtCvrC,KAAKqW,MAAMg1B,wBAAkCrrC,KAAKqW,MAAMg1B,uBAK5D,IAAK,IAAI3kC,EAAI,EAAGA,EAAIkO,EAAyBC,aAAalO,OAAQD,IAAK,CACnE,MAAMN,EAAWwO,EAAyBC,aAAanO,GAEvD,IAAI+kC,GAAO,EACXA,EAAqC,OAA9BzrC,KAAKqW,MAAM80B,iBAA6BnrC,KAAKqW,MAAM80B,gBAAgD,IAA9BnrC,KAAKqW,MAAM80B,gBAAyB/kC,EAASyD,WAAa7J,KAAKqW,MAAM80B,eAEjJM,EAAOA,IAAuC,OAA9BzrC,KAAKqW,MAAM40B,iBAA6BjrC,KAAKqW,MAAM40B,gBAAgD,IAA9BjrC,KAAKqW,MAAM40B,gBAAyB7kC,EAAS4X,WAAahe,KAAKqW,MAAM40B,gBAE1JQ,EAAOA,IAA2C,OAAlCzrC,KAAKqW,MAAM60B,qBAAiClrC,KAAKqW,MAAM60B,oBAAwD,IAAlClrC,KAAKqW,MAAM60B,oBAA6B9kC,EAAS6X,eAAiBje,KAAKqW,MAAM60B,oBAE1KO,EAAOA,IAAqC,KAA5BzrC,KAAKqW,MAAM+0B,eAAwBprC,KAAKqW,MAAM+0B,cAAiBhlC,EAAS2X,SAAqE,IAA1D,GAAE3X,EAAS2X,SAAS2tB,QAAQ1rC,KAAKqW,MAAM+0B,eAE1IK,EAAOA,IAAqC,KAA5BzrC,KAAKqW,MAAM+0B,eAAwBprC,KAAKqW,MAAM+0B,cAAiBhlC,EAAS2X,SAAqE,IAA1D,GAAE3X,EAAS2X,SAAS2tB,QAAQ1rC,KAAKqW,MAAM+0B,eAE1IK,EAAOA,IAA2D,KAAlDzrC,KAAKqW,MAAMm1B,qCAA8CxrC,KAAKqW,MAAMm1B,oCAAuCplC,EAASuY,+BAAuI,IAAtG,GAAEvY,EAASuY,+BAA+B+sB,QAAQ1rC,KAAKqW,MAAMm1B,qCAElOC,EAAOA,IAA+C,KAAtCzrC,KAAKqW,MAAMg1B,yBAAkCrrC,KAAKqW,MAAMg1B,wBAA2BjlC,EAASmY,mBAAmG,IAA9E,GAAEnY,EAASmY,mBAAmBmtB,QAAQ1rC,KAAKqW,MAAMg1B,yBAElLI,EAAOA,IAA2C,KAAlCzrC,KAAKqW,MAAMi1B,qBAA8BtrC,KAAKqW,MAAMi1B,oBAAuBllC,EAAS0X,eAAuF,IAAtE,GAAE1X,EAAS0X,eAAe4tB,QAAQ1rC,KAAKqW,MAAMi1B,qBAElKG,EAAOA,IAAmC,KAA1BzrC,KAAKqW,MAAMk1B,aAAsBvrC,KAAKqW,MAAMk1B,YAAenlC,EAASyV,OAA+D,IAAtD,GAAEzV,EAASyV,OAAO6vB,QAAQ1rC,KAAKqW,MAAMk1B,aAAwBnlC,EAASmK,WAAuE,IAA1D,GAAEnK,EAASmK,WAAWm7B,QAAQ1rC,KAAKqW,MAAMk1B,aAGrNE,GACA52B,EAAauB,KAAKhQ,QA5B1ByO,EAAeD,EAAyBC,aAiC5C,MAAM2gB,EAAaC,YAAe,CAC9BC,QAAS,CACLtE,OAAWpxB,KAAKqW,MAAMyc,kBAAoB,IAAjC,KACT5pB,SAAU,WACVysB,UAAW,UACX2Q,aAAc,uBAIhBlS,EAAqB,CACvB,CACIR,IAAK,gBACL/X,KAAM,2BACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,IACP,MAAMiW,EAAkC,CAAEC,QAAS,eAAgBxU,MAAO,GAAIyU,UAAW,QAAS/R,MAAO,OAAQgS,aAAc,GAE/H,IAAIkC,EAAa,GAKjB,OAJIv6B,GAAoBiiB,EAAK9pB,gBAAkB6H,EAAiB7H,gBAC5DoiC,EAAa,sBAIb,cAACjC,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,IAC1BC,aAAc,CACVC,gBAAiB,IAET,8BACI,oBAAItS,MAAO,CAAExoB,OAAQ,EAAGisB,QAAS,GAAjC,SACI,+BAAI,sBAAMzD,MAAO8R,EAAb,6BAAqC,+BAAOjW,EAAKhuB,oBAMzE0kC,MAAOC,KAAa/mB,KACpBgnB,gBAAiBC,KAAgBC,aAdrC,SAgBI,qBAAKtR,UAAW8S,EAAY7U,QACxB,KACI3lB,EAAiBiB,oBAAoBihB,IAF7C,SAKI,sBAAMmE,MAAO,CAAEoU,OAAQ,WAAvB,SAAqCvY,EAAK9pB,sBAM9D,CACIotB,IAAK,YACL/X,KAAM,eACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKzU,QAGrB,CACC+X,IAAK,WACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/f,YAIxB,CACIqjB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACfC,SAAWlE,GAEH,cAAC0E,EAAA,EAAD,CACIC,cAAe,CAAEnB,SAAU,gBAC3BoB,KAAK,SACLC,iBAAe,EACfC,aAAW,eACXlE,OAAQ,CAAEK,KAAM,CAAE8D,MAAO,QAASjE,OAAQ,YAC1CkE,UAAW,CACPC,MAAO,CACH,CACI3B,IAAK,wCACLpC,KAAM,mDACNqC,UAAW,CACPC,SAAU,UAEdC,QAAS,KACLnf,EAAyBK,8BAA8Bqb,EAAK9pB,iBAGpE,CACIotB,IAAK,2BAELpC,KAAM,2BACNqC,UAAW,CACPC,SAAU,kBAEdC,QAAS,KACL7f,EAAeI,mCAAmCgc,EAAK9pB,sBAQpF,CACCotB,IAAK,SACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKvS,UAGrB,CACC6V,IAAK,WACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOjV,GAAaiV,EAAKtS,aAGlC,CACC4V,IAAK,eACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAO1V,GAAiB0V,EAAKrS,iBAIzC,CACI2V,IAAK,+BACL/X,KAAM,yDACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK3R,gCAIxB,CACIiV,IAAK,WACL/X,KAAM,eACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOloB,GAAakoB,EAAKzmB,aAIrC,CACI+pB,IAAK,eACL/X,KAAM,uBACNwY,SAAU,IACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKxS,gBAIxB,CACI8V,IAAK,aACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKpS,cAIxB,CACI0V,IAAK,YACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAKnS,aAGrB,CACCyV,IAAK,cACL/X,KAAM,2BACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GACHA,EAAK7R,cAAgBnD,GAAgBqwB,cAEjC,gDAGJrb,EAAK7R,cAAgBnD,GAAgBswB,aAEjC,gDAIJ,+BAAOtb,EAAK7R,eAIxB,CACImV,IAAK,mBACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK/R,oBAIxB,CACIqV,IAAK,uBACL/X,KAAM,uCACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK5R,wBAIxB,CACIkV,IAAK,cACL/X,KAAM,qBACNwY,SAAU,GACVC,aAAa,EACbC,eAAe,EACf9yB,KAAM,SACN+yB,SAAWlE,GAEH,+BAAOA,EAAK9R,gBAQ5B,OACI,eAACoX,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,UACI,cAAC4D,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,eAAC4D,EAAA,EAAD,CAAO9D,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,OAAQZ,OAAQ,IAAKkV,aAAc,oBAAqB9O,WAAY,EAAGkC,SAAUC,IAAU8N,SAAvJ,UACI,cAAC7R,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,qBAEZ7H,mBAAoB3wB,KAAKqW,MAAM40B,eAC/B/xB,QACI6yB,IAEJhS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEgY,eAAgB3L,EAAO1L,WAMvD,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,2BACZ7H,mBAAoB3wB,KAAKqW,MAAM60B,mBAC/BhyB,QACI8yB,IAEJjS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEiY,mBAAoB5L,EAAO1L,WAM3D,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACjH,EAAA,EAAD,CAAUjH,MAAM,eACZ7H,mBAAoB3wB,KAAKqW,MAAM80B,eAC/BjyB,QACI+yB,IAEJlS,SAAU,CAACC,EAAYsF,EAA0BC,EAAgBnF,KACzDkF,GACAt/B,KAAKizB,SAAS,CAAEkY,eAAgB7L,EAAO1L,WAKvD,cAACgC,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMk1B,WAAY/S,MAAM,eAAKuB,SAAU,CAACC,EAAYC,KAC9Ej6B,KAAKizB,SAAS,CAAEsY,WAAYtR,cAK5C,cAACrE,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAM+0B,aAAc5S,MAAM,2BAAOuB,SAAU,CAACC,EAAYC,KAClFj6B,KAAKizB,SAAS,CAAEmY,aAAcnR,SAGtC,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMg1B,uBAAwB7S,MAAM,uCAASuB,SAAU,CAACC,EAAYC,KAC9Fj6B,KAAKizB,SAAS,CAAEoY,uBAAwBpR,SAIhD,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMm1B,mCAAoChT,MAAM,yDAAYuB,SAAU,CAACC,EAAYC,KAC7Gj6B,KAAKizB,SAAS,CAAEuY,mCAAoCvR,SAI5D,cAACrE,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,IAArE,SACI,cAACnO,EAAA,EAAD,CAAWE,aAAcz4B,KAAKqW,MAAMi1B,mBAAoB9S,MAAM,uBAAQuB,SAAU,CAACC,EAAYC,KACzFj6B,KAAKizB,SAAS,CAAEqY,mBAAoBrR,cAMpD,cAACrE,EAAA,EAAMuC,KAAP,CAAYjH,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAArC,SACI,eAAC4D,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,UACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,EAAGlP,WAAY,KAApF,kBAGA,cAAC5B,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,EAAGlP,WAAY,KAApF,kBAGA,cAAC5B,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,EAAGlP,WAAY,KAApF,kBAIA,cAAC5B,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,MAAO8Z,YAAa,EAAGpF,aAAc,EAAGlP,WAAY,KAApF,SACI,cAACgC,EAAA,EAAD,CACIhI,KAAK,eACLuC,QAAS,KACL/zB,KAAK+U,mBAET+pB,oBAAoB,kBAQhD,cAAClJ,EAAA,EAAMuC,KAAP,UACI,cAACvC,EAAA,EAAD,CAAOyC,YAAY,EAAMvG,OAAQ,CAAEC,YAAa,GAAKb,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAA9E,SACI,cAAC4D,EAAA,EAAD,CAAO1E,OAAQ,CAAEK,KAAM,CAAES,MAAO,SAAhC,SACI,qBAAK8D,UAAWN,EAAWE,QAA3B,SACI,cAACK,EAAA,EAAD,CAAgBC,oBAAqBC,IAAoBC,KAAzD,SACI,cAACC,EAAA,EAAD,CACIZ,MAAO1gB,EACPuhB,SAAS,EACThC,QAASA,EACTiC,cAAeC,IAAcC,KAC7BC,OAAO,YACPC,WAAYC,IAAsBC,aAClCC,cAAeC,IAAcC,cAI7BC,sBAEI,CAACC,EAAyCC,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAgB,EAAnE,SACI,cAACC,EAAA,EAAD,IACQP,EACJ9F,OAAQ,CAAEK,KAAM,CAAEiG,WAAY,EAAGpG,OAAQ,GAAIK,WAAY,IAAMgG,MAAO,CAAErG,OAAQ,mBAAqBsG,YAAa,CAAEtG,OAAQ,SAO5IuG,sBAEI,CAACC,EAAyCX,IACtC,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBS,OAAQP,gBAAgB,EAAnE,SACKL,EAAcW,wBAiBpDhG,I,GC7gBf,MAAMlB,GAAS,CACb,CACE7U,KAAM,eACNmV,KAAM,SACNklB,UAAW5U,IAEb,CACEtQ,KAAM,SACNklB,UAAWzE,GACX/gB,OAAQ,CACN,CACE7U,KAAM,mBACNmV,KAAM,cACNklB,UAAW1E,GACX2E,WAAW,GAEb,CACEt6B,KAAM,eACNmV,KAAM,8BACNklB,UAAWxQ,GACXyQ,WAAW,GAEb,CACEt6B,KAAM,wCACNmV,KAAM,+BACNklB,UAAWvQ,GACXwQ,WAAW,GAEb,CACEt6B,KAAM,eACNmV,KAAM,iBACNklB,UAAW/U,GACXgV,WAAW,KAIjB,CACEnlB,KAAM,cACNklB,UAAWlmB,EACXU,OAAQ,CACN,CACE7U,KAAM,mBACNmV,KAAM,8BACNklB,UAAWtQ,GACXuQ,WAAW,GAEb,CACEt6B,KAAM,eACNmV,KAAM,sBACNklB,UAAWlb,EACXmb,WAAW,GAEb,CACEt6B,KAAM,eACNmV,KAAM,mBACNklB,UAAWjkB,EACXkkB,WAAW,GAEb,CACEt6B,KAAM,eACNmV,KAAM,mBACNklB,UAAW9T,GACX+T,WAAW,GAEb,CACEt6B,KAAM,qBACNmV,KAAM,uBACNklB,UAAWE,GACXD,WAAW,GAEb,CACEt6B,KAAM,uCACNmV,KAAM,kCACNklB,UDocOtkB,YAAWqkB,ICnclBE,WAAW,GAQb,CACEt6B,KAAM,eACNmV,KAAM,sBACNklB,UAAW/U,GACXgV,WAAW,KAIjB,CACEnlB,KAAM,eACNklB,UAAWvE,GACXjhB,OAAQ,CACN,CACE7U,KAAM,mBACNmV,KAAM,8BACNklB,UAAWtQ,GACXuQ,WAAW,GAEb,CACEt6B,KAAM,mCACNmV,KAAM,oBACNklB,UAAWxE,GACXyE,WAAW,GAEb,CACEt6B,KAAM,eACNmV,KAAM,uBACNklB,UAAW/U,GACXgV,WAAW,KAIjB,CACED,UAAWhU,K,IAMTmU,GADLpmB,YAAO,sB,IAAR,cACiCE,YAE/BM,SACE,MAAM,oBAAEttB,GAAwBnD,KAAKuwB,MACrC,OACE,cAAC,IAAD,CACES,KAAMhxB,KAAKuwB,MAAMS,KACjBP,OAAQF,GACFvwB,KAAKuwB,MAAM4lB,UACThzC,EAAoBC,gBAEpB,mBAAMmtB,MAAM2lB,UAAZ,IAA0B3lB,EAAOG,OAAQ1wB,KAAKuwB,MAAMG,SAIpD,cAAC,IAAD,CAAU4lB,KAAK,IAAI3U,GAAG,WAM1B,aADA,CACA,KAAMpR,MAAM2lB,UAAZ,IAA0B3lB,EAAOG,OAAQ1wB,KAAKuwB,MAAMG,e,+BCrIhE1vB,IAAMu1C,UAAU,CACd7hC,UAAW,KACX+f,MAAO,CAAEzC,MAAO,IAAKwkB,UAAW,YAAa9O,WAAY,WAAY+O,OAAQ,OAG/EC,aAAgB,oBAEhBC,YAAU,CACRC,QAAS,CACP3U,aAAc,UACd4U,gBAAiB,UACjBC,aAAc,UACdC,WAAY,UACZhV,cAAe,UACfiV,eAAgB,UAChBC,aAAc,UACdC,UAAW,UACXC,YAAa,UACbC,kBAAmB,UACnBC,eAAgB,UAChBC,aAAc,UACdC,qBAAsB,UACtBC,kBAAmB,UACnBC,mBAAoB,UACpBC,gBAAiB,UACjBC,iBAAkB,UAClBC,kBAAmB,UACnBC,eAAgB,UAChBC,YAAa,UACbC,MAAO,UACP/V,MAAO,aAMX,MAAMgW,GAAS,CACb70C,wBACA8S,iBACArW,cACA+B,iBACAY,cACAkH,sBACAnE,uBACAuB,oBACA2B,uBACA6D,oBACAmE,mBACApC,qBACAwG,6BACAV,mBACAkB,mBAGF6iC,SACE,cAAC,IAAD,IAAcD,GAAQvjB,MAAO,CAAErD,OAAQ,QAAvC,SACE,cAAC,IAAD,CAAQjb,QAASA,IAAjB,SACE,cAAC,IAAD,UACGua,GAAOE,KAAI,CAACC,EAAOnqB,IAClB,cAAC,GAAD,IAAgCmqB,GAAPnqB,WAKjCwxC,SAASC,eAAe,U,iCC7F1B,oHAUA,MAAM,qBACFhrB,EADE,gBAEFnB,EAFE,MAGFkB,EAHE,gBAIF/F,EAJE,kBAKFG,EALE,kBAMFG,EANE,kBAOFG,EAPE,qBAQFE,EARE,qBASFkC,EATE,sBAUFR,EAVE,mBAWFZ,EAXE,mBAYFZ,EAZE,yBAaFkD,EAbE,kBAcFE,EAdE,YAeFgB,EAfE,YAgBFC,EAhBE,eAiBFE,EAjBE,cAkBFC,EAlBE,WAmBFC,EAnBE,eAoBFH,EApBE,aAqBFU,EArBE,gBAsBFN,EAtBE,gBAuBFC,EAvBE,mBAwBFE,EAxBE,kBAyBFC,EAzBE,eA0BFC,EA1BE,mBA2BFH,GACAvkB,MAAIC,SAASC,GAEjB,MAAM6vC,EAYMv4C,cAAe,KAFfw4C,+BAAgC,EAElB,KAadC,4BAA8B,KAClCt4C,KAAKq4C,+BAAgC,EACjCzzC,IAAuB2zC,mBAGvBryC,IAAa4E,sBACb5E,IAAakB,oBACblB,IAAa0G,oBACb1G,IAAa+C,uBACb/C,IAAaypB,oBAEjB9pB,WAAW7F,KAAKs4C,4BAA6B,MAxB3B,KA4BfE,WAAa,KACXx4C,KAAKq4C,+BACNr4C,KAAKs4C,+BA9BS,KAsCfG,YAAeh3C,IAClB,IAAIi3C,EACJ,IACIA,EAAMvrB,EAAqBzQ,OAAOjb,GACpC,MAAOR,GAGL,OAFAI,QAAQJ,MAAM,iFAAsBA,QACpCI,QAAQJ,MAAO,8GAA6B03C,EAAOrC,KAAK70C,GAAM2e,SAAS,UAI3E,MAAM,MAAEiN,EAAF,UAASvG,EAAT,YAAoBsG,EAApB,aAAiCE,GAAiBorB,EAIxD,IAAIE,EACJ,GAAIxrB,IAAgBD,EAAqBO,YAAYmrB,eACjD,IACID,EAAoBE,aAAexrB,OAAczQ,GACnD,MAAO5b,GAEL,YADAI,QAAQJ,MAAO,sCAAiBosB,wBAAavG,qFAG9C,IAAIsG,IAAgBD,EAAqBO,YAAYqrB,QAIxD,YADA13C,QAAQJ,MAAO,sCAAiBosB,wBAAavG,sDAF7C8xB,EAAoBtrB,GAKnBsrB,GAAqBA,EAAkBjyC,QAAU,EAClDtF,QAAQJ,MAAO,sCAAiBosB,wBAAavG,0CAIjD9mB,KAAKg5C,UAAU3rB,EAAOurB,EAAmB9xB,IAvEvB,KA0EdkyB,UAAY,CAAC3rB,EAAeC,EAAmBxG,KAEnD,IAAI7B,EAA2C,GAC/C,OAAQoI,GACJ,KAAKH,EAAM+rB,eACP53C,QAAQC,IAAK,0BAAe+rB,KAC5B,MAEJ,KAAKH,EAAMgsB,cACP,IAAK,IAAD,EACA,MAAMC,EAAkBhyB,EAAgBzK,OAAO4Q,GAC/CttB,KAAKo5C,eAAeD,EAAgB/xB,WACpCnC,EAAa,UAAGk0B,EAAgB/xB,iBAAnB,aAAG,EAA2BnC,cAC3Co0B,IAAoBC,eAAeH,GACrC,MAAOl4C,GACLI,QAAQJ,MAAO,8CAAegkB,sBAAmChkB,GAErE,MAEJ,KAAKisB,EAAMqsB,gBACP,IAAK,IAAD,EACA,MAAMC,EAAoBlyB,EAAkB5K,OAAO4Q,GACnDttB,KAAKo5C,eAAeI,EAAkBpyB,WACtCnC,EAAa,UAAGu0B,EAAkBpyB,iBAArB,aAAG,EAA6BnC,cAC7Co0B,IAAoBI,iBAAiBD,GACvC,MAAOv4C,GACLI,QAAQJ,MAAO,8CAAegkB,wBAAqChkB,GAEvE,MAEJ,KAAKisB,EAAMwsB,iBACP,IAAK,IAAD,EACA,MAAMC,EAAoBlyB,EAAkB/K,OAAO4Q,GACnDttB,KAAKo5C,eAAeO,EAAkBvyB,WACtCnC,EAAa,UAAG00B,EAAkBvyB,iBAArB,aAAG,EAA6BnC,cAC7Co0B,IAAoBO,iBAAiBD,GACvC,MAAO14C,GACLI,QAAQJ,MAAO,8CAAegkB,yBAAsChkB,GAExE,MAEJ,KAAKisB,EAAM2sB,iBACP,IAAK,IAAD,EACA,MAAMC,EAAoBlyB,EAAkBlL,OAAO4Q,GACnDttB,KAAKo5C,eAAeU,EAAkB1yB,WACtCnC,EAAa,UAAG60B,EAAkB1yB,iBAArB,aAAG,EAA6BnC,cAC7Co0B,IAAoBU,iBAAiBD,GACvC,MAAO74C,GACLI,QAAQJ,MAAO,8CAAegkB,yBAAsChkB,GAExE,MAEJ,KAAKisB,EAAM8sB,oBACP,IAAK,IAAD,EACA,MAAMC,EAAuBnyB,EAAqBpL,OAAO4Q,GACzDttB,KAAKo5C,eAAea,EAAqB7yB,WACzCnC,EAAa,UAAGg1B,EAAqB7yB,iBAAxB,aAAG,EAAgCnC,cAChDo0B,IAAoBU,iBAAiBE,GACvC,MAAOh5C,GACLI,QAAQJ,MAAO,8CAAegkB,4BAAyChkB,GAE3E,MAIJ,KAAKisB,EAAMgtB,qBACP,IAAK,IAAD,EACA,MAAMC,EAAuBnwB,EAAqBtN,OAAO4Q,GACzDttB,KAAKo5C,eAAee,EAAqB/yB,WACzCnC,EAAa,UAAGk1B,EAAqB/yB,iBAAxB,aAAG,EAAgCnC,cAChDo0B,IAAoBe,oBAAoBD,GAC1C,MAAOl5C,GACLI,QAAQJ,MAAO,8CAAegkB,6BAA0ChkB,GAE5E,MAKJ,KAAKisB,EAAMmtB,0BACP,IAAK,IAAD,EACA,MAAMC,EAA2BpvB,EAAyBxO,OAAO4Q,GACjEttB,KAAKo5C,eAAekB,EAAyBlzB,WAC7CnC,EAAa,UAAGq1B,EAAyBlzB,iBAA5B,aAAG,EAAoCnC,cACpDo0B,IAAoBkB,wBAAwBD,GAC9C,MAAOr5C,GACLI,QAAQJ,MAAO,8CAAegkB,kCAA+ChkB,GAEjF,MAMJ,KAAKisB,EAAMstB,sBACP,IAAK,IAAD,EACA,MAAMC,EAAwBjxB,EAAsB9M,OAAO4Q,GAC3DttB,KAAKo5C,eAAeqB,EAAsBrzB,WAC1CnC,EAAa,UAAGw1B,EAAsBrzB,iBAAzB,aAAG,EAAiCnC,cACjDo0B,IAAoBqB,qBAAqBD,GAC3C,MAAOx5C,GACLI,QAAQJ,MAAO,8CAAegkB,8BAA2ChkB,GAE7E,MAMJ,KAAKisB,EAAMytB,mBACP,IAAK,IAAD,EACA,MAAMC,EAAqBhyB,EAAmBlM,OAAO4Q,GACrDttB,KAAKo5C,eAAewB,EAAmBxzB,WACvCnC,EAAa,UAAG21B,EAAmBxzB,iBAAtB,aAAG,EAA8BnC,cAC9Co0B,IAAoBwB,kBAAkBD,GACxC,MAAO35C,GACLI,QAAQJ,MAAO,8CAAegkB,2BAAwChkB,GAE1E,MAMJ,KAAKisB,EAAM4tB,mBACP,IAAK,IAAD,EACA,MAAMC,EAAqB/yB,EAAmBtL,OAAO4Q,GACrDttB,KAAKo5C,eAAe2B,EAAmB3zB,WACvCnC,EAAa,UAAG81B,EAAmB3zB,iBAAtB,aAAG,EAA8BnC,cAC9Co0B,IAAoB2B,kBAAkBD,GACxC,MAAO95C,GACLI,QAAQJ,MAAO,8CAAegkB,2BAAwChkB,GAE1E,MAIJ,KAAKisB,EAAM+tB,kBACP,IAAK,IAAD,EACA,MAAMC,EAAoB9vB,EAAkB1O,OAAO4Q,GACnDttB,KAAKo5C,eAAe8B,EAAkB9zB,WACtCnC,EAAa,UAAGi2B,EAAkB9zB,iBAArB,aAAG,EAA6BnC,cAC7Co0B,IAAoB8B,iBAAiBD,GACvC,MAAOj6C,GACLI,QAAQJ,MAAO,8CAAegkB,0BAAuChkB,GAEzE,MAIJ,KAAKisB,EAAMkuB,cACP,IACI,MAAMC,EAAkBrvB,EAAgBtP,OAAO4Q,GAC/C+rB,IAAoBiC,eAAeD,GACrC,MAAOp6C,GACLI,QAAQJ,MAAO,gDAA4BA,GAE/C,MAIJ,KAAKisB,EAAMquB,UACP,IACI,MAAMC,EAAcpvB,EAAY1P,OAAO4Q,GACvCmuB,IAAoBC,WAAWF,GACjC,MAAOv6C,GACLI,QAAQJ,MAAO,4CAAwBA,GAE3C,MAEJ,KAAKisB,EAAMyuB,UACP,IACI,MAAMC,EAAcvvB,EAAY3P,OAAO4Q,GACvCmuB,IAAoBI,WAAWD,GACjC,MAAO36C,GACLI,QAAQJ,MAAO,4CAAwBA,GAE3C,MAEJ,KAAKisB,EAAM4uB,aACP,IACI,MAAMC,EAAiBxvB,EAAe7P,OAAO4Q,GAC7CmuB,IAAoBO,cAAcD,GACpC,MAAO96C,GACLI,QAAQJ,MAAO,+CAA2BA,GAE9C,MAEJ,KAAKisB,EAAM+uB,YACP,IACI,MAAMC,EAAgB1vB,EAAc9P,OAAO4Q,GAC3CmuB,IAAoBU,aAAaD,GACnC,MAAOj7C,GACLI,QAAQJ,MAAO,8CAA0BA,GAE7C,MAEJ,KAAKisB,EAAMkvB,aACP,IACI,MAAMC,EAAiB/vB,EAAe5P,OAAO4Q,GAC7CmuB,IAAoBa,cAAcD,GACpC,MAAOp7C,GACLI,QAAQJ,MAAO,+CAA2BA,GAE9C,MAEJ,KAAKisB,EAAMqvB,SACP,IACI,MAAMC,EAAa/vB,EAAW/P,OAAO4Q,GACrCmuB,IAAoBgB,UAAUD,GAChC,MAAOv7C,GACLI,QAAQJ,MAAO,2CAAuBA,GAE1C,MAEJ,KAAKisB,EAAMwvB,eACP,IACI,MAAMC,EAAkBjwB,EAAgBhQ,OAAO4Q,GAC/CmuB,IAAoBmB,eAAeD,GACrC,MAAO17C,GACLI,QAAQJ,MAAO,iDAA6BA,GAEhD,MAEJ,KAAKisB,EAAM2vB,eACP,IACI,MAAMC,EAAkBnwB,EAAgBjQ,OAAO4Q,GAC/CmuB,IAAoBsB,eAAeD,GACrC,MAAO77C,GACLI,QAAQJ,MAAO,iDAA6BA,GAEhD,MAEJ,KAAKisB,EAAM8vB,kBACP,IACI,MAAMC,EAAqBpwB,EAAmBnQ,OAAO4Q,GACrDmuB,IAAoByB,kBAAkBD,GACxC,MAAOh8C,GACLI,QAAQJ,MAAO,oDAAgCA,GAEnD,MAEJ,KAAKisB,EAAMiwB,iBACP,IACI,MAAMC,EAAoBtwB,EAAkBpQ,OAAO4Q,GACnDmuB,IAAoB4B,iBAAiBD,GACvC,MAAOn8C,GACLI,QAAQJ,MAAO,mDAA+BA,GAElD,MAEJ,KAAKisB,EAAMowB,kBACP,IACI,MAAMC,EAAqB3wB,EAAmBlQ,OAAO4Q,GACrDmuB,IAAoB+B,kBAAkBD,GACxC,MAAOt8C,GACLI,QAAQJ,MAAO,oDAAgCA,GAEnD,MAEJ,KAAKisB,EAAMuwB,cACP,IACI,MAAMC,EAAiB3wB,EAAerQ,OAAO4Q,GAC7CmuB,IAAoBkC,cAAcD,GACpC,MAAOz8C,GACLI,QAAQJ,MAAO,gDAA4BA,GAE/C,MAEJ,KAAKisB,EAAM0wB,WACP,IACI,MAAMC,EAAe7wB,EAAatQ,OAAO4Q,GACzCmuB,IAAoBqC,YAAYD,GAClC,MAAO58C,GACLI,QAAQJ,MAAO,6CAAyBA,GAE5C,MAGJ,QACII,QAAQJ,MAAO,sCAAiBosB,2CAlWtB,KAyWf4B,iBAAmB,CAAC5B,EAAepI,EAAuB8B,KAE7D,MAAMtlB,EAAOzB,KAAK+9C,eAAe1wB,EAAOpI,EAAe8B,GAuBvD,OAtBItlB,GAEAhB,YAAQ,WAAY,CAChBe,OAAQ,OACRC,KAAM,CACFV,OAAQ0sB,gBAAqBhsB,MAElCf,MAAMC,IACL,GAAIA,EACA,GAAIA,EAAIC,QACJ,GAAID,EAAII,OAAQ,CACZ,MAAMi9C,EAAUvwB,gBAAqB9sB,EAAII,QACzCf,KAAKy4C,YAAYuF,SAGrB38C,QAAQJ,MAAO,mDAAoBgkB,YAAwBoI,QAGpElsB,OAAOC,IACNC,QAAQC,IAAIF,OAGb,GAlYW,KAwYf+sB,QAAU,CAACd,EAAepI,EAAuB8B,KAEpD,MAAMtlB,EAAOzB,KAAK+9C,eAAe1wB,EAAOpI,EAAe8B,GACvD,QAAItlB,MACKmD,IAAuBq5C,SAASx8C,KACjCJ,QAAQJ,MAAO,8CAAegkB,YAAwBoI,MAC/C,KA9YG,KAqZd0wB,eAAiB,CAAC1wB,EAAepI,EAAuB8B,IACxDA,EAAQpgB,OAAS,MACV3G,KAAKk+C,kBAAkB7wB,EAAOpI,EAAe8B,GAE7C/mB,KAAKm+C,sBAAsB9wB,EAAOpI,EAAe8B,GAzZ1C,KA6Zdm3B,kBAAoB,CAAC7wB,EAAepI,EAAuB8B,KAC/D,IAAIq3B,EACJ,IACIA,EAAgBtF,WAAa/xB,OAASlK,GACxC,MAAO5b,GAEL,OADAI,QAAQJ,MAAO,uEAAoBgkB,YAAwBoI,IAASpsB,GAC7D,KAGX,MAAMy3C,EAAM,IAAIvrB,EAMhB,OALAurB,EAAItrB,YAAcD,EAAqBO,YAAYmrB,eACnDH,EAAIrrB,MAAQA,EACZqrB,EAAI5xB,UAAYu3B,KAAKC,MACrB5F,EAAIprB,aAAe8wB,EAEZjxB,EAAqBlR,OAAOy8B,GAAKrqB,UA5atB,KA+ad8vB,sBAAwB,CAAC9wB,EAAepI,EAAuB8B,KACnE,MAAM2xB,EAAM,IAAIvrB,EAMhB,OALAurB,EAAItrB,YAAcD,EAAqBO,YAAYqrB,QACnDL,EAAIrrB,MAAQA,EACZqrB,EAAI5xB,UAAYu3B,KAAKC,MACrB5F,EAAIprB,aAAevG,EAEZoG,EAAqBlR,OAAOy8B,GAAKrqB,UAtbtB,KAybd+qB,eAAkBhyB,IACtB,IAAKA,EAED,MADA/lB,QAAQJ,MAAM,qCACR,IAAIs9C,MAAM,qCAGpB,IAAKn3B,EAAUnC,eAA6C,KAA5BmC,EAAUnC,cAEtC,MADA5jB,QAAQJ,MAAM,yCACR,IAAIs9C,MAAM,2CA7ctBnG,EAEYtoB,YAAc,KACnBsoB,EAAiBroB,WAClBqoB,EAAiBroB,SAAW,IAAIqoB,GAE7BA,EAAiBroB,UAN1BqoB,EASaroB,c,EA0cnB,MAAM7B,EAAmBkqB,EAAiBtoB,gB,0DC7f1C,oEAKA,MAAM,iBACF1V,GACA/R,MAAIC,SAASC,GAEjB,MAAMi2C,EAEF,qBAII,OAHKA,EAAoBzuB,WACrByuB,EAAoBzuB,SAAW,IAAIyuB,GAEhCA,EAAoBzuB,SAIvBlwB,cAAe,KAGhB67C,WAAcF,IACbA,EAAYn0C,OACZR,IAAgBI,WAAWu0C,EAAYn0C,QALzB,KASfw0C,WAAcD,IACbA,EAAY/uC,OACZR,IAAgBI,WAAWmvC,EAAY/uC,QAXzB,KAefyvC,cAAiBD,IAChBA,EAAej2C,UACfd,IAAmBS,cAAcs2C,EAAej2C,WAjBlC,KAqBf41C,cAAiBD,IAChBA,EAAe7yC,UACfV,IAAmBK,cAAckzC,EAAe7yC,WAvBlC,KA2BfizC,aAAgBD,IACfA,EAAcnxC,SACdtB,IAAkBkB,aAAauxC,EAAcnxC,UA7B/B,KAiCf0xC,UAAaD,IACZA,EAAW9rC,MACXF,IAAesD,UAAU0oC,EAAW9rC,OAnCtB,KAwCfksC,eAAkBD,IACjBA,EAAgBt1C,OAChBR,IAAgBM,eAAew1C,EAAgBt1C,QA1CjC,KA8Cf01C,eAAkBD,IACjBA,EAAgBjwC,OAChBR,IAAgBM,eAAemwC,EAAgBjwC,QAhDjC,KAoDf2wC,kBAAqBD,IACpBA,EAAmBn3C,UACnBd,IAAmBW,kBAAkBs3C,EAAmBn3C,WAtD1C,KA0Df82C,kBAAqBD,IACpBA,EAAmB/zC,UACnBV,IAAmBO,kBAAkBk0C,EAAmB/zC,WA5D1C,KAgEfm0C,iBAAoBD,IACnBA,EAAkBryC,SAClBtB,IAAkBoB,iBAAiBuyC,EAAkBryC,UAlEvC,KAsEf4yC,cAAiBD,IAChBA,EAAehtC,MACfF,IAAesD,UAAU4pC,EAAehtC,OAxE1B,KA4EfotC,YAAeD,IAElB,GAAIA,EAAa5wB,OAAQ,CACrB,MAAMwxB,EAAeZ,EAAa5wB,OAAOrsB,OACzC,IAAIkmB,EAAiB,EACjB+2B,EAAa5wB,OAAOnG,YACpBA,EAAY+2B,EAAa5wB,OAAOnG,WAEhC23B,IAAiBrkC,EAAiBskC,WAClC19C,YAAO,gBAAKqwC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,UAAW,CAAErS,UAAW,IAAMC,KAAM,YACnGtT,QAAQC,IAAK,gBAAK+vC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,YAC9D03B,IAAiBrkC,EAAiBukC,WACzC39C,YAAO,gBAAKqwC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,UAAW,CAAErS,WAAW,EAAOC,KAAM,YACpGtT,QAAQiP,KAAM,gBAAK+gC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,YAC/D03B,IAAiBrkC,EAAiBwkC,YACzC59C,YAAO,gBAAKqwC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,UAAW,CAAErS,WAAW,EAAOC,KAAM,UACpGtT,QAAQJ,MAAO,gBAAKowC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,YAChE03B,IAAiBrkC,EAAiBykC,eACzC79C,YAAO,gBAAKqwC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,UAAW,CAAErS,UAAW,IAAMC,KAAM,YACnGtT,QAAQC,IAAK,gBAAK+vC,YAAgBvqB,YAAe+2B,EAAa5wB,OAAOlG,eAzG/Ey3B,EASazuB,c,EAqGnB,MAAM0rB,EAAsB+C,EAAoB1uB,e,gCCtHhD,qDAIA,MAAMgvB,EAUMj/C,cAAe,KAIhBy5C,eAAkBH,IACrB,MAAM/xB,EAAY+xB,EAAgB/xB,UAElC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,EACA9jB,QAAQC,IAAK,2CAAYy9C,MAEzB19C,QAAQJ,MAAO,2CAAY89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAC9EpkB,YAAO,2CAAY+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAfpG,KAqBf+kC,iBAAoBD,IACvB,MAAMpyB,EAAYoyB,EAAkBpyB,UAEpC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,EACA9jB,QAAQC,IAAK,uDAAcy9C,MAE3B19C,QAAQJ,MAAO,uDAAc89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAChFpkB,YAAO,uDAAc+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAhCtG,KAsCfklC,iBAAoBD,IACvB,MAAMvyB,EAAYuyB,EAAkBvyB,UAEpC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,EACA9jB,QAAQC,IAAK,uDAAcy9C,MAE3B19C,QAAQJ,MAAO,uDAAc89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAChFpkB,YAAO,uDAAc+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAjDtG,KAwDfqlC,iBAAoBD,IACvB,MAAM1yB,EAAY0yB,EAAkB1yB,UAEpC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,EACA9jB,QAAQC,IAAK,uDAAcy9C,MAE3B19C,QAAQJ,MAAO,uDAAc89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAChFpkB,YAAO,uDAAc+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAnEtG,KAyEfsqC,oBAAuB/E,IAC1B,MAAM7yB,EAAY6yB,EAAqB7yB,UAEvC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,EACA9jB,QAAQC,IAAK,uDAAcy9C,MAE3B19C,QAAQJ,MAAO,uDAAc89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAChFpkB,YAAO,uDAAc+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OApFtG,KAyFf0lC,oBAAuBD,IAC1B,MAAM/yB,EAAY+yB,EAAqB/yB,UAEvC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnC,GAAgB,IAAZE,EAAe,CACf,MAAM85B,EAAoB9E,EAAqBpvC,QAAQpE,OACvDtF,QAAQC,IAAK,mEAAgBy9C,iBAAsBE,uBACnDx1C,IAAkBmB,yBAAyBuvC,EAAqBpvC,cAEhE1J,QAAQJ,MAAO,mEAAgB89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAClFpkB,YAAO,mEAAgB+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,MAtGxG,KA2Gf6lC,wBAA2BD,IAC9B,MAAMlzB,EAAYkzB,EAAyBlzB,UAE3C,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,GACA9jB,QAAQC,IAAK,+EAAkBy9C,iBAAsBzE,EAAyBl0C,SAASO,4BAYvFrB,IAAmBU,0BAA0Bs0C,EAAyBl0C,YAEtE/E,QAAQJ,MAAO,mEAAgB89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAClFpkB,YAAO,mEAAgB+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAlIxG,KAwIfgmC,qBAAwBD,IAC3B,MAAMrzB,EAAYqzB,EAAsBrzB,UAExC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,GACA9jB,QAAQC,IAAK,mEAAgBy9C,iBAAsBtE,EAAsBvxC,SAASvC,4BAClF6B,IAAmBM,0BAA0B2xC,EAAsBvxC,YAEnE7H,QAAQJ,MAAO,mEAAgB89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAClFpkB,YAAO,mEAAgB+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OApJxG,KA0JfsmC,kBAAqBD,IACxB,MAAM3zB,EAAY2zB,EAAmB3zB,UAErC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,GACA9jB,QAAQC,IAAK,mEAAgBy9C,iBAAsBhE,EAAmB1zC,MAAMV,4BAC5EE,IAAgBK,uBAAuB6zC,EAAmB1zC,SAE1DhG,QAAQJ,MAAO,mEAAgB89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAClFpkB,YAAO,mEAAgB+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAtKxG,KA4KfmmC,kBAAqBD,IACxB,MAAMxzB,EAAYwzB,EAAmBxzB,UAErC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,GACA9jB,QAAQC,IAAK,mEAAgBy9C,iBAAsBnE,EAAmB/tC,MAAMlG,4BAC5E0F,IAAgBK,uBAAuBkuC,EAAmB/tC,SAE1DxL,QAAQJ,MAAO,mEAAgB89C,oBAAyB55B,8BAAgBiC,EAAUhC,YAClFpkB,YAAO,mEAAgB+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAxLxG,KA6LfymC,iBAAoBD,IACvB,MAAM9zB,EAAY8zB,EAAkB9zB,UAEpC,GAAIA,EAAW,CACX,MAAMjC,EAAUiC,EAAUjC,QACpB45B,EAAmB33B,EAAUnC,cAEnB,IAAZE,GACA9jB,QAAQC,IAAK,2DAAkBy9C,iBAAsB7D,EAAkBxqC,KAAK/J,4BAC5E6J,IAAeuD,sBAAsBmnC,EAAkBxqC,QAEvDrP,QAAQJ,MAAO,2DAAkB89C,oBAAyB55B,8BAAgBiC,EAAUhC,YACpFpkB,YAAO,2DAAkB+9C,oBAAyB55B,8BAAgBiC,EAAUhC,WAAY,CAAEzQ,KAAM,QAASD,WAAW,OAzM1G,KA8Mf4mC,eAAkBD,IAErB,GADAr6C,YAAO,uEAAeq6C,EAAgBlmC,OAAQ,CAAER,KAAM,UAClD0mC,EAAgBnvB,uBAAmE,KAA1CmvB,EAAgBnvB,sBAA8B,CACvF,MAAMjH,EAAgBo2B,EAAgBnvB,sBACtC7qB,QAAQJ,MAAO,6DAAegkB,8BAAsBo2B,EAAgBlmC,QACpEnU,YAAO,6DAAeikB,8BAAsBo2B,EAAgBlmC,OAAQ,CAAER,KAAM,QAASD,WAAW,SAEhGrT,QAAQJ,MAAO,uGAAsBo6C,EAAgBlmC,QACrDnU,YAAO,uEAAeq6C,EAAgBlmC,OAAQ,CAAER,KAAM,QAASD,WAAW,MAhOhFoqC,EAEYhvB,YAAc,KACnBgvB,EAAoB/uB,WACrB+uB,EAAoB/uB,SAAW,IAAI+uB,GAEhCA,EAAoB/uB,UAN7B+uB,EASa/uB,c,EA4NnB,MAAMspB,EAAsByF,EAAoBhvB,e,+BCxOhD,weAEA,MAAMwQ,EAAkB,4GAElBC,EAAoB,mKAEpBE,EAAc,sFAEdV,EAAuB,oBAGvBwH,EAAe,CAACnN,EAAe8kB,EAAkBC,KAEnD,IACI,QAActiC,IAAVud,EACA,MAAO,YACJ,GAAInpB,OAAOmuC,MAAMhlB,GACpB,MAAO,KAEP,GAAIilB,KAAKC,IAAIllB,GAAS,KAClB,OAAOA,EAAMmlB,cAAcL,GAGnC,MAAMpe,EAAS1G,EAAMolB,QAAQN,GAC7B,GAAIC,EAAO,CACP,MAAMM,EAAM3e,EAAO4K,QAAQ,MAAQ,EAAI,sBAAwB,uBAC/D,OAAO5K,EAAOxqB,QAAQmpC,EAAK,OAE3B,OAAO3e,EAEb,MAAO7/B,GAEL,OADAI,QAAQC,IAAI,yDAAaL,GAClB,UAKT+G,EAAc,CAAC03C,EAAUC,KAC3B,IACI,IAAI1lB,EAAWylB,EAIf,MAH0B,kBAAdzlB,IACRA,EAAW3c,OAAOoiC,IAElBC,GAAa1lB,EAAStzB,OACfszB,EAEH,mIAAmI2lB,UAAU,EAAGD,EAAY1lB,EAAStzB,QAAWszB,EAC1L,MAAOh5B,GAEL,MADAI,QAAQJ,MAAM,mDAAYA,GACpBA,IAIR4+C,EAAa,CAACC,EAAYC,KAC5B,IAAKD,EACD,MAAO,GAGX,IAAIhf,EAASif,EACb,IACQ,OAAO/f,KAAKc,KACZA,EAASA,EAAOxqB,QAAQ0pC,OAAOC,GAAM,GAAEH,EAAKI,gBAAiBC,OAAO,EAAIH,OAAOC,GAAGt5C,UAEtF,MAAMy5C,EAAI,CACN,KAAMN,EAAKO,WAAa,EACxB,KAAMP,EAAKQ,UACX,KAAMR,EAAKS,WACX,KAAMT,EAAKU,aACX,KAAMV,EAAKW,aACX,KAAMX,EAAKY,mBAGTC,EAAU3mC,OAAO2B,KAAKykC,GAC5B,IAAK,IAAI15C,EAAI,EAAGA,EAAIi6C,EAAQh6C,OAAQD,IAAK,CACrC,MAAMk6C,EAAID,EAAQj6C,GAClB,GAAI,IAAIs5C,OAAQ,IAAGY,MAAM5gB,KAAKc,GAAS,CACnC,MAAM+f,EAAO,GAAET,EAAEQ,KAEb9f,EADM,OAAN8f,EACS9f,EAAOxqB,QAAQ0pC,OAAOC,GAA0B,IAArBD,OAAOC,GAAGt5C,OAAgBk6C,EAAM74C,EAAY64C,EAAK,IAE5E/f,EAAOxqB,QAAQ0pC,OAAOC,GAA0B,IAArBD,OAAOC,GAAGt5C,OAAgBk6C,EAAM74C,EAAY64C,EAAK,MAInG,MAAO5/C,GACLI,QAAQC,IAAI,yDAAaL,GACzB6/B,EAASgf,EAAKgB,cAGlB,OAAOhgB,GAILuQ,EAAkB,CAACvqB,EAA2Bi6B,KAChD,IAAKj6B,EACD,MAAO,GAEX,IACI,MAAMg5B,EAAO,IAAIzB,KAAKv3B,GACtB,OACW+4B,EAAWC,EADlBiB,EACwBA,EAEJ,2BAC1B,MAAO9/C,GAEL,OADAI,QAAQJ,MAAM,uCAAUA,GACjB,UAoBTwnC,EAAY2X,IACd,GAAIA,aAAav/C,MAAO,CACpB,MAAM2V,EAAI,GACV,IAAK,IAAI9P,EAAI,EAAGA,EAAI05C,EAAEz5C,SAAUD,EAC5B8P,EAAE9P,GAAK+hC,EAAS2X,EAAE15C,IAEtB,OAAO8P,EAEJ,GAAI4pC,aAAapmC,OAAQ,CAC5B,MAAMxD,EAAI,GACV,IAAK,MAAM9P,KAAK05C,EACR15C,IACA8P,EAAE9P,GAAK+hC,EAAS2X,EAAE15C,KAG1B,OAAO8P,EAEP,OAAO4pC,GAITjP,EAA4B/W,IAC9B,IAEI,IAAI4mB,EAAI1jC,OAAO8c,GAAOsR,QAAQ,KAC9B,IAAW,IAAPsV,EACA,OAAO,EAEPA,GAAQ,EAEZ,MAAMC,EAAI3jC,OAAO8c,GAAOzzB,OAASq6C,EACjC,OAAIC,EAAI,EACGA,EAEA,EAEb,MAAOhgD,GAEL,OADAI,QAAQJ,MAAM,gEACP,OAKTmwC,EAAwBhX,MACZ,IAAVA,GAAgBA,GAASA,IAAUnpB,OAAOC,WAQ5C7K,GAAW,GAoBX,aAAEgV,EAAF,aAAgBjT,EAAhB,iBAA8BwS,GAAqBvS,MAAIC,SAASC,GAEhEwjC,EAAyB,GAC/BA,EAAgB31B,KAAK,CACjBwd,IAAK,KACLpC,KAAM,iBAEVxX,OAAO2B,KAAKN,GAAczF,SACrBC,IACGk2B,EAAgB31B,KAAK,CACjBwd,IAAKvY,EAAaxF,GAClB2b,KAAM3b,OAKlB,MAAMo2B,EAAyB,GAC/BA,EAAgB71B,KAAK,CACjBwd,IAAK,KACLpC,KAAM,iBAEVxX,OAAO2B,KAAKvT,GAAcwN,SACrBC,IACGo2B,EAAgB71B,KAAK,CACjBwd,IAAKxrB,EAAayN,GAClB2b,KAAM3b,OAKlB,MAAMm2B,EAA6B,GACnCA,EAAoB51B,KAAK,CACrBwd,IAAK,KACLpC,KAAM,iBAEVxX,OAAO2B,KAAKf,GAAkBhF,SACzBC,IACGm2B,EAAoB51B,KAAK,CACrBwd,IAAKhZ,EAAiB/E,GACtB2b,KAAM3b,Q,gCC9OlB,qDAIA,MAAMqrC,EAOF,qBAII,OAHKA,EAAuBnxB,WACxBmxB,EAAuBnxB,SAAW,IAAImxB,GAEnCA,EAAuBnxB,SAa1BlwB,cAAe,KATfshD,iBAA2B,EASb,KARdC,cAAwB,EAQV,KAPdC,kBAA4B,EAOd,KANdC,cAAwB,EAMV,KALdC,UAAoB,EAKN,KAJdC,YAAsB,GAIR,KAHdh+C,UAAoB,GAGN,KAFdi+C,GAAuB,KAET,KAGf58C,aAAgBrB,IACnBxD,KAAKwD,UAAYA,GAJC,KAOfk+C,UAAY,KACR,CACH,gBAAmB1hD,KAAKmhD,gBACxB,cAAiBnhD,KAAKshD,cACtB,UAAathD,KAAKuhD,UAClB,YAAevhD,KAAKwhD,YACpB,kBAAqBxhD,KAAKqhD,oBAbZ,KAiBf9I,eAAiB,IACbv4C,KAAKshD,gBAAkBJ,EAAuBS,iBAlBnC,KAqBf78C,QAAU,KACT9E,KAAKwD,UACDxD,KAAKshD,gBAAkBJ,EAAuBU,qBAC9C5hD,KAAKohD,cAAe,EACpBphD,KAAKshD,cAAgBJ,EAAuBW,kBAC5C7hD,KAAKmhD,iBAAkB,EAEvBnhD,KAAKyhD,GAAK,IAAIK,UAAW,QAAO19C,OAAO8R,SAAS6rC,YAAY39C,OAAO8R,SAASwQ,kBAC5E1mB,KAAKyhD,GAAGO,WAAa,cACrBhiD,KAAKyhD,GAAGxtB,iBAAiB,OAAQj0B,KAAKiiD,QACtCjiD,KAAKyhD,GAAGxtB,iBAAiB,QAASj0B,KAAKkiD,SACvCliD,KAAKyhD,GAAGxtB,iBAAiB,QAASj0B,KAAKmiD,SACvCniD,KAAKyhD,GAAGxtB,iBAAiB,UAAWj0B,KAAKoiD,YAEzC/gD,QAAQC,IAAI,qGAGhBD,QAAQJ,MAAM,oFAtCA,KA0CfgE,WAAa,KAGhB,GAFAjF,KAAKohD,cAAe,EACpBphD,KAAKqhD,kBAAoB,EACrBrhD,KAAKshD,gBAAkBJ,EAAuBS,kBAAoB3hD,KAAKyhD,GAAI,CAC3EzhD,KAAKshD,cAAgBJ,EAAuBmB,qBAC5C,IACIriD,KAAKyhD,GAAGa,QACV,MAAOrhD,GACLI,QAAQC,IAAI,uEAAiBL,SAGjCI,QAAQC,IAAI,8EArDE,KAyDd2gD,OAAS,KACb5gD,QAAQC,IAAK,gFACTtB,KAAKyhD,IACLzhD,KAAKyhD,GAAGc,KAAM,kBAAiBviD,KAAKwD,gBA5DtB,KAgEd4+C,UAAaI,IACjB,GAAwB,kBAAZA,EAAE/gD,KAAoB,CACbgD,KAAKC,MAAM89C,EAAE/gD,MACjBghD,WACTziD,KAAKqhD,kBAAoB,EACzBrhD,KAAKshD,cAAgBJ,EAAuBS,iBAC5C3gD,IAAMqE,QAAQ,iDACd6oB,IAAiBsqB,kBAElB,CACH,MAAMhrB,EAAQ,IAAIk1B,WAAWF,EAAE/gD,MAC/BysB,IAAiBuqB,YAAYjrB,KA3Ef,KA+Ed00B,QAAWM,IAGf,GAFAxiD,KAAKshD,cAAgBJ,EAAuBU,oBAC5C5gD,IAAMC,MAAO,wDAAoBuhD,EAAEnvC,qBAAWmvC,EAAEG,UAC5C3iD,KAAKyhD,GAAI,CACT,IACIzhD,KAAKyhD,GAAGa,QACV,MAAOrhD,GACLI,QAAQC,IAAI,uEAAiBkhD,GAEjC,IACIxiD,KAAKyhD,GAAGttB,oBAAoB,OAAQn0B,KAAKiiD,QACzCjiD,KAAKyhD,GAAGttB,oBAAoB,QAASn0B,KAAKkiD,SAC1CliD,KAAKyhD,GAAGttB,oBAAoB,QAASn0B,KAAKmiD,SAC1CniD,KAAKyhD,GAAGttB,oBAAoB,UAAWn0B,KAAKoiD,WAC9C,MAAOnhD,GACLI,QAAQC,IAAI,mDAAYkhD,IAGhCxiD,KAAKuhD,UAAYiB,EAAEnvC,KACnBrT,KAAKwhD,YAAcgB,EAAEG,OACrB,MAAMC,EAAO5iD,KACE,MAAXwiD,EAAEnvC,MAA8B,8BAAbmvC,EAAEG,QACrBthD,QAAQC,IAAI,8FACZN,IAAMC,MAAM,8FACZjB,KAAKmhD,iBAAkB,GACL,OAAXqB,EAAEnvC,MAA8B,8BAAbmvC,EAAEG,QAC5BthD,QAAQC,IAAI,8FACZN,IAAMC,MAAM,8FACZjB,KAAKmhD,iBAAkB,GAEnBnhD,KAAKohD,cACL//C,QAAQC,IAAK,mEACbtB,KAAKshD,cAAgBJ,EAAuBW,kBAC5C7hD,KAAKqhD,oBACLx7C,YAAW,KACP+8C,EAAKtB,cAAgBJ,EAAuBU,oBACxCgB,EAAKxB,eACLpgD,IAAMsP,KAAM,kBAAYsyC,EAAKvB,mDAC7BuB,EAAK99C,aAEV,MAEHzD,QAAQC,IAAK,4DAzHH,KA6Hd6gD,QAAWK,IACfxiD,KAAKshD,cAAgBJ,EAAuBU,oBAC5CvgD,QAAQJ,MAAO,2BAAOuhD,IA/HJ,KAkIfvE,SAAYx8C,IACf,GAAKzB,KAAKyhD,IAA+B,IAAvBzhD,KAAKyhD,GAAGoB,WAInB,CACH,IACI7iD,KAAKyhD,GAAGc,KAAK9gD,GACf,MAAOR,GAGL,OAFAI,QAAQJ,MAAM,yDAAaA,GAC3BD,IAAMC,MAAO,oEACN,EAEX,OAAO,EATP,OAFAI,QAAQJ,MAAM,4HACdD,IAAMC,MAAO,sIACN,IA9JbigD,EAEYU,oBAAsB,EAFlCV,EAGYS,iBAAmB,EAH/BT,EAIYW,kBAAoB,EAJhCX,EAKYmB,qBAAuB,EALnCnB,EAcanxB,c,EA8JnB,MAAMnrB,EAAyBs8C,EAAuBpxB,gB","file":"static/js/main.8996b3b0.chunk.js","sourcesContent":["import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass NodeStore {\r\n    nodeList: any[] = [];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            nodeList: observable,\r\n            getNodeList: action,\r\n            createNode: action,\r\n            deleteNodeByNodeId: action,\r\n            resetNodeTokenByNodeId: action,\r\n            updateNodeDescriptionByNodeId: action,\r\n            setNodeList: action\r\n        });\r\n    }\r\n\r\n    setNodeList(nodeList:any[]) {\r\n        this.nodeList = nodeList\r\n    }\r\n\r\n    getNodeList() {\r\n        request('/api/management/node/getNodeList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const nodeList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setNodeList(nodeList)\r\n                } else {\r\n                    toast.error(`查询节点错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    createNode() {\r\n        request('/api/management/node/createNode').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`新增节点错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteNodeByNodeId(nodeId: number) {\r\n        request('/api/management/node/deleteNodeByNodeId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': nodeId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`删除节点错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    resetNodeTokenByNodeId(nodeId: number) {\r\n        request('/api/management/node/resetNodeTokenByNodeId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': nodeId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`重置节点令牌错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    updateNodeDescriptionByNodeId(nodeId: number, description: string) {\r\n        request('/api/management/node/updateNodeDescriptionByNodeId', {\r\n            method: 'POST',\r\n            data: {\r\n                'nodeId': nodeId,\r\n                'description': description\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`更新节点描述错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const nodeStore = new NodeStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass GatewayStore {\r\n    gatewayList: any[] = [];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            gatewayList: observable,\r\n            getGatewayList: action,\r\n            saveOrUpdateGateway: action,\r\n            deleteGatewayByGatewayId: action,\r\n            connectGatewayByGatewayId: action,\r\n            disconnectGatewayByGatewayId: action,\r\n            disconnectAllGateways: action,\r\n            connectAllGateways: action,\r\n            setGatewayList: action\r\n        });\r\n    }\r\n\r\n    setGatewayList(gatewayList:any[]) {\r\n        this.gatewayList = gatewayList\r\n    }\r\n\r\n    getGatewayList() {\r\n        request('/api/management/gateway/getGatewayList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const gatewayList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setGatewayList(gatewayList)\r\n                } else {\r\n                    toast.error(`查询网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveOrUpdateGateway(gateway: any) {\r\n        request('/api/management/gateway/saveOrUpdateGateway', {\r\n            method: 'POST',\r\n            data: {\r\n                ...gateway\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`增加或修改网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteGatewayByGatewayId(gatewayId: string) {\r\n        request('/api/management/gateway/deleteGatewayByGatewayId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': gatewayId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`删除网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n\r\n    connectGatewayByGatewayId(gatewayId: string) {\r\n        request('/api/management/gateway/connectGatewayByGatewayId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': gatewayId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`连接网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n\r\n    disconnectGatewayByGatewayId(gatewayId: string) {\r\n        request('/api/management/gateway/disconnectGatewayByGatewayId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': gatewayId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`断开网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n\r\n    disconnectAllGateways() {\r\n        request('/api/management/gateway/disconnectAllGateways').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`断开全部网关错误:${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    connectAllGateways() {\r\n        request('/api/management/gateway/connectAllGateways').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`连接全部网关错误:${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n}\r\nexport const gatewayStore = new GatewayStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass UserStore {\r\n    userList: any[] = [];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userList: observable,\r\n            getUserList: action,\r\n            addUser: action,\r\n            deleteUserByUsername: action,\r\n            updateUserDescriptionByUsername: action,\r\n            updateUserPasswordByUsername: action,\r\n            updateUserPermissionByUsername: action,\r\n            setUserList: action\r\n        });\r\n    }\r\n\r\n    setUserList(userList:any[]){\r\n        this.userList = userList\r\n    }\r\n\r\n    getUserList() {\r\n        request('/api/management/user/getUserList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const userList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setUserList(userList)\r\n                } else {\r\n                    toast.error(`查询用户错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    addUser(user: any) {\r\n\r\n        request('/api/management/user/addUser', {\r\n            method: 'POST',\r\n            data: {\r\n                ...user\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`新增用户错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteUserByUsername(username: string) {\r\n        request('/api/management/user/deleteUserByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': username\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`删除用户错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n\r\n    updateUserDescriptionByUsername(username: string, description: string) {\r\n        request('/api/management/user/updateUserDescriptionByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                'username': username,\r\n                'description': description\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`更新用户描述错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n\r\n    updateUserPasswordByUsername(username: string, password: string) {\r\n        request('/api/management/user/updateUserPasswordByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                'username': username,\r\n                'newPassword': password\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`更新用户密码错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    updateUserPermissionByUsername(user: any) {\r\n\r\n        request('/api/management/user/updateUserPermissionByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                ...user\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`更新用户权限错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const userStore = new UserStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\nimport { webSocketClientHandler } from '../node/client/websocket/webSocketClientHandler';\r\n\r\nclass AuthenticationStore {\r\n    isAuthenticated = false;\r\n    userPo: any;\r\n    saveLoginInfoState: boolean = false;\r\n    username: string = \"\";\r\n    password: string = \"\";\r\n    operatorId: string = \"\";\r\n    authToken: string = \"\";\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            isAuthenticated: observable,\r\n            userPo: observable,\r\n            saveLoginInfoState: observable,\r\n            username: observable,\r\n            password: observable,\r\n            operatorId: observable,\r\n            authToken: observable,\r\n            initStore: action,\r\n            setUsername: action,\r\n            setPassword: action,\r\n            setSaveLoginInfoState: action,\r\n            logout: action,\r\n            getAuthToken: action,\r\n            checkLoginStatus: action,\r\n            login: action,\r\n            setLoginSuccess: action,\r\n            deleteLoginInfo: action,\r\n            changePassword: action\r\n        });\r\n\r\n        this.initStore()\r\n\r\n        window.setInterval(() => {\r\n            if (this.isAuthenticated) {\r\n                this.checkLoginStatus()\r\n            }\r\n        }, 15000);\r\n    }\r\n\r\n    initStore() {\r\n        const userPoJsonStr = sessionStorage.getItem('LOGINED_USER');\r\n        if (userPoJsonStr) {\r\n            this.userPo = JSON.parse(userPoJsonStr);\r\n            this.authToken = this.userPo.randomAuthToken;\r\n            this.isAuthenticated = true;\r\n            this.operatorId = this.userPo.operatorId;\r\n            this.username = this.userPo.username;\r\n            webSocketClientHandler.setAuthToken(this.authToken)\r\n            webSocketClientHandler.connect()\r\n        } else {\r\n            const username = localStorage.getItem(\"username\")\r\n            if (username) {\r\n                this.username = username;\r\n                this.saveLoginInfoState = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setUsername(username: string) {\r\n        this.username = username;\r\n    }\r\n\r\n    setPassword(password: string) {\r\n        this.password = password;\r\n    }\r\n\r\n    setSaveLoginInfoState(saveLoginInfoState: boolean) {\r\n        this.saveLoginInfoState = saveLoginInfoState;\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(\"LOGINED_USER\");\r\n        this.userPo = null;\r\n        this.isAuthenticated = false;\r\n        this.authToken = \"\";\r\n        webSocketClientHandler.disconnect()\r\n        request('/api/logout')\r\n    }\r\n\r\n    getAuthToken() {\r\n        return this.authToken\r\n    }\r\n\r\n    checkLoginStatus() {\r\n        request('/api/checkLoginStatus')\r\n    }\r\n\r\n    login() {\r\n        request('/api/login', {\r\n            method: 'POST',\r\n            data: {\r\n                'username': this.username,\r\n                'password': this.password\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.userPo = res.voData;\r\n                    this.setLoginSuccess(this.userPo)\r\n                } else {\r\n                    toast.error(`登录错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    setLoginSuccess(userPo:any){\r\n        if (this.saveLoginInfoState) {\r\n            localStorage.setItem(\"username\", this.username);\r\n        } else {\r\n            localStorage.removeItem(\"username\")\r\n            this.username = \"\"\r\n            this.saveLoginInfoState = false;\r\n        }\r\n        sessionStorage.setItem('LOGINED_USER', JSON.stringify(this.userPo));\r\n        this.operatorId = this.userPo.operatorId;\r\n        this.authToken = this.userPo.randomAuthToken;\r\n        this.isAuthenticated = true;\r\n        webSocketClientHandler.setAuthToken(this.authToken)\r\n        webSocketClientHandler.connect()\r\n    }\r\n\r\n    deleteLoginInfo() {\r\n\r\n        localStorage.removeItem(\"username\")\r\n\r\n        this.username = \"\";\r\n        this.saveLoginInfoState = false;\r\n    }\r\n\r\n    changePassword(password: string, newPassword: string) {\r\n        request('/api/changePassword', {\r\n            method: 'POST',\r\n            data: {\r\n                'password': password,\r\n                'newPassword': newPassword\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    toast.success(\"修改密码完成\")\r\n                } else {\r\n                    toast.error(`修改密码错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n}\r\nexport const authenticationStore = new AuthenticationStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { isDevEnv } from '../utils';\r\n\r\nclass TradeContractStore {\r\n    mixContractList: any[] = [];\r\n    mxiContractMap: Map<string, any> = new Map();\r\n\r\n    hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            mixContractList: observable,\r\n            getMixContractList: action,\r\n            storeContract: action,\r\n            clearAndStoreContractList: action,\r\n            storeContractList: action,\r\n            coverMapToList: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 20)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 500)\r\n    }\r\n\r\n    getMixContractList() {\r\n        rpcClientApi.asyncGetMixContractList()\r\n    }\r\n\r\n    storeContract(contract: any) {\r\n        if (isDevEnv) {\r\n            console.debug(contract)\r\n        }\r\n        this.mxiContractMap.set(contract.unifiedSymbol, contract);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStoreContractList(mixContractList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(mixContractList)\r\n        }\r\n        const newMixContractMap: Map<string, any> = new Map();\r\n        for (let i = 0; i <  mixContractList.length; i++) {\r\n            const contract = mixContractList[i]\r\n            newMixContractMap.set(contract.unifiedSymbol, contract)\r\n        }\r\n        this.mxiContractMap = newMixContractMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeContractList(mixContractList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(mixContractList)\r\n        }\r\n        for (let i = 0; i < mixContractList.length; i++) {\r\n            const contract = mixContractList[i]\r\n            this.mxiContractMap.set(contract.unifiedSymbol, contract);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        this.mixContractList = [...this.mxiContractMap.values()]\r\n    }\r\n\r\n\r\n\r\n}\r\nexport const tradeContractStore = new TradeContractStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { leftZeroPad, isDevEnv } from '../utils'\r\nimport { tradeContractStore } from './tradeContractStore'\r\nclass TradeOrderStore {\r\n\r\n    orderList: any[] = [];\r\n    orderMap: Map<string, any> = new Map();\r\n\r\n    hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            orderList: observable,\r\n            getOrderList: action,\r\n            storeOrder: action,\r\n            clearAndStoreOrderList: action,\r\n            storeOrderList: action,\r\n            coverMapToList: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 30)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 300)\r\n    }\r\n\r\n    getOrderList() {\r\n        rpcClientApi.asyncGetOrderList()\r\n    }\r\n\r\n    storeOrder(order: any) {\r\n        if (isDevEnv) {\r\n            console.debug(order)\r\n        }\r\n        if (order.contract) {\r\n            tradeContractStore.storeContract(order.contract)\r\n        }\r\n        this.orderMap.set(order.orderId, order);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStoreOrderList(orderList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(orderList)\r\n        }\r\n        const newOrderMap: Map<string, any> = new Map();\r\n        for (let i = 0; i < orderList.length; i++) {\r\n            const order = orderList[i]\r\n            if (order.contract) {\r\n                tradeContractStore.storeContract(order.contract)\r\n            }\r\n            newOrderMap.set(order.orderId, order)\r\n        }\r\n        this.orderMap = newOrderMap;\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeOrderList(orderList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(orderList)\r\n        }\r\n        \r\n        for (let i = 0; i < orderList.length; i++) {\r\n            const order = orderList[i]\r\n            if (order.contract) {\r\n                tradeContractStore.storeContract(order.contract)\r\n            }\r\n            this.orderMap.set(order.orderId, order);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        const tempOrderList = [...this.orderMap.values()]\r\n        this.orderList = this.sortOrderListByDatetimeAndOrderId(tempOrderList);\r\n    }\r\n\r\n    private sortOrderListByDatetimeAndOrderId(orderList: any[]) {\r\n        try {\r\n            return orderList.sort((orderA: any, orderB: any) => {\r\n                let orderAKey = \"\";\r\n                if (!orderA.orderDate || orderA.orderDate === \"\") {\r\n                    orderAKey = \"00000000\";\r\n                } else {\r\n                    orderAKey = orderA.orderDate\r\n                }\r\n\r\n                if (!orderA.orderTime || orderA.orderTime === \"\") {\r\n                    orderAKey += \"00:00:00\";\r\n                } else {\r\n                    orderAKey += orderA.orderTime\r\n                }\r\n                orderAKey += leftZeroPad(orderA.adapterOrderId, 30)\r\n\r\n                let orderBKey = \"\";\r\n                if (!orderB.orderDate || orderB.orderDate === \"\") {\r\n                    orderBKey = \"00000000\";\r\n                } else {\r\n                    orderBKey = orderB.orderDate\r\n                }\r\n\r\n                if (!orderB.orderTime || orderB.orderTime === \"\") {\r\n                    orderBKey += \"00:00:00\";\r\n                } else {\r\n                    orderBKey += orderB.orderTime\r\n                }\r\n                orderBKey += leftZeroPad(orderB.adapterOrderId, 30)\r\n                return orderBKey.localeCompare(orderAKey)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return orderList;\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport const tradeOrderStore = new TradeOrderStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { leftZeroPad, isDevEnv } from '../utils';\r\nimport { tradeAccountStore } from './tradeAccountStore'\r\nimport { tradeContractStore } from './tradeContractStore';\r\nimport { xyz } from \"../node/pb/pb\";\r\n\r\nconst { CurrencyEnum } = xyz.redtorch.pb\r\n\r\nclass TradePositionStore {\r\n\r\n    positionList: any[] = [];\r\n    positionMap: Map<string, any> = new Map();\r\n    summaryMap: Map<string, any> = new Map();\r\n\r\n    private hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            positionList: observable,\r\n            summaryMap: observable,\r\n            getPositionList: action,\r\n            storePosition: action,\r\n            clearAndStorePositionList: action,\r\n            storePositionList: action,\r\n            coverMapToList: action,\r\n            calcSummary: action\r\n        });\r\n\r\n        const cnySummary = {\r\n            \"allContractValue\": 0,\r\n            \"allOpenPositionProfit\": 0,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n        setTimeout(this.startIntervalCheckChange, 40)\r\n    }\r\n\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 300)\r\n    }\r\n\r\n    getPositionList() {\r\n        rpcClientApi.asyncGetPositionList()\r\n    }\r\n\r\n    storePosition(position: any) {\r\n        if (isDevEnv) {\r\n            console.debug(position)\r\n        }\r\n        if (position.contract) {\r\n            tradeContractStore.storeContract(position.contract)\r\n        }\r\n        this.positionMap.set(position.positionId, position);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStorePositionList(positionList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(positionList)\r\n        }\r\n        const newPositionMap: Map<string, any> = new Map();\r\n        for (let i = 0; i <  positionList.length; i++) {\r\n            const position = positionList[i]\r\n            if (position.contract) {\r\n                tradeContractStore.storeContract(position.contract)\r\n            }\r\n            newPositionMap.set(position.positionId, position)\r\n        }\r\n        this.positionMap = newPositionMap;\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storePositionList(positionList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(positionList)\r\n        }\r\n        for (let i = 0; i < positionList.length; i++) {\r\n            const position = positionList[i]\r\n            if (position.contract) {\r\n                tradeContractStore.storeContract(position.contract)\r\n            }\r\n            this.positionMap.set(position.positionId, position);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n    \r\n    coverMapToList() {\r\n        const tempPositionList = [...this.positionMap.values()]\r\n        this.positionList = this.sortPositionListByAccountIdAndPositionId(tempPositionList);\r\n        this.calcSummary()\r\n    }\r\n\r\n    calcSummary() {\r\n\r\n        let allContractValue = 0;\r\n        let allOpenPositionProfit = 0;\r\n\r\n        const positionList = this.positionList\r\n        for (let i = 0; i < positionList.length; i++) {\r\n            const position = positionList[i]\r\n\r\n            if (tradeAccountStore.selectedAccountIdSet.has(position.accountId)) {\r\n                try {\r\n                    if (position.contract.currency === CurrencyEnum.CNY) {\r\n                        allOpenPositionProfit += (position.openPositionProfit)\r\n                        allContractValue += position.contractValue\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"计算持仓总资金情况错误\", error)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //  暂时只做人民币汇总\r\n        const cnySummary = {\r\n            \"allContractValue\": allContractValue,\r\n            \"allOpenPositionProfit\": allOpenPositionProfit,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n    }\r\n\r\n\r\n    private sortPositionListByAccountIdAndPositionId(positionList: any[]) {\r\n        try {\r\n            return positionList.sort((positionA: any, positionB: any) => {\r\n                let positionAKey = positionA.accountId;\r\n                positionAKey += leftZeroPad(positionA.contract.unifiedSymbol, 50)\r\n\r\n                let positionBKey = positionB.accountId;\r\n                positionBKey += leftZeroPad(positionB.contract.unifiedSymbol, 50)\r\n                return positionBKey.localeCompare(positionAKey)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return positionList;\r\n        }\r\n    }\r\n\r\n}\r\nexport const tradePositionStore = new TradePositionStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { isDevEnv } from '../utils';\r\nimport { tradePositionStore } from './tradePositionStore'\r\nimport { xyz } from \"../node/pb/pb\";\r\n\r\nconst { CurrencyEnum } = xyz.redtorch.pb\r\n\r\nclass TradeAccountStore {\r\n    accountList: any[] = [];\r\n    accountMap: Map<string, any> = new Map();\r\n    selectedAccountIdSet: Set<any> = new Set();\r\n\r\n    summaryMap: Map<string, any> = new Map();\r\n\r\n    private hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            accountList: observable,\r\n            selectedAccountIdSet: observable,\r\n            summaryMap: observable,\r\n            getAccountList: action,\r\n            setSelectedAccountIdSet: action,\r\n            storeAccount: action,\r\n            clearAndStoreAccountList: action,\r\n            storeAccountList: action,\r\n            coverMapToList: action,\r\n            calcSummary: action\r\n        });\r\n\r\n        const cnySummary = {\r\n            \"allBalance\": 0,\r\n            \"allPreBalance\": 0,\r\n            \"allCloseProfit\": 0,\r\n            \"allTodayProfit\": 0,\r\n            \"allPositionProfit\": 0,\r\n            \"allMargin\": 0,\r\n            \"allCommission\": 0,\r\n            \"allDepositAndWithdraw\": 0,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n        setTimeout(this.startIntervalCheckChange, 10)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 300)\r\n    }\r\n\r\n    getAccountList() {\r\n        rpcClientApi.asyncGetAccountList()\r\n    }\r\n\r\n    setSelectedAccountIdSet(selectedAccountIdSet: Set<any>) {\r\n        this.selectedAccountIdSet = selectedAccountIdSet;\r\n        this.calcSummary()\r\n        tradePositionStore.calcSummary()\r\n    }\r\n\r\n    storeAccount(account: any) {\r\n        if (isDevEnv) {\r\n            console.debug(account)\r\n        }\r\n        this.accountMap.set(account.accountId, account);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStoreAccountList(accountList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(accountList)\r\n        }\r\n        const newAccountMap: Map<string, any> = new Map();\r\n        for (let i = 0; i <  accountList.length; i++) {\r\n            const account = accountList[i]\r\n            newAccountMap.set(account.accountId, account)\r\n        }\r\n        this.accountMap = newAccountMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeAccountList(accountList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(accountList)\r\n        }\r\n        for (let i = 0; i < accountList.length; i++) {\r\n            const account = accountList[i]\r\n            this.accountMap.set(account.accountId, account);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        const tempAccountList = [...this.accountMap.values()]\r\n        this.accountList = this.sortAccountListByAccountId(tempAccountList);\r\n        this.calcSummary()\r\n    }\r\n\r\n    calcSummary() {\r\n\r\n        let allBalance = 0;\r\n        let allPreBalance = 0;\r\n        let allCloseProfit = 0;\r\n        let allTodayProfit = 0;\r\n        let allPositionProfit = 0;\r\n        let allMargin = 0;\r\n        let allCommission = 0;\r\n        let allDepositAndWithdraw = 0;\r\n\r\n\r\n        //  暂时只做人民币汇总\r\n        for (let i = 0; i < this.accountList.length; i++) {\r\n            const account = this.accountList[i]\r\n            if (tradeAccountStore.selectedAccountIdSet.has(account.accountId)) {\r\n                try {\r\n                    if (account.currency === CurrencyEnum.CNY) {\r\n                        allBalance += account.balance\r\n                        allTodayProfit += (account.balance - account.preBalance + account.withdraw - account.deposit)\r\n                        allPreBalance += account.preBalance\r\n                        allCloseProfit += account.closeProfit\r\n                        allPositionProfit += account.positionProfit\r\n                        allMargin += account.margin\r\n                        allCommission += account.commission\r\n                        allDepositAndWithdraw += (account.deposit - account.withdraw)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"计算账户总资金情况错误\", error)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //  暂时只做人民币汇总\r\n        const cnySummary = {\r\n            \"allBalance\": allBalance,\r\n            \"allPreBalance\": allPreBalance,\r\n            \"allCloseProfit\": allCloseProfit,\r\n            \"allTodayProfit\": allTodayProfit,\r\n            \"allPositionProfit\": allPositionProfit,\r\n            \"allMargin\": allMargin,\r\n            \"allCommission\": allCommission,\r\n            \"allDepositAndWithdraw\": allDepositAndWithdraw,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n    }\r\n\r\n    private sortAccountListByAccountId(accountList: any[]) {\r\n        try {\r\n            return accountList.sort((accountA: any, accountB: any) => {\r\n                return accountA.accountId.localeCompare(accountB.accountId)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return accountList\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport const tradeAccountStore = new TradeAccountStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { leftZeroPad, isDevEnv } from '../utils';\r\nimport { tradeContractStore } from './tradeContractStore';\r\n\r\nclass TradeTradeStore {\r\n\r\n    tradeList: any[] = [];\r\n    tradeMap: Map<string, any> = new Map();\r\n    private hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tradeList: observable,\r\n            getTradeList: action,\r\n            storeTrade: action,\r\n            clearAndStoreTradeList: action,\r\n            storeTradeList: action,\r\n            coverMapToList: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 60)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 500)\r\n    }\r\n\r\n    getTradeList() {\r\n        rpcClientApi.asyncGetTradeList()\r\n    }\r\n\r\n    storeTrade(trade: any) {\r\n        if (isDevEnv) {\r\n            console.debug(trade)\r\n        }\r\n        if (trade.contract) {\r\n            tradeContractStore.storeContract(trade.contract)\r\n        }\r\n        this.tradeMap.set(trade.tradeId, trade);\r\n        this.hasBeenChanged = true\r\n    }\r\n    clearAndStoreTradeList(tradeList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tradeList)\r\n        }\r\n        const newTradeMap: Map<string, any> = new Map();\r\n        for (let i = 0; i < tradeList.length; i++) {\r\n            const trade = tradeList[i]\r\n            if (trade.contract) {\r\n                tradeContractStore.storeContract(trade.contract)\r\n            }\r\n            newTradeMap.set(trade.tradeId, trade)\r\n        }\r\n        this.tradeMap = newTradeMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeTradeList(tradeList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tradeList)\r\n        }\r\n        for (let i = 0; i < tradeList.length; i++) {\r\n            const trade = tradeList[i]\r\n            if (trade.contract) {\r\n                tradeContractStore.storeContract(trade.contract)\r\n            }\r\n            this.tradeMap.set(trade.tradeId, trade);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        const tempTradeList = [...this.tradeMap.values()]\r\n        this.tradeList = this.sortTradeListByDatetimeAndTradeId(tempTradeList);\r\n    }\r\n\r\n    private sortTradeListByDatetimeAndTradeId(tradeList: any[]) {\r\n        try {\r\n            return tradeList.sort((tradeA: any, tradeB: any) => {\r\n                let tradeAKey = \"\";\r\n                if (!tradeA.tradeDate || tradeA.tradeDate === \"\") {\r\n                    tradeAKey = \"00000000\";\r\n                } else {\r\n                    tradeAKey = tradeA.tradeDate\r\n                }\r\n\r\n                if (!tradeA.tradeTime || tradeA.tradeTime === \"\") {\r\n                    tradeAKey += \"00:00:00\";\r\n                } else {\r\n                    tradeAKey += tradeA.tradeTime\r\n                }\r\n                tradeAKey += leftZeroPad(tradeA.adapterTradeId, 30)\r\n\r\n                let tradeBKey = \"\";\r\n                if (!tradeB.tradeDate || tradeB.tradeDate === \"\") {\r\n                    tradeBKey = \"00000000\";\r\n                } else {\r\n                    tradeBKey = tradeB.tradeDate\r\n                }\r\n\r\n                if (!tradeB.tradeTime || tradeB.tradeTime === \"\") {\r\n                    tradeBKey += \"00:00:00\";\r\n                } else {\r\n                    tradeBKey += tradeB.tradeTime\r\n                }\r\n                tradeBKey += leftZeroPad(tradeB.adapterTradeId, 30)\r\n                return tradeBKey.localeCompare(tradeAKey)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return tradeList;\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\nexport const tradeTradeStore = new TradeTradeStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { tradeContractStore } from './tradeContractStore'\r\nimport { tradeAccountStore } from './tradeAccountStore'\r\nimport { tradeTickStore } from './tradeTickStore'\r\nimport { toast } from 'react-toastify';\r\nimport { isDevEnv } from '../utils';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { xyz } from '../node/pb/pb';\r\n\r\nconst { SubmitOrderReqField,\r\n    ContractField,\r\n    OrderPriceTypeEnum,\r\n    DirectionEnum,\r\n    OffsetFlagEnum,\r\n    TimeConditionEnum,\r\n    VolumeConditionEnum,\r\n    HedgeFlagEnum,\r\n    AccountField,\r\n    ContingentConditionEnum,\r\n    ForceCloseReasonEnum,\r\n} = xyz.redtorch.pb\r\nclass TradeActionStore {\r\n    selectedContract: any;\r\n    orderPriceType: number = OrderPriceTypeEnum.OPT_LimitPrice;\r\n    autoFillOrderPriceType: string = \"LAST\";\r\n    price: number | string = \"\";\r\n    stopPrice: number | string = \"\";\r\n    volume: number = 0;\r\n    timeCondition: number = TimeConditionEnum.TC_GFD;\r\n    volumeCondition: number = VolumeConditionEnum.VC_AV;\r\n    minVolume: number = 1;\r\n    hedgeFlag: number = HedgeFlagEnum.HF_Speculation;\r\n    contingentCondition: number = ContingentConditionEnum.CC_Immediately;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            selectedContract: observable,\r\n            orderPriceType: observable,\r\n            autoFillOrderPriceType: observable,\r\n            price: observable,\r\n            stopPrice: observable,\r\n            volume: observable,\r\n            timeCondition: observable,\r\n            volumeCondition: observable,\r\n            minVolume: observable,\r\n            hedgeFlag: observable,\r\n            contingentCondition: observable,\r\n            setSelectedContract: action,\r\n            fillPrice: action,\r\n            setVolume: action,\r\n            setMinVolume: action,\r\n            setHedgeFlag: action,\r\n            setPrice: action,\r\n            setStopPrice: action,\r\n            setTimeCondition: action,\r\n            setContingentCondition: action,\r\n            setVolumeCondition: action,\r\n            setOrderPriceType: action,\r\n            setAutoFillOrderPriceType: action,\r\n            submitOrder: action,\r\n            cancelOrder: action,\r\n            reset: action\r\n        });\r\n    }\r\n\r\n    setSelectedContract(selectedContract: any) {\r\n\r\n        if (isDevEnv) {\r\n            console.debug(selectedContract)\r\n        }\r\n        if (selectedContract) {\r\n            if (tradeContractStore.mxiContractMap.has(selectedContract.unifiedSymbol)) {\r\n                this.selectedContract = tradeContractStore.mxiContractMap.get(selectedContract.unifiedSymbol)\r\n                rpcClientApi.asyncSubscribe(selectedContract)\r\n                this.fillPrice()\r\n            } else {\r\n                toast.warn(`本地缓存未找到所选合约,${selectedContract.unifiedSymbol},${selectedContract.fullName}`);\r\n            }\r\n        } else {\r\n            console.warn(\"参数为空\")\r\n        }\r\n    }\r\n\r\n    fillPrice() {\r\n        if (this.selectedContract) {\r\n            if (this.autoFillOrderPriceType !== \"MANUAL\") {\r\n                if (tradeTickStore.mixTickMap.has(this.selectedContract.unifiedSymbol)) {\r\n                    const tick = tradeTickStore.mixTickMap.get(this.selectedContract.unifiedSymbol);\r\n                    try {\r\n                        let tmpPrice;\r\n                        if (this.autoFillOrderPriceType === \"LAST\") {\r\n                            tmpPrice = tick.lastPrice\r\n                        } else if (this.autoFillOrderPriceType === \"UPPER_LIMIT\") {\r\n                            tmpPrice = tick.upperLimit\r\n                        } else if (this.autoFillOrderPriceType === \"LOWER_LIMIT\") {\r\n                            tmpPrice = tick.lowerLimit\r\n                        } else if (this.autoFillOrderPriceType === \"BID1\") {\r\n                            if (tick.bidPrice && tick.bidPrice.length > 0) {\r\n                                tmpPrice = tick.bidPrice[0]\r\n                            }\r\n                        } else if (this.autoFillOrderPriceType === \"ASK1\") {\r\n                            if (tick.askPrice && tick.askPrice.length > 0) {\r\n                                tmpPrice = tick.askPrice[0]\r\n                            }\r\n                        }\r\n\r\n                        if (tmpPrice && tmpPrice !== Number.MAX_VALUE) {\r\n                            this.price = tmpPrice\r\n                        } else {\r\n                            this.price = \"\"\r\n                        }\r\n\r\n                    } catch (error) {\r\n                        console.error(error)\r\n                        this.price = \"\"\r\n                    }\r\n\r\n                } else {\r\n                    this.price = \"\"\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setVolume(volume: number) {\r\n        this.volume = volume\r\n    }\r\n\r\n    setMinVolume(minVolume: number | string) {\r\n        if (!minVolume || minVolume === \"\") {\r\n            this.minVolume = 1\r\n        } else {\r\n            this.minVolume = parseInt(minVolume + \"\", 10)\r\n        }\r\n    }\r\n\r\n    setHedgeFlag(hedgeFlag: number) {\r\n        this.hedgeFlag = hedgeFlag;\r\n    }\r\n\r\n    setPrice(price: number | string) {\r\n        this.autoFillOrderPriceType = \"MANUAL\"\r\n        this.price = price;\r\n    }\r\n\r\n    setStopPrice(stopPrice: number | string) {\r\n        this.stopPrice = stopPrice;\r\n    }\r\n\r\n    setTimeCondition(timeCondition: number) {\r\n        this.timeCondition = timeCondition\r\n    }\r\n\r\n    setContingentCondition(contingentCondition: number) {\r\n        this.contingentCondition = contingentCondition\r\n    }\r\n\r\n    setVolumeCondition(volumeCondition: number) {\r\n        this.volumeCondition = volumeCondition\r\n    }\r\n\r\n    setOrderPriceType(orderPriceType: number) {\r\n        this.orderPriceType = orderPriceType\r\n    }\r\n\r\n    setAutoFillOrderPriceType(autoFillOrderPriceType: string) {\r\n        this.autoFillOrderPriceType = autoFillOrderPriceType\r\n        this.fillPrice()\r\n    }\r\n\r\n    submitOrder(\r\n        selectedContract: object,\r\n        direction: number,\r\n        offsetFlag: number,\r\n        price: number,\r\n        orderPriceType: number,\r\n        volume: number,\r\n        timeCondition: number,\r\n        volumeCondition: number,\r\n        hedgeFlag: number,\r\n        minVolume: number,\r\n        accountId: string,\r\n        stopPrice: number,\r\n        contingentCondition: number,\r\n        originOrderId: string\r\n    ) {\r\n\r\n        try {\r\n            if (!accountId || accountId === \"\") {\r\n                console.error(\"本地信息:提交定单错误,账户ID为空\")\r\n                toast.error(\"本地信息:提交定单错误,账户ID为空\");\r\n                return;\r\n            }\r\n\r\n            if (!tradeAccountStore.accountMap.has(accountId)) {\r\n                console.error(`本地信息:提交定单错误,未在本地缓存找到账户信息,账户ID:${accountId}`)\r\n                toast.error(`本地信息:提交定单错误,未在本地缓存找到账户信息,账户ID:${accountId}`);\r\n                return;\r\n            }\r\n            const account = tradeAccountStore.accountMap.get(accountId)\r\n\r\n            if (!selectedContract) {\r\n                console.error(\"本地信息:提交定单错误,未选择合约\")\r\n                toast.error(\"本地信息:提交定单错误,未选择合约\");\r\n                return;\r\n            }\r\n            const contractField = ContractField.fromObject(selectedContract)\r\n\r\n            const submitOrderReqField = new SubmitOrderReqField();\r\n            submitOrderReqField.contract = contractField\r\n\r\n            if (orderPriceType !== OrderPriceTypeEnum.OPT_AnyPrice && !price) {\r\n                console.error(`本地信息:提交定单错误,错误的价格:${price}`)\r\n                toast.error(`本地信息:提交定单错误,错误的价格:${price}`);\r\n                return;\r\n            }\r\n            submitOrderReqField.price = price\r\n\r\n            if (orderPriceType === OrderPriceTypeEnum.OPT_LimitPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LimitPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_AnyPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_AnyPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_FiveLevelPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_FiveLevelPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_BestPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_BestPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_LastPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LastPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusOneTicks) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LastPricePlusOneTicks\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的价格类型:${orderPriceType}`)\r\n                toast.error(`本地信息:提交定单错误,未知的价格类型:${orderPriceType}`);\r\n                return;\r\n            }\r\n\r\n            if (!volume || volume <= 0) {\r\n                console.error(`本地信息:提交定单错误,错误的数量:${volume}`)\r\n                toast.error(`本地信息:提交定单错误,错误的数量:${volume}`);\r\n                return;\r\n            }\r\n            submitOrderReqField.volume = volume;\r\n\r\n            if (direction === DirectionEnum.D_Buy) {\r\n                submitOrderReqField.direction = DirectionEnum.D_Buy\r\n            } else if (direction === DirectionEnum.D_Sell) {\r\n                submitOrderReqField.direction = DirectionEnum.D_Sell\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的方向类型:${direction}`)\r\n                toast.error(`本地信息:提交定单错误,未知的方向类型:${direction}`);\r\n                return;\r\n            }\r\n\r\n            if (offsetFlag === OffsetFlagEnum.OF_Open) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_Open\r\n            } else if (offsetFlag === OffsetFlagEnum.OF_Close) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_Close\r\n            } else if (offsetFlag === OffsetFlagEnum.OF_CloseToday) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_CloseToday\r\n            } else if (offsetFlag === OffsetFlagEnum.OF_CloseYesterday) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_CloseYesterday\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的开平类型:${offsetFlag}`)\r\n                toast.error(`本地信息:提交定单错误,未知的开平类型:${offsetFlag}`);\r\n                return;\r\n            }\r\n\r\n            if (timeCondition === TimeConditionEnum.TC_GFD) {\r\n                submitOrderReqField.timeCondition = TimeConditionEnum.TC_GFD\r\n            } else if (timeCondition === TimeConditionEnum.TC_GTC) {\r\n                submitOrderReqField.timeCondition = TimeConditionEnum.TC_GTC\r\n            } else if (timeCondition === TimeConditionEnum.TC_IOC) {\r\n                submitOrderReqField.timeCondition = TimeConditionEnum.TC_IOC\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的时效类型:${timeCondition}`)\r\n                toast.error(`本地信息:提交定单错误,未知的时效类型:${timeCondition}`);\r\n                return;\r\n            }\r\n\r\n            if (volumeCondition === VolumeConditionEnum.VC_AV) {\r\n                submitOrderReqField.volumeCondition = VolumeConditionEnum.VC_AV\r\n            } else if (volumeCondition === VolumeConditionEnum.VC_MV) {\r\n                submitOrderReqField.volumeCondition = VolumeConditionEnum.VC_MV\r\n            } else if (volumeCondition === VolumeConditionEnum.VC_CV) {\r\n                submitOrderReqField.volumeCondition = VolumeConditionEnum.VC_CV\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的成交量类型:${volumeCondition}`)\r\n                toast.error(`本地信息:提交定单错误,未知的成交量类型:${volumeCondition}`);\r\n                return;\r\n            }\r\n\r\n            if (!minVolume || minVolume <= 0) {\r\n                console.error(`本地信息:提交定单错误,错误的最小成交数量:${minVolume}`)\r\n                toast.error(`本地信息:提交定单错误,错误的最小成交数量:${minVolume}`);\r\n                return;\r\n            }\r\n            submitOrderReqField.minVolume = minVolume;\r\n\r\n\r\n            if (hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_Speculation\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_Hedge\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_MarketMaker\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_Arbitrage\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_SpecHedge\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_HedgeSpec\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的投机套保类型:${hedgeFlag}`)\r\n                toast.error(`本地信息:提交定单错误,未知的投机套保类型:${hedgeFlag}`);\r\n                return;\r\n            }\r\n\r\n\r\n            if (contingentCondition === ContingentConditionEnum.CC_Immediately) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_Immediately\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的触发类型:${contingentCondition}`)\r\n                toast.error(`本地信息:提交定单错误,未知的触发类型:${contingentCondition}`);\r\n                return;\r\n            }\r\n\r\n            if (contingentCondition !== ContingentConditionEnum.CC_Immediately) {\r\n                if (!stopPrice) {\r\n                    console.error(`本地信息:提交定单错误,错误的条件价格:${stopPrice}`)\r\n                    toast.error(`本地信息:提交定单错误,错误的条件价格:${stopPrice}`);\r\n                    return;\r\n                } else {\r\n                    submitOrderReqField.stopPrice = stopPrice\r\n                }\r\n            }\r\n            submitOrderReqField.stopPrice = stopPrice\r\n\r\n            submitOrderReqField.gatewayId = account.gatewayId\r\n            const accountField = AccountField.fromObject(account)\r\n            submitOrderReqField.accountCode = accountField.code\r\n            submitOrderReqField.currency = accountField.currency\r\n\r\n            submitOrderReqField.forceCloseReason = ForceCloseReasonEnum.FCR_NotForceClose\r\n            submitOrderReqField.originOrderId = originOrderId\r\n\r\n            console.error(submitOrderReqField)\r\n            rpcClientApi.asyncSubmitOrder(submitOrderReqField)\r\n        } catch (error) {\r\n            console.error(\"本地信息:提交定单发生未知错误\", error)\r\n            toast.error(\"本地信息:提交定单发生未知错误\");\r\n        }\r\n    }\r\n\r\n    cancelOrder(orderId: string) {\r\n        rpcClientApi.asyncCancelOrder(orderId)\r\n    }\r\n\r\n    reset() {\r\n        this.selectedContract = null;\r\n        this.volume = 0;\r\n        this.orderPriceType = OrderPriceTypeEnum.OPT_LimitPrice;\r\n        this.autoFillOrderPriceType = \"LAST\";\r\n        this.price = \"\";\r\n        this.timeCondition = TimeConditionEnum.TC_GFD;\r\n        this.volumeCondition = VolumeConditionEnum.VC_AV;\r\n        this.minVolume = 1;\r\n        this.hedgeFlag = HedgeFlagEnum.HF_Speculation;\r\n    }\r\n}\r\nexport const tradeActionStore = new TradeActionStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { isDevEnv } from '../utils';\r\nimport { tradeActionStore } from './tradeActionStore'\r\n// import { rpcClientApi } from '../node/client/service/rpcClientApi';\r\n\r\nclass TradeTickStore {\r\n\r\n    tickList: any[] = [];\r\n    mixTickMap: Map<string, any> = new Map();\r\n\r\n    selectedTick: any;\r\n    hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tickList: observable,\r\n            selectedTick: observable,\r\n            storeTick: action,\r\n            clearAndStoreTickList: action,\r\n            storeTickList: action,\r\n            coverMapToList: action,\r\n            setSelectedTick: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 60)\r\n        setTimeout(this.startIntervalUpdateSelectedTick, 80)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 200)\r\n    }\r\n\r\n    startIntervalUpdateSelectedTick = () => {\r\n        try {\r\n            if (tradeActionStore.selectedContract) {\r\n                if (this.mixTickMap.has(tradeActionStore.selectedContract.unifiedSymbol)) {\r\n                    this.setSelectedTick( this.mixTickMap.get(tradeActionStore.selectedContract.unifiedSymbol))\r\n                } else {\r\n                    this.setSelectedTick(null)\r\n                }\r\n            } else {\r\n                this.setSelectedTick(null)\r\n            }\r\n\r\n            tradeActionStore.fillPrice()\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalUpdateSelectedTick, 80)\r\n    }\r\n\r\n    setSelectedTick(selectedTick:any){\r\n        this.selectedTick = selectedTick\r\n    }\r\n\r\n    storeTick(tick: any) {\r\n        if (isDevEnv) {\r\n            console.debug(tick)\r\n        }\r\n\r\n        if (tick.unifiedSymbol) {\r\n             this.mixTickMap.set(tick.unifiedSymbol, tick);\r\n            this.hasBeenChanged = true\r\n        }\r\n    }\r\n\r\n    clearAndStoreTickList(tickList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tickList)\r\n        }\r\n        const newMixTickMap: Map<string, any> = new Map();\r\n        for (let i = 0; i < tickList.length; i++) {\r\n            const tick = tickList[i]\r\n            newMixTickMap.set(tick.unifiedSymbol, tick)\r\n        }\r\n        this.mixTickMap = newMixTickMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeTickList(tickList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tickList)\r\n        }\r\n        for (let i = 0; i < tickList.length; i++) {\r\n            const tick = tickList[i]\r\n    \r\n            if (tick.unifiedSymbol) {\r\n                this.mixTickMap.set(tick.unifiedSymbol, tick);\r\n                this.hasBeenChanged = true\r\n            }\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        this.tickList = [...this.mixTickMap.values()];\r\n    }\r\n\r\n}\r\nexport const tradeTickStore = new TradeTickStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass CustomizeStore {\r\n    favoriteContractList: any[] = [];\r\n    favoriteContractUnifiedSymbolSet: Set<string> = new Set();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            favoriteContractList: observable,\r\n            favoriteContractUnifiedSymbolSet: observable,\r\n            getFavoriteContractList: action,\r\n            addFavoriteContractByUnifiedSymbol: action,\r\n            deleteFavoriteContractByUnifiedSymbol: action,\r\n            setFavoriteContractList: action\r\n        });\r\n    }\r\n\r\n    setFavoriteContractList(favoriteContractList:any[]) {\r\n        this.favoriteContractList = favoriteContractList\r\n\r\n        const favoriteContractUnifiedSymbolSet: Set<string> = new Set()\r\n        for (let i = 0; i < this.favoriteContractList.length; i++) {\r\n            favoriteContractUnifiedSymbolSet.add(this.favoriteContractList[i].unifiedSymbol)\r\n        }\r\n        this.favoriteContractUnifiedSymbolSet = favoriteContractUnifiedSymbolSet\r\n    }\r\n\r\n    getFavoriteContractList() {\r\n        request('/api/customize/getFavoriteContractList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const favoriteContractList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setFavoriteContractList(favoriteContractList)\r\n                } else {\r\n                    toast(`查询常用合约列表错误：${res.message}`, { autoClose: false, type: \"error\" })\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    addFavoriteContractByUnifiedSymbol(unifiedSymbol: any) {\r\n        request('/api/customize/addFavoriteContractByUnifiedSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': unifiedSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getFavoriteContractList()\r\n                    toast(\"加入常用已执行\", { autoClose: 5000, type: \"info\" })\r\n                } else {\r\n                    toast(`加入常用错误：${res.message}`, { autoClose: false, type: \"error\" })\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteFavoriteContractByUnifiedSymbol(unifiedSymbol: any) {\r\n        request('/api/customize/deleteFavoriteContractByUnifiedSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': unifiedSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getFavoriteContractList()\r\n                    toast('从常用中移除已执行', { autoClose: 5000, type: \"info\" })\r\n                } else {\r\n                    toast(`从常用中移除错误：${res.message}`, { autoClose: false, type: \"error\" })\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const customizeStore = new CustomizeStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass MarketDataRecordingStore {\r\n    contractList: any[] = [];\r\n    contractUnifiedSymbolSet: Set<string> = new Set();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            contractList: observable,\r\n            contractUnifiedSymbolSet: observable,\r\n            getContractList: action,\r\n            addContractByUnifiedSymbol: action,\r\n            deleteContractByUnifiedSymbol: action,\r\n            setContractList: action\r\n        });\r\n    }\r\n\r\n    setContractList(contractList:any[]) {\r\n        this.contractList = contractList\r\n        const contractUnifiedSymbolSet: Set<string> = new Set()\r\n        for (let i = 0; i < this.contractList.length; i++) {\r\n            contractUnifiedSymbolSet.add(this.contractList[i].unifiedSymbol)\r\n        }\r\n        this.contractUnifiedSymbolSet = contractUnifiedSymbolSet\r\n    }\r\n\r\n    getContractList() {\r\n        request('/api/management/marketDataRecording/getContractList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const contractList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setContractList(contractList)\r\n                } else {\r\n                    toast.error(`查询行情记录合约列表错误：${res.message}`)\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    addContractByUnifiedSymbol(unifiedSymbol: any) {\r\n        request('/api/management/marketDataRecording/addContractByUnifiedSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': unifiedSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getContractList()\r\n                    toast.info(\"加入行情记录已执行\")\r\n                } else {\r\n                    toast.error(`加入行情记录错误：${res.message}`)\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteContractByUnifiedSymbol(unifiedSymbol: any) {\r\n        request('/api/management/marketDataRecording/deleteContractByUnifiedSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': unifiedSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getContractList()\r\n                    toast.info(\"从行情记录中移除已执行\")\r\n                } else {\r\n                    toast.error(`从行情记录中移除错误：${res.message}`)\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const marketDataRecordingStore = new MarketDataRecordingStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass OperatorStore {\r\n    operatorList: any[] = [];\r\n    operatorMap: Map<string, any> = new Map();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            operatorList: observable,\r\n            operatorMap: observable,\r\n            getOperatorList: action,\r\n            saveOrUpdateOperator: action,\r\n            deleteOperatorByOperatorId: action,\r\n            createOperator: action,\r\n            setOperatorList: action\r\n        });\r\n    }\r\n\r\n    \r\n    setOperatorList(operatorList:any[]) {\r\n        const operatorMap: Map<string, any> = new Map()\r\n        operatorList.forEach((element: any) => {\r\n            operatorMap.set(element.operatorId, element)\r\n        });\r\n\r\n        this.operatorMap = operatorMap\r\n        this.operatorList = [...this.operatorMap.values()]\r\n    }\r\n\r\n    getOperatorList() {\r\n        request('/api/management/operator/getOperatorList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const operatorList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setOperatorList(operatorList)\r\n                } else {\r\n                    toast.error(`查询操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveOrUpdateOperator(operator: any) {\r\n        request('/api/management/operator/saveOrUpdateOperator', {\r\n            method: 'POST',\r\n            data: {\r\n                ...operator\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getOperatorList()\r\n                } else {\r\n                    toast.error(`增加或修改操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteOperatorByOperatorId(operatorId: string) {\r\n        request('/api/management/operator/deleteOperatorByOperatorId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': operatorId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getOperatorList()\r\n                } else {\r\n                    toast.error(`删除操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    createOperator() {\r\n        request('/api/management/operator/createOperator').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getOperatorList()\r\n                } else {\r\n                    toast.error(`新增操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const operatorStore = new OperatorStore()","import { createBrowserHistory } from 'history';\r\nimport { nodeStore } from './nodeStore'\r\nimport { gatewayStore } from './gatewayStore'\r\nimport { userStore } from './userStore'\r\nimport { authenticationStore } from './authenticationStore'\r\nimport { tradeOrderStore } from './tradeOrderStore';\r\nimport { tradeAccountStore } from './tradeAccountStore';\r\nimport { tradePositionStore } from './tradePositionStore';\r\nimport { tradeContractStore } from './tradeContractStore';\r\nimport { tradeTradeStore } from './tradeTradeStore';\r\nimport { tradeTickStore } from './tradeTickStore';\r\nimport { tradeActionStore } from './tradeActionStore';\r\nimport { customizeStore } from './customizeStore';\r\nimport { marketDataRecordingStore } from './marketDataRecordingStore';\r\nimport { operatorStore } from './operatorStore';\r\nimport { observable, action, makeObservable, observe } from 'mobx';\r\n\r\nexport class RouterStore {\r\n  location = null;\r\n  history: any = null;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      location: observable,\r\n      _updateLocation: action\r\n    });\r\n\r\n    this.push = this.push.bind(this);\r\n    this.replace = this.replace.bind(this);\r\n    this.go = this.go.bind(this);\r\n    this.goBack = this.goBack.bind(this);\r\n    this.goForward = this.goForward.bind(this);\r\n  }\r\n\r\n  _updateLocation(newState: any) {\r\n    this.location = newState;\r\n  }\r\n\r\n  /*\r\n   * History methods\r\n   */\r\n  push = (location: any, state: any) => {\r\n    this.history.push(location, state);\r\n  }\r\n  replace = (location: any, state: any) => {\r\n    this.history.replace(location, state);\r\n  }\r\n  go = (n: any) => {\r\n    this.history.go(n);\r\n  }\r\n  goBack = () => {\r\n    this.history.goBack();\r\n  }\r\n  goForward = () => {\r\n    this.history.goForward();\r\n  }\r\n};\r\n\r\n\r\nexport const syncHistoryWithStore = (history: any, store: any) => {\r\n  // Initialise store\r\n  store.history = history;\r\n\r\n  // Handle update from history object\r\n  const handleLocationChange = (location: any) => {\r\n    store._updateLocation(location);\r\n  };\r\n\r\n  const unsubscribeFromHistory = history.listen(handleLocationChange);\r\n  handleLocationChange(history.location);\r\n\r\n  const subscribe = (listener: any) => {\r\n    const onStoreChange = () => {\r\n      const rawLocation = { ...store.location };\r\n      listener(rawLocation, history.action);\r\n    };\r\n\r\n    // Listen for changes to location state in store\r\n    const unsubscribeFromStore = observe(store, 'location', onStoreChange);\r\n\r\n    listener(store.location, history.action);\r\n\r\n    return unsubscribeFromStore;\r\n  };\r\n\r\n  history.subscribe = subscribe;\r\n  history.unsubscribe = unsubscribeFromHistory;\r\n\r\n  return history;\r\n};\r\n\r\n\r\nexport const browserHistory = createBrowserHistory();\r\nexport const routingStore = new RouterStore();\r\n\r\nexport const history = syncHistoryWithStore(browserHistory, routingStore);\r\n\r\nexport {\r\n  authenticationStore,\r\n  nodeStore,\r\n  gatewayStore,\r\n  userStore,\r\n  tradeOrderStore,\r\n  tradeAccountStore,\r\n  tradePositionStore,\r\n  tradeContractStore,\r\n  tradeTradeStore,\r\n  tradeTickStore,\r\n  tradeActionStore,\r\n  customizeStore,\r\n  marketDataRecordingStore,\r\n  operatorStore\r\n}","/**\r\n * request 网络请求工具,从Ant Design Pro中移植\r\n */\r\nimport { extend } from 'umi-request';\r\nimport { history, authenticationStore } from './stores/storesIndex'\r\nimport { toast } from 'react-toastify';\r\n\r\nconst codeMessage = {\r\n  200: '服务器成功返回请求的数据。',\r\n  201: '新增或修改数据成功。',\r\n  202: '一个请求已经进入后台排队（异步任务）。',\r\n  204: '删除数据成功。',\r\n  400: '发出的请求有错误，服务器没有进行新增或修改数据的操作。',\r\n  401: '用户没有权限（令牌、用户名、密码错误）。',\r\n  403: '用户得到授权，但是访问是被禁止的。',\r\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\r\n  406: '请求的格式不可得。',\r\n  410: '请求的资源被永久删除，且不会再得到的。',\r\n  422: '当创建一个对象时，发生一个验证错误。',\r\n  500: '服务器发生错误，请检查服务器。',\r\n  502: '网关错误。',\r\n  503: '服务不可用，服务器暂时过载或维护。',\r\n  504: '网关超时。',\r\n};\r\n\r\n/**\r\n * 异常处理程序\r\n */\r\nconst errorHandler = (error: any) => {\r\n  const { response = {} } = error;\r\n  const errortext = codeMessage[response.status] || response.statusText;\r\n  const { status, url } = response;\r\n\r\n  if (status === 401) {\r\n    toast.warn(\"未登录或登录已过期，请重新登录。\");\r\n    authenticationStore.logout();\r\n    authenticationStore.initStore();\r\n    history.push('/login');\r\n    return;\r\n  }\r\n\r\n  toast.error(`请求错误 ${status}: ${url} → ${errortext}`);\r\n};\r\n\r\n\r\n/**\r\n * 配置request请求时的默认参数\r\n */\r\nconst request = extend({\r\n  errorHandler, // 默认错误处理\r\n  credentials: 'include', // 默认请求是否带上cookie\r\n});\r\n\r\n// request拦截器, 改变url 或 options.\r\nrequest.interceptors.request.use((url, options) => {\r\n\r\n  const authToken = authenticationStore.getAuthToken()\r\n\r\n  if (authToken) {\r\n    const headers = {\r\n      'Auth-Token': authToken\r\n    };\r\n    return (\r\n      {\r\n        url,\r\n        options: { ...options, headers },\r\n      }\r\n    );\r\n  } else {\r\n    return (\r\n      {\r\n        url,\r\n        options: { ...options },\r\n      }\r\n    );\r\n  }\r\n\r\n})\r\n\r\n// // response拦截器, 处理response\r\n// request.interceptors.response.use((response, options) => {\r\n//   let token = response.headers.get(\"x-auth-token\");\r\n//   if (token) {\r\n//     localStorage.setItem(\"x-auth-token\", token);\r\n//   }\r\n//   return response;\r\n// });\r\n\r\nexport default request;\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.xyz = (function() {\n\n    /**\n     * Namespace xyz.\n     * @exports xyz\n     * @namespace\n     */\n    var xyz = {};\n\n    xyz.redtorch = (function() {\n\n        /**\n         * Namespace redtorch.\n         * @memberof xyz\n         * @namespace\n         */\n        var redtorch = {};\n\n        redtorch.pb = (function() {\n\n            /**\n             * Namespace pb.\n             * @memberof xyz.redtorch\n             * @namespace\n             */\n            var pb = {};\n\n            /**\n             * StrategyEngineTypeEnum enum.\n             * @name xyz.redtorch.pb.StrategyEngineTypeEnum\n             * @enum {string}\n             * @property {number} SET_Treading=0 SET_Treading value\n             * @property {number} SET_Backtesting=1 SET_Backtesting value\n             */\n            pb.StrategyEngineTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"SET_Treading\"] = 0;\n                values[valuesById[1] = \"SET_Backtesting\"] = 1;\n                return values;\n            })();\n\n            /**\n             * GatewayTypeEnum enum.\n             * @name xyz.redtorch.pb.GatewayTypeEnum\n             * @enum {string}\n             * @property {number} GTE_TradeAndMarketData=0 GTE_TradeAndMarketData value\n             * @property {number} GTE_MarketData=1 GTE_MarketData value\n             * @property {number} GTE_Trade=2 GTE_Trade value\n             */\n            pb.GatewayTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"GTE_TradeAndMarketData\"] = 0;\n                values[valuesById[1] = \"GTE_MarketData\"] = 1;\n                values[valuesById[2] = \"GTE_Trade\"] = 2;\n                return values;\n            })();\n\n            /**\n             * GatewayAdapterTypeEnum enum.\n             * @name xyz.redtorch.pb.GatewayAdapterTypeEnum\n             * @enum {string}\n             * @property {number} GAT_CTP=0 GAT_CTP value\n             * @property {number} GAT_IB=1 GAT_IB value\n             * @property {number} GAT_COMMON=2 GAT_COMMON value\n             */\n            pb.GatewayAdapterTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"GAT_CTP\"] = 0;\n                values[valuesById[1] = \"GAT_IB\"] = 1;\n                values[valuesById[2] = \"GAT_COMMON\"] = 2;\n                return values;\n            })();\n\n            /**\n             * CommonStatusEnum enum.\n             * @name xyz.redtorch.pb.CommonStatusEnum\n             * @enum {string}\n             * @property {number} COMS_SUCCESS=0 COMS_SUCCESS value\n             * @property {number} COMS_INFO=1 COMS_INFO value\n             * @property {number} COMS_WARN=2 COMS_WARN value\n             * @property {number} COMS_ERROR=3 COMS_ERROR value\n             */\n            pb.CommonStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"COMS_SUCCESS\"] = 0;\n                values[valuesById[1] = \"COMS_INFO\"] = 1;\n                values[valuesById[2] = \"COMS_WARN\"] = 2;\n                values[valuesById[3] = \"COMS_ERROR\"] = 3;\n                return values;\n            })();\n\n            /**\n             * LogLevelEnum enum.\n             * @name xyz.redtorch.pb.LogLevelEnum\n             * @enum {string}\n             * @property {number} LL_All=0 LL_All value\n             * @property {number} LL_Error=40000 LL_Error value\n             * @property {number} LL_Warn=30000 LL_Warn value\n             * @property {number} LL_Info=20000 LL_Info value\n             * @property {number} LL_Debug=10000 LL_Debug value\n             * @property {number} LL_Trace=5000 LL_Trace value\n             */\n            pb.LogLevelEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"LL_All\"] = 0;\n                values[valuesById[40000] = \"LL_Error\"] = 40000;\n                values[valuesById[30000] = \"LL_Warn\"] = 30000;\n                values[valuesById[20000] = \"LL_Info\"] = 20000;\n                values[valuesById[10000] = \"LL_Debug\"] = 10000;\n                values[valuesById[5000] = \"LL_Trace\"] = 5000;\n                return values;\n            })();\n\n            /**\n             * MarketDataDBTypeEnum enum.\n             * @name xyz.redtorch.pb.MarketDataDBTypeEnum\n             * @enum {string}\n             * @property {number} MDDT_MIX=0 MDDT_MIX value\n             * @property {number} MDDT_TD=1 MDDT_TD value\n             * @property {number} MDDT_HIST=2 MDDT_HIST value\n             */\n            pb.MarketDataDBTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"MDDT_MIX\"] = 0;\n                values[valuesById[1] = \"MDDT_TD\"] = 1;\n                values[valuesById[2] = \"MDDT_HIST\"] = 2;\n                return values;\n            })();\n\n            /**\n             * BarPeriodEnum enum.\n             * @name xyz.redtorch.pb.BarPeriodEnum\n             * @enum {string}\n             * @property {number} B_5Sec=0 B_5Sec value\n             * @property {number} B_1Min=1 B_1Min value\n             * @property {number} B_3Min=2 B_3Min value\n             * @property {number} B_5Min=3 B_5Min value\n             * @property {number} B_15Min=4 B_15Min value\n             * @property {number} B_1Day=5 B_1Day value\n             */\n            pb.BarPeriodEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"B_5Sec\"] = 0;\n                values[valuesById[1] = \"B_1Min\"] = 1;\n                values[valuesById[2] = \"B_3Min\"] = 2;\n                values[valuesById[3] = \"B_5Min\"] = 3;\n                values[valuesById[4] = \"B_15Min\"] = 4;\n                values[valuesById[5] = \"B_1Day\"] = 5;\n                return values;\n            })();\n\n            /**\n             * ConnectStatusEnum enum.\n             * @name xyz.redtorch.pb.ConnectStatusEnum\n             * @enum {string}\n             * @property {number} CS_Unknown=0 CS_Unknown value\n             * @property {number} CS_Disconnected=1 CS_Disconnected value\n             * @property {number} CS_Connected=2 CS_Connected value\n             * @property {number} CS_Disconnecting=3 CS_Disconnecting value\n             * @property {number} CS_Connecting=4 CS_Connecting value\n             */\n            pb.ConnectStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"CS_Unknown\"] = 0;\n                values[valuesById[1] = \"CS_Disconnected\"] = 1;\n                values[valuesById[2] = \"CS_Connected\"] = 2;\n                values[valuesById[3] = \"CS_Disconnecting\"] = 3;\n                values[valuesById[4] = \"CS_Connecting\"] = 4;\n                return values;\n            })();\n\n            /**\n             * OrderActionStatusTyp enum.\n             * @name xyz.redtorch.pb.OrderActionStatusTyp\n             * @enum {string}\n             * @property {number} OAS_Unknown=0 OAS_Unknown value\n             * @property {number} OAS_Submitted=1 OAS_Submitted value\n             * @property {number} OAS_Accepted=2 OAS_Accepted value\n             * @property {number} OAS_Rejected=3 OAS_Rejected value\n             */\n            pb.OrderActionStatusTyp = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OAS_Unknown\"] = 0;\n                values[valuesById[1] = \"OAS_Submitted\"] = 1;\n                values[valuesById[2] = \"OAS_Accepted\"] = 2;\n                values[valuesById[3] = \"OAS_Rejected\"] = 3;\n                return values;\n            })();\n\n            /**\n             * OrderStatusEnum enum.\n             * @name xyz.redtorch.pb.OrderStatusEnum\n             * @enum {string}\n             * @property {number} OS_Unknown=0 OS_Unknown value\n             * @property {number} OS_AllTraded=1 OS_AllTraded value\n             * @property {number} OS_PartTradedQueueing=2 OS_PartTradedQueueing value\n             * @property {number} OS_PartTradedNotQueueing=3 OS_PartTradedNotQueueing value\n             * @property {number} OS_NoTradeQueueing=4 OS_NoTradeQueueing value\n             * @property {number} OS_NoTradeNotQueueing=5 OS_NoTradeNotQueueing value\n             * @property {number} OS_Canceled=6 OS_Canceled value\n             * @property {number} OS_NotTouched=7 OS_NotTouched value\n             * @property {number} OS_Touched=8 OS_Touched value\n             * @property {number} OS_Rejected=9 OS_Rejected value\n             */\n            pb.OrderStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OS_Unknown\"] = 0;\n                values[valuesById[1] = \"OS_AllTraded\"] = 1;\n                values[valuesById[2] = \"OS_PartTradedQueueing\"] = 2;\n                values[valuesById[3] = \"OS_PartTradedNotQueueing\"] = 3;\n                values[valuesById[4] = \"OS_NoTradeQueueing\"] = 4;\n                values[valuesById[5] = \"OS_NoTradeNotQueueing\"] = 5;\n                values[valuesById[6] = \"OS_Canceled\"] = 6;\n                values[valuesById[7] = \"OS_NotTouched\"] = 7;\n                values[valuesById[8] = \"OS_Touched\"] = 8;\n                values[valuesById[9] = \"OS_Rejected\"] = 9;\n                return values;\n            })();\n\n            /**\n             * OrderSubmitStatusEnum enum.\n             * @name xyz.redtorch.pb.OrderSubmitStatusEnum\n             * @enum {string}\n             * @property {number} OSS_Unknown=0 OSS_Unknown value\n             * @property {number} OSS_InsertSubmitted=1 OSS_InsertSubmitted value\n             * @property {number} OSS_CancelSubmitted=2 OSS_CancelSubmitted value\n             * @property {number} OSS_ModifySubmitted=3 OSS_ModifySubmitted value\n             * @property {number} OSS_Accepted=4 OSS_Accepted value\n             * @property {number} OSS_InsertRejected=5 OSS_InsertRejected value\n             * @property {number} OSS_CancelRejected=6 OSS_CancelRejected value\n             * @property {number} OSS_ModifyRejected=7 OSS_ModifyRejected value\n             */\n            pb.OrderSubmitStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OSS_Unknown\"] = 0;\n                values[valuesById[1] = \"OSS_InsertSubmitted\"] = 1;\n                values[valuesById[2] = \"OSS_CancelSubmitted\"] = 2;\n                values[valuesById[3] = \"OSS_ModifySubmitted\"] = 3;\n                values[valuesById[4] = \"OSS_Accepted\"] = 4;\n                values[valuesById[5] = \"OSS_InsertRejected\"] = 5;\n                values[valuesById[6] = \"OSS_CancelRejected\"] = 6;\n                values[valuesById[7] = \"OSS_ModifyRejected\"] = 7;\n                return values;\n            })();\n\n            /**\n             * ProductClassEnum enum.\n             * @name xyz.redtorch.pb.ProductClassEnum\n             * @enum {string}\n             * @property {number} UnknownProductClass=0 UnknownProductClass value\n             * @property {number} EQUITY=1 EQUITY value\n             * @property {number} FUTURES=2 FUTURES value\n             * @property {number} OPTION=3 OPTION value\n             * @property {number} INDEX=4 INDEX value\n             * @property {number} COMBINATION=5 COMBINATION value\n             * @property {number} BOND=6 BOND value\n             * @property {number} FOREX=7 FOREX value\n             * @property {number} SPOT=8 SPOT value\n             * @property {number} DEFER=9 DEFER value\n             * @property {number} ETF=10 ETF value\n             * @property {number} WARRANTS=11 WARRANTS value\n             * @property {number} SPREAD=12 SPREAD value\n             * @property {number} FUND=13 FUND value\n             * @property {number} EFP=14 EFP value\n             * @property {number} SPOTOPTION=15 SPOTOPTION value\n             * @property {number} TAS=16 TAS value\n             * @property {number} MI=17 MI value\n             */\n            pb.ProductClassEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UnknownProductClass\"] = 0;\n                values[valuesById[1] = \"EQUITY\"] = 1;\n                values[valuesById[2] = \"FUTURES\"] = 2;\n                values[valuesById[3] = \"OPTION\"] = 3;\n                values[valuesById[4] = \"INDEX\"] = 4;\n                values[valuesById[5] = \"COMBINATION\"] = 5;\n                values[valuesById[6] = \"BOND\"] = 6;\n                values[valuesById[7] = \"FOREX\"] = 7;\n                values[valuesById[8] = \"SPOT\"] = 8;\n                values[valuesById[9] = \"DEFER\"] = 9;\n                values[valuesById[10] = \"ETF\"] = 10;\n                values[valuesById[11] = \"WARRANTS\"] = 11;\n                values[valuesById[12] = \"SPREAD\"] = 12;\n                values[valuesById[13] = \"FUND\"] = 13;\n                values[valuesById[14] = \"EFP\"] = 14;\n                values[valuesById[15] = \"SPOTOPTION\"] = 15;\n                values[valuesById[16] = \"TAS\"] = 16;\n                values[valuesById[17] = \"MI\"] = 17;\n                return values;\n            })();\n\n            /**\n             * DirectionEnum enum.\n             * @name xyz.redtorch.pb.DirectionEnum\n             * @enum {string}\n             * @property {number} D_Unknown=0 D_Unknown value\n             * @property {number} D_Buy=1 D_Buy value\n             * @property {number} D_Sell=2 D_Sell value\n             */\n            pb.DirectionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"D_Unknown\"] = 0;\n                values[valuesById[1] = \"D_Buy\"] = 1;\n                values[valuesById[2] = \"D_Sell\"] = 2;\n                return values;\n            })();\n\n            /**\n             * PositionTypeEnum enum.\n             * @name xyz.redtorch.pb.PositionTypeEnum\n             * @enum {string}\n             * @property {number} PT_Unknown=0 PT_Unknown value\n             * @property {number} PT_Net=1 PT_Net value\n             * @property {number} PT_Gross=2 PT_Gross value\n             */\n            pb.PositionTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"PT_Unknown\"] = 0;\n                values[valuesById[1] = \"PT_Net\"] = 1;\n                values[valuesById[2] = \"PT_Gross\"] = 2;\n                return values;\n            })();\n\n            /**\n             * PositionDirectionEnum enum.\n             * @name xyz.redtorch.pb.PositionDirectionEnum\n             * @enum {string}\n             * @property {number} PD_Unknown=0 PD_Unknown value\n             * @property {number} PD_Net=1 PD_Net value\n             * @property {number} PD_Long=2 PD_Long value\n             * @property {number} PD_Short=3 PD_Short value\n             */\n            pb.PositionDirectionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"PD_Unknown\"] = 0;\n                values[valuesById[1] = \"PD_Net\"] = 1;\n                values[valuesById[2] = \"PD_Long\"] = 2;\n                values[valuesById[3] = \"PD_Short\"] = 3;\n                return values;\n            })();\n\n            /**\n             * HedgeFlagEnum enum.\n             * @name xyz.redtorch.pb.HedgeFlagEnum\n             * @enum {string}\n             * @property {number} HF_Unknown=0 HF_Unknown value\n             * @property {number} HF_Speculation=1 HF_Speculation value\n             * @property {number} HF_Arbitrage=2 HF_Arbitrage value\n             * @property {number} HF_Hedge=3 HF_Hedge value\n             * @property {number} HF_MarketMaker=4 HF_MarketMaker value\n             * @property {number} HF_SpecHedge=5 HF_SpecHedge value\n             * @property {number} HF_HedgeSpec=6 HF_HedgeSpec value\n             */\n            pb.HedgeFlagEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"HF_Unknown\"] = 0;\n                values[valuesById[1] = \"HF_Speculation\"] = 1;\n                values[valuesById[2] = \"HF_Arbitrage\"] = 2;\n                values[valuesById[3] = \"HF_Hedge\"] = 3;\n                values[valuesById[4] = \"HF_MarketMaker\"] = 4;\n                values[valuesById[5] = \"HF_SpecHedge\"] = 5;\n                values[valuesById[6] = \"HF_HedgeSpec\"] = 6;\n                return values;\n            })();\n\n            /**\n             * OrderPriceTypeEnum enum.\n             * @name xyz.redtorch.pb.OrderPriceTypeEnum\n             * @enum {string}\n             * @property {number} OPT_Unknown=0 OPT_Unknown value\n             * @property {number} OPT_AnyPrice=1 OPT_AnyPrice value\n             * @property {number} OPT_LimitPrice=2 OPT_LimitPrice value\n             * @property {number} OPT_BestPrice=3 OPT_BestPrice value\n             * @property {number} OPT_LastPrice=4 OPT_LastPrice value\n             * @property {number} OPT_LastPricePlusOneTicks=5 OPT_LastPricePlusOneTicks value\n             * @property {number} OPT_LastPricePlusTwoTicks=6 OPT_LastPricePlusTwoTicks value\n             * @property {number} OPT_LastPricePlusThreeTicks=7 OPT_LastPricePlusThreeTicks value\n             * @property {number} OPT_AskPrice1=8 OPT_AskPrice1 value\n             * @property {number} OPT_AskPrice1PlusOneTicks=9 OPT_AskPrice1PlusOneTicks value\n             * @property {number} OPT_AskPrice1PlusTwoTicks=10 OPT_AskPrice1PlusTwoTicks value\n             * @property {number} OPT_AskPrice1PlusThreeTicks=11 OPT_AskPrice1PlusThreeTicks value\n             * @property {number} OPT_BidPrice1=12 OPT_BidPrice1 value\n             * @property {number} OPT_BidPrice1PlusOneTicks=13 OPT_BidPrice1PlusOneTicks value\n             * @property {number} OPT_BidPrice1PlusTwoTicks=14 OPT_BidPrice1PlusTwoTicks value\n             * @property {number} OPT_BidPrice1PlusThreeTicks=15 OPT_BidPrice1PlusThreeTicks value\n             * @property {number} OPT_FiveLevelPrice=16 OPT_FiveLevelPrice value\n             */\n            pb.OrderPriceTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OPT_Unknown\"] = 0;\n                values[valuesById[1] = \"OPT_AnyPrice\"] = 1;\n                values[valuesById[2] = \"OPT_LimitPrice\"] = 2;\n                values[valuesById[3] = \"OPT_BestPrice\"] = 3;\n                values[valuesById[4] = \"OPT_LastPrice\"] = 4;\n                values[valuesById[5] = \"OPT_LastPricePlusOneTicks\"] = 5;\n                values[valuesById[6] = \"OPT_LastPricePlusTwoTicks\"] = 6;\n                values[valuesById[7] = \"OPT_LastPricePlusThreeTicks\"] = 7;\n                values[valuesById[8] = \"OPT_AskPrice1\"] = 8;\n                values[valuesById[9] = \"OPT_AskPrice1PlusOneTicks\"] = 9;\n                values[valuesById[10] = \"OPT_AskPrice1PlusTwoTicks\"] = 10;\n                values[valuesById[11] = \"OPT_AskPrice1PlusThreeTicks\"] = 11;\n                values[valuesById[12] = \"OPT_BidPrice1\"] = 12;\n                values[valuesById[13] = \"OPT_BidPrice1PlusOneTicks\"] = 13;\n                values[valuesById[14] = \"OPT_BidPrice1PlusTwoTicks\"] = 14;\n                values[valuesById[15] = \"OPT_BidPrice1PlusThreeTicks\"] = 15;\n                values[valuesById[16] = \"OPT_FiveLevelPrice\"] = 16;\n                return values;\n            })();\n\n            /**\n             * OffsetFlagEnum enum.\n             * @name xyz.redtorch.pb.OffsetFlagEnum\n             * @enum {string}\n             * @property {number} OF_Unknown=0 OF_Unknown value\n             * @property {number} OF_Open=1 OF_Open value\n             * @property {number} OF_Close=2 OF_Close value\n             * @property {number} OF_ForceClose=3 OF_ForceClose value\n             * @property {number} OF_CloseToday=4 OF_CloseToday value\n             * @property {number} OF_CloseYesterday=5 OF_CloseYesterday value\n             * @property {number} OF_ForceOff=6 OF_ForceOff value\n             * @property {number} OF_LocalForceClose=7 OF_LocalForceClose value\n             */\n            pb.OffsetFlagEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OF_Unknown\"] = 0;\n                values[valuesById[1] = \"OF_Open\"] = 1;\n                values[valuesById[2] = \"OF_Close\"] = 2;\n                values[valuesById[3] = \"OF_ForceClose\"] = 3;\n                values[valuesById[4] = \"OF_CloseToday\"] = 4;\n                values[valuesById[5] = \"OF_CloseYesterday\"] = 5;\n                values[valuesById[6] = \"OF_ForceOff\"] = 6;\n                values[valuesById[7] = \"OF_LocalForceClose\"] = 7;\n                return values;\n            })();\n\n            /**\n             * ForceCloseReasonEnum enum.\n             * @name xyz.redtorch.pb.ForceCloseReasonEnum\n             * @enum {string}\n             * @property {number} FCR_Unknown=0 FCR_Unknown value\n             * @property {number} FCR_NotForceClose=1 FCR_NotForceClose value\n             * @property {number} FCR_LackDeposit=2 FCR_LackDeposit value\n             * @property {number} FCR_ClientOverPositionLimit=3 FCR_ClientOverPositionLimit value\n             * @property {number} FCR_MemberOverPositionLimit=4 FCR_MemberOverPositionLimit value\n             * @property {number} FCR_NotMultiple=5 FCR_NotMultiple value\n             * @property {number} FCR_Violation=6 FCR_Violation value\n             * @property {number} FCR_Other=7 FCR_Other value\n             * @property {number} FCR_PersonDeliver=8 FCR_PersonDeliver value\n             */\n            pb.ForceCloseReasonEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"FCR_Unknown\"] = 0;\n                values[valuesById[1] = \"FCR_NotForceClose\"] = 1;\n                values[valuesById[2] = \"FCR_LackDeposit\"] = 2;\n                values[valuesById[3] = \"FCR_ClientOverPositionLimit\"] = 3;\n                values[valuesById[4] = \"FCR_MemberOverPositionLimit\"] = 4;\n                values[valuesById[5] = \"FCR_NotMultiple\"] = 5;\n                values[valuesById[6] = \"FCR_Violation\"] = 6;\n                values[valuesById[7] = \"FCR_Other\"] = 7;\n                values[valuesById[8] = \"FCR_PersonDeliver\"] = 8;\n                return values;\n            })();\n\n            /**\n             * OrderTypeEnum enum.\n             * @name xyz.redtorch.pb.OrderTypeEnum\n             * @enum {string}\n             * @property {number} OT_Unknown=0 OT_Unknown value\n             * @property {number} OT_Normal=1 OT_Normal value\n             * @property {number} OT_DeriveFromQuote=2 OT_DeriveFromQuote value\n             * @property {number} OT_DeriveFromCombination=3 OT_DeriveFromCombination value\n             * @property {number} OT_Combination=4 OT_Combination value\n             * @property {number} OT_ConditionalOrder=5 OT_ConditionalOrder value\n             * @property {number} OT_Swap=6 OT_Swap value\n             */\n            pb.OrderTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OT_Unknown\"] = 0;\n                values[valuesById[1] = \"OT_Normal\"] = 1;\n                values[valuesById[2] = \"OT_DeriveFromQuote\"] = 2;\n                values[valuesById[3] = \"OT_DeriveFromCombination\"] = 3;\n                values[valuesById[4] = \"OT_Combination\"] = 4;\n                values[valuesById[5] = \"OT_ConditionalOrder\"] = 5;\n                values[valuesById[6] = \"OT_Swap\"] = 6;\n                return values;\n            })();\n\n            /**\n             * TimeConditionEnum enum.\n             * @name xyz.redtorch.pb.TimeConditionEnum\n             * @enum {string}\n             * @property {number} TC_Unknown=0 TC_Unknown value\n             * @property {number} TC_IOC=1 TC_IOC value\n             * @property {number} TC_GFS=2 TC_GFS value\n             * @property {number} TC_GFD=3 TC_GFD value\n             * @property {number} TC_GTD=4 TC_GTD value\n             * @property {number} TC_GTC=5 TC_GTC value\n             * @property {number} TC_GFA=6 TC_GFA value\n             */\n            pb.TimeConditionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"TC_Unknown\"] = 0;\n                values[valuesById[1] = \"TC_IOC\"] = 1;\n                values[valuesById[2] = \"TC_GFS\"] = 2;\n                values[valuesById[3] = \"TC_GFD\"] = 3;\n                values[valuesById[4] = \"TC_GTD\"] = 4;\n                values[valuesById[5] = \"TC_GTC\"] = 5;\n                values[valuesById[6] = \"TC_GFA\"] = 6;\n                return values;\n            })();\n\n            /**\n             * VolumeConditionEnum enum.\n             * @name xyz.redtorch.pb.VolumeConditionEnum\n             * @enum {string}\n             * @property {number} VC_Unknown=0 VC_Unknown value\n             * @property {number} VC_AV=1 VC_AV value\n             * @property {number} VC_MV=2 VC_MV value\n             * @property {number} VC_CV=3 VC_CV value\n             */\n            pb.VolumeConditionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"VC_Unknown\"] = 0;\n                values[valuesById[1] = \"VC_AV\"] = 1;\n                values[valuesById[2] = \"VC_MV\"] = 2;\n                values[valuesById[3] = \"VC_CV\"] = 3;\n                return values;\n            })();\n\n            /**\n             * ContingentConditionEnum enum.\n             * @name xyz.redtorch.pb.ContingentConditionEnum\n             * @enum {string}\n             * @property {number} CC_Unknown=0 CC_Unknown value\n             * @property {number} CC_Immediately=1 CC_Immediately value\n             * @property {number} CC_Touch=2 CC_Touch value\n             * @property {number} CC_TouchProfit=3 CC_TouchProfit value\n             * @property {number} CC_ParkedOrder=4 CC_ParkedOrder value\n             * @property {number} CC_LastPriceGreaterThanStopPrice=5 CC_LastPriceGreaterThanStopPrice value\n             * @property {number} CC_LastPriceGreaterEqualStopPrice=6 CC_LastPriceGreaterEqualStopPrice value\n             * @property {number} CC_LastPriceLesserThanStopPrice=7 CC_LastPriceLesserThanStopPrice value\n             * @property {number} CC_LastPriceLesserEqualStopPrice=8 CC_LastPriceLesserEqualStopPrice value\n             * @property {number} CC_AskPriceGreaterThanStopPrice=9 CC_AskPriceGreaterThanStopPrice value\n             * @property {number} CC_AskPriceGreaterEqualStopPrice=10 CC_AskPriceGreaterEqualStopPrice value\n             * @property {number} CC_AskPriceLesserThanStopPrice=11 CC_AskPriceLesserThanStopPrice value\n             * @property {number} CC_AskPriceLesserEqualStopPrice=12 CC_AskPriceLesserEqualStopPrice value\n             * @property {number} CC_BidPriceGreaterThanStopPrice=13 CC_BidPriceGreaterThanStopPrice value\n             * @property {number} CC_BidPriceGreaterEqualStopPrice=14 CC_BidPriceGreaterEqualStopPrice value\n             * @property {number} CC_BidPriceLesserThanStopPrice=15 CC_BidPriceLesserThanStopPrice value\n             * @property {number} CC_BidPriceLesserEqualStopPrice=16 CC_BidPriceLesserEqualStopPrice value\n             * @property {number} CC_LocalLastPriceLesserEqualStopPrice=17 CC_LocalLastPriceLesserEqualStopPrice value\n             * @property {number} CC_LocalLastPriceGreaterEqualStopPrice=18 CC_LocalLastPriceGreaterEqualStopPrice value\n             */\n            pb.ContingentConditionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"CC_Unknown\"] = 0;\n                values[valuesById[1] = \"CC_Immediately\"] = 1;\n                values[valuesById[2] = \"CC_Touch\"] = 2;\n                values[valuesById[3] = \"CC_TouchProfit\"] = 3;\n                values[valuesById[4] = \"CC_ParkedOrder\"] = 4;\n                values[valuesById[5] = \"CC_LastPriceGreaterThanStopPrice\"] = 5;\n                values[valuesById[6] = \"CC_LastPriceGreaterEqualStopPrice\"] = 6;\n                values[valuesById[7] = \"CC_LastPriceLesserThanStopPrice\"] = 7;\n                values[valuesById[8] = \"CC_LastPriceLesserEqualStopPrice\"] = 8;\n                values[valuesById[9] = \"CC_AskPriceGreaterThanStopPrice\"] = 9;\n                values[valuesById[10] = \"CC_AskPriceGreaterEqualStopPrice\"] = 10;\n                values[valuesById[11] = \"CC_AskPriceLesserThanStopPrice\"] = 11;\n                values[valuesById[12] = \"CC_AskPriceLesserEqualStopPrice\"] = 12;\n                values[valuesById[13] = \"CC_BidPriceGreaterThanStopPrice\"] = 13;\n                values[valuesById[14] = \"CC_BidPriceGreaterEqualStopPrice\"] = 14;\n                values[valuesById[15] = \"CC_BidPriceLesserThanStopPrice\"] = 15;\n                values[valuesById[16] = \"CC_BidPriceLesserEqualStopPrice\"] = 16;\n                values[valuesById[17] = \"CC_LocalLastPriceLesserEqualStopPrice\"] = 17;\n                values[valuesById[18] = \"CC_LocalLastPriceGreaterEqualStopPrice\"] = 18;\n                return values;\n            })();\n\n            /**\n             * ActionFlagEnum enum.\n             * @name xyz.redtorch.pb.ActionFlagEnum\n             * @enum {string}\n             * @property {number} AF_Unknown=0 AF_Unknown value\n             * @property {number} AF_Delete=1 AF_Delete value\n             * @property {number} AF_Modify=2 AF_Modify value\n             */\n            pb.ActionFlagEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"AF_Unknown\"] = 0;\n                values[valuesById[1] = \"AF_Delete\"] = 1;\n                values[valuesById[2] = \"AF_Modify\"] = 2;\n                return values;\n            })();\n\n            /**\n             * TradingRightEnum enum.\n             * @name xyz.redtorch.pb.TradingRightEnum\n             * @enum {string}\n             * @property {number} TR_Unknown=0 TR_Unknown value\n             * @property {number} TR_Allow=1 TR_Allow value\n             * @property {number} TR_CloseOnly=2 TR_CloseOnly value\n             * @property {number} TR_Forbidden=3 TR_Forbidden value\n             */\n            pb.TradingRightEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"TR_Unknown\"] = 0;\n                values[valuesById[1] = \"TR_Allow\"] = 1;\n                values[valuesById[2] = \"TR_CloseOnly\"] = 2;\n                values[valuesById[3] = \"TR_Forbidden\"] = 3;\n                return values;\n            })();\n\n            /**\n             * OrderSourceEnum enum.\n             * @name xyz.redtorch.pb.OrderSourceEnum\n             * @enum {string}\n             * @property {number} ODS_Unknown=0 ODS_Unknown value\n             * @property {number} ODS_Participant=1 ODS_Participant value\n             * @property {number} ODS_Administrator=2 ODS_Administrator value\n             */\n            pb.OrderSourceEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"ODS_Unknown\"] = 0;\n                values[valuesById[1] = \"ODS_Participant\"] = 1;\n                values[valuesById[2] = \"ODS_Administrator\"] = 2;\n                return values;\n            })();\n\n            /**\n             * TradeTypeEnum enum.\n             * @name xyz.redtorch.pb.TradeTypeEnum\n             * @enum {string}\n             * @property {number} TT_Unknown=0 TT_Unknown value\n             * @property {number} TT_SplitCombination=1 TT_SplitCombination value\n             * @property {number} TT_Common=2 TT_Common value\n             * @property {number} TT_OptionsExecution=3 TT_OptionsExecution value\n             * @property {number} TT_OTC=4 TT_OTC value\n             * @property {number} TT_EFPDerived=5 TT_EFPDerived value\n             * @property {number} TT_CombinationDerived=6 TT_CombinationDerived value\n             * @property {number} TT_BlockTrade=7 TT_BlockTrade value\n             */\n            pb.TradeTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"TT_Unknown\"] = 0;\n                values[valuesById[1] = \"TT_SplitCombination\"] = 1;\n                values[valuesById[2] = \"TT_Common\"] = 2;\n                values[valuesById[3] = \"TT_OptionsExecution\"] = 3;\n                values[valuesById[4] = \"TT_OTC\"] = 4;\n                values[valuesById[5] = \"TT_EFPDerived\"] = 5;\n                values[valuesById[6] = \"TT_CombinationDerived\"] = 6;\n                values[valuesById[7] = \"TT_BlockTrade\"] = 7;\n                return values;\n            })();\n\n            /**\n             * PriceSourceEnum enum.\n             * @name xyz.redtorch.pb.PriceSourceEnum\n             * @enum {string}\n             * @property {number} PSRC_Unknown=0 PSRC_Unknown value\n             * @property {number} PSRC_LastPrice=1 PSRC_LastPrice value\n             * @property {number} PSRC_Buy=2 PSRC_Buy value\n             * @property {number} PSRC_Sell=3 PSRC_Sell value\n             * @property {number} PSRC_OTC=4 PSRC_OTC value\n             */\n            pb.PriceSourceEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"PSRC_Unknown\"] = 0;\n                values[valuesById[1] = \"PSRC_LastPrice\"] = 1;\n                values[valuesById[2] = \"PSRC_Buy\"] = 2;\n                values[valuesById[3] = \"PSRC_Sell\"] = 3;\n                values[valuesById[4] = \"PSRC_OTC\"] = 4;\n                return values;\n            })();\n\n            /**\n             * CurrencyEnum enum.\n             * @name xyz.redtorch.pb.CurrencyEnum\n             * @enum {string}\n             * @property {number} UnknownCurrency=0 UnknownCurrency value\n             * @property {number} USD=1 USD value\n             * @property {number} CNY=2 CNY value\n             * @property {number} CNH=3 CNH value\n             * @property {number} HKD=4 HKD value\n             * @property {number} JPY=5 JPY value\n             * @property {number} EUR=6 EUR value\n             * @property {number} GBP=7 GBP value\n             * @property {number} DEM=8 DEM value\n             * @property {number} CHF=9 CHF value\n             * @property {number} FRF=10 FRF value\n             * @property {number} CAD=11 CAD value\n             * @property {number} AUD=12 AUD value\n             * @property {number} ATS=13 ATS value\n             * @property {number} FIM=14 FIM value\n             * @property {number} BEF=15 BEF value\n             * @property {number} THB=16 THB value\n             * @property {number} IEP=17 IEP value\n             * @property {number} ITL=18 ITL value\n             * @property {number} LUF=19 LUF value\n             * @property {number} NLG=20 NLG value\n             * @property {number} PTE=21 PTE value\n             * @property {number} ESP=22 ESP value\n             * @property {number} IDR=23 IDR value\n             * @property {number} MYR=24 MYR value\n             * @property {number} NZD=25 NZD value\n             * @property {number} PHP=26 PHP value\n             * @property {number} SUR=27 SUR value\n             * @property {number} SGD=28 SGD value\n             * @property {number} KRW=29 KRW value\n             */\n            pb.CurrencyEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UnknownCurrency\"] = 0;\n                values[valuesById[1] = \"USD\"] = 1;\n                values[valuesById[2] = \"CNY\"] = 2;\n                values[valuesById[3] = \"CNH\"] = 3;\n                values[valuesById[4] = \"HKD\"] = 4;\n                values[valuesById[5] = \"JPY\"] = 5;\n                values[valuesById[6] = \"EUR\"] = 6;\n                values[valuesById[7] = \"GBP\"] = 7;\n                values[valuesById[8] = \"DEM\"] = 8;\n                values[valuesById[9] = \"CHF\"] = 9;\n                values[valuesById[10] = \"FRF\"] = 10;\n                values[valuesById[11] = \"CAD\"] = 11;\n                values[valuesById[12] = \"AUD\"] = 12;\n                values[valuesById[13] = \"ATS\"] = 13;\n                values[valuesById[14] = \"FIM\"] = 14;\n                values[valuesById[15] = \"BEF\"] = 15;\n                values[valuesById[16] = \"THB\"] = 16;\n                values[valuesById[17] = \"IEP\"] = 17;\n                values[valuesById[18] = \"ITL\"] = 18;\n                values[valuesById[19] = \"LUF\"] = 19;\n                values[valuesById[20] = \"NLG\"] = 20;\n                values[valuesById[21] = \"PTE\"] = 21;\n                values[valuesById[22] = \"ESP\"] = 22;\n                values[valuesById[23] = \"IDR\"] = 23;\n                values[valuesById[24] = \"MYR\"] = 24;\n                values[valuesById[25] = \"NZD\"] = 25;\n                values[valuesById[26] = \"PHP\"] = 26;\n                values[valuesById[27] = \"SUR\"] = 27;\n                values[valuesById[28] = \"SGD\"] = 28;\n                values[valuesById[29] = \"KRW\"] = 29;\n                return values;\n            })();\n\n            /**\n             * ExchangeEnum enum.\n             * @name xyz.redtorch.pb.ExchangeEnum\n             * @enum {string}\n             * @property {number} UnknownExchange=0 UnknownExchange value\n             * @property {number} SSE=1 SSE value\n             * @property {number} SZSE=2 SZSE value\n             * @property {number} CFFEX=3 CFFEX value\n             * @property {number} SHFE=4 SHFE value\n             * @property {number} CZCE=5 CZCE value\n             * @property {number} DCE=6 DCE value\n             * @property {number} SGE=7 SGE value\n             * @property {number} INE=8 INE value\n             * @property {number} SEHK=9 SEHK value\n             * @property {number} HKFE=10 HKFE value\n             * @property {number} SGX=11 SGX value\n             * @property {number} NYBOT=12 NYBOT value\n             * @property {number} NYMEX=13 NYMEX value\n             * @property {number} CFE=14 CFE value\n             * @property {number} GLOBEX=15 GLOBEX value\n             * @property {number} CMECRYPTO=16 CMECRYPTO value\n             * @property {number} ICEEU=17 ICEEU value\n             * @property {number} ICEEUSOFT=18 ICEEUSOFT value\n             * @property {number} ICEUS=19 ICEUS value\n             * @property {number} IPE=20 IPE value\n             * @property {number} LMEOTC=21 LMEOTC value\n             * @property {number} ECBOT=22 ECBOT value\n             * @property {number} APEX=23 APEX value\n             * @property {number} BMD=24 BMD value\n             * @property {number} MONEP=25 MONEP value\n             * @property {number} DTB=26 DTB value\n             * @property {number} TOCOM=27 TOCOM value\n             * @property {number} TAIFEX=28 TAIFEX value\n             * @property {number} SEHKSZSE=29 SEHKSZSE value\n             * @property {number} SEHKNTL=30 SEHKNTL value\n             * @property {number} KSE=31 KSE value\n             * @property {number} OSE=32 OSE value\n             * @property {number} IB_IDEALPRO=33 IB_IDEALPRO value\n             * @property {number} IB_SMART=34 IB_SMART value\n             */\n            pb.ExchangeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UnknownExchange\"] = 0;\n                values[valuesById[1] = \"SSE\"] = 1;\n                values[valuesById[2] = \"SZSE\"] = 2;\n                values[valuesById[3] = \"CFFEX\"] = 3;\n                values[valuesById[4] = \"SHFE\"] = 4;\n                values[valuesById[5] = \"CZCE\"] = 5;\n                values[valuesById[6] = \"DCE\"] = 6;\n                values[valuesById[7] = \"SGE\"] = 7;\n                values[valuesById[8] = \"INE\"] = 8;\n                values[valuesById[9] = \"SEHK\"] = 9;\n                values[valuesById[10] = \"HKFE\"] = 10;\n                values[valuesById[11] = \"SGX\"] = 11;\n                values[valuesById[12] = \"NYBOT\"] = 12;\n                values[valuesById[13] = \"NYMEX\"] = 13;\n                values[valuesById[14] = \"CFE\"] = 14;\n                values[valuesById[15] = \"GLOBEX\"] = 15;\n                values[valuesById[16] = \"CMECRYPTO\"] = 16;\n                values[valuesById[17] = \"ICEEU\"] = 17;\n                values[valuesById[18] = \"ICEEUSOFT\"] = 18;\n                values[valuesById[19] = \"ICEUS\"] = 19;\n                values[valuesById[20] = \"IPE\"] = 20;\n                values[valuesById[21] = \"LMEOTC\"] = 21;\n                values[valuesById[22] = \"ECBOT\"] = 22;\n                values[valuesById[23] = \"APEX\"] = 23;\n                values[valuesById[24] = \"BMD\"] = 24;\n                values[valuesById[25] = \"MONEP\"] = 25;\n                values[valuesById[26] = \"DTB\"] = 26;\n                values[valuesById[27] = \"TOCOM\"] = 27;\n                values[valuesById[28] = \"TAIFEX\"] = 28;\n                values[valuesById[29] = \"SEHKSZSE\"] = 29;\n                values[valuesById[30] = \"SEHKNTL\"] = 30;\n                values[valuesById[31] = \"KSE\"] = 31;\n                values[valuesById[32] = \"OSE\"] = 32;\n                values[valuesById[33] = \"IB_IDEALPRO\"] = 33;\n                values[valuesById[34] = \"IB_SMART\"] = 34;\n                return values;\n            })();\n\n            /**\n             * OptionsTypeEnum enum.\n             * @name xyz.redtorch.pb.OptionsTypeEnum\n             * @enum {string}\n             * @property {number} O_Unknown=0 O_Unknown value\n             * @property {number} O_CallOptions=1 O_CallOptions value\n             * @property {number} O_PutOptions=2 O_PutOptions value\n             */\n            pb.OptionsTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"O_Unknown\"] = 0;\n                values[valuesById[1] = \"O_CallOptions\"] = 1;\n                values[valuesById[2] = \"O_PutOptions\"] = 2;\n                return values;\n            })();\n\n            /**\n             * StrikeModeEnum enum.\n             * @name xyz.redtorch.pb.StrikeModeEnum\n             * @enum {string}\n             * @property {number} STM_Unknown=0 STM_Unknown value\n             * @property {number} STM_Continental=1 STM_Continental value\n             * @property {number} STM_American=2 STM_American value\n             * @property {number} STM_Bermuda=3 STM_Bermuda value\n             */\n            pb.StrikeModeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"STM_Unknown\"] = 0;\n                values[valuesById[1] = \"STM_Continental\"] = 1;\n                values[valuesById[2] = \"STM_American\"] = 2;\n                values[valuesById[3] = \"STM_Bermuda\"] = 3;\n                return values;\n            })();\n\n            /**\n             * CombinationTypeEnum enum.\n             * @name xyz.redtorch.pb.CombinationTypeEnum\n             * @enum {string}\n             * @property {number} COMBT_Unknown=0 COMBT_Unknown value\n             * @property {number} COMBT_Future=1 COMBT_Future value\n             * @property {number} COMBT_BUL=2 COMBT_BUL value\n             * @property {number} COMBT_BER=3 COMBT_BER value\n             * @property {number} COMBT_STD=4 COMBT_STD value\n             * @property {number} COMBT_STG=5 COMBT_STG value\n             * @property {number} COMBT_PRT=6 COMBT_PRT value\n             * @property {number} COMBT_CLD=7 COMBT_CLD value\n             */\n            pb.CombinationTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"COMBT_Unknown\"] = 0;\n                values[valuesById[1] = \"COMBT_Future\"] = 1;\n                values[valuesById[2] = \"COMBT_BUL\"] = 2;\n                values[valuesById[3] = \"COMBT_BER\"] = 3;\n                values[valuesById[4] = \"COMBT_STD\"] = 4;\n                values[valuesById[5] = \"COMBT_STG\"] = 5;\n                values[valuesById[6] = \"COMBT_PRT\"] = 6;\n                values[valuesById[7] = \"COMBT_CLD\"] = 7;\n                return values;\n            })();\n\n            pb.GatewayField = (function() {\n\n                /**\n                 * Properties of a GatewayField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IGatewayField\n                 * @property {string|null} [gatewayId] GatewayField gatewayId\n                 * @property {string|null} [name] GatewayField name\n                 * @property {string|null} [description] GatewayField description\n                 * @property {xyz.redtorch.pb.GatewayTypeEnum|null} [gatewayType] GatewayField gatewayType\n                 * @property {xyz.redtorch.pb.GatewayAdapterTypeEnum|null} [gatewayAdapterType] GatewayField gatewayAdapterType\n                 * @property {xyz.redtorch.pb.ConnectStatusEnum|null} [status] GatewayField status\n                 * @property {boolean|null} [authErrorFlag] GatewayField authErrorFlag\n                 */\n\n                /**\n                 * Constructs a new GatewayField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a GatewayField.\n                 * @implements IGatewayField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IGatewayField=} [properties] Properties to set\n                 */\n                function GatewayField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * GatewayField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.gatewayId = \"\";\n\n                /**\n                 * GatewayField name.\n                 * @member {string} name\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.name = \"\";\n\n                /**\n                 * GatewayField description.\n                 * @member {string} description\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.description = \"\";\n\n                /**\n                 * GatewayField gatewayType.\n                 * @member {xyz.redtorch.pb.GatewayTypeEnum} gatewayType\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.gatewayType = 0;\n\n                /**\n                 * GatewayField gatewayAdapterType.\n                 * @member {xyz.redtorch.pb.GatewayAdapterTypeEnum} gatewayAdapterType\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.gatewayAdapterType = 0;\n\n                /**\n                 * GatewayField status.\n                 * @member {xyz.redtorch.pb.ConnectStatusEnum} status\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.status = 0;\n\n                /**\n                 * GatewayField authErrorFlag.\n                 * @member {boolean} authErrorFlag\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.authErrorFlag = false;\n\n                /**\n                 * Creates a new GatewayField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewayField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField instance\n                 */\n                GatewayField.create = function create(properties) {\n                    return new GatewayField(properties);\n                };\n\n                /**\n                 * Encodes the specified GatewayField message. Does not implicitly {@link xyz.redtorch.pb.GatewayField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewayField} message GatewayField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewayField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.gatewayId);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gatewayType);\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gatewayAdapterType);\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.status);\n                    if (message.authErrorFlag != null && message.hasOwnProperty(\"authErrorFlag\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.authErrorFlag);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GatewayField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewayField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewayField} message GatewayField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewayField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GatewayField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewayField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewayField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        case 3:\n                            message.description = reader.string();\n                            break;\n                        case 4:\n                            message.gatewayType = reader.int32();\n                            break;\n                        case 5:\n                            message.gatewayAdapterType = reader.int32();\n                            break;\n                        case 6:\n                            message.status = reader.int32();\n                            break;\n                        case 7:\n                            message.authErrorFlag = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GatewayField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewayField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GatewayField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GatewayField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        switch (message.gatewayType) {\n                        default:\n                            return \"gatewayType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        switch (message.gatewayAdapterType) {\n                        default:\n                            return \"gatewayAdapterType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.authErrorFlag != null && message.hasOwnProperty(\"authErrorFlag\"))\n                        if (typeof message.authErrorFlag !== \"boolean\")\n                            return \"authErrorFlag: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a GatewayField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField\n                 */\n                GatewayField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.GatewayField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.GatewayField();\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    switch (object.gatewayType) {\n                    case \"GTE_TradeAndMarketData\":\n                    case 0:\n                        message.gatewayType = 0;\n                        break;\n                    case \"GTE_MarketData\":\n                    case 1:\n                        message.gatewayType = 1;\n                        break;\n                    case \"GTE_Trade\":\n                    case 2:\n                        message.gatewayType = 2;\n                        break;\n                    }\n                    switch (object.gatewayAdapterType) {\n                    case \"GAT_CTP\":\n                    case 0:\n                        message.gatewayAdapterType = 0;\n                        break;\n                    case \"GAT_IB\":\n                    case 1:\n                        message.gatewayAdapterType = 1;\n                        break;\n                    case \"GAT_COMMON\":\n                    case 2:\n                        message.gatewayAdapterType = 2;\n                        break;\n                    }\n                    switch (object.status) {\n                    case \"CS_Unknown\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"CS_Disconnected\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"CS_Connected\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"CS_Disconnecting\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    case \"CS_Connecting\":\n                    case 4:\n                        message.status = 4;\n                        break;\n                    }\n                    if (object.authErrorFlag != null)\n                        message.authErrorFlag = Boolean(object.authErrorFlag);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GatewayField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.GatewayField} message GatewayField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GatewayField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.gatewayId = \"\";\n                        object.name = \"\";\n                        object.description = \"\";\n                        object.gatewayType = options.enums === String ? \"GTE_TradeAndMarketData\" : 0;\n                        object.gatewayAdapterType = options.enums === String ? \"GAT_CTP\" : 0;\n                        object.status = options.enums === String ? \"CS_Unknown\" : 0;\n                        object.authErrorFlag = false;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        object.gatewayType = options.enums === String ? $root.xyz.redtorch.pb.GatewayTypeEnum[message.gatewayType] : message.gatewayType;\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        object.gatewayAdapterType = options.enums === String ? $root.xyz.redtorch.pb.GatewayAdapterTypeEnum[message.gatewayAdapterType] : message.gatewayAdapterType;\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.xyz.redtorch.pb.ConnectStatusEnum[message.status] : message.status;\n                    if (message.authErrorFlag != null && message.hasOwnProperty(\"authErrorFlag\"))\n                        object.authErrorFlag = message.authErrorFlag;\n                    return object;\n                };\n\n                /**\n                 * Converts this GatewayField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GatewayField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return GatewayField;\n            })();\n\n            pb.ContractField = (function() {\n\n                /**\n                 * Properties of a ContractField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IContractField\n                 * @property {string|null} [contractId] ContractField contractId\n                 * @property {string|null} [name] ContractField name\n                 * @property {string|null} [fullName] ContractField fullName\n                 * @property {string|null} [thirdPartyId] ContractField thirdPartyId\n                 * @property {string|null} [unifiedSymbol] ContractField unifiedSymbol\n                 * @property {string|null} [symbol] ContractField symbol\n                 * @property {xyz.redtorch.pb.ExchangeEnum|null} [exchange] ContractField exchange\n                 * @property {xyz.redtorch.pb.ProductClassEnum|null} [productClass] ContractField productClass\n                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] ContractField currency\n                 * @property {number|null} [multiplier] ContractField multiplier\n                 * @property {number|null} [priceTick] ContractField priceTick\n                 * @property {number|null} [longMarginRatio] ContractField longMarginRatio\n                 * @property {number|null} [shortMarginRatio] ContractField shortMarginRatio\n                 * @property {boolean|null} [maxMarginSideAlgorithm] ContractField maxMarginSideAlgorithm\n                 * @property {string|null} [underlyingSymbol] ContractField underlyingSymbol\n                 * @property {number|null} [strikePrice] ContractField strikePrice\n                 * @property {xyz.redtorch.pb.OptionsTypeEnum|null} [optionsType] ContractField optionsType\n                 * @property {number|null} [underlyingMultiplier] ContractField underlyingMultiplier\n                 * @property {string|null} [lastTradeDateOrContractMonth] ContractField lastTradeDateOrContractMonth\n                 * @property {number|null} [maxMarketOrderVolume] ContractField maxMarketOrderVolume\n                 * @property {number|null} [minMarketOrderVolume] ContractField minMarketOrderVolume\n                 * @property {number|null} [maxLimitOrderVolume] ContractField maxLimitOrderVolume\n                 * @property {number|null} [minLimitOrderVolume] ContractField minLimitOrderVolume\n                 * @property {xyz.redtorch.pb.CombinationTypeEnum|null} [combinationType] ContractField combinationType\n                 * @property {string|null} [gatewayId] ContractField gatewayId\n                 */\n\n                /**\n                 * Constructs a new ContractField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a ContractField.\n                 * @implements IContractField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IContractField=} [properties] Properties to set\n                 */\n                function ContractField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ContractField contractId.\n                 * @member {string} contractId\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.contractId = \"\";\n\n                /**\n                 * ContractField name.\n                 * @member {string} name\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.name = \"\";\n\n                /**\n                 * ContractField fullName.\n                 * @member {string} fullName\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.fullName = \"\";\n\n                /**\n                 * ContractField thirdPartyId.\n                 * @member {string} thirdPartyId\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.thirdPartyId = \"\";\n\n                /**\n                 * ContractField unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * ContractField symbol.\n                 * @member {string} symbol\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.symbol = \"\";\n\n                /**\n                 * ContractField exchange.\n                 * @member {xyz.redtorch.pb.ExchangeEnum} exchange\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.exchange = 0;\n\n                /**\n                 * ContractField productClass.\n                 * @member {xyz.redtorch.pb.ProductClassEnum} productClass\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.productClass = 0;\n\n                /**\n                 * ContractField currency.\n                 * @member {xyz.redtorch.pb.CurrencyEnum} currency\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.currency = 0;\n\n                /**\n                 * ContractField multiplier.\n                 * @member {number} multiplier\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.multiplier = 0;\n\n                /**\n                 * ContractField priceTick.\n                 * @member {number} priceTick\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.priceTick = 0;\n\n                /**\n                 * ContractField longMarginRatio.\n                 * @member {number} longMarginRatio\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.longMarginRatio = 0;\n\n                /**\n                 * ContractField shortMarginRatio.\n                 * @member {number} shortMarginRatio\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.shortMarginRatio = 0;\n\n                /**\n                 * ContractField maxMarginSideAlgorithm.\n                 * @member {boolean} maxMarginSideAlgorithm\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.maxMarginSideAlgorithm = false;\n\n                /**\n                 * ContractField underlyingSymbol.\n                 * @member {string} underlyingSymbol\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.underlyingSymbol = \"\";\n\n                /**\n                 * ContractField strikePrice.\n                 * @member {number} strikePrice\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.strikePrice = 0;\n\n                /**\n                 * ContractField optionsType.\n                 * @member {xyz.redtorch.pb.OptionsTypeEnum} optionsType\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.optionsType = 0;\n\n                /**\n                 * ContractField underlyingMultiplier.\n                 * @member {number} underlyingMultiplier\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.underlyingMultiplier = 0;\n\n                /**\n                 * ContractField lastTradeDateOrContractMonth.\n                 * @member {string} lastTradeDateOrContractMonth\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.lastTradeDateOrContractMonth = \"\";\n\n                /**\n                 * ContractField maxMarketOrderVolume.\n                 * @member {number} maxMarketOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.maxMarketOrderVolume = 0;\n\n                /**\n                 * ContractField minMarketOrderVolume.\n                 * @member {number} minMarketOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.minMarketOrderVolume = 0;\n\n                /**\n                 * ContractField maxLimitOrderVolume.\n                 * @member {number} maxLimitOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.maxLimitOrderVolume = 0;\n\n                /**\n                 * ContractField minLimitOrderVolume.\n                 * @member {number} minLimitOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.minLimitOrderVolume = 0;\n\n                /**\n                 * ContractField combinationType.\n                 * @member {xyz.redtorch.pb.CombinationTypeEnum} combinationType\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.combinationType = 0;\n\n                /**\n                 * ContractField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new ContractField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.IContractField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField instance\n                 */\n                ContractField.create = function create(properties) {\n                    return new ContractField(properties);\n                };\n\n                /**\n                 * Encodes the specified ContractField message. Does not implicitly {@link xyz.redtorch.pb.ContractField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.IContractField} message ContractField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContractField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractId);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    if (message.fullName != null && message.hasOwnProperty(\"fullName\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fullName);\n                    if (message.thirdPartyId != null && message.hasOwnProperty(\"thirdPartyId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.thirdPartyId);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.unifiedSymbol);\n                    if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.symbol);\n                    if (message.exchange != null && message.hasOwnProperty(\"exchange\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.exchange);\n                    if (message.productClass != null && message.hasOwnProperty(\"productClass\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.productClass);\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.currency);\n                    if (message.multiplier != null && message.hasOwnProperty(\"multiplier\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.multiplier);\n                    if (message.priceTick != null && message.hasOwnProperty(\"priceTick\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.priceTick);\n                    if (message.longMarginRatio != null && message.hasOwnProperty(\"longMarginRatio\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.longMarginRatio);\n                    if (message.shortMarginRatio != null && message.hasOwnProperty(\"shortMarginRatio\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.shortMarginRatio);\n                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty(\"maxMarginSideAlgorithm\"))\n                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.maxMarginSideAlgorithm);\n                    if (message.underlyingSymbol != null && message.hasOwnProperty(\"underlyingSymbol\"))\n                        writer.uint32(/* id 17, wireType 2 =*/138).string(message.underlyingSymbol);\n                    if (message.strikePrice != null && message.hasOwnProperty(\"strikePrice\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.strikePrice);\n                    if (message.optionsType != null && message.hasOwnProperty(\"optionsType\"))\n                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.optionsType);\n                    if (message.underlyingMultiplier != null && message.hasOwnProperty(\"underlyingMultiplier\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.underlyingMultiplier);\n                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty(\"lastTradeDateOrContractMonth\"))\n                        writer.uint32(/* id 21, wireType 2 =*/170).string(message.lastTradeDateOrContractMonth);\n                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty(\"maxMarketOrderVolume\"))\n                        writer.uint32(/* id 22, wireType 5 =*/181).fixed32(message.maxMarketOrderVolume);\n                    if (message.minMarketOrderVolume != null && message.hasOwnProperty(\"minMarketOrderVolume\"))\n                        writer.uint32(/* id 23, wireType 5 =*/189).fixed32(message.minMarketOrderVolume);\n                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty(\"maxLimitOrderVolume\"))\n                        writer.uint32(/* id 24, wireType 5 =*/197).fixed32(message.maxLimitOrderVolume);\n                    if (message.minLimitOrderVolume != null && message.hasOwnProperty(\"minLimitOrderVolume\"))\n                        writer.uint32(/* id 25, wireType 5 =*/205).fixed32(message.minLimitOrderVolume);\n                    if (message.combinationType != null && message.hasOwnProperty(\"combinationType\"))\n                        writer.uint32(/* id 26, wireType 0 =*/208).int32(message.combinationType);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 27, wireType 2 =*/218).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ContractField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.ContractField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.IContractField} message ContractField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContractField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ContractField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContractField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.ContractField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contractId = reader.string();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        case 3:\n                            message.fullName = reader.string();\n                            break;\n                        case 4:\n                            message.thirdPartyId = reader.string();\n                            break;\n                        case 7:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        case 8:\n                            message.symbol = reader.string();\n                            break;\n                        case 9:\n                            message.exchange = reader.int32();\n                            break;\n                        case 10:\n                            message.productClass = reader.int32();\n                            break;\n                        case 11:\n                            message.currency = reader.int32();\n                            break;\n                        case 12:\n                            message.multiplier = reader.double();\n                            break;\n                        case 13:\n                            message.priceTick = reader.double();\n                            break;\n                        case 14:\n                            message.longMarginRatio = reader.double();\n                            break;\n                        case 15:\n                            message.shortMarginRatio = reader.double();\n                            break;\n                        case 16:\n                            message.maxMarginSideAlgorithm = reader.bool();\n                            break;\n                        case 17:\n                            message.underlyingSymbol = reader.string();\n                            break;\n                        case 18:\n                            message.strikePrice = reader.double();\n                            break;\n                        case 19:\n                            message.optionsType = reader.int32();\n                            break;\n                        case 20:\n                            message.underlyingMultiplier = reader.double();\n                            break;\n                        case 21:\n                            message.lastTradeDateOrContractMonth = reader.string();\n                            break;\n                        case 22:\n                            message.maxMarketOrderVolume = reader.fixed32();\n                            break;\n                        case 23:\n                            message.minMarketOrderVolume = reader.fixed32();\n                            break;\n                        case 24:\n                            message.maxLimitOrderVolume = reader.fixed32();\n                            break;\n                        case 25:\n                            message.minLimitOrderVolume = reader.fixed32();\n                            break;\n                        case 26:\n                            message.combinationType = reader.int32();\n                            break;\n                        case 27:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ContractField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContractField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ContractField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ContractField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        if (!$util.isString(message.contractId))\n                            return \"contractId: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.fullName != null && message.hasOwnProperty(\"fullName\"))\n                        if (!$util.isString(message.fullName))\n                            return \"fullName: string expected\";\n                    if (message.thirdPartyId != null && message.hasOwnProperty(\"thirdPartyId\"))\n                        if (!$util.isString(message.thirdPartyId))\n                            return \"thirdPartyId: string expected\";\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                        if (!$util.isString(message.symbol))\n                            return \"symbol: string expected\";\n                    if (message.exchange != null && message.hasOwnProperty(\"exchange\"))\n                        switch (message.exchange) {\n                        default:\n                            return \"exchange: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                        case 30:\n                        case 31:\n                        case 32:\n                        case 33:\n                        case 34:\n                            break;\n                        }\n                    if (message.productClass != null && message.hasOwnProperty(\"productClass\"))\n                        switch (message.productClass) {\n                        default:\n                            return \"productClass: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                            break;\n                        }\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        switch (message.currency) {\n                        default:\n                            return \"currency: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                            break;\n                        }\n                    if (message.multiplier != null && message.hasOwnProperty(\"multiplier\"))\n                        if (typeof message.multiplier !== \"number\")\n                            return \"multiplier: number expected\";\n                    if (message.priceTick != null && message.hasOwnProperty(\"priceTick\"))\n                        if (typeof message.priceTick !== \"number\")\n                            return \"priceTick: number expected\";\n                    if (message.longMarginRatio != null && message.hasOwnProperty(\"longMarginRatio\"))\n                        if (typeof message.longMarginRatio !== \"number\")\n                            return \"longMarginRatio: number expected\";\n                    if (message.shortMarginRatio != null && message.hasOwnProperty(\"shortMarginRatio\"))\n                        if (typeof message.shortMarginRatio !== \"number\")\n                            return \"shortMarginRatio: number expected\";\n                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty(\"maxMarginSideAlgorithm\"))\n                        if (typeof message.maxMarginSideAlgorithm !== \"boolean\")\n                            return \"maxMarginSideAlgorithm: boolean expected\";\n                    if (message.underlyingSymbol != null && message.hasOwnProperty(\"underlyingSymbol\"))\n                        if (!$util.isString(message.underlyingSymbol))\n                            return \"underlyingSymbol: string expected\";\n                    if (message.strikePrice != null && message.hasOwnProperty(\"strikePrice\"))\n                        if (typeof message.strikePrice !== \"number\")\n                            return \"strikePrice: number expected\";\n                    if (message.optionsType != null && message.hasOwnProperty(\"optionsType\"))\n                        switch (message.optionsType) {\n                        default:\n                            return \"optionsType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.underlyingMultiplier != null && message.hasOwnProperty(\"underlyingMultiplier\"))\n                        if (typeof message.underlyingMultiplier !== \"number\")\n                            return \"underlyingMultiplier: number expected\";\n                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty(\"lastTradeDateOrContractMonth\"))\n                        if (!$util.isString(message.lastTradeDateOrContractMonth))\n                            return \"lastTradeDateOrContractMonth: string expected\";\n                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty(\"maxMarketOrderVolume\"))\n                        if (!$util.isInteger(message.maxMarketOrderVolume))\n                            return \"maxMarketOrderVolume: integer expected\";\n                    if (message.minMarketOrderVolume != null && message.hasOwnProperty(\"minMarketOrderVolume\"))\n                        if (!$util.isInteger(message.minMarketOrderVolume))\n                            return \"minMarketOrderVolume: integer expected\";\n                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty(\"maxLimitOrderVolume\"))\n                        if (!$util.isInteger(message.maxLimitOrderVolume))\n                            return \"maxLimitOrderVolume: integer expected\";\n                    if (message.minLimitOrderVolume != null && message.hasOwnProperty(\"minLimitOrderVolume\"))\n                        if (!$util.isInteger(message.minLimitOrderVolume))\n                            return \"minLimitOrderVolume: integer expected\";\n                    if (message.combinationType != null && message.hasOwnProperty(\"combinationType\"))\n                        switch (message.combinationType) {\n                        default:\n                            return \"combinationType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ContractField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField\n                 */\n                ContractField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.ContractField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.ContractField();\n                    if (object.contractId != null)\n                        message.contractId = String(object.contractId);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.fullName != null)\n                        message.fullName = String(object.fullName);\n                    if (object.thirdPartyId != null)\n                        message.thirdPartyId = String(object.thirdPartyId);\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    if (object.symbol != null)\n                        message.symbol = String(object.symbol);\n                    switch (object.exchange) {\n                    case \"UnknownExchange\":\n                    case 0:\n                        message.exchange = 0;\n                        break;\n                    case \"SSE\":\n                    case 1:\n                        message.exchange = 1;\n                        break;\n                    case \"SZSE\":\n                    case 2:\n                        message.exchange = 2;\n                        break;\n                    case \"CFFEX\":\n                    case 3:\n                        message.exchange = 3;\n                        break;\n                    case \"SHFE\":\n                    case 4:\n                        message.exchange = 4;\n                        break;\n                    case \"CZCE\":\n                    case 5:\n                        message.exchange = 5;\n                        break;\n                    case \"DCE\":\n                    case 6:\n                        message.exchange = 6;\n                        break;\n                    case \"SGE\":\n                    case 7:\n                        message.exchange = 7;\n                        break;\n                    case \"INE\":\n                    case 8:\n                        message.exchange = 8;\n                        break;\n                    case \"SEHK\":\n                    case 9:\n                        message.exchange = 9;\n                        break;\n                    case \"HKFE\":\n                    case 10:\n                        message.exchange = 10;\n                        break;\n                    case \"SGX\":\n                    case 11:\n                        message.exchange = 11;\n                        break;\n                    case \"NYBOT\":\n                    case 12:\n                        message.exchange = 12;\n                        break;\n                    case \"NYMEX\":\n                    case 13:\n                        message.exchange = 13;\n                        break;\n                    case \"CFE\":\n                    case 14:\n                        message.exchange = 14;\n                        break;\n                    case \"GLOBEX\":\n                    case 15:\n                        message.exchange = 15;\n                        break;\n                    case \"CMECRYPTO\":\n                    case 16:\n                        message.exchange = 16;\n                        break;\n                    case \"ICEEU\":\n                    case 17:\n                        message.exchange = 17;\n                        break;\n                    case \"ICEEUSOFT\":\n                    case 18:\n                        message.exchange = 18;\n                        break;\n                    case \"ICEUS\":\n                    case 19:\n                        message.exchange = 19;\n                        break;\n                    case \"IPE\":\n                    case 20:\n                        message.exchange = 20;\n                        break;\n                    case \"LMEOTC\":\n                    case 21:\n                        message.exchange = 21;\n                        break;\n                    case \"ECBOT\":\n                    case 22:\n                        message.exchange = 22;\n                        break;\n                    case \"APEX\":\n                    case 23:\n                        message.exchange = 23;\n                        break;\n                    case \"BMD\":\n                    case 24:\n                        message.exchange = 24;\n                        break;\n                    case \"MONEP\":\n                    case 25:\n                        message.exchange = 25;\n                        break;\n                    case \"DTB\":\n                    case 26:\n                        message.exchange = 26;\n                        break;\n                    case \"TOCOM\":\n                    case 27:\n                        message.exchange = 27;\n                        break;\n                    case \"TAIFEX\":\n                    case 28:\n                        message.exchange = 28;\n                        break;\n                    case \"SEHKSZSE\":\n                    case 29:\n                        message.exchange = 29;\n                        break;\n                    case \"SEHKNTL\":\n                    case 30:\n                        message.exchange = 30;\n                        break;\n                    case \"KSE\":\n                    case 31:\n                        message.exchange = 31;\n                        break;\n                    case \"OSE\":\n                    case 32:\n                        message.exchange = 32;\n                        break;\n                    case \"IB_IDEALPRO\":\n                    case 33:\n                        message.exchange = 33;\n                        break;\n                    case \"IB_SMART\":\n                    case 34:\n                        message.exchange = 34;\n                        break;\n                    }\n                    switch (object.productClass) {\n                    case \"UnknownProductClass\":\n                    case 0:\n                        message.productClass = 0;\n                        break;\n                    case \"EQUITY\":\n                    case 1:\n                        message.productClass = 1;\n                        break;\n                    case \"FUTURES\":\n                    case 2:\n                        message.productClass = 2;\n                        break;\n                    case \"OPTION\":\n                    case 3:\n                        message.productClass = 3;\n                        break;\n                    case \"INDEX\":\n                    case 4:\n                        message.productClass = 4;\n                        break;\n                    case \"COMBINATION\":\n                    case 5:\n                        message.productClass = 5;\n                        break;\n                    case \"BOND\":\n                    case 6:\n                        message.productClass = 6;\n                        break;\n                    case \"FOREX\":\n                    case 7:\n                        message.productClass = 7;\n                        break;\n                    case \"SPOT\":\n                    case 8:\n                        message.productClass = 8;\n                        break;\n                    case \"DEFER\":\n                    case 9:\n                        message.productClass = 9;\n                        break;\n                    case \"ETF\":\n                    case 10:\n                        message.productClass = 10;\n                        break;\n                    case \"WARRANTS\":\n                    case 11:\n                        message.productClass = 11;\n                        break;\n                    case \"SPREAD\":\n                    case 12:\n                        message.productClass = 12;\n                        break;\n                    case \"FUND\":\n                    case 13:\n                        message.productClass = 13;\n                        break;\n                    case \"EFP\":\n                    case 14:\n                        message.productClass = 14;\n                        break;\n                    case \"SPOTOPTION\":\n                    case 15:\n                        message.productClass = 15;\n                        break;\n                    case \"TAS\":\n                    case 16:\n                        message.productClass = 16;\n                        break;\n                    case \"MI\":\n                    case 17:\n                        message.productClass = 17;\n                        break;\n                    }\n                    switch (object.currency) {\n                    case \"UnknownCurrency\":\n                    case 0:\n                        message.currency = 0;\n                        break;\n                    case \"USD\":\n                    case 1:\n                        message.currency = 1;\n                        break;\n                    case \"CNY\":\n                    case 2:\n                        message.currency = 2;\n                        break;\n                    case \"CNH\":\n                    case 3:\n                        message.currency = 3;\n                        break;\n                    case \"HKD\":\n                    case 4:\n                        message.currency = 4;\n                        break;\n                    case \"JPY\":\n                    case 5:\n                        message.currency = 5;\n                        break;\n                    case \"EUR\":\n                    case 6:\n                        message.currency = 6;\n                        break;\n                    case \"GBP\":\n                    case 7:\n                        message.currency = 7;\n                        break;\n                    case \"DEM\":\n                    case 8:\n                        message.currency = 8;\n                        break;\n                    case \"CHF\":\n                    case 9:\n                        message.currency = 9;\n                        break;\n                    case \"FRF\":\n                    case 10:\n                        message.currency = 10;\n                        break;\n                    case \"CAD\":\n                    case 11:\n                        message.currency = 11;\n                        break;\n                    case \"AUD\":\n                    case 12:\n                        message.currency = 12;\n                        break;\n                    case \"ATS\":\n                    case 13:\n                        message.currency = 13;\n                        break;\n                    case \"FIM\":\n                    case 14:\n                        message.currency = 14;\n                        break;\n                    case \"BEF\":\n                    case 15:\n                        message.currency = 15;\n                        break;\n                    case \"THB\":\n                    case 16:\n                        message.currency = 16;\n                        break;\n                    case \"IEP\":\n                    case 17:\n                        message.currency = 17;\n                        break;\n                    case \"ITL\":\n                    case 18:\n                        message.currency = 18;\n                        break;\n                    case \"LUF\":\n                    case 19:\n                        message.currency = 19;\n                        break;\n                    case \"NLG\":\n                    case 20:\n                        message.currency = 20;\n                        break;\n                    case \"PTE\":\n                    case 21:\n                        message.currency = 21;\n                        break;\n                    case \"ESP\":\n                    case 22:\n                        message.currency = 22;\n                        break;\n                    case \"IDR\":\n                    case 23:\n                        message.currency = 23;\n                        break;\n                    case \"MYR\":\n                    case 24:\n                        message.currency = 24;\n                        break;\n                    case \"NZD\":\n                    case 25:\n                        message.currency = 25;\n                        break;\n                    case \"PHP\":\n                    case 26:\n                        message.currency = 26;\n                        break;\n                    case \"SUR\":\n                    case 27:\n                        message.currency = 27;\n                        break;\n                    case \"SGD\":\n                    case 28:\n                        message.currency = 28;\n                        break;\n                    case \"KRW\":\n                    case 29:\n                        message.currency = 29;\n                        break;\n                    }\n                    if (object.multiplier != null)\n                        message.multiplier = Number(object.multiplier);\n                    if (object.priceTick != null)\n                        message.priceTick = Number(object.priceTick);\n                    if (object.longMarginRatio != null)\n                        message.longMarginRatio = Number(object.longMarginRatio);\n                    if (object.shortMarginRatio != null)\n                        message.shortMarginRatio = Number(object.shortMarginRatio);\n                    if (object.maxMarginSideAlgorithm != null)\n                        message.maxMarginSideAlgorithm = Boolean(object.maxMarginSideAlgorithm);\n                    if (object.underlyingSymbol != null)\n                        message.underlyingSymbol = String(object.underlyingSymbol);\n                    if (object.strikePrice != null)\n                        message.strikePrice = Number(object.strikePrice);\n                    switch (object.optionsType) {\n                    case \"O_Unknown\":\n                    case 0:\n                        message.optionsType = 0;\n                        break;\n                    case \"O_CallOptions\":\n                    case 1:\n                        message.optionsType = 1;\n                        break;\n                    case \"O_PutOptions\":\n                    case 2:\n                        message.optionsType = 2;\n                        break;\n                    }\n                    if (object.underlyingMultiplier != null)\n                        message.underlyingMultiplier = Number(object.underlyingMultiplier);\n                    if (object.lastTradeDateOrContractMonth != null)\n                        message.lastTradeDateOrContractMonth = String(object.lastTradeDateOrContractMonth);\n                    if (object.maxMarketOrderVolume != null)\n                        message.maxMarketOrderVolume = object.maxMarketOrderVolume >>> 0;\n                    if (object.minMarketOrderVolume != null)\n                        message.minMarketOrderVolume = object.minMarketOrderVolume >>> 0;\n                    if (object.maxLimitOrderVolume != null)\n                        message.maxLimitOrderVolume = object.maxLimitOrderVolume >>> 0;\n                    if (object.minLimitOrderVolume != null)\n                        message.minLimitOrderVolume = object.minLimitOrderVolume >>> 0;\n                    switch (object.combinationType) {\n                    case \"COMBT_Unknown\":\n                    case 0:\n                        message.combinationType = 0;\n                        break;\n                    case \"COMBT_Future\":\n                    case 1:\n                        message.combinationType = 1;\n                        break;\n                    case \"COMBT_BUL\":\n                    case 2:\n                        message.combinationType = 2;\n                        break;\n                    case \"COMBT_BER\":\n                    case 3:\n                        message.combinationType = 3;\n                        break;\n                    case \"COMBT_STD\":\n                    case 4:\n                        message.combinationType = 4;\n                        break;\n                    case \"COMBT_STG\":\n                    case 5:\n                        message.combinationType = 5;\n                        break;\n                    case \"COMBT_PRT\":\n                    case 6:\n                        message.combinationType = 6;\n                        break;\n                    case \"COMBT_CLD\":\n                    case 7:\n                        message.combinationType = 7;\n                        break;\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ContractField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.ContractField} message ContractField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ContractField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.contractId = \"\";\n                        object.name = \"\";\n                        object.fullName = \"\";\n                        object.thirdPartyId = \"\";\n                        object.unifiedSymbol = \"\";\n                        object.symbol = \"\";\n                        object.exchange = options.enums === String ? \"UnknownExchange\" : 0;\n                        object.productClass = options.enums === String ? \"UnknownProductClass\" : 0;\n                        object.currency = options.enums === String ? \"UnknownCurrency\" : 0;\n                        object.multiplier = 0;\n                        object.priceTick = 0;\n                        object.longMarginRatio = 0;\n                        object.shortMarginRatio = 0;\n                        object.maxMarginSideAlgorithm = false;\n                        object.underlyingSymbol = \"\";\n                        object.strikePrice = 0;\n                        object.optionsType = options.enums === String ? \"O_Unknown\" : 0;\n                        object.underlyingMultiplier = 0;\n                        object.lastTradeDateOrContractMonth = \"\";\n                        object.maxMarketOrderVolume = 0;\n                        object.minMarketOrderVolume = 0;\n                        object.maxLimitOrderVolume = 0;\n                        object.minLimitOrderVolume = 0;\n                        object.combinationType = options.enums === String ? \"COMBT_Unknown\" : 0;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        object.contractId = message.contractId;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.fullName != null && message.hasOwnProperty(\"fullName\"))\n                        object.fullName = message.fullName;\n                    if (message.thirdPartyId != null && message.hasOwnProperty(\"thirdPartyId\"))\n                        object.thirdPartyId = message.thirdPartyId;\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                        object.symbol = message.symbol;\n                    if (message.exchange != null && message.hasOwnProperty(\"exchange\"))\n                        object.exchange = options.enums === String ? $root.xyz.redtorch.pb.ExchangeEnum[message.exchange] : message.exchange;\n                    if (message.productClass != null && message.hasOwnProperty(\"productClass\"))\n                        object.productClass = options.enums === String ? $root.xyz.redtorch.pb.ProductClassEnum[message.productClass] : message.productClass;\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;\n                    if (message.multiplier != null && message.hasOwnProperty(\"multiplier\"))\n                        object.multiplier = options.json && !isFinite(message.multiplier) ? String(message.multiplier) : message.multiplier;\n                    if (message.priceTick != null && message.hasOwnProperty(\"priceTick\"))\n                        object.priceTick = options.json && !isFinite(message.priceTick) ? String(message.priceTick) : message.priceTick;\n                    if (message.longMarginRatio != null && message.hasOwnProperty(\"longMarginRatio\"))\n                        object.longMarginRatio = options.json && !isFinite(message.longMarginRatio) ? String(message.longMarginRatio) : message.longMarginRatio;\n                    if (message.shortMarginRatio != null && message.hasOwnProperty(\"shortMarginRatio\"))\n                        object.shortMarginRatio = options.json && !isFinite(message.shortMarginRatio) ? String(message.shortMarginRatio) : message.shortMarginRatio;\n                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty(\"maxMarginSideAlgorithm\"))\n                        object.maxMarginSideAlgorithm = message.maxMarginSideAlgorithm;\n                    if (message.underlyingSymbol != null && message.hasOwnProperty(\"underlyingSymbol\"))\n                        object.underlyingSymbol = message.underlyingSymbol;\n                    if (message.strikePrice != null && message.hasOwnProperty(\"strikePrice\"))\n                        object.strikePrice = options.json && !isFinite(message.strikePrice) ? String(message.strikePrice) : message.strikePrice;\n                    if (message.optionsType != null && message.hasOwnProperty(\"optionsType\"))\n                        object.optionsType = options.enums === String ? $root.xyz.redtorch.pb.OptionsTypeEnum[message.optionsType] : message.optionsType;\n                    if (message.underlyingMultiplier != null && message.hasOwnProperty(\"underlyingMultiplier\"))\n                        object.underlyingMultiplier = options.json && !isFinite(message.underlyingMultiplier) ? String(message.underlyingMultiplier) : message.underlyingMultiplier;\n                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty(\"lastTradeDateOrContractMonth\"))\n                        object.lastTradeDateOrContractMonth = message.lastTradeDateOrContractMonth;\n                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty(\"maxMarketOrderVolume\"))\n                        object.maxMarketOrderVolume = message.maxMarketOrderVolume;\n                    if (message.minMarketOrderVolume != null && message.hasOwnProperty(\"minMarketOrderVolume\"))\n                        object.minMarketOrderVolume = message.minMarketOrderVolume;\n                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty(\"maxLimitOrderVolume\"))\n                        object.maxLimitOrderVolume = message.maxLimitOrderVolume;\n                    if (message.minLimitOrderVolume != null && message.hasOwnProperty(\"minLimitOrderVolume\"))\n                        object.minLimitOrderVolume = message.minLimitOrderVolume;\n                    if (message.combinationType != null && message.hasOwnProperty(\"combinationType\"))\n                        object.combinationType = options.enums === String ? $root.xyz.redtorch.pb.CombinationTypeEnum[message.combinationType] : message.combinationType;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this ContractField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ContractField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ContractField;\n            })();\n\n            pb.AccountField = (function() {\n\n                /**\n                 * Properties of an AccountField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IAccountField\n                 * @property {string|null} [accountId] AccountField accountId\n                 * @property {string|null} [code] AccountField code\n                 * @property {string|null} [name] AccountField name\n                 * @property {string|null} [holder] AccountField holder\n                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] AccountField currency\n                 * @property {number|null} [preBalance] AccountField preBalance\n                 * @property {number|null} [balance] AccountField balance\n                 * @property {number|null} [available] AccountField available\n                 * @property {number|null} [commission] AccountField commission\n                 * @property {number|null} [margin] AccountField margin\n                 * @property {number|null} [closeProfit] AccountField closeProfit\n                 * @property {number|null} [positionProfit] AccountField positionProfit\n                 * @property {number|null} [deposit] AccountField deposit\n                 * @property {number|null} [withdraw] AccountField withdraw\n                 * @property {string|null} [gatewayId] AccountField gatewayId\n                 * @property {number|Long|null} [localCreatedTimestamp] AccountField localCreatedTimestamp\n                 */\n\n                /**\n                 * Constructs a new AccountField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents an AccountField.\n                 * @implements IAccountField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IAccountField=} [properties] Properties to set\n                 */\n                function AccountField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * AccountField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.accountId = \"\";\n\n                /**\n                 * AccountField code.\n                 * @member {string} code\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.code = \"\";\n\n                /**\n                 * AccountField name.\n                 * @member {string} name\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.name = \"\";\n\n                /**\n                 * AccountField holder.\n                 * @member {string} holder\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.holder = \"\";\n\n                /**\n                 * AccountField currency.\n                 * @member {xyz.redtorch.pb.CurrencyEnum} currency\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.currency = 0;\n\n                /**\n                 * AccountField preBalance.\n                 * @member {number} preBalance\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.preBalance = 0;\n\n                /**\n                 * AccountField balance.\n                 * @member {number} balance\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.balance = 0;\n\n                /**\n                 * AccountField available.\n                 * @member {number} available\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.available = 0;\n\n                /**\n                 * AccountField commission.\n                 * @member {number} commission\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.commission = 0;\n\n                /**\n                 * AccountField margin.\n                 * @member {number} margin\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.margin = 0;\n\n                /**\n                 * AccountField closeProfit.\n                 * @member {number} closeProfit\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.closeProfit = 0;\n\n                /**\n                 * AccountField positionProfit.\n                 * @member {number} positionProfit\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.positionProfit = 0;\n\n                /**\n                 * AccountField deposit.\n                 * @member {number} deposit\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.deposit = 0;\n\n                /**\n                 * AccountField withdraw.\n                 * @member {number} withdraw\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.withdraw = 0;\n\n                /**\n                 * AccountField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.gatewayId = \"\";\n\n                /**\n                 * AccountField localCreatedTimestamp.\n                 * @member {number|Long} localCreatedTimestamp\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.localCreatedTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new AccountField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.IAccountField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField instance\n                 */\n                AccountField.create = function create(properties) {\n                    return new AccountField(properties);\n                };\n\n                /**\n                 * Encodes the specified AccountField message. Does not implicitly {@link xyz.redtorch.pb.AccountField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.IAccountField} message AccountField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                AccountField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.accountId);\n                    if (message.code != null && message.hasOwnProperty(\"code\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n                    if (message.holder != null && message.hasOwnProperty(\"holder\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.holder);\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.currency);\n                    if (message.preBalance != null && message.hasOwnProperty(\"preBalance\"))\n                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.preBalance);\n                    if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.balance);\n                    if (message.available != null && message.hasOwnProperty(\"available\"))\n                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.available);\n                    if (message.commission != null && message.hasOwnProperty(\"commission\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.commission);\n                    if (message.margin != null && message.hasOwnProperty(\"margin\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.margin);\n                    if (message.closeProfit != null && message.hasOwnProperty(\"closeProfit\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.closeProfit);\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.positionProfit);\n                    if (message.deposit != null && message.hasOwnProperty(\"deposit\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.deposit);\n                    if (message.withdraw != null && message.hasOwnProperty(\"withdraw\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.withdraw);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.gatewayId);\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.localCreatedTimestamp);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified AccountField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.AccountField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.IAccountField} message AccountField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                AccountField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an AccountField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                AccountField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.AccountField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.accountId = reader.string();\n                            break;\n                        case 2:\n                            message.code = reader.string();\n                            break;\n                        case 3:\n                            message.name = reader.string();\n                            break;\n                        case 4:\n                            message.holder = reader.string();\n                            break;\n                        case 5:\n                            message.currency = reader.int32();\n                            break;\n                        case 6:\n                            message.preBalance = reader.double();\n                            break;\n                        case 7:\n                            message.balance = reader.double();\n                            break;\n                        case 8:\n                            message.available = reader.double();\n                            break;\n                        case 9:\n                            message.commission = reader.double();\n                            break;\n                        case 10:\n                            message.margin = reader.double();\n                            break;\n                        case 11:\n                            message.closeProfit = reader.double();\n                            break;\n                        case 12:\n                            message.positionProfit = reader.double();\n                            break;\n                        case 13:\n                            message.deposit = reader.double();\n                            break;\n                        case 14:\n                            message.withdraw = reader.double();\n                            break;\n                        case 15:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 16:\n                            message.localCreatedTimestamp = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an AccountField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                AccountField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an AccountField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                AccountField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.code != null && message.hasOwnProperty(\"code\"))\n                        if (!$util.isString(message.code))\n                            return \"code: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.holder != null && message.hasOwnProperty(\"holder\"))\n                        if (!$util.isString(message.holder))\n                            return \"holder: string expected\";\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        switch (message.currency) {\n                        default:\n                            return \"currency: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                            break;\n                        }\n                    if (message.preBalance != null && message.hasOwnProperty(\"preBalance\"))\n                        if (typeof message.preBalance !== \"number\")\n                            return \"preBalance: number expected\";\n                    if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                        if (typeof message.balance !== \"number\")\n                            return \"balance: number expected\";\n                    if (message.available != null && message.hasOwnProperty(\"available\"))\n                        if (typeof message.available !== \"number\")\n                            return \"available: number expected\";\n                    if (message.commission != null && message.hasOwnProperty(\"commission\"))\n                        if (typeof message.commission !== \"number\")\n                            return \"commission: number expected\";\n                    if (message.margin != null && message.hasOwnProperty(\"margin\"))\n                        if (typeof message.margin !== \"number\")\n                            return \"margin: number expected\";\n                    if (message.closeProfit != null && message.hasOwnProperty(\"closeProfit\"))\n                        if (typeof message.closeProfit !== \"number\")\n                            return \"closeProfit: number expected\";\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        if (typeof message.positionProfit !== \"number\")\n                            return \"positionProfit: number expected\";\n                    if (message.deposit != null && message.hasOwnProperty(\"deposit\"))\n                        if (typeof message.deposit !== \"number\")\n                            return \"deposit: number expected\";\n                    if (message.withdraw != null && message.hasOwnProperty(\"withdraw\"))\n                        if (typeof message.withdraw !== \"number\")\n                            return \"withdraw: number expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (!$util.isInteger(message.localCreatedTimestamp) && !(message.localCreatedTimestamp && $util.isInteger(message.localCreatedTimestamp.low) && $util.isInteger(message.localCreatedTimestamp.high)))\n                            return \"localCreatedTimestamp: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an AccountField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField\n                 */\n                AccountField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.AccountField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.AccountField();\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    if (object.code != null)\n                        message.code = String(object.code);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.holder != null)\n                        message.holder = String(object.holder);\n                    switch (object.currency) {\n                    case \"UnknownCurrency\":\n                    case 0:\n                        message.currency = 0;\n                        break;\n                    case \"USD\":\n                    case 1:\n                        message.currency = 1;\n                        break;\n                    case \"CNY\":\n                    case 2:\n                        message.currency = 2;\n                        break;\n                    case \"CNH\":\n                    case 3:\n                        message.currency = 3;\n                        break;\n                    case \"HKD\":\n                    case 4:\n                        message.currency = 4;\n                        break;\n                    case \"JPY\":\n                    case 5:\n                        message.currency = 5;\n                        break;\n                    case \"EUR\":\n                    case 6:\n                        message.currency = 6;\n                        break;\n                    case \"GBP\":\n                    case 7:\n                        message.currency = 7;\n                        break;\n                    case \"DEM\":\n                    case 8:\n                        message.currency = 8;\n                        break;\n                    case \"CHF\":\n                    case 9:\n                        message.currency = 9;\n                        break;\n                    case \"FRF\":\n                    case 10:\n                        message.currency = 10;\n                        break;\n                    case \"CAD\":\n                    case 11:\n                        message.currency = 11;\n                        break;\n                    case \"AUD\":\n                    case 12:\n                        message.currency = 12;\n                        break;\n                    case \"ATS\":\n                    case 13:\n                        message.currency = 13;\n                        break;\n                    case \"FIM\":\n                    case 14:\n                        message.currency = 14;\n                        break;\n                    case \"BEF\":\n                    case 15:\n                        message.currency = 15;\n                        break;\n                    case \"THB\":\n                    case 16:\n                        message.currency = 16;\n                        break;\n                    case \"IEP\":\n                    case 17:\n                        message.currency = 17;\n                        break;\n                    case \"ITL\":\n                    case 18:\n                        message.currency = 18;\n                        break;\n                    case \"LUF\":\n                    case 19:\n                        message.currency = 19;\n                        break;\n                    case \"NLG\":\n                    case 20:\n                        message.currency = 20;\n                        break;\n                    case \"PTE\":\n                    case 21:\n                        message.currency = 21;\n                        break;\n                    case \"ESP\":\n                    case 22:\n                        message.currency = 22;\n                        break;\n                    case \"IDR\":\n                    case 23:\n                        message.currency = 23;\n                        break;\n                    case \"MYR\":\n                    case 24:\n                        message.currency = 24;\n                        break;\n                    case \"NZD\":\n                    case 25:\n                        message.currency = 25;\n                        break;\n                    case \"PHP\":\n                    case 26:\n                        message.currency = 26;\n                        break;\n                    case \"SUR\":\n                    case 27:\n                        message.currency = 27;\n                        break;\n                    case \"SGD\":\n                    case 28:\n                        message.currency = 28;\n                        break;\n                    case \"KRW\":\n                    case 29:\n                        message.currency = 29;\n                        break;\n                    }\n                    if (object.preBalance != null)\n                        message.preBalance = Number(object.preBalance);\n                    if (object.balance != null)\n                        message.balance = Number(object.balance);\n                    if (object.available != null)\n                        message.available = Number(object.available);\n                    if (object.commission != null)\n                        message.commission = Number(object.commission);\n                    if (object.margin != null)\n                        message.margin = Number(object.margin);\n                    if (object.closeProfit != null)\n                        message.closeProfit = Number(object.closeProfit);\n                    if (object.positionProfit != null)\n                        message.positionProfit = Number(object.positionProfit);\n                    if (object.deposit != null)\n                        message.deposit = Number(object.deposit);\n                    if (object.withdraw != null)\n                        message.withdraw = Number(object.withdraw);\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.localCreatedTimestamp != null)\n                        if ($util.Long)\n                            (message.localCreatedTimestamp = $util.Long.fromValue(object.localCreatedTimestamp)).unsigned = false;\n                        else if (typeof object.localCreatedTimestamp === \"string\")\n                            message.localCreatedTimestamp = parseInt(object.localCreatedTimestamp, 10);\n                        else if (typeof object.localCreatedTimestamp === \"number\")\n                            message.localCreatedTimestamp = object.localCreatedTimestamp;\n                        else if (typeof object.localCreatedTimestamp === \"object\")\n                            message.localCreatedTimestamp = new $util.LongBits(object.localCreatedTimestamp.low >>> 0, object.localCreatedTimestamp.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an AccountField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.AccountField} message AccountField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                AccountField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.accountId = \"\";\n                        object.code = \"\";\n                        object.name = \"\";\n                        object.holder = \"\";\n                        object.currency = options.enums === String ? \"UnknownCurrency\" : 0;\n                        object.preBalance = 0;\n                        object.balance = 0;\n                        object.available = 0;\n                        object.commission = 0;\n                        object.margin = 0;\n                        object.closeProfit = 0;\n                        object.positionProfit = 0;\n                        object.deposit = 0;\n                        object.withdraw = 0;\n                        object.gatewayId = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.localCreatedTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.localCreatedTimestamp = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.code != null && message.hasOwnProperty(\"code\"))\n                        object.code = message.code;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.holder != null && message.hasOwnProperty(\"holder\"))\n                        object.holder = message.holder;\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;\n                    if (message.preBalance != null && message.hasOwnProperty(\"preBalance\"))\n                        object.preBalance = options.json && !isFinite(message.preBalance) ? String(message.preBalance) : message.preBalance;\n                    if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                        object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;\n                    if (message.available != null && message.hasOwnProperty(\"available\"))\n                        object.available = options.json && !isFinite(message.available) ? String(message.available) : message.available;\n                    if (message.commission != null && message.hasOwnProperty(\"commission\"))\n                        object.commission = options.json && !isFinite(message.commission) ? String(message.commission) : message.commission;\n                    if (message.margin != null && message.hasOwnProperty(\"margin\"))\n                        object.margin = options.json && !isFinite(message.margin) ? String(message.margin) : message.margin;\n                    if (message.closeProfit != null && message.hasOwnProperty(\"closeProfit\"))\n                        object.closeProfit = options.json && !isFinite(message.closeProfit) ? String(message.closeProfit) : message.closeProfit;\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        object.positionProfit = options.json && !isFinite(message.positionProfit) ? String(message.positionProfit) : message.positionProfit;\n                    if (message.deposit != null && message.hasOwnProperty(\"deposit\"))\n                        object.deposit = options.json && !isFinite(message.deposit) ? String(message.deposit) : message.deposit;\n                    if (message.withdraw != null && message.hasOwnProperty(\"withdraw\"))\n                        object.withdraw = options.json && !isFinite(message.withdraw) ? String(message.withdraw) : message.withdraw;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (typeof message.localCreatedTimestamp === \"number\")\n                            object.localCreatedTimestamp = options.longs === String ? String(message.localCreatedTimestamp) : message.localCreatedTimestamp;\n                        else\n                            object.localCreatedTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.localCreatedTimestamp) : options.longs === Number ? new $util.LongBits(message.localCreatedTimestamp.low >>> 0, message.localCreatedTimestamp.high >>> 0).toNumber() : message.localCreatedTimestamp;\n                    return object;\n                };\n\n                /**\n                 * Converts this AccountField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                AccountField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return AccountField;\n            })();\n\n            pb.OrderField = (function() {\n\n                /**\n                 * Properties of an OrderField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IOrderField\n                 * @property {string|null} [originOrderId] OrderField originOrderId\n                 * @property {string|null} [orderId] OrderField orderId\n                 * @property {string|null} [adapterOrderId] OrderField adapterOrderId\n                 * @property {string|null} [accountId] OrderField accountId\n                 * @property {string|null} [orderLocalId] OrderField orderLocalId\n                 * @property {string|null} [brokerOrderSeq] OrderField brokerOrderSeq\n                 * @property {string|null} [orderSysId] OrderField orderSysId\n                 * @property {string|null} [sequenceNo] OrderField sequenceNo\n                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] OrderField direction\n                 * @property {xyz.redtorch.pb.OffsetFlagEnum|null} [offsetFlag] OrderField offsetFlag\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] OrderField hedgeFlag\n                 * @property {xyz.redtorch.pb.OrderPriceTypeEnum|null} [orderPriceType] OrderField orderPriceType\n                 * @property {xyz.redtorch.pb.OrderStatusEnum|null} [orderStatus] OrderField orderStatus\n                 * @property {number|null} [price] OrderField price\n                 * @property {number|null} [totalVolume] OrderField totalVolume\n                 * @property {number|null} [tradedVolume] OrderField tradedVolume\n                 * @property {xyz.redtorch.pb.TimeConditionEnum|null} [timeCondition] OrderField timeCondition\n                 * @property {string|null} [gtdDate] OrderField gtdDate\n                 * @property {xyz.redtorch.pb.VolumeConditionEnum|null} [volumeCondition] OrderField volumeCondition\n                 * @property {number|null} [minVolume] OrderField minVolume\n                 * @property {xyz.redtorch.pb.ContingentConditionEnum|null} [contingentCondition] OrderField contingentCondition\n                 * @property {number|null} [stopPrice] OrderField stopPrice\n                 * @property {xyz.redtorch.pb.ForceCloseReasonEnum|null} [forceCloseReason] OrderField forceCloseReason\n                 * @property {number|null} [autoSuspend] OrderField autoSuspend\n                 * @property {number|null} [userForceClose] OrderField userForceClose\n                 * @property {number|null} [swapOrder] OrderField swapOrder\n                 * @property {string|null} [tradingDay] OrderField tradingDay\n                 * @property {string|null} [orderDate] OrderField orderDate\n                 * @property {string|null} [orderTime] OrderField orderTime\n                 * @property {string|null} [activeTime] OrderField activeTime\n                 * @property {string|null} [suspendTime] OrderField suspendTime\n                 * @property {string|null} [cancelTime] OrderField cancelTime\n                 * @property {string|null} [updateTime] OrderField updateTime\n                 * @property {string|null} [statusMsg] OrderField statusMsg\n                 * @property {number|null} [frontId] OrderField frontId\n                 * @property {number|null} [sessionId] OrderField sessionId\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] OrderField contract\n                 * @property {string|null} [gatewayId] OrderField gatewayId\n                 * @property {xyz.redtorch.pb.OrderSubmitStatusEnum|null} [orderSubmitStatus] OrderField orderSubmitStatus\n                 */\n\n                /**\n                 * Constructs a new OrderField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents an OrderField.\n                 * @implements IOrderField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IOrderField=} [properties] Properties to set\n                 */\n                function OrderField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * OrderField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.originOrderId = \"\";\n\n                /**\n                 * OrderField orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderId = \"\";\n\n                /**\n                 * OrderField adapterOrderId.\n                 * @member {string} adapterOrderId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.adapterOrderId = \"\";\n\n                /**\n                 * OrderField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.accountId = \"\";\n\n                /**\n                 * OrderField orderLocalId.\n                 * @member {string} orderLocalId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderLocalId = \"\";\n\n                /**\n                 * OrderField brokerOrderSeq.\n                 * @member {string} brokerOrderSeq\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.brokerOrderSeq = \"\";\n\n                /**\n                 * OrderField orderSysId.\n                 * @member {string} orderSysId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderSysId = \"\";\n\n                /**\n                 * OrderField sequenceNo.\n                 * @member {string} sequenceNo\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.sequenceNo = \"\";\n\n                /**\n                 * OrderField direction.\n                 * @member {xyz.redtorch.pb.DirectionEnum} direction\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.direction = 0;\n\n                /**\n                 * OrderField offsetFlag.\n                 * @member {xyz.redtorch.pb.OffsetFlagEnum} offsetFlag\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.offsetFlag = 0;\n\n                /**\n                 * OrderField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.hedgeFlag = 0;\n\n                /**\n                 * OrderField orderPriceType.\n                 * @member {xyz.redtorch.pb.OrderPriceTypeEnum} orderPriceType\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderPriceType = 0;\n\n                /**\n                 * OrderField orderStatus.\n                 * @member {xyz.redtorch.pb.OrderStatusEnum} orderStatus\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderStatus = 0;\n\n                /**\n                 * OrderField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.price = 0;\n\n                /**\n                 * OrderField totalVolume.\n                 * @member {number} totalVolume\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.totalVolume = 0;\n\n                /**\n                 * OrderField tradedVolume.\n                 * @member {number} tradedVolume\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.tradedVolume = 0;\n\n                /**\n                 * OrderField timeCondition.\n                 * @member {xyz.redtorch.pb.TimeConditionEnum} timeCondition\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.timeCondition = 0;\n\n                /**\n                 * OrderField gtdDate.\n                 * @member {string} gtdDate\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.gtdDate = \"\";\n\n                /**\n                 * OrderField volumeCondition.\n                 * @member {xyz.redtorch.pb.VolumeConditionEnum} volumeCondition\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.volumeCondition = 0;\n\n                /**\n                 * OrderField minVolume.\n                 * @member {number} minVolume\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.minVolume = 0;\n\n                /**\n                 * OrderField contingentCondition.\n                 * @member {xyz.redtorch.pb.ContingentConditionEnum} contingentCondition\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.contingentCondition = 0;\n\n                /**\n                 * OrderField stopPrice.\n                 * @member {number} stopPrice\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.stopPrice = 0;\n\n                /**\n                 * OrderField forceCloseReason.\n                 * @member {xyz.redtorch.pb.ForceCloseReasonEnum} forceCloseReason\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.forceCloseReason = 0;\n\n                /**\n                 * OrderField autoSuspend.\n                 * @member {number} autoSuspend\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.autoSuspend = 0;\n\n                /**\n                 * OrderField userForceClose.\n                 * @member {number} userForceClose\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.userForceClose = 0;\n\n                /**\n                 * OrderField swapOrder.\n                 * @member {number} swapOrder\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.swapOrder = 0;\n\n                /**\n                 * OrderField tradingDay.\n                 * @member {string} tradingDay\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.tradingDay = \"\";\n\n                /**\n                 * OrderField orderDate.\n                 * @member {string} orderDate\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderDate = \"\";\n\n                /**\n                 * OrderField orderTime.\n                 * @member {string} orderTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderTime = \"\";\n\n                /**\n                 * OrderField activeTime.\n                 * @member {string} activeTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.activeTime = \"\";\n\n                /**\n                 * OrderField suspendTime.\n                 * @member {string} suspendTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.suspendTime = \"\";\n\n                /**\n                 * OrderField cancelTime.\n                 * @member {string} cancelTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.cancelTime = \"\";\n\n                /**\n                 * OrderField updateTime.\n                 * @member {string} updateTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.updateTime = \"\";\n\n                /**\n                 * OrderField statusMsg.\n                 * @member {string} statusMsg\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.statusMsg = \"\";\n\n                /**\n                 * OrderField frontId.\n                 * @member {number} frontId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.frontId = 0;\n\n                /**\n                 * OrderField sessionId.\n                 * @member {number} sessionId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.sessionId = 0;\n\n                /**\n                 * OrderField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.contract = null;\n\n                /**\n                 * OrderField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.gatewayId = \"\";\n\n                /**\n                 * OrderField orderSubmitStatus.\n                 * @member {xyz.redtorch.pb.OrderSubmitStatusEnum} orderSubmitStatus\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderSubmitStatus = 0;\n\n                /**\n                 * Creates a new OrderField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.IOrderField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField instance\n                 */\n                OrderField.create = function create(properties) {\n                    return new OrderField(properties);\n                };\n\n                /**\n                 * Encodes the specified OrderField message. Does not implicitly {@link xyz.redtorch.pb.OrderField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.IOrderField} message OrderField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                OrderField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.adapterOrderId);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.accountId);\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.orderLocalId);\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.brokerOrderSeq);\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.orderSysId);\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.sequenceNo);\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.direction);\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.offsetFlag);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.hedgeFlag);\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.orderPriceType);\n                    if (message.orderStatus != null && message.hasOwnProperty(\"orderStatus\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.orderStatus);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.price);\n                    if (message.totalVolume != null && message.hasOwnProperty(\"totalVolume\"))\n                        writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.totalVolume);\n                    if (message.tradedVolume != null && message.hasOwnProperty(\"tradedVolume\"))\n                        writer.uint32(/* id 16, wireType 5 =*/133).fixed32(message.tradedVolume);\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.timeCondition);\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        writer.uint32(/* id 18, wireType 2 =*/146).string(message.gtdDate);\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.volumeCondition);\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        writer.uint32(/* id 20, wireType 5 =*/165).fixed32(message.minVolume);\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        writer.uint32(/* id 21, wireType 0 =*/168).int32(message.contingentCondition);\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        writer.uint32(/* id 22, wireType 1 =*/177).double(message.stopPrice);\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        writer.uint32(/* id 23, wireType 0 =*/184).int32(message.forceCloseReason);\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        writer.uint32(/* id 24, wireType 5 =*/197).fixed32(message.autoSuspend);\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        writer.uint32(/* id 25, wireType 5 =*/205).fixed32(message.userForceClose);\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        writer.uint32(/* id 26, wireType 5 =*/213).fixed32(message.swapOrder);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 27, wireType 2 =*/218).string(message.tradingDay);\n                    if (message.orderDate != null && message.hasOwnProperty(\"orderDate\"))\n                        writer.uint32(/* id 28, wireType 2 =*/226).string(message.orderDate);\n                    if (message.orderTime != null && message.hasOwnProperty(\"orderTime\"))\n                        writer.uint32(/* id 29, wireType 2 =*/234).string(message.orderTime);\n                    if (message.activeTime != null && message.hasOwnProperty(\"activeTime\"))\n                        writer.uint32(/* id 30, wireType 2 =*/242).string(message.activeTime);\n                    if (message.suspendTime != null && message.hasOwnProperty(\"suspendTime\"))\n                        writer.uint32(/* id 31, wireType 2 =*/250).string(message.suspendTime);\n                    if (message.cancelTime != null && message.hasOwnProperty(\"cancelTime\"))\n                        writer.uint32(/* id 32, wireType 2 =*/258).string(message.cancelTime);\n                    if (message.updateTime != null && message.hasOwnProperty(\"updateTime\"))\n                        writer.uint32(/* id 33, wireType 2 =*/266).string(message.updateTime);\n                    if (message.statusMsg != null && message.hasOwnProperty(\"statusMsg\"))\n                        writer.uint32(/* id 34, wireType 2 =*/274).string(message.statusMsg);\n                    if (message.frontId != null && message.hasOwnProperty(\"frontId\"))\n                        writer.uint32(/* id 35, wireType 5 =*/285).fixed32(message.frontId);\n                    if (message.sessionId != null && message.hasOwnProperty(\"sessionId\"))\n                        writer.uint32(/* id 36, wireType 5 =*/293).fixed32(message.sessionId);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 38, wireType 2 =*/306).string(message.gatewayId);\n                    if (message.orderSubmitStatus != null && message.hasOwnProperty(\"orderSubmitStatus\"))\n                        writer.uint32(/* id 39, wireType 0 =*/312).int32(message.orderSubmitStatus);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified OrderField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.OrderField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.IOrderField} message OrderField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                OrderField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an OrderField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                OrderField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.OrderField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        case 3:\n                            message.adapterOrderId = reader.string();\n                            break;\n                        case 4:\n                            message.accountId = reader.string();\n                            break;\n                        case 5:\n                            message.orderLocalId = reader.string();\n                            break;\n                        case 6:\n                            message.brokerOrderSeq = reader.string();\n                            break;\n                        case 7:\n                            message.orderSysId = reader.string();\n                            break;\n                        case 8:\n                            message.sequenceNo = reader.string();\n                            break;\n                        case 9:\n                            message.direction = reader.int32();\n                            break;\n                        case 10:\n                            message.offsetFlag = reader.int32();\n                            break;\n                        case 11:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 12:\n                            message.orderPriceType = reader.int32();\n                            break;\n                        case 13:\n                            message.orderStatus = reader.int32();\n                            break;\n                        case 14:\n                            message.price = reader.double();\n                            break;\n                        case 15:\n                            message.totalVolume = reader.fixed32();\n                            break;\n                        case 16:\n                            message.tradedVolume = reader.fixed32();\n                            break;\n                        case 17:\n                            message.timeCondition = reader.int32();\n                            break;\n                        case 18:\n                            message.gtdDate = reader.string();\n                            break;\n                        case 19:\n                            message.volumeCondition = reader.int32();\n                            break;\n                        case 20:\n                            message.minVolume = reader.fixed32();\n                            break;\n                        case 21:\n                            message.contingentCondition = reader.int32();\n                            break;\n                        case 22:\n                            message.stopPrice = reader.double();\n                            break;\n                        case 23:\n                            message.forceCloseReason = reader.int32();\n                            break;\n                        case 24:\n                            message.autoSuspend = reader.fixed32();\n                            break;\n                        case 25:\n                            message.userForceClose = reader.fixed32();\n                            break;\n                        case 26:\n                            message.swapOrder = reader.fixed32();\n                            break;\n                        case 27:\n                            message.tradingDay = reader.string();\n                            break;\n                        case 28:\n                            message.orderDate = reader.string();\n                            break;\n                        case 29:\n                            message.orderTime = reader.string();\n                            break;\n                        case 30:\n                            message.activeTime = reader.string();\n                            break;\n                        case 31:\n                            message.suspendTime = reader.string();\n                            break;\n                        case 32:\n                            message.cancelTime = reader.string();\n                            break;\n                        case 33:\n                            message.updateTime = reader.string();\n                            break;\n                        case 34:\n                            message.statusMsg = reader.string();\n                            break;\n                        case 35:\n                            message.frontId = reader.fixed32();\n                            break;\n                        case 36:\n                            message.sessionId = reader.fixed32();\n                            break;\n                        case 37:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 38:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 39:\n                            message.orderSubmitStatus = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an OrderField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                OrderField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an OrderField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                OrderField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        if (!$util.isString(message.adapterOrderId))\n                            return \"adapterOrderId: string expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        if (!$util.isString(message.orderLocalId))\n                            return \"orderLocalId: string expected\";\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        if (!$util.isString(message.brokerOrderSeq))\n                            return \"brokerOrderSeq: string expected\";\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        if (!$util.isString(message.orderSysId))\n                            return \"orderSysId: string expected\";\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        if (!$util.isString(message.sequenceNo))\n                            return \"sequenceNo: string expected\";\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        switch (message.direction) {\n                        default:\n                            return \"direction: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        switch (message.offsetFlag) {\n                        default:\n                            return \"offsetFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        switch (message.orderPriceType) {\n                        default:\n                            return \"orderPriceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                            break;\n                        }\n                    if (message.orderStatus != null && message.hasOwnProperty(\"orderStatus\"))\n                        switch (message.orderStatus) {\n                        default:\n                            return \"orderStatus: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                            break;\n                        }\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.totalVolume != null && message.hasOwnProperty(\"totalVolume\"))\n                        if (!$util.isInteger(message.totalVolume))\n                            return \"totalVolume: integer expected\";\n                    if (message.tradedVolume != null && message.hasOwnProperty(\"tradedVolume\"))\n                        if (!$util.isInteger(message.tradedVolume))\n                            return \"tradedVolume: integer expected\";\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        switch (message.timeCondition) {\n                        default:\n                            return \"timeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        if (!$util.isString(message.gtdDate))\n                            return \"gtdDate: string expected\";\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        switch (message.volumeCondition) {\n                        default:\n                            return \"volumeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        if (!$util.isInteger(message.minVolume))\n                            return \"minVolume: integer expected\";\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        switch (message.contingentCondition) {\n                        default:\n                            return \"contingentCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                            break;\n                        }\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        if (typeof message.stopPrice !== \"number\")\n                            return \"stopPrice: number expected\";\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        switch (message.forceCloseReason) {\n                        default:\n                            return \"forceCloseReason: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                            break;\n                        }\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        if (!$util.isInteger(message.autoSuspend))\n                            return \"autoSuspend: integer expected\";\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        if (!$util.isInteger(message.userForceClose))\n                            return \"userForceClose: integer expected\";\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        if (!$util.isInteger(message.swapOrder))\n                            return \"swapOrder: integer expected\";\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isString(message.tradingDay))\n                            return \"tradingDay: string expected\";\n                    if (message.orderDate != null && message.hasOwnProperty(\"orderDate\"))\n                        if (!$util.isString(message.orderDate))\n                            return \"orderDate: string expected\";\n                    if (message.orderTime != null && message.hasOwnProperty(\"orderTime\"))\n                        if (!$util.isString(message.orderTime))\n                            return \"orderTime: string expected\";\n                    if (message.activeTime != null && message.hasOwnProperty(\"activeTime\"))\n                        if (!$util.isString(message.activeTime))\n                            return \"activeTime: string expected\";\n                    if (message.suspendTime != null && message.hasOwnProperty(\"suspendTime\"))\n                        if (!$util.isString(message.suspendTime))\n                            return \"suspendTime: string expected\";\n                    if (message.cancelTime != null && message.hasOwnProperty(\"cancelTime\"))\n                        if (!$util.isString(message.cancelTime))\n                            return \"cancelTime: string expected\";\n                    if (message.updateTime != null && message.hasOwnProperty(\"updateTime\"))\n                        if (!$util.isString(message.updateTime))\n                            return \"updateTime: string expected\";\n                    if (message.statusMsg != null && message.hasOwnProperty(\"statusMsg\"))\n                        if (!$util.isString(message.statusMsg))\n                            return \"statusMsg: string expected\";\n                    if (message.frontId != null && message.hasOwnProperty(\"frontId\"))\n                        if (!$util.isInteger(message.frontId))\n                            return \"frontId: integer expected\";\n                    if (message.sessionId != null && message.hasOwnProperty(\"sessionId\"))\n                        if (!$util.isInteger(message.sessionId))\n                            return \"sessionId: integer expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.orderSubmitStatus != null && message.hasOwnProperty(\"orderSubmitStatus\"))\n                        switch (message.orderSubmitStatus) {\n                        default:\n                            return \"orderSubmitStatus: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates an OrderField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField\n                 */\n                OrderField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.OrderField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.OrderField();\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    if (object.adapterOrderId != null)\n                        message.adapterOrderId = String(object.adapterOrderId);\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    if (object.orderLocalId != null)\n                        message.orderLocalId = String(object.orderLocalId);\n                    if (object.brokerOrderSeq != null)\n                        message.brokerOrderSeq = String(object.brokerOrderSeq);\n                    if (object.orderSysId != null)\n                        message.orderSysId = String(object.orderSysId);\n                    if (object.sequenceNo != null)\n                        message.sequenceNo = String(object.sequenceNo);\n                    switch (object.direction) {\n                    case \"D_Unknown\":\n                    case 0:\n                        message.direction = 0;\n                        break;\n                    case \"D_Buy\":\n                    case 1:\n                        message.direction = 1;\n                        break;\n                    case \"D_Sell\":\n                    case 2:\n                        message.direction = 2;\n                        break;\n                    }\n                    switch (object.offsetFlag) {\n                    case \"OF_Unknown\":\n                    case 0:\n                        message.offsetFlag = 0;\n                        break;\n                    case \"OF_Open\":\n                    case 1:\n                        message.offsetFlag = 1;\n                        break;\n                    case \"OF_Close\":\n                    case 2:\n                        message.offsetFlag = 2;\n                        break;\n                    case \"OF_ForceClose\":\n                    case 3:\n                        message.offsetFlag = 3;\n                        break;\n                    case \"OF_CloseToday\":\n                    case 4:\n                        message.offsetFlag = 4;\n                        break;\n                    case \"OF_CloseYesterday\":\n                    case 5:\n                        message.offsetFlag = 5;\n                        break;\n                    case \"OF_ForceOff\":\n                    case 6:\n                        message.offsetFlag = 6;\n                        break;\n                    case \"OF_LocalForceClose\":\n                    case 7:\n                        message.offsetFlag = 7;\n                        break;\n                    }\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    switch (object.orderPriceType) {\n                    case \"OPT_Unknown\":\n                    case 0:\n                        message.orderPriceType = 0;\n                        break;\n                    case \"OPT_AnyPrice\":\n                    case 1:\n                        message.orderPriceType = 1;\n                        break;\n                    case \"OPT_LimitPrice\":\n                    case 2:\n                        message.orderPriceType = 2;\n                        break;\n                    case \"OPT_BestPrice\":\n                    case 3:\n                        message.orderPriceType = 3;\n                        break;\n                    case \"OPT_LastPrice\":\n                    case 4:\n                        message.orderPriceType = 4;\n                        break;\n                    case \"OPT_LastPricePlusOneTicks\":\n                    case 5:\n                        message.orderPriceType = 5;\n                        break;\n                    case \"OPT_LastPricePlusTwoTicks\":\n                    case 6:\n                        message.orderPriceType = 6;\n                        break;\n                    case \"OPT_LastPricePlusThreeTicks\":\n                    case 7:\n                        message.orderPriceType = 7;\n                        break;\n                    case \"OPT_AskPrice1\":\n                    case 8:\n                        message.orderPriceType = 8;\n                        break;\n                    case \"OPT_AskPrice1PlusOneTicks\":\n                    case 9:\n                        message.orderPriceType = 9;\n                        break;\n                    case \"OPT_AskPrice1PlusTwoTicks\":\n                    case 10:\n                        message.orderPriceType = 10;\n                        break;\n                    case \"OPT_AskPrice1PlusThreeTicks\":\n                    case 11:\n                        message.orderPriceType = 11;\n                        break;\n                    case \"OPT_BidPrice1\":\n                    case 12:\n                        message.orderPriceType = 12;\n                        break;\n                    case \"OPT_BidPrice1PlusOneTicks\":\n                    case 13:\n                        message.orderPriceType = 13;\n                        break;\n                    case \"OPT_BidPrice1PlusTwoTicks\":\n                    case 14:\n                        message.orderPriceType = 14;\n                        break;\n                    case \"OPT_BidPrice1PlusThreeTicks\":\n                    case 15:\n                        message.orderPriceType = 15;\n                        break;\n                    case \"OPT_FiveLevelPrice\":\n                    case 16:\n                        message.orderPriceType = 16;\n                        break;\n                    }\n                    switch (object.orderStatus) {\n                    case \"OS_Unknown\":\n                    case 0:\n                        message.orderStatus = 0;\n                        break;\n                    case \"OS_AllTraded\":\n                    case 1:\n                        message.orderStatus = 1;\n                        break;\n                    case \"OS_PartTradedQueueing\":\n                    case 2:\n                        message.orderStatus = 2;\n                        break;\n                    case \"OS_PartTradedNotQueueing\":\n                    case 3:\n                        message.orderStatus = 3;\n                        break;\n                    case \"OS_NoTradeQueueing\":\n                    case 4:\n                        message.orderStatus = 4;\n                        break;\n                    case \"OS_NoTradeNotQueueing\":\n                    case 5:\n                        message.orderStatus = 5;\n                        break;\n                    case \"OS_Canceled\":\n                    case 6:\n                        message.orderStatus = 6;\n                        break;\n                    case \"OS_NotTouched\":\n                    case 7:\n                        message.orderStatus = 7;\n                        break;\n                    case \"OS_Touched\":\n                    case 8:\n                        message.orderStatus = 8;\n                        break;\n                    case \"OS_Rejected\":\n                    case 9:\n                        message.orderStatus = 9;\n                        break;\n                    }\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    if (object.totalVolume != null)\n                        message.totalVolume = object.totalVolume >>> 0;\n                    if (object.tradedVolume != null)\n                        message.tradedVolume = object.tradedVolume >>> 0;\n                    switch (object.timeCondition) {\n                    case \"TC_Unknown\":\n                    case 0:\n                        message.timeCondition = 0;\n                        break;\n                    case \"TC_IOC\":\n                    case 1:\n                        message.timeCondition = 1;\n                        break;\n                    case \"TC_GFS\":\n                    case 2:\n                        message.timeCondition = 2;\n                        break;\n                    case \"TC_GFD\":\n                    case 3:\n                        message.timeCondition = 3;\n                        break;\n                    case \"TC_GTD\":\n                    case 4:\n                        message.timeCondition = 4;\n                        break;\n                    case \"TC_GTC\":\n                    case 5:\n                        message.timeCondition = 5;\n                        break;\n                    case \"TC_GFA\":\n                    case 6:\n                        message.timeCondition = 6;\n                        break;\n                    }\n                    if (object.gtdDate != null)\n                        message.gtdDate = String(object.gtdDate);\n                    switch (object.volumeCondition) {\n                    case \"VC_Unknown\":\n                    case 0:\n                        message.volumeCondition = 0;\n                        break;\n                    case \"VC_AV\":\n                    case 1:\n                        message.volumeCondition = 1;\n                        break;\n                    case \"VC_MV\":\n                    case 2:\n                        message.volumeCondition = 2;\n                        break;\n                    case \"VC_CV\":\n                    case 3:\n                        message.volumeCondition = 3;\n                        break;\n                    }\n                    if (object.minVolume != null)\n                        message.minVolume = object.minVolume >>> 0;\n                    switch (object.contingentCondition) {\n                    case \"CC_Unknown\":\n                    case 0:\n                        message.contingentCondition = 0;\n                        break;\n                    case \"CC_Immediately\":\n                    case 1:\n                        message.contingentCondition = 1;\n                        break;\n                    case \"CC_Touch\":\n                    case 2:\n                        message.contingentCondition = 2;\n                        break;\n                    case \"CC_TouchProfit\":\n                    case 3:\n                        message.contingentCondition = 3;\n                        break;\n                    case \"CC_ParkedOrder\":\n                    case 4:\n                        message.contingentCondition = 4;\n                        break;\n                    case \"CC_LastPriceGreaterThanStopPrice\":\n                    case 5:\n                        message.contingentCondition = 5;\n                        break;\n                    case \"CC_LastPriceGreaterEqualStopPrice\":\n                    case 6:\n                        message.contingentCondition = 6;\n                        break;\n                    case \"CC_LastPriceLesserThanStopPrice\":\n                    case 7:\n                        message.contingentCondition = 7;\n                        break;\n                    case \"CC_LastPriceLesserEqualStopPrice\":\n                    case 8:\n                        message.contingentCondition = 8;\n                        break;\n                    case \"CC_AskPriceGreaterThanStopPrice\":\n                    case 9:\n                        message.contingentCondition = 9;\n                        break;\n                    case \"CC_AskPriceGreaterEqualStopPrice\":\n                    case 10:\n                        message.contingentCondition = 10;\n                        break;\n                    case \"CC_AskPriceLesserThanStopPrice\":\n                    case 11:\n                        message.contingentCondition = 11;\n                        break;\n                    case \"CC_AskPriceLesserEqualStopPrice\":\n                    case 12:\n                        message.contingentCondition = 12;\n                        break;\n                    case \"CC_BidPriceGreaterThanStopPrice\":\n                    case 13:\n                        message.contingentCondition = 13;\n                        break;\n                    case \"CC_BidPriceGreaterEqualStopPrice\":\n                    case 14:\n                        message.contingentCondition = 14;\n                        break;\n                    case \"CC_BidPriceLesserThanStopPrice\":\n                    case 15:\n                        message.contingentCondition = 15;\n                        break;\n                    case \"CC_BidPriceLesserEqualStopPrice\":\n                    case 16:\n                        message.contingentCondition = 16;\n                        break;\n                    case \"CC_LocalLastPriceLesserEqualStopPrice\":\n                    case 17:\n                        message.contingentCondition = 17;\n                        break;\n                    case \"CC_LocalLastPriceGreaterEqualStopPrice\":\n                    case 18:\n                        message.contingentCondition = 18;\n                        break;\n                    }\n                    if (object.stopPrice != null)\n                        message.stopPrice = Number(object.stopPrice);\n                    switch (object.forceCloseReason) {\n                    case \"FCR_Unknown\":\n                    case 0:\n                        message.forceCloseReason = 0;\n                        break;\n                    case \"FCR_NotForceClose\":\n                    case 1:\n                        message.forceCloseReason = 1;\n                        break;\n                    case \"FCR_LackDeposit\":\n                    case 2:\n                        message.forceCloseReason = 2;\n                        break;\n                    case \"FCR_ClientOverPositionLimit\":\n                    case 3:\n                        message.forceCloseReason = 3;\n                        break;\n                    case \"FCR_MemberOverPositionLimit\":\n                    case 4:\n                        message.forceCloseReason = 4;\n                        break;\n                    case \"FCR_NotMultiple\":\n                    case 5:\n                        message.forceCloseReason = 5;\n                        break;\n                    case \"FCR_Violation\":\n                    case 6:\n                        message.forceCloseReason = 6;\n                        break;\n                    case \"FCR_Other\":\n                    case 7:\n                        message.forceCloseReason = 7;\n                        break;\n                    case \"FCR_PersonDeliver\":\n                    case 8:\n                        message.forceCloseReason = 8;\n                        break;\n                    }\n                    if (object.autoSuspend != null)\n                        message.autoSuspend = object.autoSuspend >>> 0;\n                    if (object.userForceClose != null)\n                        message.userForceClose = object.userForceClose >>> 0;\n                    if (object.swapOrder != null)\n                        message.swapOrder = object.swapOrder >>> 0;\n                    if (object.tradingDay != null)\n                        message.tradingDay = String(object.tradingDay);\n                    if (object.orderDate != null)\n                        message.orderDate = String(object.orderDate);\n                    if (object.orderTime != null)\n                        message.orderTime = String(object.orderTime);\n                    if (object.activeTime != null)\n                        message.activeTime = String(object.activeTime);\n                    if (object.suspendTime != null)\n                        message.suspendTime = String(object.suspendTime);\n                    if (object.cancelTime != null)\n                        message.cancelTime = String(object.cancelTime);\n                    if (object.updateTime != null)\n                        message.updateTime = String(object.updateTime);\n                    if (object.statusMsg != null)\n                        message.statusMsg = String(object.statusMsg);\n                    if (object.frontId != null)\n                        message.frontId = object.frontId >>> 0;\n                    if (object.sessionId != null)\n                        message.sessionId = object.sessionId >>> 0;\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.OrderField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    switch (object.orderSubmitStatus) {\n                    case \"OSS_Unknown\":\n                    case 0:\n                        message.orderSubmitStatus = 0;\n                        break;\n                    case \"OSS_InsertSubmitted\":\n                    case 1:\n                        message.orderSubmitStatus = 1;\n                        break;\n                    case \"OSS_CancelSubmitted\":\n                    case 2:\n                        message.orderSubmitStatus = 2;\n                        break;\n                    case \"OSS_ModifySubmitted\":\n                    case 3:\n                        message.orderSubmitStatus = 3;\n                        break;\n                    case \"OSS_Accepted\":\n                    case 4:\n                        message.orderSubmitStatus = 4;\n                        break;\n                    case \"OSS_InsertRejected\":\n                    case 5:\n                        message.orderSubmitStatus = 5;\n                        break;\n                    case \"OSS_CancelRejected\":\n                    case 6:\n                        message.orderSubmitStatus = 6;\n                        break;\n                    case \"OSS_ModifyRejected\":\n                    case 7:\n                        message.orderSubmitStatus = 7;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an OrderField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.OrderField} message OrderField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                OrderField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originOrderId = \"\";\n                        object.orderId = \"\";\n                        object.adapterOrderId = \"\";\n                        object.accountId = \"\";\n                        object.orderLocalId = \"\";\n                        object.brokerOrderSeq = \"\";\n                        object.orderSysId = \"\";\n                        object.sequenceNo = \"\";\n                        object.direction = options.enums === String ? \"D_Unknown\" : 0;\n                        object.offsetFlag = options.enums === String ? \"OF_Unknown\" : 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.orderPriceType = options.enums === String ? \"OPT_Unknown\" : 0;\n                        object.orderStatus = options.enums === String ? \"OS_Unknown\" : 0;\n                        object.price = 0;\n                        object.totalVolume = 0;\n                        object.tradedVolume = 0;\n                        object.timeCondition = options.enums === String ? \"TC_Unknown\" : 0;\n                        object.gtdDate = \"\";\n                        object.volumeCondition = options.enums === String ? \"VC_Unknown\" : 0;\n                        object.minVolume = 0;\n                        object.contingentCondition = options.enums === String ? \"CC_Unknown\" : 0;\n                        object.stopPrice = 0;\n                        object.forceCloseReason = options.enums === String ? \"FCR_Unknown\" : 0;\n                        object.autoSuspend = 0;\n                        object.userForceClose = 0;\n                        object.swapOrder = 0;\n                        object.tradingDay = \"\";\n                        object.orderDate = \"\";\n                        object.orderTime = \"\";\n                        object.activeTime = \"\";\n                        object.suspendTime = \"\";\n                        object.cancelTime = \"\";\n                        object.updateTime = \"\";\n                        object.statusMsg = \"\";\n                        object.frontId = 0;\n                        object.sessionId = 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                        object.orderSubmitStatus = options.enums === String ? \"OSS_Unknown\" : 0;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        object.adapterOrderId = message.adapterOrderId;\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        object.orderLocalId = message.orderLocalId;\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        object.brokerOrderSeq = message.brokerOrderSeq;\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        object.orderSysId = message.orderSysId;\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        object.sequenceNo = message.sequenceNo;\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        object.offsetFlag = options.enums === String ? $root.xyz.redtorch.pb.OffsetFlagEnum[message.offsetFlag] : message.offsetFlag;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        object.orderPriceType = options.enums === String ? $root.xyz.redtorch.pb.OrderPriceTypeEnum[message.orderPriceType] : message.orderPriceType;\n                    if (message.orderStatus != null && message.hasOwnProperty(\"orderStatus\"))\n                        object.orderStatus = options.enums === String ? $root.xyz.redtorch.pb.OrderStatusEnum[message.orderStatus] : message.orderStatus;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.totalVolume != null && message.hasOwnProperty(\"totalVolume\"))\n                        object.totalVolume = message.totalVolume;\n                    if (message.tradedVolume != null && message.hasOwnProperty(\"tradedVolume\"))\n                        object.tradedVolume = message.tradedVolume;\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        object.timeCondition = options.enums === String ? $root.xyz.redtorch.pb.TimeConditionEnum[message.timeCondition] : message.timeCondition;\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        object.gtdDate = message.gtdDate;\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        object.volumeCondition = options.enums === String ? $root.xyz.redtorch.pb.VolumeConditionEnum[message.volumeCondition] : message.volumeCondition;\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        object.minVolume = message.minVolume;\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        object.contingentCondition = options.enums === String ? $root.xyz.redtorch.pb.ContingentConditionEnum[message.contingentCondition] : message.contingentCondition;\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        object.stopPrice = options.json && !isFinite(message.stopPrice) ? String(message.stopPrice) : message.stopPrice;\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        object.forceCloseReason = options.enums === String ? $root.xyz.redtorch.pb.ForceCloseReasonEnum[message.forceCloseReason] : message.forceCloseReason;\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        object.autoSuspend = message.autoSuspend;\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        object.userForceClose = message.userForceClose;\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        object.swapOrder = message.swapOrder;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.orderDate != null && message.hasOwnProperty(\"orderDate\"))\n                        object.orderDate = message.orderDate;\n                    if (message.orderTime != null && message.hasOwnProperty(\"orderTime\"))\n                        object.orderTime = message.orderTime;\n                    if (message.activeTime != null && message.hasOwnProperty(\"activeTime\"))\n                        object.activeTime = message.activeTime;\n                    if (message.suspendTime != null && message.hasOwnProperty(\"suspendTime\"))\n                        object.suspendTime = message.suspendTime;\n                    if (message.cancelTime != null && message.hasOwnProperty(\"cancelTime\"))\n                        object.cancelTime = message.cancelTime;\n                    if (message.updateTime != null && message.hasOwnProperty(\"updateTime\"))\n                        object.updateTime = message.updateTime;\n                    if (message.statusMsg != null && message.hasOwnProperty(\"statusMsg\"))\n                        object.statusMsg = message.statusMsg;\n                    if (message.frontId != null && message.hasOwnProperty(\"frontId\"))\n                        object.frontId = message.frontId;\n                    if (message.sessionId != null && message.hasOwnProperty(\"sessionId\"))\n                        object.sessionId = message.sessionId;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.orderSubmitStatus != null && message.hasOwnProperty(\"orderSubmitStatus\"))\n                        object.orderSubmitStatus = options.enums === String ? $root.xyz.redtorch.pb.OrderSubmitStatusEnum[message.orderSubmitStatus] : message.orderSubmitStatus;\n                    return object;\n                };\n\n                /**\n                 * Converts this OrderField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                OrderField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return OrderField;\n            })();\n\n            pb.TradeField = (function() {\n\n                /**\n                 * Properties of a TradeField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ITradeField\n                 * @property {string|null} [tradeId] TradeField tradeId\n                 * @property {string|null} [adapterTradeId] TradeField adapterTradeId\n                 * @property {string|null} [originOrderId] TradeField originOrderId\n                 * @property {string|null} [orderId] TradeField orderId\n                 * @property {string|null} [adapterOrderId] TradeField adapterOrderId\n                 * @property {string|null} [orderLocalId] TradeField orderLocalId\n                 * @property {string|null} [brokerOrderSeq] TradeField brokerOrderSeq\n                 * @property {string|null} [orderSysId] TradeField orderSysId\n                 * @property {string|null} [settlementId] TradeField settlementId\n                 * @property {string|null} [sequenceNo] TradeField sequenceNo\n                 * @property {string|null} [accountId] TradeField accountId\n                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] TradeField direction\n                 * @property {xyz.redtorch.pb.OffsetFlagEnum|null} [offsetFlag] TradeField offsetFlag\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] TradeField hedgeFlag\n                 * @property {number|null} [price] TradeField price\n                 * @property {number|null} [volume] TradeField volume\n                 * @property {xyz.redtorch.pb.TradeTypeEnum|null} [tradeType] TradeField tradeType\n                 * @property {xyz.redtorch.pb.PriceSourceEnum|null} [priceSource] TradeField priceSource\n                 * @property {string|null} [tradingDay] TradeField tradingDay\n                 * @property {string|null} [tradeDate] TradeField tradeDate\n                 * @property {string|null} [tradeTime] TradeField tradeTime\n                 * @property {number|Long|null} [tradeTimestamp] TradeField tradeTimestamp\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] TradeField contract\n                 * @property {string|null} [gatewayId] TradeField gatewayId\n                 */\n\n                /**\n                 * Constructs a new TradeField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a TradeField.\n                 * @implements ITradeField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ITradeField=} [properties] Properties to set\n                 */\n                function TradeField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TradeField tradeId.\n                 * @member {string} tradeId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeId = \"\";\n\n                /**\n                 * TradeField adapterTradeId.\n                 * @member {string} adapterTradeId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.adapterTradeId = \"\";\n\n                /**\n                 * TradeField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.originOrderId = \"\";\n\n                /**\n                 * TradeField orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.orderId = \"\";\n\n                /**\n                 * TradeField adapterOrderId.\n                 * @member {string} adapterOrderId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.adapterOrderId = \"\";\n\n                /**\n                 * TradeField orderLocalId.\n                 * @member {string} orderLocalId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.orderLocalId = \"\";\n\n                /**\n                 * TradeField brokerOrderSeq.\n                 * @member {string} brokerOrderSeq\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.brokerOrderSeq = \"\";\n\n                /**\n                 * TradeField orderSysId.\n                 * @member {string} orderSysId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.orderSysId = \"\";\n\n                /**\n                 * TradeField settlementId.\n                 * @member {string} settlementId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.settlementId = \"\";\n\n                /**\n                 * TradeField sequenceNo.\n                 * @member {string} sequenceNo\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.sequenceNo = \"\";\n\n                /**\n                 * TradeField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.accountId = \"\";\n\n                /**\n                 * TradeField direction.\n                 * @member {xyz.redtorch.pb.DirectionEnum} direction\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.direction = 0;\n\n                /**\n                 * TradeField offsetFlag.\n                 * @member {xyz.redtorch.pb.OffsetFlagEnum} offsetFlag\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.offsetFlag = 0;\n\n                /**\n                 * TradeField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.hedgeFlag = 0;\n\n                /**\n                 * TradeField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.price = 0;\n\n                /**\n                 * TradeField volume.\n                 * @member {number} volume\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.volume = 0;\n\n                /**\n                 * TradeField tradeType.\n                 * @member {xyz.redtorch.pb.TradeTypeEnum} tradeType\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeType = 0;\n\n                /**\n                 * TradeField priceSource.\n                 * @member {xyz.redtorch.pb.PriceSourceEnum} priceSource\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.priceSource = 0;\n\n                /**\n                 * TradeField tradingDay.\n                 * @member {string} tradingDay\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradingDay = \"\";\n\n                /**\n                 * TradeField tradeDate.\n                 * @member {string} tradeDate\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeDate = \"\";\n\n                /**\n                 * TradeField tradeTime.\n                 * @member {string} tradeTime\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeTime = \"\";\n\n                /**\n                 * TradeField tradeTimestamp.\n                 * @member {number|Long} tradeTimestamp\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TradeField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.contract = null;\n\n                /**\n                 * TradeField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new TradeField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITradeField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField instance\n                 */\n                TradeField.create = function create(properties) {\n                    return new TradeField(properties);\n                };\n\n                /**\n                 * Encodes the specified TradeField message. Does not implicitly {@link xyz.redtorch.pb.TradeField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITradeField} message TradeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TradeField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tradeId);\n                    if (message.adapterTradeId != null && message.hasOwnProperty(\"adapterTradeId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.adapterTradeId);\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originOrderId);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderId);\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.adapterOrderId);\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.orderLocalId);\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.brokerOrderSeq);\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.orderSysId);\n                    if (message.settlementId != null && message.hasOwnProperty(\"settlementId\"))\n                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.settlementId);\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.sequenceNo);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.accountId);\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.direction);\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.offsetFlag);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.hedgeFlag);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.price);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 16, wireType 5 =*/133).fixed32(message.volume);\n                    if (message.tradeType != null && message.hasOwnProperty(\"tradeType\"))\n                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.tradeType);\n                    if (message.priceSource != null && message.hasOwnProperty(\"priceSource\"))\n                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.priceSource);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 19, wireType 2 =*/154).string(message.tradingDay);\n                    if (message.tradeDate != null && message.hasOwnProperty(\"tradeDate\"))\n                        writer.uint32(/* id 20, wireType 2 =*/162).string(message.tradeDate);\n                    if (message.tradeTime != null && message.hasOwnProperty(\"tradeTime\"))\n                        writer.uint32(/* id 21, wireType 2 =*/170).string(message.tradeTime);\n                    if (message.tradeTimestamp != null && message.hasOwnProperty(\"tradeTimestamp\"))\n                        writer.uint32(/* id 22, wireType 1 =*/177).fixed64(message.tradeTimestamp);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 24, wireType 2 =*/194).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TradeField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.TradeField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITradeField} message TradeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TradeField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TradeField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TradeField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.TradeField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.tradeId = reader.string();\n                            break;\n                        case 2:\n                            message.adapterTradeId = reader.string();\n                            break;\n                        case 3:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 4:\n                            message.orderId = reader.string();\n                            break;\n                        case 5:\n                            message.adapterOrderId = reader.string();\n                            break;\n                        case 6:\n                            message.orderLocalId = reader.string();\n                            break;\n                        case 7:\n                            message.brokerOrderSeq = reader.string();\n                            break;\n                        case 8:\n                            message.orderSysId = reader.string();\n                            break;\n                        case 9:\n                            message.settlementId = reader.string();\n                            break;\n                        case 10:\n                            message.sequenceNo = reader.string();\n                            break;\n                        case 11:\n                            message.accountId = reader.string();\n                            break;\n                        case 12:\n                            message.direction = reader.int32();\n                            break;\n                        case 13:\n                            message.offsetFlag = reader.int32();\n                            break;\n                        case 14:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 15:\n                            message.price = reader.double();\n                            break;\n                        case 16:\n                            message.volume = reader.fixed32();\n                            break;\n                        case 17:\n                            message.tradeType = reader.int32();\n                            break;\n                        case 18:\n                            message.priceSource = reader.int32();\n                            break;\n                        case 19:\n                            message.tradingDay = reader.string();\n                            break;\n                        case 20:\n                            message.tradeDate = reader.string();\n                            break;\n                        case 21:\n                            message.tradeTime = reader.string();\n                            break;\n                        case 22:\n                            message.tradeTimestamp = reader.fixed64();\n                            break;\n                        case 23:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 24:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TradeField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TradeField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TradeField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TradeField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        if (!$util.isString(message.tradeId))\n                            return \"tradeId: string expected\";\n                    if (message.adapterTradeId != null && message.hasOwnProperty(\"adapterTradeId\"))\n                        if (!$util.isString(message.adapterTradeId))\n                            return \"adapterTradeId: string expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        if (!$util.isString(message.adapterOrderId))\n                            return \"adapterOrderId: string expected\";\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        if (!$util.isString(message.orderLocalId))\n                            return \"orderLocalId: string expected\";\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        if (!$util.isString(message.brokerOrderSeq))\n                            return \"brokerOrderSeq: string expected\";\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        if (!$util.isString(message.orderSysId))\n                            return \"orderSysId: string expected\";\n                    if (message.settlementId != null && message.hasOwnProperty(\"settlementId\"))\n                        if (!$util.isString(message.settlementId))\n                            return \"settlementId: string expected\";\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        if (!$util.isString(message.sequenceNo))\n                            return \"sequenceNo: string expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        switch (message.direction) {\n                        default:\n                            return \"direction: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        switch (message.offsetFlag) {\n                        default:\n                            return \"offsetFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume))\n                            return \"volume: integer expected\";\n                    if (message.tradeType != null && message.hasOwnProperty(\"tradeType\"))\n                        switch (message.tradeType) {\n                        default:\n                            return \"tradeType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.priceSource != null && message.hasOwnProperty(\"priceSource\"))\n                        switch (message.priceSource) {\n                        default:\n                            return \"priceSource: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isString(message.tradingDay))\n                            return \"tradingDay: string expected\";\n                    if (message.tradeDate != null && message.hasOwnProperty(\"tradeDate\"))\n                        if (!$util.isString(message.tradeDate))\n                            return \"tradeDate: string expected\";\n                    if (message.tradeTime != null && message.hasOwnProperty(\"tradeTime\"))\n                        if (!$util.isString(message.tradeTime))\n                            return \"tradeTime: string expected\";\n                    if (message.tradeTimestamp != null && message.hasOwnProperty(\"tradeTimestamp\"))\n                        if (!$util.isInteger(message.tradeTimestamp) && !(message.tradeTimestamp && $util.isInteger(message.tradeTimestamp.low) && $util.isInteger(message.tradeTimestamp.high)))\n                            return \"tradeTimestamp: integer|Long expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TradeField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField\n                 */\n                TradeField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.TradeField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.TradeField();\n                    if (object.tradeId != null)\n                        message.tradeId = String(object.tradeId);\n                    if (object.adapterTradeId != null)\n                        message.adapterTradeId = String(object.adapterTradeId);\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    if (object.adapterOrderId != null)\n                        message.adapterOrderId = String(object.adapterOrderId);\n                    if (object.orderLocalId != null)\n                        message.orderLocalId = String(object.orderLocalId);\n                    if (object.brokerOrderSeq != null)\n                        message.brokerOrderSeq = String(object.brokerOrderSeq);\n                    if (object.orderSysId != null)\n                        message.orderSysId = String(object.orderSysId);\n                    if (object.settlementId != null)\n                        message.settlementId = String(object.settlementId);\n                    if (object.sequenceNo != null)\n                        message.sequenceNo = String(object.sequenceNo);\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    switch (object.direction) {\n                    case \"D_Unknown\":\n                    case 0:\n                        message.direction = 0;\n                        break;\n                    case \"D_Buy\":\n                    case 1:\n                        message.direction = 1;\n                        break;\n                    case \"D_Sell\":\n                    case 2:\n                        message.direction = 2;\n                        break;\n                    }\n                    switch (object.offsetFlag) {\n                    case \"OF_Unknown\":\n                    case 0:\n                        message.offsetFlag = 0;\n                        break;\n                    case \"OF_Open\":\n                    case 1:\n                        message.offsetFlag = 1;\n                        break;\n                    case \"OF_Close\":\n                    case 2:\n                        message.offsetFlag = 2;\n                        break;\n                    case \"OF_ForceClose\":\n                    case 3:\n                        message.offsetFlag = 3;\n                        break;\n                    case \"OF_CloseToday\":\n                    case 4:\n                        message.offsetFlag = 4;\n                        break;\n                    case \"OF_CloseYesterday\":\n                    case 5:\n                        message.offsetFlag = 5;\n                        break;\n                    case \"OF_ForceOff\":\n                    case 6:\n                        message.offsetFlag = 6;\n                        break;\n                    case \"OF_LocalForceClose\":\n                    case 7:\n                        message.offsetFlag = 7;\n                        break;\n                    }\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    if (object.volume != null)\n                        message.volume = object.volume >>> 0;\n                    switch (object.tradeType) {\n                    case \"TT_Unknown\":\n                    case 0:\n                        message.tradeType = 0;\n                        break;\n                    case \"TT_SplitCombination\":\n                    case 1:\n                        message.tradeType = 1;\n                        break;\n                    case \"TT_Common\":\n                    case 2:\n                        message.tradeType = 2;\n                        break;\n                    case \"TT_OptionsExecution\":\n                    case 3:\n                        message.tradeType = 3;\n                        break;\n                    case \"TT_OTC\":\n                    case 4:\n                        message.tradeType = 4;\n                        break;\n                    case \"TT_EFPDerived\":\n                    case 5:\n                        message.tradeType = 5;\n                        break;\n                    case \"TT_CombinationDerived\":\n                    case 6:\n                        message.tradeType = 6;\n                        break;\n                    case \"TT_BlockTrade\":\n                    case 7:\n                        message.tradeType = 7;\n                        break;\n                    }\n                    switch (object.priceSource) {\n                    case \"PSRC_Unknown\":\n                    case 0:\n                        message.priceSource = 0;\n                        break;\n                    case \"PSRC_LastPrice\":\n                    case 1:\n                        message.priceSource = 1;\n                        break;\n                    case \"PSRC_Buy\":\n                    case 2:\n                        message.priceSource = 2;\n                        break;\n                    case \"PSRC_Sell\":\n                    case 3:\n                        message.priceSource = 3;\n                        break;\n                    case \"PSRC_OTC\":\n                    case 4:\n                        message.priceSource = 4;\n                        break;\n                    }\n                    if (object.tradingDay != null)\n                        message.tradingDay = String(object.tradingDay);\n                    if (object.tradeDate != null)\n                        message.tradeDate = String(object.tradeDate);\n                    if (object.tradeTime != null)\n                        message.tradeTime = String(object.tradeTime);\n                    if (object.tradeTimestamp != null)\n                        if ($util.Long)\n                            (message.tradeTimestamp = $util.Long.fromValue(object.tradeTimestamp)).unsigned = false;\n                        else if (typeof object.tradeTimestamp === \"string\")\n                            message.tradeTimestamp = parseInt(object.tradeTimestamp, 10);\n                        else if (typeof object.tradeTimestamp === \"number\")\n                            message.tradeTimestamp = object.tradeTimestamp;\n                        else if (typeof object.tradeTimestamp === \"object\")\n                            message.tradeTimestamp = new $util.LongBits(object.tradeTimestamp.low >>> 0, object.tradeTimestamp.high >>> 0).toNumber();\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.TradeField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TradeField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.TradeField} message TradeField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TradeField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.tradeId = \"\";\n                        object.adapterTradeId = \"\";\n                        object.originOrderId = \"\";\n                        object.orderId = \"\";\n                        object.adapterOrderId = \"\";\n                        object.orderLocalId = \"\";\n                        object.brokerOrderSeq = \"\";\n                        object.orderSysId = \"\";\n                        object.settlementId = \"\";\n                        object.sequenceNo = \"\";\n                        object.accountId = \"\";\n                        object.direction = options.enums === String ? \"D_Unknown\" : 0;\n                        object.offsetFlag = options.enums === String ? \"OF_Unknown\" : 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.price = 0;\n                        object.volume = 0;\n                        object.tradeType = options.enums === String ? \"TT_Unknown\" : 0;\n                        object.priceSource = options.enums === String ? \"PSRC_Unknown\" : 0;\n                        object.tradingDay = \"\";\n                        object.tradeDate = \"\";\n                        object.tradeTime = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.tradeTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.tradeTimestamp = options.longs === String ? \"0\" : 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        object.tradeId = message.tradeId;\n                    if (message.adapterTradeId != null && message.hasOwnProperty(\"adapterTradeId\"))\n                        object.adapterTradeId = message.adapterTradeId;\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        object.adapterOrderId = message.adapterOrderId;\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        object.orderLocalId = message.orderLocalId;\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        object.brokerOrderSeq = message.brokerOrderSeq;\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        object.orderSysId = message.orderSysId;\n                    if (message.settlementId != null && message.hasOwnProperty(\"settlementId\"))\n                        object.settlementId = message.settlementId;\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        object.sequenceNo = message.sequenceNo;\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        object.offsetFlag = options.enums === String ? $root.xyz.redtorch.pb.OffsetFlagEnum[message.offsetFlag] : message.offsetFlag;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        object.volume = message.volume;\n                    if (message.tradeType != null && message.hasOwnProperty(\"tradeType\"))\n                        object.tradeType = options.enums === String ? $root.xyz.redtorch.pb.TradeTypeEnum[message.tradeType] : message.tradeType;\n                    if (message.priceSource != null && message.hasOwnProperty(\"priceSource\"))\n                        object.priceSource = options.enums === String ? $root.xyz.redtorch.pb.PriceSourceEnum[message.priceSource] : message.priceSource;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.tradeDate != null && message.hasOwnProperty(\"tradeDate\"))\n                        object.tradeDate = message.tradeDate;\n                    if (message.tradeTime != null && message.hasOwnProperty(\"tradeTime\"))\n                        object.tradeTime = message.tradeTime;\n                    if (message.tradeTimestamp != null && message.hasOwnProperty(\"tradeTimestamp\"))\n                        if (typeof message.tradeTimestamp === \"number\")\n                            object.tradeTimestamp = options.longs === String ? String(message.tradeTimestamp) : message.tradeTimestamp;\n                        else\n                            object.tradeTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.tradeTimestamp) : options.longs === Number ? new $util.LongBits(message.tradeTimestamp.low >>> 0, message.tradeTimestamp.high >>> 0).toNumber() : message.tradeTimestamp;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this TradeField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TradeField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TradeField;\n            })();\n\n            pb.PositionField = (function() {\n\n                /**\n                 * Properties of a PositionField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IPositionField\n                 * @property {string|null} [positionId] PositionField positionId\n                 * @property {string|null} [accountId] PositionField accountId\n                 * @property {xyz.redtorch.pb.PositionDirectionEnum|null} [positionDirection] PositionField positionDirection\n                 * @property {number|null} [position] PositionField position\n                 * @property {number|null} [frozen] PositionField frozen\n                 * @property {number|null} [ydPosition] PositionField ydPosition\n                 * @property {number|null} [ydFrozen] PositionField ydFrozen\n                 * @property {number|null} [tdPosition] PositionField tdPosition\n                 * @property {number|null} [tdFrozen] PositionField tdFrozen\n                 * @property {number|null} [lastPrice] PositionField lastPrice\n                 * @property {number|null} [price] PositionField price\n                 * @property {number|null} [priceDiff] PositionField priceDiff\n                 * @property {number|null} [openPrice] PositionField openPrice\n                 * @property {number|null} [openPriceDiff] PositionField openPriceDiff\n                 * @property {number|null} [positionProfit] PositionField positionProfit\n                 * @property {number|null} [positionProfitRatio] PositionField positionProfitRatio\n                 * @property {number|null} [openPositionProfit] PositionField openPositionProfit\n                 * @property {number|null} [openPositionProfitRatio] PositionField openPositionProfitRatio\n                 * @property {number|null} [useMargin] PositionField useMargin\n                 * @property {number|null} [exchangeMargin] PositionField exchangeMargin\n                 * @property {number|null} [contractValue] PositionField contractValue\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] PositionField hedgeFlag\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] PositionField contract\n                 * @property {string|null} [gatewayId] PositionField gatewayId\n                 * @property {number|Long|null} [localCreatedTimestamp] PositionField localCreatedTimestamp\n                 */\n\n                /**\n                 * Constructs a new PositionField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a PositionField.\n                 * @implements IPositionField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IPositionField=} [properties] Properties to set\n                 */\n                function PositionField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PositionField positionId.\n                 * @member {string} positionId\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionId = \"\";\n\n                /**\n                 * PositionField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.accountId = \"\";\n\n                /**\n                 * PositionField positionDirection.\n                 * @member {xyz.redtorch.pb.PositionDirectionEnum} positionDirection\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionDirection = 0;\n\n                /**\n                 * PositionField position.\n                 * @member {number} position\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.position = 0;\n\n                /**\n                 * PositionField frozen.\n                 * @member {number} frozen\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.frozen = 0;\n\n                /**\n                 * PositionField ydPosition.\n                 * @member {number} ydPosition\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.ydPosition = 0;\n\n                /**\n                 * PositionField ydFrozen.\n                 * @member {number} ydFrozen\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.ydFrozen = 0;\n\n                /**\n                 * PositionField tdPosition.\n                 * @member {number} tdPosition\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.tdPosition = 0;\n\n                /**\n                 * PositionField tdFrozen.\n                 * @member {number} tdFrozen\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.tdFrozen = 0;\n\n                /**\n                 * PositionField lastPrice.\n                 * @member {number} lastPrice\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.lastPrice = 0;\n\n                /**\n                 * PositionField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.price = 0;\n\n                /**\n                 * PositionField priceDiff.\n                 * @member {number} priceDiff\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.priceDiff = 0;\n\n                /**\n                 * PositionField openPrice.\n                 * @member {number} openPrice\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPrice = 0;\n\n                /**\n                 * PositionField openPriceDiff.\n                 * @member {number} openPriceDiff\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPriceDiff = 0;\n\n                /**\n                 * PositionField positionProfit.\n                 * @member {number} positionProfit\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionProfit = 0;\n\n                /**\n                 * PositionField positionProfitRatio.\n                 * @member {number} positionProfitRatio\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionProfitRatio = 0;\n\n                /**\n                 * PositionField openPositionProfit.\n                 * @member {number} openPositionProfit\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPositionProfit = 0;\n\n                /**\n                 * PositionField openPositionProfitRatio.\n                 * @member {number} openPositionProfitRatio\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPositionProfitRatio = 0;\n\n                /**\n                 * PositionField useMargin.\n                 * @member {number} useMargin\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.useMargin = 0;\n\n                /**\n                 * PositionField exchangeMargin.\n                 * @member {number} exchangeMargin\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.exchangeMargin = 0;\n\n                /**\n                 * PositionField contractValue.\n                 * @member {number} contractValue\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.contractValue = 0;\n\n                /**\n                 * PositionField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.hedgeFlag = 0;\n\n                /**\n                 * PositionField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.contract = null;\n\n                /**\n                 * PositionField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.gatewayId = \"\";\n\n                /**\n                 * PositionField localCreatedTimestamp.\n                 * @member {number|Long} localCreatedTimestamp\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.localCreatedTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new PositionField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.IPositionField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField instance\n                 */\n                PositionField.create = function create(properties) {\n                    return new PositionField(properties);\n                };\n\n                /**\n                 * Encodes the specified PositionField message. Does not implicitly {@link xyz.redtorch.pb.PositionField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.IPositionField} message PositionField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PositionField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.positionId);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    if (message.positionDirection != null && message.hasOwnProperty(\"positionDirection\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.positionDirection);\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.position);\n                    if (message.frozen != null && message.hasOwnProperty(\"frozen\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.frozen);\n                    if (message.ydPosition != null && message.hasOwnProperty(\"ydPosition\"))\n                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.ydPosition);\n                    if (message.ydFrozen != null && message.hasOwnProperty(\"ydFrozen\"))\n                        writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.ydFrozen);\n                    if (message.tdPosition != null && message.hasOwnProperty(\"tdPosition\"))\n                        writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.tdPosition);\n                    if (message.tdFrozen != null && message.hasOwnProperty(\"tdFrozen\"))\n                        writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.tdFrozen);\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.lastPrice);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.price);\n                    if (message.priceDiff != null && message.hasOwnProperty(\"priceDiff\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.priceDiff);\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.openPrice);\n                    if (message.openPriceDiff != null && message.hasOwnProperty(\"openPriceDiff\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.openPriceDiff);\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.positionProfit);\n                    if (message.positionProfitRatio != null && message.hasOwnProperty(\"positionProfitRatio\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.positionProfitRatio);\n                    if (message.openPositionProfit != null && message.hasOwnProperty(\"openPositionProfit\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.openPositionProfit);\n                    if (message.openPositionProfitRatio != null && message.hasOwnProperty(\"openPositionProfitRatio\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.openPositionProfitRatio);\n                    if (message.useMargin != null && message.hasOwnProperty(\"useMargin\"))\n                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.useMargin);\n                    if (message.exchangeMargin != null && message.hasOwnProperty(\"exchangeMargin\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.exchangeMargin);\n                    if (message.contractValue != null && message.hasOwnProperty(\"contractValue\"))\n                        writer.uint32(/* id 21, wireType 1 =*/169).double(message.contractValue);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 22, wireType 0 =*/176).int32(message.hedgeFlag);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 24, wireType 2 =*/194).string(message.gatewayId);\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        writer.uint32(/* id 25, wireType 1 =*/201).fixed64(message.localCreatedTimestamp);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PositionField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.PositionField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.IPositionField} message PositionField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PositionField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PositionField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PositionField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.PositionField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.positionId = reader.string();\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        case 3:\n                            message.positionDirection = reader.int32();\n                            break;\n                        case 4:\n                            message.position = reader.fixed32();\n                            break;\n                        case 5:\n                            message.frozen = reader.fixed32();\n                            break;\n                        case 6:\n                            message.ydPosition = reader.fixed32();\n                            break;\n                        case 7:\n                            message.ydFrozen = reader.fixed32();\n                            break;\n                        case 8:\n                            message.tdPosition = reader.fixed32();\n                            break;\n                        case 9:\n                            message.tdFrozen = reader.fixed32();\n                            break;\n                        case 10:\n                            message.lastPrice = reader.double();\n                            break;\n                        case 11:\n                            message.price = reader.double();\n                            break;\n                        case 12:\n                            message.priceDiff = reader.double();\n                            break;\n                        case 13:\n                            message.openPrice = reader.double();\n                            break;\n                        case 14:\n                            message.openPriceDiff = reader.double();\n                            break;\n                        case 15:\n                            message.positionProfit = reader.double();\n                            break;\n                        case 16:\n                            message.positionProfitRatio = reader.double();\n                            break;\n                        case 17:\n                            message.openPositionProfit = reader.double();\n                            break;\n                        case 18:\n                            message.openPositionProfitRatio = reader.double();\n                            break;\n                        case 19:\n                            message.useMargin = reader.double();\n                            break;\n                        case 20:\n                            message.exchangeMargin = reader.double();\n                            break;\n                        case 21:\n                            message.contractValue = reader.double();\n                            break;\n                        case 22:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 23:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 24:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 25:\n                            message.localCreatedTimestamp = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PositionField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PositionField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PositionField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PositionField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        if (!$util.isString(message.positionId))\n                            return \"positionId: string expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.positionDirection != null && message.hasOwnProperty(\"positionDirection\"))\n                        switch (message.positionDirection) {\n                        default:\n                            return \"positionDirection: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        if (!$util.isInteger(message.position))\n                            return \"position: integer expected\";\n                    if (message.frozen != null && message.hasOwnProperty(\"frozen\"))\n                        if (!$util.isInteger(message.frozen))\n                            return \"frozen: integer expected\";\n                    if (message.ydPosition != null && message.hasOwnProperty(\"ydPosition\"))\n                        if (!$util.isInteger(message.ydPosition))\n                            return \"ydPosition: integer expected\";\n                    if (message.ydFrozen != null && message.hasOwnProperty(\"ydFrozen\"))\n                        if (!$util.isInteger(message.ydFrozen))\n                            return \"ydFrozen: integer expected\";\n                    if (message.tdPosition != null && message.hasOwnProperty(\"tdPosition\"))\n                        if (!$util.isInteger(message.tdPosition))\n                            return \"tdPosition: integer expected\";\n                    if (message.tdFrozen != null && message.hasOwnProperty(\"tdFrozen\"))\n                        if (!$util.isInteger(message.tdFrozen))\n                            return \"tdFrozen: integer expected\";\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        if (typeof message.lastPrice !== \"number\")\n                            return \"lastPrice: number expected\";\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.priceDiff != null && message.hasOwnProperty(\"priceDiff\"))\n                        if (typeof message.priceDiff !== \"number\")\n                            return \"priceDiff: number expected\";\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        if (typeof message.openPrice !== \"number\")\n                            return \"openPrice: number expected\";\n                    if (message.openPriceDiff != null && message.hasOwnProperty(\"openPriceDiff\"))\n                        if (typeof message.openPriceDiff !== \"number\")\n                            return \"openPriceDiff: number expected\";\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        if (typeof message.positionProfit !== \"number\")\n                            return \"positionProfit: number expected\";\n                    if (message.positionProfitRatio != null && message.hasOwnProperty(\"positionProfitRatio\"))\n                        if (typeof message.positionProfitRatio !== \"number\")\n                            return \"positionProfitRatio: number expected\";\n                    if (message.openPositionProfit != null && message.hasOwnProperty(\"openPositionProfit\"))\n                        if (typeof message.openPositionProfit !== \"number\")\n                            return \"openPositionProfit: number expected\";\n                    if (message.openPositionProfitRatio != null && message.hasOwnProperty(\"openPositionProfitRatio\"))\n                        if (typeof message.openPositionProfitRatio !== \"number\")\n                            return \"openPositionProfitRatio: number expected\";\n                    if (message.useMargin != null && message.hasOwnProperty(\"useMargin\"))\n                        if (typeof message.useMargin !== \"number\")\n                            return \"useMargin: number expected\";\n                    if (message.exchangeMargin != null && message.hasOwnProperty(\"exchangeMargin\"))\n                        if (typeof message.exchangeMargin !== \"number\")\n                            return \"exchangeMargin: number expected\";\n                    if (message.contractValue != null && message.hasOwnProperty(\"contractValue\"))\n                        if (typeof message.contractValue !== \"number\")\n                            return \"contractValue: number expected\";\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (!$util.isInteger(message.localCreatedTimestamp) && !(message.localCreatedTimestamp && $util.isInteger(message.localCreatedTimestamp.low) && $util.isInteger(message.localCreatedTimestamp.high)))\n                            return \"localCreatedTimestamp: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PositionField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField\n                 */\n                PositionField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.PositionField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.PositionField();\n                    if (object.positionId != null)\n                        message.positionId = String(object.positionId);\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    switch (object.positionDirection) {\n                    case \"PD_Unknown\":\n                    case 0:\n                        message.positionDirection = 0;\n                        break;\n                    case \"PD_Net\":\n                    case 1:\n                        message.positionDirection = 1;\n                        break;\n                    case \"PD_Long\":\n                    case 2:\n                        message.positionDirection = 2;\n                        break;\n                    case \"PD_Short\":\n                    case 3:\n                        message.positionDirection = 3;\n                        break;\n                    }\n                    if (object.position != null)\n                        message.position = object.position >>> 0;\n                    if (object.frozen != null)\n                        message.frozen = object.frozen >>> 0;\n                    if (object.ydPosition != null)\n                        message.ydPosition = object.ydPosition >>> 0;\n                    if (object.ydFrozen != null)\n                        message.ydFrozen = object.ydFrozen >>> 0;\n                    if (object.tdPosition != null)\n                        message.tdPosition = object.tdPosition >>> 0;\n                    if (object.tdFrozen != null)\n                        message.tdFrozen = object.tdFrozen >>> 0;\n                    if (object.lastPrice != null)\n                        message.lastPrice = Number(object.lastPrice);\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    if (object.priceDiff != null)\n                        message.priceDiff = Number(object.priceDiff);\n                    if (object.openPrice != null)\n                        message.openPrice = Number(object.openPrice);\n                    if (object.openPriceDiff != null)\n                        message.openPriceDiff = Number(object.openPriceDiff);\n                    if (object.positionProfit != null)\n                        message.positionProfit = Number(object.positionProfit);\n                    if (object.positionProfitRatio != null)\n                        message.positionProfitRatio = Number(object.positionProfitRatio);\n                    if (object.openPositionProfit != null)\n                        message.openPositionProfit = Number(object.openPositionProfit);\n                    if (object.openPositionProfitRatio != null)\n                        message.openPositionProfitRatio = Number(object.openPositionProfitRatio);\n                    if (object.useMargin != null)\n                        message.useMargin = Number(object.useMargin);\n                    if (object.exchangeMargin != null)\n                        message.exchangeMargin = Number(object.exchangeMargin);\n                    if (object.contractValue != null)\n                        message.contractValue = Number(object.contractValue);\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.PositionField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.localCreatedTimestamp != null)\n                        if ($util.Long)\n                            (message.localCreatedTimestamp = $util.Long.fromValue(object.localCreatedTimestamp)).unsigned = false;\n                        else if (typeof object.localCreatedTimestamp === \"string\")\n                            message.localCreatedTimestamp = parseInt(object.localCreatedTimestamp, 10);\n                        else if (typeof object.localCreatedTimestamp === \"number\")\n                            message.localCreatedTimestamp = object.localCreatedTimestamp;\n                        else if (typeof object.localCreatedTimestamp === \"object\")\n                            message.localCreatedTimestamp = new $util.LongBits(object.localCreatedTimestamp.low >>> 0, object.localCreatedTimestamp.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PositionField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.PositionField} message PositionField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PositionField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.positionId = \"\";\n                        object.accountId = \"\";\n                        object.positionDirection = options.enums === String ? \"PD_Unknown\" : 0;\n                        object.position = 0;\n                        object.frozen = 0;\n                        object.ydPosition = 0;\n                        object.ydFrozen = 0;\n                        object.tdPosition = 0;\n                        object.tdFrozen = 0;\n                        object.lastPrice = 0;\n                        object.price = 0;\n                        object.priceDiff = 0;\n                        object.openPrice = 0;\n                        object.openPriceDiff = 0;\n                        object.positionProfit = 0;\n                        object.positionProfitRatio = 0;\n                        object.openPositionProfit = 0;\n                        object.openPositionProfitRatio = 0;\n                        object.useMargin = 0;\n                        object.exchangeMargin = 0;\n                        object.contractValue = 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.localCreatedTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.localCreatedTimestamp = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        object.positionId = message.positionId;\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.positionDirection != null && message.hasOwnProperty(\"positionDirection\"))\n                        object.positionDirection = options.enums === String ? $root.xyz.redtorch.pb.PositionDirectionEnum[message.positionDirection] : message.positionDirection;\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        object.position = message.position;\n                    if (message.frozen != null && message.hasOwnProperty(\"frozen\"))\n                        object.frozen = message.frozen;\n                    if (message.ydPosition != null && message.hasOwnProperty(\"ydPosition\"))\n                        object.ydPosition = message.ydPosition;\n                    if (message.ydFrozen != null && message.hasOwnProperty(\"ydFrozen\"))\n                        object.ydFrozen = message.ydFrozen;\n                    if (message.tdPosition != null && message.hasOwnProperty(\"tdPosition\"))\n                        object.tdPosition = message.tdPosition;\n                    if (message.tdFrozen != null && message.hasOwnProperty(\"tdFrozen\"))\n                        object.tdFrozen = message.tdFrozen;\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        object.lastPrice = options.json && !isFinite(message.lastPrice) ? String(message.lastPrice) : message.lastPrice;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.priceDiff != null && message.hasOwnProperty(\"priceDiff\"))\n                        object.priceDiff = options.json && !isFinite(message.priceDiff) ? String(message.priceDiff) : message.priceDiff;\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;\n                    if (message.openPriceDiff != null && message.hasOwnProperty(\"openPriceDiff\"))\n                        object.openPriceDiff = options.json && !isFinite(message.openPriceDiff) ? String(message.openPriceDiff) : message.openPriceDiff;\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        object.positionProfit = options.json && !isFinite(message.positionProfit) ? String(message.positionProfit) : message.positionProfit;\n                    if (message.positionProfitRatio != null && message.hasOwnProperty(\"positionProfitRatio\"))\n                        object.positionProfitRatio = options.json && !isFinite(message.positionProfitRatio) ? String(message.positionProfitRatio) : message.positionProfitRatio;\n                    if (message.openPositionProfit != null && message.hasOwnProperty(\"openPositionProfit\"))\n                        object.openPositionProfit = options.json && !isFinite(message.openPositionProfit) ? String(message.openPositionProfit) : message.openPositionProfit;\n                    if (message.openPositionProfitRatio != null && message.hasOwnProperty(\"openPositionProfitRatio\"))\n                        object.openPositionProfitRatio = options.json && !isFinite(message.openPositionProfitRatio) ? String(message.openPositionProfitRatio) : message.openPositionProfitRatio;\n                    if (message.useMargin != null && message.hasOwnProperty(\"useMargin\"))\n                        object.useMargin = options.json && !isFinite(message.useMargin) ? String(message.useMargin) : message.useMargin;\n                    if (message.exchangeMargin != null && message.hasOwnProperty(\"exchangeMargin\"))\n                        object.exchangeMargin = options.json && !isFinite(message.exchangeMargin) ? String(message.exchangeMargin) : message.exchangeMargin;\n                    if (message.contractValue != null && message.hasOwnProperty(\"contractValue\"))\n                        object.contractValue = options.json && !isFinite(message.contractValue) ? String(message.contractValue) : message.contractValue;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (typeof message.localCreatedTimestamp === \"number\")\n                            object.localCreatedTimestamp = options.longs === String ? String(message.localCreatedTimestamp) : message.localCreatedTimestamp;\n                        else\n                            object.localCreatedTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.localCreatedTimestamp) : options.longs === Number ? new $util.LongBits(message.localCreatedTimestamp.low >>> 0, message.localCreatedTimestamp.high >>> 0).toNumber() : message.localCreatedTimestamp;\n                    return object;\n                };\n\n                /**\n                 * Converts this PositionField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PositionField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PositionField;\n            })();\n\n            pb.TickField = (function() {\n\n                /**\n                 * Properties of a TickField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ITickField\n                 * @property {string|null} [unifiedSymbol] TickField unifiedSymbol\n                 * @property {string|null} [gatewayId] TickField gatewayId\n                 * @property {string|null} [tradingDay] TickField tradingDay\n                 * @property {string|null} [actionDay] TickField actionDay\n                 * @property {string|null} [actionTime] TickField actionTime\n                 * @property {number|Long|null} [actionTimestamp] TickField actionTimestamp\n                 * @property {number|null} [status] TickField status\n                 * @property {number|null} [lastPrice] TickField lastPrice\n                 * @property {number|null} [avgPrice] TickField avgPrice\n                 * @property {number|Long|null} [totalBidVol] TickField totalBidVol\n                 * @property {number|Long|null} [totalAskVol] TickField totalAskVol\n                 * @property {number|null} [weightedAvgBidPrice] TickField weightedAvgBidPrice\n                 * @property {number|null} [weightedAvgAskPrice] TickField weightedAvgAskPrice\n                 * @property {number|null} [iopv] TickField iopv\n                 * @property {number|null} [yieldToMaturity] TickField yieldToMaturity\n                 * @property {number|Long|null} [volumeDelta] TickField volumeDelta\n                 * @property {number|Long|null} [volume] TickField volume\n                 * @property {number|null} [turnover] TickField turnover\n                 * @property {number|null} [turnoverDelta] TickField turnoverDelta\n                 * @property {number|Long|null} [numTrades] TickField numTrades\n                 * @property {number|Long|null} [numTradesDelta] TickField numTradesDelta\n                 * @property {number|null} [openInterest] TickField openInterest\n                 * @property {number|null} [openInterestDelta] TickField openInterestDelta\n                 * @property {number|null} [preOpenInterest] TickField preOpenInterest\n                 * @property {number|null} [preClosePrice] TickField preClosePrice\n                 * @property {number|null} [settlePrice] TickField settlePrice\n                 * @property {number|null} [preSettlePrice] TickField preSettlePrice\n                 * @property {number|null} [openPrice] TickField openPrice\n                 * @property {number|null} [highPrice] TickField highPrice\n                 * @property {number|null} [lowPrice] TickField lowPrice\n                 * @property {number|null} [upperLimit] TickField upperLimit\n                 * @property {number|null} [lowerLimit] TickField lowerLimit\n                 * @property {Array.<number>|null} [bidPrice] TickField bidPrice\n                 * @property {Array.<number>|null} [askPrice] TickField askPrice\n                 * @property {Array.<number>|null} [bidVolume] TickField bidVolume\n                 * @property {Array.<number>|null} [askVolume] TickField askVolume\n                 */\n\n                /**\n                 * Constructs a new TickField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a TickField.\n                 * @implements ITickField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ITickField=} [properties] Properties to set\n                 */\n                function TickField(properties) {\n                    this.bidPrice = [];\n                    this.askPrice = [];\n                    this.bidVolume = [];\n                    this.askVolume = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TickField unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * TickField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.gatewayId = \"\";\n\n                /**\n                 * TickField tradingDay.\n                 * @member {string} tradingDay\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.tradingDay = \"\";\n\n                /**\n                 * TickField actionDay.\n                 * @member {string} actionDay\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.actionDay = \"\";\n\n                /**\n                 * TickField actionTime.\n                 * @member {string} actionTime\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.actionTime = \"\";\n\n                /**\n                 * TickField actionTimestamp.\n                 * @member {number|Long} actionTimestamp\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.actionTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField status.\n                 * @member {number} status\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.status = 0;\n\n                /**\n                 * TickField lastPrice.\n                 * @member {number} lastPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.lastPrice = 0;\n\n                /**\n                 * TickField avgPrice.\n                 * @member {number} avgPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.avgPrice = 0;\n\n                /**\n                 * TickField totalBidVol.\n                 * @member {number|Long} totalBidVol\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.totalBidVol = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField totalAskVol.\n                 * @member {number|Long} totalAskVol\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.totalAskVol = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField weightedAvgBidPrice.\n                 * @member {number} weightedAvgBidPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.weightedAvgBidPrice = 0;\n\n                /**\n                 * TickField weightedAvgAskPrice.\n                 * @member {number} weightedAvgAskPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.weightedAvgAskPrice = 0;\n\n                /**\n                 * TickField iopv.\n                 * @member {number} iopv\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.iopv = 0;\n\n                /**\n                 * TickField yieldToMaturity.\n                 * @member {number} yieldToMaturity\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.yieldToMaturity = 0;\n\n                /**\n                 * TickField volumeDelta.\n                 * @member {number|Long} volumeDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.volumeDelta = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField volume.\n                 * @member {number|Long} volume\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField turnover.\n                 * @member {number} turnover\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.turnover = 0;\n\n                /**\n                 * TickField turnoverDelta.\n                 * @member {number} turnoverDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.turnoverDelta = 0;\n\n                /**\n                 * TickField numTrades.\n                 * @member {number|Long} numTrades\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.numTrades = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField numTradesDelta.\n                 * @member {number|Long} numTradesDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.numTradesDelta = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField openInterest.\n                 * @member {number} openInterest\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.openInterest = 0;\n\n                /**\n                 * TickField openInterestDelta.\n                 * @member {number} openInterestDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.openInterestDelta = 0;\n\n                /**\n                 * TickField preOpenInterest.\n                 * @member {number} preOpenInterest\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.preOpenInterest = 0;\n\n                /**\n                 * TickField preClosePrice.\n                 * @member {number} preClosePrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.preClosePrice = 0;\n\n                /**\n                 * TickField settlePrice.\n                 * @member {number} settlePrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.settlePrice = 0;\n\n                /**\n                 * TickField preSettlePrice.\n                 * @member {number} preSettlePrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.preSettlePrice = 0;\n\n                /**\n                 * TickField openPrice.\n                 * @member {number} openPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.openPrice = 0;\n\n                /**\n                 * TickField highPrice.\n                 * @member {number} highPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.highPrice = 0;\n\n                /**\n                 * TickField lowPrice.\n                 * @member {number} lowPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.lowPrice = 0;\n\n                /**\n                 * TickField upperLimit.\n                 * @member {number} upperLimit\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.upperLimit = 0;\n\n                /**\n                 * TickField lowerLimit.\n                 * @member {number} lowerLimit\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.lowerLimit = 0;\n\n                /**\n                 * TickField bidPrice.\n                 * @member {Array.<number>} bidPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.bidPrice = $util.emptyArray;\n\n                /**\n                 * TickField askPrice.\n                 * @member {Array.<number>} askPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.askPrice = $util.emptyArray;\n\n                /**\n                 * TickField bidVolume.\n                 * @member {Array.<number>} bidVolume\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.bidVolume = $util.emptyArray;\n\n                /**\n                 * TickField askVolume.\n                 * @member {Array.<number>} askVolume\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.askVolume = $util.emptyArray;\n\n                /**\n                 * Creates a new TickField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITickField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.TickField} TickField instance\n                 */\n                TickField.create = function create(properties) {\n                    return new TickField(properties);\n                };\n\n                /**\n                 * Encodes the specified TickField message. Does not implicitly {@link xyz.redtorch.pb.TickField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITickField} message TickField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TickField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.unifiedSymbol);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayId);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.tradingDay);\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.actionDay);\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.actionTime);\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.actionTimestamp);\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.status);\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.lastPrice);\n                    if (message.avgPrice != null && message.hasOwnProperty(\"avgPrice\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.avgPrice);\n                    if (message.totalBidVol != null && message.hasOwnProperty(\"totalBidVol\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.totalBidVol);\n                    if (message.totalAskVol != null && message.hasOwnProperty(\"totalAskVol\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.totalAskVol);\n                    if (message.weightedAvgBidPrice != null && message.hasOwnProperty(\"weightedAvgBidPrice\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.weightedAvgBidPrice);\n                    if (message.weightedAvgAskPrice != null && message.hasOwnProperty(\"weightedAvgAskPrice\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.weightedAvgAskPrice);\n                    if (message.iopv != null && message.hasOwnProperty(\"iopv\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.iopv);\n                    if (message.yieldToMaturity != null && message.hasOwnProperty(\"yieldToMaturity\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.yieldToMaturity);\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.volumeDelta);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).fixed64(message.volume);\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.turnover);\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.turnoverDelta);\n                    if (message.numTrades != null && message.hasOwnProperty(\"numTrades\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).fixed64(message.numTrades);\n                    if (message.numTradesDelta != null && message.hasOwnProperty(\"numTradesDelta\"))\n                        writer.uint32(/* id 21, wireType 1 =*/169).fixed64(message.numTradesDelta);\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        writer.uint32(/* id 22, wireType 1 =*/177).double(message.openInterest);\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        writer.uint32(/* id 23, wireType 1 =*/185).double(message.openInterestDelta);\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        writer.uint32(/* id 24, wireType 1 =*/193).double(message.preOpenInterest);\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        writer.uint32(/* id 25, wireType 1 =*/201).double(message.preClosePrice);\n                    if (message.settlePrice != null && message.hasOwnProperty(\"settlePrice\"))\n                        writer.uint32(/* id 26, wireType 1 =*/209).double(message.settlePrice);\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        writer.uint32(/* id 27, wireType 1 =*/217).double(message.preSettlePrice);\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        writer.uint32(/* id 28, wireType 1 =*/225).double(message.openPrice);\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        writer.uint32(/* id 29, wireType 1 =*/233).double(message.highPrice);\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        writer.uint32(/* id 30, wireType 1 =*/241).double(message.lowPrice);\n                    if (message.upperLimit != null && message.hasOwnProperty(\"upperLimit\"))\n                        writer.uint32(/* id 31, wireType 1 =*/249).double(message.upperLimit);\n                    if (message.lowerLimit != null && message.hasOwnProperty(\"lowerLimit\"))\n                        writer.uint32(/* id 32, wireType 1 =*/257).double(message.lowerLimit);\n                    if (message.bidPrice != null && message.bidPrice.length) {\n                        writer.uint32(/* id 33, wireType 2 =*/266).fork();\n                        for (var i = 0; i < message.bidPrice.length; ++i)\n                            writer.double(message.bidPrice[i]);\n                        writer.ldelim();\n                    }\n                    if (message.askPrice != null && message.askPrice.length) {\n                        writer.uint32(/* id 34, wireType 2 =*/274).fork();\n                        for (var i = 0; i < message.askPrice.length; ++i)\n                            writer.double(message.askPrice[i]);\n                        writer.ldelim();\n                    }\n                    if (message.bidVolume != null && message.bidVolume.length) {\n                        writer.uint32(/* id 35, wireType 2 =*/282).fork();\n                        for (var i = 0; i < message.bidVolume.length; ++i)\n                            writer.fixed32(message.bidVolume[i]);\n                        writer.ldelim();\n                    }\n                    if (message.askVolume != null && message.askVolume.length) {\n                        writer.uint32(/* id 36, wireType 2 =*/290).fork();\n                        for (var i = 0; i < message.askVolume.length; ++i)\n                            writer.fixed32(message.askVolume[i]);\n                        writer.ldelim();\n                    }\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TickField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.TickField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITickField} message TickField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TickField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TickField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.TickField} TickField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TickField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.TickField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        case 2:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 3:\n                            message.tradingDay = reader.string();\n                            break;\n                        case 4:\n                            message.actionDay = reader.string();\n                            break;\n                        case 5:\n                            message.actionTime = reader.string();\n                            break;\n                        case 6:\n                            message.actionTimestamp = reader.fixed64();\n                            break;\n                        case 7:\n                            message.status = reader.fixed32();\n                            break;\n                        case 8:\n                            message.lastPrice = reader.double();\n                            break;\n                        case 9:\n                            message.avgPrice = reader.double();\n                            break;\n                        case 10:\n                            message.totalBidVol = reader.fixed64();\n                            break;\n                        case 11:\n                            message.totalAskVol = reader.fixed64();\n                            break;\n                        case 12:\n                            message.weightedAvgBidPrice = reader.double();\n                            break;\n                        case 13:\n                            message.weightedAvgAskPrice = reader.double();\n                            break;\n                        case 14:\n                            message.iopv = reader.double();\n                            break;\n                        case 15:\n                            message.yieldToMaturity = reader.double();\n                            break;\n                        case 16:\n                            message.volumeDelta = reader.fixed64();\n                            break;\n                        case 17:\n                            message.volume = reader.fixed64();\n                            break;\n                        case 18:\n                            message.turnover = reader.double();\n                            break;\n                        case 19:\n                            message.turnoverDelta = reader.double();\n                            break;\n                        case 20:\n                            message.numTrades = reader.fixed64();\n                            break;\n                        case 21:\n                            message.numTradesDelta = reader.fixed64();\n                            break;\n                        case 22:\n                            message.openInterest = reader.double();\n                            break;\n                        case 23:\n                            message.openInterestDelta = reader.double();\n                            break;\n                        case 24:\n                            message.preOpenInterest = reader.double();\n                            break;\n                        case 25:\n                            message.preClosePrice = reader.double();\n                            break;\n                        case 26:\n                            message.settlePrice = reader.double();\n                            break;\n                        case 27:\n                            message.preSettlePrice = reader.double();\n                            break;\n                        case 28:\n                            message.openPrice = reader.double();\n                            break;\n                        case 29:\n                            message.highPrice = reader.double();\n                            break;\n                        case 30:\n                            message.lowPrice = reader.double();\n                            break;\n                        case 31:\n                            message.upperLimit = reader.double();\n                            break;\n                        case 32:\n                            message.lowerLimit = reader.double();\n                            break;\n                        case 33:\n                            if (!(message.bidPrice && message.bidPrice.length))\n                                message.bidPrice = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.bidPrice.push(reader.double());\n                            } else\n                                message.bidPrice.push(reader.double());\n                            break;\n                        case 34:\n                            if (!(message.askPrice && message.askPrice.length))\n                                message.askPrice = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.askPrice.push(reader.double());\n                            } else\n                                message.askPrice.push(reader.double());\n                            break;\n                        case 35:\n                            if (!(message.bidVolume && message.bidVolume.length))\n                                message.bidVolume = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.bidVolume.push(reader.fixed32());\n                            } else\n                                message.bidVolume.push(reader.fixed32());\n                            break;\n                        case 36:\n                            if (!(message.askVolume && message.askVolume.length))\n                                message.askVolume = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.askVolume.push(reader.fixed32());\n                            } else\n                                message.askVolume.push(reader.fixed32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TickField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.TickField} TickField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TickField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TickField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TickField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isString(message.tradingDay))\n                            return \"tradingDay: string expected\";\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        if (!$util.isString(message.actionDay))\n                            return \"actionDay: string expected\";\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        if (!$util.isString(message.actionTime))\n                            return \"actionTime: string expected\";\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (!$util.isInteger(message.actionTimestamp) && !(message.actionTimestamp && $util.isInteger(message.actionTimestamp.low) && $util.isInteger(message.actionTimestamp.high)))\n                            return \"actionTimestamp: integer|Long expected\";\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        if (!$util.isInteger(message.status))\n                            return \"status: integer expected\";\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        if (typeof message.lastPrice !== \"number\")\n                            return \"lastPrice: number expected\";\n                    if (message.avgPrice != null && message.hasOwnProperty(\"avgPrice\"))\n                        if (typeof message.avgPrice !== \"number\")\n                            return \"avgPrice: number expected\";\n                    if (message.totalBidVol != null && message.hasOwnProperty(\"totalBidVol\"))\n                        if (!$util.isInteger(message.totalBidVol) && !(message.totalBidVol && $util.isInteger(message.totalBidVol.low) && $util.isInteger(message.totalBidVol.high)))\n                            return \"totalBidVol: integer|Long expected\";\n                    if (message.totalAskVol != null && message.hasOwnProperty(\"totalAskVol\"))\n                        if (!$util.isInteger(message.totalAskVol) && !(message.totalAskVol && $util.isInteger(message.totalAskVol.low) && $util.isInteger(message.totalAskVol.high)))\n                            return \"totalAskVol: integer|Long expected\";\n                    if (message.weightedAvgBidPrice != null && message.hasOwnProperty(\"weightedAvgBidPrice\"))\n                        if (typeof message.weightedAvgBidPrice !== \"number\")\n                            return \"weightedAvgBidPrice: number expected\";\n                    if (message.weightedAvgAskPrice != null && message.hasOwnProperty(\"weightedAvgAskPrice\"))\n                        if (typeof message.weightedAvgAskPrice !== \"number\")\n                            return \"weightedAvgAskPrice: number expected\";\n                    if (message.iopv != null && message.hasOwnProperty(\"iopv\"))\n                        if (typeof message.iopv !== \"number\")\n                            return \"iopv: number expected\";\n                    if (message.yieldToMaturity != null && message.hasOwnProperty(\"yieldToMaturity\"))\n                        if (typeof message.yieldToMaturity !== \"number\")\n                            return \"yieldToMaturity: number expected\";\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (!$util.isInteger(message.volumeDelta) && !(message.volumeDelta && $util.isInteger(message.volumeDelta.low) && $util.isInteger(message.volumeDelta.high)))\n                            return \"volumeDelta: integer|Long expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))\n                            return \"volume: integer|Long expected\";\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        if (typeof message.turnover !== \"number\")\n                            return \"turnover: number expected\";\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        if (typeof message.turnoverDelta !== \"number\")\n                            return \"turnoverDelta: number expected\";\n                    if (message.numTrades != null && message.hasOwnProperty(\"numTrades\"))\n                        if (!$util.isInteger(message.numTrades) && !(message.numTrades && $util.isInteger(message.numTrades.low) && $util.isInteger(message.numTrades.high)))\n                            return \"numTrades: integer|Long expected\";\n                    if (message.numTradesDelta != null && message.hasOwnProperty(\"numTradesDelta\"))\n                        if (!$util.isInteger(message.numTradesDelta) && !(message.numTradesDelta && $util.isInteger(message.numTradesDelta.low) && $util.isInteger(message.numTradesDelta.high)))\n                            return \"numTradesDelta: integer|Long expected\";\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        if (typeof message.openInterest !== \"number\")\n                            return \"openInterest: number expected\";\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        if (typeof message.openInterestDelta !== \"number\")\n                            return \"openInterestDelta: number expected\";\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        if (typeof message.preOpenInterest !== \"number\")\n                            return \"preOpenInterest: number expected\";\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        if (typeof message.preClosePrice !== \"number\")\n                            return \"preClosePrice: number expected\";\n                    if (message.settlePrice != null && message.hasOwnProperty(\"settlePrice\"))\n                        if (typeof message.settlePrice !== \"number\")\n                            return \"settlePrice: number expected\";\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        if (typeof message.preSettlePrice !== \"number\")\n                            return \"preSettlePrice: number expected\";\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        if (typeof message.openPrice !== \"number\")\n                            return \"openPrice: number expected\";\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        if (typeof message.highPrice !== \"number\")\n                            return \"highPrice: number expected\";\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        if (typeof message.lowPrice !== \"number\")\n                            return \"lowPrice: number expected\";\n                    if (message.upperLimit != null && message.hasOwnProperty(\"upperLimit\"))\n                        if (typeof message.upperLimit !== \"number\")\n                            return \"upperLimit: number expected\";\n                    if (message.lowerLimit != null && message.hasOwnProperty(\"lowerLimit\"))\n                        if (typeof message.lowerLimit !== \"number\")\n                            return \"lowerLimit: number expected\";\n                    if (message.bidPrice != null && message.hasOwnProperty(\"bidPrice\")) {\n                        if (!Array.isArray(message.bidPrice))\n                            return \"bidPrice: array expected\";\n                        for (var i = 0; i < message.bidPrice.length; ++i)\n                            if (typeof message.bidPrice[i] !== \"number\")\n                                return \"bidPrice: number[] expected\";\n                    }\n                    if (message.askPrice != null && message.hasOwnProperty(\"askPrice\")) {\n                        if (!Array.isArray(message.askPrice))\n                            return \"askPrice: array expected\";\n                        for (var i = 0; i < message.askPrice.length; ++i)\n                            if (typeof message.askPrice[i] !== \"number\")\n                                return \"askPrice: number[] expected\";\n                    }\n                    if (message.bidVolume != null && message.hasOwnProperty(\"bidVolume\")) {\n                        if (!Array.isArray(message.bidVolume))\n                            return \"bidVolume: array expected\";\n                        for (var i = 0; i < message.bidVolume.length; ++i)\n                            if (!$util.isInteger(message.bidVolume[i]))\n                                return \"bidVolume: integer[] expected\";\n                    }\n                    if (message.askVolume != null && message.hasOwnProperty(\"askVolume\")) {\n                        if (!Array.isArray(message.askVolume))\n                            return \"askVolume: array expected\";\n                        for (var i = 0; i < message.askVolume.length; ++i)\n                            if (!$util.isInteger(message.askVolume[i]))\n                                return \"askVolume: integer[] expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TickField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.TickField} TickField\n                 */\n                TickField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.TickField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.TickField();\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.tradingDay != null)\n                        message.tradingDay = String(object.tradingDay);\n                    if (object.actionDay != null)\n                        message.actionDay = String(object.actionDay);\n                    if (object.actionTime != null)\n                        message.actionTime = String(object.actionTime);\n                    if (object.actionTimestamp != null)\n                        if ($util.Long)\n                            (message.actionTimestamp = $util.Long.fromValue(object.actionTimestamp)).unsigned = false;\n                        else if (typeof object.actionTimestamp === \"string\")\n                            message.actionTimestamp = parseInt(object.actionTimestamp, 10);\n                        else if (typeof object.actionTimestamp === \"number\")\n                            message.actionTimestamp = object.actionTimestamp;\n                        else if (typeof object.actionTimestamp === \"object\")\n                            message.actionTimestamp = new $util.LongBits(object.actionTimestamp.low >>> 0, object.actionTimestamp.high >>> 0).toNumber();\n                    if (object.status != null)\n                        message.status = object.status >>> 0;\n                    if (object.lastPrice != null)\n                        message.lastPrice = Number(object.lastPrice);\n                    if (object.avgPrice != null)\n                        message.avgPrice = Number(object.avgPrice);\n                    if (object.totalBidVol != null)\n                        if ($util.Long)\n                            (message.totalBidVol = $util.Long.fromValue(object.totalBidVol)).unsigned = false;\n                        else if (typeof object.totalBidVol === \"string\")\n                            message.totalBidVol = parseInt(object.totalBidVol, 10);\n                        else if (typeof object.totalBidVol === \"number\")\n                            message.totalBidVol = object.totalBidVol;\n                        else if (typeof object.totalBidVol === \"object\")\n                            message.totalBidVol = new $util.LongBits(object.totalBidVol.low >>> 0, object.totalBidVol.high >>> 0).toNumber();\n                    if (object.totalAskVol != null)\n                        if ($util.Long)\n                            (message.totalAskVol = $util.Long.fromValue(object.totalAskVol)).unsigned = false;\n                        else if (typeof object.totalAskVol === \"string\")\n                            message.totalAskVol = parseInt(object.totalAskVol, 10);\n                        else if (typeof object.totalAskVol === \"number\")\n                            message.totalAskVol = object.totalAskVol;\n                        else if (typeof object.totalAskVol === \"object\")\n                            message.totalAskVol = new $util.LongBits(object.totalAskVol.low >>> 0, object.totalAskVol.high >>> 0).toNumber();\n                    if (object.weightedAvgBidPrice != null)\n                        message.weightedAvgBidPrice = Number(object.weightedAvgBidPrice);\n                    if (object.weightedAvgAskPrice != null)\n                        message.weightedAvgAskPrice = Number(object.weightedAvgAskPrice);\n                    if (object.iopv != null)\n                        message.iopv = Number(object.iopv);\n                    if (object.yieldToMaturity != null)\n                        message.yieldToMaturity = Number(object.yieldToMaturity);\n                    if (object.volumeDelta != null)\n                        if ($util.Long)\n                            (message.volumeDelta = $util.Long.fromValue(object.volumeDelta)).unsigned = false;\n                        else if (typeof object.volumeDelta === \"string\")\n                            message.volumeDelta = parseInt(object.volumeDelta, 10);\n                        else if (typeof object.volumeDelta === \"number\")\n                            message.volumeDelta = object.volumeDelta;\n                        else if (typeof object.volumeDelta === \"object\")\n                            message.volumeDelta = new $util.LongBits(object.volumeDelta.low >>> 0, object.volumeDelta.high >>> 0).toNumber();\n                    if (object.volume != null)\n                        if ($util.Long)\n                            (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;\n                        else if (typeof object.volume === \"string\")\n                            message.volume = parseInt(object.volume, 10);\n                        else if (typeof object.volume === \"number\")\n                            message.volume = object.volume;\n                        else if (typeof object.volume === \"object\")\n                            message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();\n                    if (object.turnover != null)\n                        message.turnover = Number(object.turnover);\n                    if (object.turnoverDelta != null)\n                        message.turnoverDelta = Number(object.turnoverDelta);\n                    if (object.numTrades != null)\n                        if ($util.Long)\n                            (message.numTrades = $util.Long.fromValue(object.numTrades)).unsigned = false;\n                        else if (typeof object.numTrades === \"string\")\n                            message.numTrades = parseInt(object.numTrades, 10);\n                        else if (typeof object.numTrades === \"number\")\n                            message.numTrades = object.numTrades;\n                        else if (typeof object.numTrades === \"object\")\n                            message.numTrades = new $util.LongBits(object.numTrades.low >>> 0, object.numTrades.high >>> 0).toNumber();\n                    if (object.numTradesDelta != null)\n                        if ($util.Long)\n                            (message.numTradesDelta = $util.Long.fromValue(object.numTradesDelta)).unsigned = false;\n                        else if (typeof object.numTradesDelta === \"string\")\n                            message.numTradesDelta = parseInt(object.numTradesDelta, 10);\n                        else if (typeof object.numTradesDelta === \"number\")\n                            message.numTradesDelta = object.numTradesDelta;\n                        else if (typeof object.numTradesDelta === \"object\")\n                            message.numTradesDelta = new $util.LongBits(object.numTradesDelta.low >>> 0, object.numTradesDelta.high >>> 0).toNumber();\n                    if (object.openInterest != null)\n                        message.openInterest = Number(object.openInterest);\n                    if (object.openInterestDelta != null)\n                        message.openInterestDelta = Number(object.openInterestDelta);\n                    if (object.preOpenInterest != null)\n                        message.preOpenInterest = Number(object.preOpenInterest);\n                    if (object.preClosePrice != null)\n                        message.preClosePrice = Number(object.preClosePrice);\n                    if (object.settlePrice != null)\n                        message.settlePrice = Number(object.settlePrice);\n                    if (object.preSettlePrice != null)\n                        message.preSettlePrice = Number(object.preSettlePrice);\n                    if (object.openPrice != null)\n                        message.openPrice = Number(object.openPrice);\n                    if (object.highPrice != null)\n                        message.highPrice = Number(object.highPrice);\n                    if (object.lowPrice != null)\n                        message.lowPrice = Number(object.lowPrice);\n                    if (object.upperLimit != null)\n                        message.upperLimit = Number(object.upperLimit);\n                    if (object.lowerLimit != null)\n                        message.lowerLimit = Number(object.lowerLimit);\n                    if (object.bidPrice) {\n                        if (!Array.isArray(object.bidPrice))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.bidPrice: array expected\");\n                        message.bidPrice = [];\n                        for (var i = 0; i < object.bidPrice.length; ++i)\n                            message.bidPrice[i] = Number(object.bidPrice[i]);\n                    }\n                    if (object.askPrice) {\n                        if (!Array.isArray(object.askPrice))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.askPrice: array expected\");\n                        message.askPrice = [];\n                        for (var i = 0; i < object.askPrice.length; ++i)\n                            message.askPrice[i] = Number(object.askPrice[i]);\n                    }\n                    if (object.bidVolume) {\n                        if (!Array.isArray(object.bidVolume))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.bidVolume: array expected\");\n                        message.bidVolume = [];\n                        for (var i = 0; i < object.bidVolume.length; ++i)\n                            message.bidVolume[i] = object.bidVolume[i] >>> 0;\n                    }\n                    if (object.askVolume) {\n                        if (!Array.isArray(object.askVolume))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.askVolume: array expected\");\n                        message.askVolume = [];\n                        for (var i = 0; i < object.askVolume.length; ++i)\n                            message.askVolume[i] = object.askVolume[i] >>> 0;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TickField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.TickField} message TickField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TickField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.bidPrice = [];\n                        object.askPrice = [];\n                        object.bidVolume = [];\n                        object.askVolume = [];\n                    }\n                    if (options.defaults) {\n                        object.unifiedSymbol = \"\";\n                        object.gatewayId = \"\";\n                        object.tradingDay = \"\";\n                        object.actionDay = \"\";\n                        object.actionTime = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.actionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.actionTimestamp = options.longs === String ? \"0\" : 0;\n                        object.status = 0;\n                        object.lastPrice = 0;\n                        object.avgPrice = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.totalBidVol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.totalBidVol = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.totalAskVol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.totalAskVol = options.longs === String ? \"0\" : 0;\n                        object.weightedAvgBidPrice = 0;\n                        object.weightedAvgAskPrice = 0;\n                        object.iopv = 0;\n                        object.yieldToMaturity = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volumeDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volumeDelta = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volume = options.longs === String ? \"0\" : 0;\n                        object.turnover = 0;\n                        object.turnoverDelta = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.numTrades = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.numTrades = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.numTradesDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.numTradesDelta = options.longs === String ? \"0\" : 0;\n                        object.openInterest = 0;\n                        object.openInterestDelta = 0;\n                        object.preOpenInterest = 0;\n                        object.preClosePrice = 0;\n                        object.settlePrice = 0;\n                        object.preSettlePrice = 0;\n                        object.openPrice = 0;\n                        object.highPrice = 0;\n                        object.lowPrice = 0;\n                        object.upperLimit = 0;\n                        object.lowerLimit = 0;\n                    }\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        object.actionDay = message.actionDay;\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        object.actionTime = message.actionTime;\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (typeof message.actionTimestamp === \"number\")\n                            object.actionTimestamp = options.longs === String ? String(message.actionTimestamp) : message.actionTimestamp;\n                        else\n                            object.actionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.actionTimestamp) : options.longs === Number ? new $util.LongBits(message.actionTimestamp.low >>> 0, message.actionTimestamp.high >>> 0).toNumber() : message.actionTimestamp;\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = message.status;\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        object.lastPrice = options.json && !isFinite(message.lastPrice) ? String(message.lastPrice) : message.lastPrice;\n                    if (message.avgPrice != null && message.hasOwnProperty(\"avgPrice\"))\n                        object.avgPrice = options.json && !isFinite(message.avgPrice) ? String(message.avgPrice) : message.avgPrice;\n                    if (message.totalBidVol != null && message.hasOwnProperty(\"totalBidVol\"))\n                        if (typeof message.totalBidVol === \"number\")\n                            object.totalBidVol = options.longs === String ? String(message.totalBidVol) : message.totalBidVol;\n                        else\n                            object.totalBidVol = options.longs === String ? $util.Long.prototype.toString.call(message.totalBidVol) : options.longs === Number ? new $util.LongBits(message.totalBidVol.low >>> 0, message.totalBidVol.high >>> 0).toNumber() : message.totalBidVol;\n                    if (message.totalAskVol != null && message.hasOwnProperty(\"totalAskVol\"))\n                        if (typeof message.totalAskVol === \"number\")\n                            object.totalAskVol = options.longs === String ? String(message.totalAskVol) : message.totalAskVol;\n                        else\n                            object.totalAskVol = options.longs === String ? $util.Long.prototype.toString.call(message.totalAskVol) : options.longs === Number ? new $util.LongBits(message.totalAskVol.low >>> 0, message.totalAskVol.high >>> 0).toNumber() : message.totalAskVol;\n                    if (message.weightedAvgBidPrice != null && message.hasOwnProperty(\"weightedAvgBidPrice\"))\n                        object.weightedAvgBidPrice = options.json && !isFinite(message.weightedAvgBidPrice) ? String(message.weightedAvgBidPrice) : message.weightedAvgBidPrice;\n                    if (message.weightedAvgAskPrice != null && message.hasOwnProperty(\"weightedAvgAskPrice\"))\n                        object.weightedAvgAskPrice = options.json && !isFinite(message.weightedAvgAskPrice) ? String(message.weightedAvgAskPrice) : message.weightedAvgAskPrice;\n                    if (message.iopv != null && message.hasOwnProperty(\"iopv\"))\n                        object.iopv = options.json && !isFinite(message.iopv) ? String(message.iopv) : message.iopv;\n                    if (message.yieldToMaturity != null && message.hasOwnProperty(\"yieldToMaturity\"))\n                        object.yieldToMaturity = options.json && !isFinite(message.yieldToMaturity) ? String(message.yieldToMaturity) : message.yieldToMaturity;\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (typeof message.volumeDelta === \"number\")\n                            object.volumeDelta = options.longs === String ? String(message.volumeDelta) : message.volumeDelta;\n                        else\n                            object.volumeDelta = options.longs === String ? $util.Long.prototype.toString.call(message.volumeDelta) : options.longs === Number ? new $util.LongBits(message.volumeDelta.low >>> 0, message.volumeDelta.high >>> 0).toNumber() : message.volumeDelta;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (typeof message.volume === \"number\")\n                            object.volume = options.longs === String ? String(message.volume) : message.volume;\n                        else\n                            object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        object.turnover = options.json && !isFinite(message.turnover) ? String(message.turnover) : message.turnover;\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        object.turnoverDelta = options.json && !isFinite(message.turnoverDelta) ? String(message.turnoverDelta) : message.turnoverDelta;\n                    if (message.numTrades != null && message.hasOwnProperty(\"numTrades\"))\n                        if (typeof message.numTrades === \"number\")\n                            object.numTrades = options.longs === String ? String(message.numTrades) : message.numTrades;\n                        else\n                            object.numTrades = options.longs === String ? $util.Long.prototype.toString.call(message.numTrades) : options.longs === Number ? new $util.LongBits(message.numTrades.low >>> 0, message.numTrades.high >>> 0).toNumber() : message.numTrades;\n                    if (message.numTradesDelta != null && message.hasOwnProperty(\"numTradesDelta\"))\n                        if (typeof message.numTradesDelta === \"number\")\n                            object.numTradesDelta = options.longs === String ? String(message.numTradesDelta) : message.numTradesDelta;\n                        else\n                            object.numTradesDelta = options.longs === String ? $util.Long.prototype.toString.call(message.numTradesDelta) : options.longs === Number ? new $util.LongBits(message.numTradesDelta.low >>> 0, message.numTradesDelta.high >>> 0).toNumber() : message.numTradesDelta;\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        object.openInterest = options.json && !isFinite(message.openInterest) ? String(message.openInterest) : message.openInterest;\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        object.openInterestDelta = options.json && !isFinite(message.openInterestDelta) ? String(message.openInterestDelta) : message.openInterestDelta;\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        object.preOpenInterest = options.json && !isFinite(message.preOpenInterest) ? String(message.preOpenInterest) : message.preOpenInterest;\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        object.preClosePrice = options.json && !isFinite(message.preClosePrice) ? String(message.preClosePrice) : message.preClosePrice;\n                    if (message.settlePrice != null && message.hasOwnProperty(\"settlePrice\"))\n                        object.settlePrice = options.json && !isFinite(message.settlePrice) ? String(message.settlePrice) : message.settlePrice;\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        object.preSettlePrice = options.json && !isFinite(message.preSettlePrice) ? String(message.preSettlePrice) : message.preSettlePrice;\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        object.highPrice = options.json && !isFinite(message.highPrice) ? String(message.highPrice) : message.highPrice;\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        object.lowPrice = options.json && !isFinite(message.lowPrice) ? String(message.lowPrice) : message.lowPrice;\n                    if (message.upperLimit != null && message.hasOwnProperty(\"upperLimit\"))\n                        object.upperLimit = options.json && !isFinite(message.upperLimit) ? String(message.upperLimit) : message.upperLimit;\n                    if (message.lowerLimit != null && message.hasOwnProperty(\"lowerLimit\"))\n                        object.lowerLimit = options.json && !isFinite(message.lowerLimit) ? String(message.lowerLimit) : message.lowerLimit;\n                    if (message.bidPrice && message.bidPrice.length) {\n                        object.bidPrice = [];\n                        for (var j = 0; j < message.bidPrice.length; ++j)\n                            object.bidPrice[j] = options.json && !isFinite(message.bidPrice[j]) ? String(message.bidPrice[j]) : message.bidPrice[j];\n                    }\n                    if (message.askPrice && message.askPrice.length) {\n                        object.askPrice = [];\n                        for (var j = 0; j < message.askPrice.length; ++j)\n                            object.askPrice[j] = options.json && !isFinite(message.askPrice[j]) ? String(message.askPrice[j]) : message.askPrice[j];\n                    }\n                    if (message.bidVolume && message.bidVolume.length) {\n                        object.bidVolume = [];\n                        for (var j = 0; j < message.bidVolume.length; ++j)\n                            object.bidVolume[j] = message.bidVolume[j];\n                    }\n                    if (message.askVolume && message.askVolume.length) {\n                        object.askVolume = [];\n                        for (var j = 0; j < message.askVolume.length; ++j)\n                            object.askVolume[j] = message.askVolume[j];\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this TickField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TickField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TickField;\n            })();\n\n            pb.BarField = (function() {\n\n                /**\n                 * Properties of a BarField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IBarField\n                 * @property {string|null} [unifiedSymbol] BarField unifiedSymbol\n                 * @property {string|null} [gatewayId] BarField gatewayId\n                 * @property {string|null} [tradingDay] BarField tradingDay\n                 * @property {string|null} [actionDay] BarField actionDay\n                 * @property {string|null} [actionTime] BarField actionTime\n                 * @property {number|Long|null} [actionTimestamp] BarField actionTimestamp\n                 * @property {number|null} [openPrice] BarField openPrice\n                 * @property {number|null} [highPrice] BarField highPrice\n                 * @property {number|null} [lowPrice] BarField lowPrice\n                 * @property {number|null} [closePrice] BarField closePrice\n                 * @property {number|null} [openInterest] BarField openInterest\n                 * @property {number|null} [openInterestDelta] BarField openInterestDelta\n                 * @property {number|Long|null} [volume] BarField volume\n                 * @property {number|Long|null} [volumeDelta] BarField volumeDelta\n                 * @property {number|null} [turnover] BarField turnover\n                 * @property {number|null} [turnoverDelta] BarField turnoverDelta\n                 * @property {number|Long|null} [numTrades] BarField numTrades\n                 * @property {number|Long|null} [numTradesDelta] BarField numTradesDelta\n                 * @property {number|null} [preOpenInterest] BarField preOpenInterest\n                 * @property {number|null} [preClosePrice] BarField preClosePrice\n                 * @property {number|null} [preSettlePrice] BarField preSettlePrice\n                 */\n\n                /**\n                 * Constructs a new BarField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a BarField.\n                 * @implements IBarField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IBarField=} [properties] Properties to set\n                 */\n                function BarField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * BarField unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * BarField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.gatewayId = \"\";\n\n                /**\n                 * BarField tradingDay.\n                 * @member {string} tradingDay\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.tradingDay = \"\";\n\n                /**\n                 * BarField actionDay.\n                 * @member {string} actionDay\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.actionDay = \"\";\n\n                /**\n                 * BarField actionTime.\n                 * @member {string} actionTime\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.actionTime = \"\";\n\n                /**\n                 * BarField actionTimestamp.\n                 * @member {number|Long} actionTimestamp\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.actionTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField openPrice.\n                 * @member {number} openPrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.openPrice = 0;\n\n                /**\n                 * BarField highPrice.\n                 * @member {number} highPrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.highPrice = 0;\n\n                /**\n                 * BarField lowPrice.\n                 * @member {number} lowPrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.lowPrice = 0;\n\n                /**\n                 * BarField closePrice.\n                 * @member {number} closePrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.closePrice = 0;\n\n                /**\n                 * BarField openInterest.\n                 * @member {number} openInterest\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.openInterest = 0;\n\n                /**\n                 * BarField openInterestDelta.\n                 * @member {number} openInterestDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.openInterestDelta = 0;\n\n                /**\n                 * BarField volume.\n                 * @member {number|Long} volume\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField volumeDelta.\n                 * @member {number|Long} volumeDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.volumeDelta = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField turnover.\n                 * @member {number} turnover\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.turnover = 0;\n\n                /**\n                 * BarField turnoverDelta.\n                 * @member {number} turnoverDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.turnoverDelta = 0;\n\n                /**\n                 * BarField numTrades.\n                 * @member {number|Long} numTrades\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.numTrades = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField numTradesDelta.\n                 * @member {number|Long} numTradesDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.numTradesDelta = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField preOpenInterest.\n                 * @member {number} preOpenInterest\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.preOpenInterest = 0;\n\n                /**\n                 * BarField preClosePrice.\n                 * @member {number} preClosePrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.preClosePrice = 0;\n\n                /**\n                 * BarField preSettlePrice.\n                 * @member {number} preSettlePrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.preSettlePrice = 0;\n\n                /**\n                 * Creates a new BarField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.IBarField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.BarField} BarField instance\n                 */\n                BarField.create = function create(properties) {\n                    return new BarField(properties);\n                };\n\n                /**\n                 * Encodes the specified BarField message. Does not implicitly {@link xyz.redtorch.pb.BarField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.IBarField} message BarField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                BarField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.unifiedSymbol);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayId);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.tradingDay);\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.actionDay);\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.actionTime);\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.actionTimestamp);\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.openPrice);\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.highPrice);\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.lowPrice);\n                    if (message.closePrice != null && message.hasOwnProperty(\"closePrice\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.closePrice);\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.openInterest);\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.openInterestDelta);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).fixed64(message.volume);\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.volumeDelta);\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.turnover);\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.turnoverDelta);\n                    if (message.numTrades != null && message.hasOwnProperty(\"numTrades\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).fixed64(message.numTrades);\n                    if (message.numTradesDelta != null && message.hasOwnProperty(\"numTradesDelta\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).fixed64(message.numTradesDelta);\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.preOpenInterest);\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.preClosePrice);\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        writer.uint32(/* id 21, wireType 1 =*/169).double(message.preSettlePrice);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified BarField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.BarField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.IBarField} message BarField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                BarField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a BarField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.BarField} BarField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                BarField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.BarField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        case 2:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 3:\n                            message.tradingDay = reader.string();\n                            break;\n                        case 4:\n                            message.actionDay = reader.string();\n                            break;\n                        case 5:\n                            message.actionTime = reader.string();\n                            break;\n                        case 6:\n                            message.actionTimestamp = reader.fixed64();\n                            break;\n                        case 7:\n                            message.openPrice = reader.double();\n                            break;\n                        case 8:\n                            message.highPrice = reader.double();\n                            break;\n                        case 9:\n                            message.lowPrice = reader.double();\n                            break;\n                        case 10:\n                            message.closePrice = reader.double();\n                            break;\n                        case 11:\n                            message.openInterest = reader.double();\n                            break;\n                        case 12:\n                            message.openInterestDelta = reader.double();\n                            break;\n                        case 13:\n                            message.volume = reader.fixed64();\n                            break;\n                        case 14:\n                            message.volumeDelta = reader.fixed64();\n                            break;\n                        case 15:\n                            message.turnover = reader.double();\n                            break;\n                        case 16:\n                            message.turnoverDelta = reader.double();\n                            break;\n                        case 17:\n                            message.numTrades = reader.fixed64();\n                            break;\n                        case 18:\n                            message.numTradesDelta = reader.fixed64();\n                            break;\n                        case 19:\n                            message.preOpenInterest = reader.double();\n                            break;\n                        case 20:\n                            message.preClosePrice = reader.double();\n                            break;\n                        case 21:\n                            message.preSettlePrice = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a BarField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.BarField} BarField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                BarField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a BarField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                BarField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isString(message.tradingDay))\n                            return \"tradingDay: string expected\";\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        if (!$util.isString(message.actionDay))\n                            return \"actionDay: string expected\";\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        if (!$util.isString(message.actionTime))\n                            return \"actionTime: string expected\";\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (!$util.isInteger(message.actionTimestamp) && !(message.actionTimestamp && $util.isInteger(message.actionTimestamp.low) && $util.isInteger(message.actionTimestamp.high)))\n                            return \"actionTimestamp: integer|Long expected\";\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        if (typeof message.openPrice !== \"number\")\n                            return \"openPrice: number expected\";\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        if (typeof message.highPrice !== \"number\")\n                            return \"highPrice: number expected\";\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        if (typeof message.lowPrice !== \"number\")\n                            return \"lowPrice: number expected\";\n                    if (message.closePrice != null && message.hasOwnProperty(\"closePrice\"))\n                        if (typeof message.closePrice !== \"number\")\n                            return \"closePrice: number expected\";\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        if (typeof message.openInterest !== \"number\")\n                            return \"openInterest: number expected\";\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        if (typeof message.openInterestDelta !== \"number\")\n                            return \"openInterestDelta: number expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))\n                            return \"volume: integer|Long expected\";\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (!$util.isInteger(message.volumeDelta) && !(message.volumeDelta && $util.isInteger(message.volumeDelta.low) && $util.isInteger(message.volumeDelta.high)))\n                            return \"volumeDelta: integer|Long expected\";\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        if (typeof message.turnover !== \"number\")\n                            return \"turnover: number expected\";\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        if (typeof message.turnoverDelta !== \"number\")\n                            return \"turnoverDelta: number expected\";\n                    if (message.numTrades != null && message.hasOwnProperty(\"numTrades\"))\n                        if (!$util.isInteger(message.numTrades) && !(message.numTrades && $util.isInteger(message.numTrades.low) && $util.isInteger(message.numTrades.high)))\n                            return \"numTrades: integer|Long expected\";\n                    if (message.numTradesDelta != null && message.hasOwnProperty(\"numTradesDelta\"))\n                        if (!$util.isInteger(message.numTradesDelta) && !(message.numTradesDelta && $util.isInteger(message.numTradesDelta.low) && $util.isInteger(message.numTradesDelta.high)))\n                            return \"numTradesDelta: integer|Long expected\";\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        if (typeof message.preOpenInterest !== \"number\")\n                            return \"preOpenInterest: number expected\";\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        if (typeof message.preClosePrice !== \"number\")\n                            return \"preClosePrice: number expected\";\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        if (typeof message.preSettlePrice !== \"number\")\n                            return \"preSettlePrice: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a BarField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.BarField} BarField\n                 */\n                BarField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.BarField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.BarField();\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.tradingDay != null)\n                        message.tradingDay = String(object.tradingDay);\n                    if (object.actionDay != null)\n                        message.actionDay = String(object.actionDay);\n                    if (object.actionTime != null)\n                        message.actionTime = String(object.actionTime);\n                    if (object.actionTimestamp != null)\n                        if ($util.Long)\n                            (message.actionTimestamp = $util.Long.fromValue(object.actionTimestamp)).unsigned = false;\n                        else if (typeof object.actionTimestamp === \"string\")\n                            message.actionTimestamp = parseInt(object.actionTimestamp, 10);\n                        else if (typeof object.actionTimestamp === \"number\")\n                            message.actionTimestamp = object.actionTimestamp;\n                        else if (typeof object.actionTimestamp === \"object\")\n                            message.actionTimestamp = new $util.LongBits(object.actionTimestamp.low >>> 0, object.actionTimestamp.high >>> 0).toNumber();\n                    if (object.openPrice != null)\n                        message.openPrice = Number(object.openPrice);\n                    if (object.highPrice != null)\n                        message.highPrice = Number(object.highPrice);\n                    if (object.lowPrice != null)\n                        message.lowPrice = Number(object.lowPrice);\n                    if (object.closePrice != null)\n                        message.closePrice = Number(object.closePrice);\n                    if (object.openInterest != null)\n                        message.openInterest = Number(object.openInterest);\n                    if (object.openInterestDelta != null)\n                        message.openInterestDelta = Number(object.openInterestDelta);\n                    if (object.volume != null)\n                        if ($util.Long)\n                            (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;\n                        else if (typeof object.volume === \"string\")\n                            message.volume = parseInt(object.volume, 10);\n                        else if (typeof object.volume === \"number\")\n                            message.volume = object.volume;\n                        else if (typeof object.volume === \"object\")\n                            message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();\n                    if (object.volumeDelta != null)\n                        if ($util.Long)\n                            (message.volumeDelta = $util.Long.fromValue(object.volumeDelta)).unsigned = false;\n                        else if (typeof object.volumeDelta === \"string\")\n                            message.volumeDelta = parseInt(object.volumeDelta, 10);\n                        else if (typeof object.volumeDelta === \"number\")\n                            message.volumeDelta = object.volumeDelta;\n                        else if (typeof object.volumeDelta === \"object\")\n                            message.volumeDelta = new $util.LongBits(object.volumeDelta.low >>> 0, object.volumeDelta.high >>> 0).toNumber();\n                    if (object.turnover != null)\n                        message.turnover = Number(object.turnover);\n                    if (object.turnoverDelta != null)\n                        message.turnoverDelta = Number(object.turnoverDelta);\n                    if (object.numTrades != null)\n                        if ($util.Long)\n                            (message.numTrades = $util.Long.fromValue(object.numTrades)).unsigned = false;\n                        else if (typeof object.numTrades === \"string\")\n                            message.numTrades = parseInt(object.numTrades, 10);\n                        else if (typeof object.numTrades === \"number\")\n                            message.numTrades = object.numTrades;\n                        else if (typeof object.numTrades === \"object\")\n                            message.numTrades = new $util.LongBits(object.numTrades.low >>> 0, object.numTrades.high >>> 0).toNumber();\n                    if (object.numTradesDelta != null)\n                        if ($util.Long)\n                            (message.numTradesDelta = $util.Long.fromValue(object.numTradesDelta)).unsigned = false;\n                        else if (typeof object.numTradesDelta === \"string\")\n                            message.numTradesDelta = parseInt(object.numTradesDelta, 10);\n                        else if (typeof object.numTradesDelta === \"number\")\n                            message.numTradesDelta = object.numTradesDelta;\n                        else if (typeof object.numTradesDelta === \"object\")\n                            message.numTradesDelta = new $util.LongBits(object.numTradesDelta.low >>> 0, object.numTradesDelta.high >>> 0).toNumber();\n                    if (object.preOpenInterest != null)\n                        message.preOpenInterest = Number(object.preOpenInterest);\n                    if (object.preClosePrice != null)\n                        message.preClosePrice = Number(object.preClosePrice);\n                    if (object.preSettlePrice != null)\n                        message.preSettlePrice = Number(object.preSettlePrice);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a BarField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.BarField} message BarField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                BarField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.unifiedSymbol = \"\";\n                        object.gatewayId = \"\";\n                        object.tradingDay = \"\";\n                        object.actionDay = \"\";\n                        object.actionTime = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.actionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.actionTimestamp = options.longs === String ? \"0\" : 0;\n                        object.openPrice = 0;\n                        object.highPrice = 0;\n                        object.lowPrice = 0;\n                        object.closePrice = 0;\n                        object.openInterest = 0;\n                        object.openInterestDelta = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volume = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volumeDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volumeDelta = options.longs === String ? \"0\" : 0;\n                        object.turnover = 0;\n                        object.turnoverDelta = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.numTrades = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.numTrades = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.numTradesDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.numTradesDelta = options.longs === String ? \"0\" : 0;\n                        object.preOpenInterest = 0;\n                        object.preClosePrice = 0;\n                        object.preSettlePrice = 0;\n                    }\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        object.actionDay = message.actionDay;\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        object.actionTime = message.actionTime;\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (typeof message.actionTimestamp === \"number\")\n                            object.actionTimestamp = options.longs === String ? String(message.actionTimestamp) : message.actionTimestamp;\n                        else\n                            object.actionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.actionTimestamp) : options.longs === Number ? new $util.LongBits(message.actionTimestamp.low >>> 0, message.actionTimestamp.high >>> 0).toNumber() : message.actionTimestamp;\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        object.highPrice = options.json && !isFinite(message.highPrice) ? String(message.highPrice) : message.highPrice;\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        object.lowPrice = options.json && !isFinite(message.lowPrice) ? String(message.lowPrice) : message.lowPrice;\n                    if (message.closePrice != null && message.hasOwnProperty(\"closePrice\"))\n                        object.closePrice = options.json && !isFinite(message.closePrice) ? String(message.closePrice) : message.closePrice;\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        object.openInterest = options.json && !isFinite(message.openInterest) ? String(message.openInterest) : message.openInterest;\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        object.openInterestDelta = options.json && !isFinite(message.openInterestDelta) ? String(message.openInterestDelta) : message.openInterestDelta;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (typeof message.volume === \"number\")\n                            object.volume = options.longs === String ? String(message.volume) : message.volume;\n                        else\n                            object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (typeof message.volumeDelta === \"number\")\n                            object.volumeDelta = options.longs === String ? String(message.volumeDelta) : message.volumeDelta;\n                        else\n                            object.volumeDelta = options.longs === String ? $util.Long.prototype.toString.call(message.volumeDelta) : options.longs === Number ? new $util.LongBits(message.volumeDelta.low >>> 0, message.volumeDelta.high >>> 0).toNumber() : message.volumeDelta;\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        object.turnover = options.json && !isFinite(message.turnover) ? String(message.turnover) : message.turnover;\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        object.turnoverDelta = options.json && !isFinite(message.turnoverDelta) ? String(message.turnoverDelta) : message.turnoverDelta;\n                    if (message.numTrades != null && message.hasOwnProperty(\"numTrades\"))\n                        if (typeof message.numTrades === \"number\")\n                            object.numTrades = options.longs === String ? String(message.numTrades) : message.numTrades;\n                        else\n                            object.numTrades = options.longs === String ? $util.Long.prototype.toString.call(message.numTrades) : options.longs === Number ? new $util.LongBits(message.numTrades.low >>> 0, message.numTrades.high >>> 0).toNumber() : message.numTrades;\n                    if (message.numTradesDelta != null && message.hasOwnProperty(\"numTradesDelta\"))\n                        if (typeof message.numTradesDelta === \"number\")\n                            object.numTradesDelta = options.longs === String ? String(message.numTradesDelta) : message.numTradesDelta;\n                        else\n                            object.numTradesDelta = options.longs === String ? $util.Long.prototype.toString.call(message.numTradesDelta) : options.longs === Number ? new $util.LongBits(message.numTradesDelta.low >>> 0, message.numTradesDelta.high >>> 0).toNumber() : message.numTradesDelta;\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        object.preOpenInterest = options.json && !isFinite(message.preOpenInterest) ? String(message.preOpenInterest) : message.preOpenInterest;\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        object.preClosePrice = options.json && !isFinite(message.preClosePrice) ? String(message.preClosePrice) : message.preClosePrice;\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        object.preSettlePrice = options.json && !isFinite(message.preSettlePrice) ? String(message.preSettlePrice) : message.preSettlePrice;\n                    return object;\n                };\n\n                /**\n                 * Converts this BarField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                BarField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return BarField;\n            })();\n\n            pb.CommonReqField = (function() {\n\n                /**\n                 * Properties of a CommonReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ICommonReqField\n                 * @property {string|null} [transactionId] CommonReqField transactionId\n                 * @property {string|null} [operatorId] CommonReqField operatorId\n                 */\n\n                /**\n                 * Constructs a new CommonReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a CommonReqField.\n                 * @implements ICommonReqField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ICommonReqField=} [properties] Properties to set\n                 */\n                function CommonReqField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommonReqField transactionId.\n                 * @member {string} transactionId\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @instance\n                 */\n                CommonReqField.prototype.transactionId = \"\";\n\n                /**\n                 * CommonReqField operatorId.\n                 * @member {string} operatorId\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @instance\n                 */\n                CommonReqField.prototype.operatorId = \"\";\n\n                /**\n                 * Creates a new CommonReqField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonReqField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField instance\n                 */\n                CommonReqField.create = function create(properties) {\n                    return new CommonReqField(properties);\n                };\n\n                /**\n                 * Encodes the specified CommonReqField message. Does not implicitly {@link xyz.redtorch.pb.CommonReqField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonReqField} message CommonReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonReqField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.transactionId);\n                    if (message.operatorId != null && message.hasOwnProperty(\"operatorId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.operatorId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommonReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonReqField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonReqField} message CommonReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonReqField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommonReqField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonReqField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonReqField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.transactionId = reader.string();\n                            break;\n                        case 2:\n                            message.operatorId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommonReqField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonReqField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommonReqField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommonReqField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        if (!$util.isString(message.transactionId))\n                            return \"transactionId: string expected\";\n                    if (message.operatorId != null && message.hasOwnProperty(\"operatorId\"))\n                        if (!$util.isString(message.operatorId))\n                            return \"operatorId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommonReqField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField\n                 */\n                CommonReqField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.CommonReqField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.CommonReqField();\n                    if (object.transactionId != null)\n                        message.transactionId = String(object.transactionId);\n                    if (object.operatorId != null)\n                        message.operatorId = String(object.operatorId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommonReqField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.CommonReqField} message CommonReqField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommonReqField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.transactionId = \"\";\n                        object.operatorId = \"\";\n                    }\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        object.transactionId = message.transactionId;\n                    if (message.operatorId != null && message.hasOwnProperty(\"operatorId\"))\n                        object.operatorId = message.operatorId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommonReqField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommonReqField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommonReqField;\n            })();\n\n            pb.CommonRspField = (function() {\n\n                /**\n                 * Properties of a CommonRspField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ICommonRspField\n                 * @property {string|null} [transactionId] CommonRspField transactionId\n                 * @property {number|null} [errorId] CommonRspField errorId\n                 * @property {string|null} [errorMsg] CommonRspField errorMsg\n                 */\n\n                /**\n                 * Constructs a new CommonRspField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a CommonRspField.\n                 * @implements ICommonRspField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ICommonRspField=} [properties] Properties to set\n                 */\n                function CommonRspField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommonRspField transactionId.\n                 * @member {string} transactionId\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 */\n                CommonRspField.prototype.transactionId = \"\";\n\n                /**\n                 * CommonRspField errorId.\n                 * @member {number} errorId\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 */\n                CommonRspField.prototype.errorId = 0;\n\n                /**\n                 * CommonRspField errorMsg.\n                 * @member {string} errorMsg\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 */\n                CommonRspField.prototype.errorMsg = \"\";\n\n                /**\n                 * Creates a new CommonRspField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonRspField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField instance\n                 */\n                CommonRspField.create = function create(properties) {\n                    return new CommonRspField(properties);\n                };\n\n                /**\n                 * Encodes the specified CommonRspField message. Does not implicitly {@link xyz.redtorch.pb.CommonRspField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonRspField} message CommonRspField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonRspField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.transactionId);\n                    if (message.errorId != null && message.hasOwnProperty(\"errorId\"))\n                        writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.errorId);\n                    if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.errorMsg);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommonRspField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonRspField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonRspField} message CommonRspField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonRspField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommonRspField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonRspField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonRspField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.transactionId = reader.string();\n                            break;\n                        case 2:\n                            message.errorId = reader.fixed32();\n                            break;\n                        case 3:\n                            message.errorMsg = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommonRspField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonRspField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommonRspField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommonRspField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        if (!$util.isString(message.transactionId))\n                            return \"transactionId: string expected\";\n                    if (message.errorId != null && message.hasOwnProperty(\"errorId\"))\n                        if (!$util.isInteger(message.errorId))\n                            return \"errorId: integer expected\";\n                    if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                        if (!$util.isString(message.errorMsg))\n                            return \"errorMsg: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommonRspField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField\n                 */\n                CommonRspField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.CommonRspField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.CommonRspField();\n                    if (object.transactionId != null)\n                        message.transactionId = String(object.transactionId);\n                    if (object.errorId != null)\n                        message.errorId = object.errorId >>> 0;\n                    if (object.errorMsg != null)\n                        message.errorMsg = String(object.errorMsg);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommonRspField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.CommonRspField} message CommonRspField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommonRspField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.transactionId = \"\";\n                        object.errorId = 0;\n                        object.errorMsg = \"\";\n                    }\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        object.transactionId = message.transactionId;\n                    if (message.errorId != null && message.hasOwnProperty(\"errorId\"))\n                        object.errorId = message.errorId;\n                    if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                        object.errorMsg = message.errorMsg;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommonRspField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommonRspField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommonRspField;\n            })();\n\n            pb.SubmitOrderReqField = (function() {\n\n                /**\n                 * Properties of a SubmitOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ISubmitOrderReqField\n                 * @property {string|null} [originOrderId] SubmitOrderReqField originOrderId\n                 * @property {string|null} [accountCode] SubmitOrderReqField accountCode\n                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] SubmitOrderReqField currency\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] SubmitOrderReqField contract\n                 * @property {string|null} [gatewayId] SubmitOrderReqField gatewayId\n                 * @property {number|null} [volume] SubmitOrderReqField volume\n                 * @property {number|null} [price] SubmitOrderReqField price\n                 * @property {xyz.redtorch.pb.OrderPriceTypeEnum|null} [orderPriceType] SubmitOrderReqField orderPriceType\n                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] SubmitOrderReqField direction\n                 * @property {xyz.redtorch.pb.OffsetFlagEnum|null} [offsetFlag] SubmitOrderReqField offsetFlag\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] SubmitOrderReqField hedgeFlag\n                 * @property {xyz.redtorch.pb.TimeConditionEnum|null} [timeCondition] SubmitOrderReqField timeCondition\n                 * @property {string|null} [gtdDate] SubmitOrderReqField gtdDate\n                 * @property {xyz.redtorch.pb.VolumeConditionEnum|null} [volumeCondition] SubmitOrderReqField volumeCondition\n                 * @property {number|null} [minVolume] SubmitOrderReqField minVolume\n                 * @property {xyz.redtorch.pb.ContingentConditionEnum|null} [contingentCondition] SubmitOrderReqField contingentCondition\n                 * @property {number|null} [stopPrice] SubmitOrderReqField stopPrice\n                 * @property {xyz.redtorch.pb.ForceCloseReasonEnum|null} [forceCloseReason] SubmitOrderReqField forceCloseReason\n                 * @property {number|null} [autoSuspend] SubmitOrderReqField autoSuspend\n                 * @property {number|null} [userForceClose] SubmitOrderReqField userForceClose\n                 * @property {number|null} [swapOrder] SubmitOrderReqField swapOrder\n                 */\n\n                /**\n                 * Constructs a new SubmitOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a SubmitOrderReqField.\n                 * @implements ISubmitOrderReqField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField=} [properties] Properties to set\n                 */\n                function SubmitOrderReqField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SubmitOrderReqField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.originOrderId = \"\";\n\n                /**\n                 * SubmitOrderReqField accountCode.\n                 * @member {string} accountCode\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.accountCode = \"\";\n\n                /**\n                 * SubmitOrderReqField currency.\n                 * @member {xyz.redtorch.pb.CurrencyEnum} currency\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.currency = 0;\n\n                /**\n                 * SubmitOrderReqField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.contract = null;\n\n                /**\n                 * SubmitOrderReqField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.gatewayId = \"\";\n\n                /**\n                 * SubmitOrderReqField volume.\n                 * @member {number} volume\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.volume = 0;\n\n                /**\n                 * SubmitOrderReqField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.price = 0;\n\n                /**\n                 * SubmitOrderReqField orderPriceType.\n                 * @member {xyz.redtorch.pb.OrderPriceTypeEnum} orderPriceType\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.orderPriceType = 0;\n\n                /**\n                 * SubmitOrderReqField direction.\n                 * @member {xyz.redtorch.pb.DirectionEnum} direction\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.direction = 0;\n\n                /**\n                 * SubmitOrderReqField offsetFlag.\n                 * @member {xyz.redtorch.pb.OffsetFlagEnum} offsetFlag\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.offsetFlag = 0;\n\n                /**\n                 * SubmitOrderReqField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.hedgeFlag = 0;\n\n                /**\n                 * SubmitOrderReqField timeCondition.\n                 * @member {xyz.redtorch.pb.TimeConditionEnum} timeCondition\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.timeCondition = 0;\n\n                /**\n                 * SubmitOrderReqField gtdDate.\n                 * @member {string} gtdDate\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.gtdDate = \"\";\n\n                /**\n                 * SubmitOrderReqField volumeCondition.\n                 * @member {xyz.redtorch.pb.VolumeConditionEnum} volumeCondition\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.volumeCondition = 0;\n\n                /**\n                 * SubmitOrderReqField minVolume.\n                 * @member {number} minVolume\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.minVolume = 0;\n\n                /**\n                 * SubmitOrderReqField contingentCondition.\n                 * @member {xyz.redtorch.pb.ContingentConditionEnum} contingentCondition\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.contingentCondition = 0;\n\n                /**\n                 * SubmitOrderReqField stopPrice.\n                 * @member {number} stopPrice\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.stopPrice = 0;\n\n                /**\n                 * SubmitOrderReqField forceCloseReason.\n                 * @member {xyz.redtorch.pb.ForceCloseReasonEnum} forceCloseReason\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.forceCloseReason = 0;\n\n                /**\n                 * SubmitOrderReqField autoSuspend.\n                 * @member {number} autoSuspend\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.autoSuspend = 0;\n\n                /**\n                 * SubmitOrderReqField userForceClose.\n                 * @member {number} userForceClose\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.userForceClose = 0;\n\n                /**\n                 * SubmitOrderReqField swapOrder.\n                 * @member {number} swapOrder\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.swapOrder = 0;\n\n                /**\n                 * Creates a new SubmitOrderReqField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField instance\n                 */\n                SubmitOrderReqField.create = function create(properties) {\n                    return new SubmitOrderReqField(properties);\n                };\n\n                /**\n                 * Encodes the specified SubmitOrderReqField message. Does not implicitly {@link xyz.redtorch.pb.SubmitOrderReqField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField} message SubmitOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubmitOrderReqField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountCode);\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.currency);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.gatewayId);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.volume);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.price);\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.orderPriceType);\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.direction);\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.offsetFlag);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.hedgeFlag);\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.timeCondition);\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.gtdDate);\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.volumeCondition);\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.minVolume);\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        writer.uint32(/* id 16, wireType 0 =*/128).int32(message.contingentCondition);\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.stopPrice);\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.forceCloseReason);\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        writer.uint32(/* id 19, wireType 5 =*/157).fixed32(message.autoSuspend);\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        writer.uint32(/* id 20, wireType 5 =*/165).fixed32(message.userForceClose);\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        writer.uint32(/* id 21, wireType 5 =*/173).fixed32(message.swapOrder);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SubmitOrderReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.SubmitOrderReqField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField} message SubmitOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubmitOrderReqField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SubmitOrderReqField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubmitOrderReqField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.SubmitOrderReqField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 2:\n                            message.accountCode = reader.string();\n                            break;\n                        case 3:\n                            message.currency = reader.int32();\n                            break;\n                        case 4:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 6:\n                            message.volume = reader.fixed32();\n                            break;\n                        case 7:\n                            message.price = reader.double();\n                            break;\n                        case 8:\n                            message.orderPriceType = reader.int32();\n                            break;\n                        case 9:\n                            message.direction = reader.int32();\n                            break;\n                        case 10:\n                            message.offsetFlag = reader.int32();\n                            break;\n                        case 11:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 12:\n                            message.timeCondition = reader.int32();\n                            break;\n                        case 13:\n                            message.gtdDate = reader.string();\n                            break;\n                        case 14:\n                            message.volumeCondition = reader.int32();\n                            break;\n                        case 15:\n                            message.minVolume = reader.fixed32();\n                            break;\n                        case 16:\n                            message.contingentCondition = reader.int32();\n                            break;\n                        case 17:\n                            message.stopPrice = reader.double();\n                            break;\n                        case 18:\n                            message.forceCloseReason = reader.int32();\n                            break;\n                        case 19:\n                            message.autoSuspend = reader.fixed32();\n                            break;\n                        case 20:\n                            message.userForceClose = reader.fixed32();\n                            break;\n                        case 21:\n                            message.swapOrder = reader.fixed32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SubmitOrderReqField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubmitOrderReqField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SubmitOrderReqField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SubmitOrderReqField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        if (!$util.isString(message.accountCode))\n                            return \"accountCode: string expected\";\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        switch (message.currency) {\n                        default:\n                            return \"currency: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                            break;\n                        }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume))\n                            return \"volume: integer expected\";\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        switch (message.orderPriceType) {\n                        default:\n                            return \"orderPriceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                            break;\n                        }\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        switch (message.direction) {\n                        default:\n                            return \"direction: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        switch (message.offsetFlag) {\n                        default:\n                            return \"offsetFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        switch (message.timeCondition) {\n                        default:\n                            return \"timeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        if (!$util.isString(message.gtdDate))\n                            return \"gtdDate: string expected\";\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        switch (message.volumeCondition) {\n                        default:\n                            return \"volumeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        if (!$util.isInteger(message.minVolume))\n                            return \"minVolume: integer expected\";\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        switch (message.contingentCondition) {\n                        default:\n                            return \"contingentCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                            break;\n                        }\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        if (typeof message.stopPrice !== \"number\")\n                            return \"stopPrice: number expected\";\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        switch (message.forceCloseReason) {\n                        default:\n                            return \"forceCloseReason: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                            break;\n                        }\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        if (!$util.isInteger(message.autoSuspend))\n                            return \"autoSuspend: integer expected\";\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        if (!$util.isInteger(message.userForceClose))\n                            return \"userForceClose: integer expected\";\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        if (!$util.isInteger(message.swapOrder))\n                            return \"swapOrder: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SubmitOrderReqField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField\n                 */\n                SubmitOrderReqField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.SubmitOrderReqField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.SubmitOrderReqField();\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.accountCode != null)\n                        message.accountCode = String(object.accountCode);\n                    switch (object.currency) {\n                    case \"UnknownCurrency\":\n                    case 0:\n                        message.currency = 0;\n                        break;\n                    case \"USD\":\n                    case 1:\n                        message.currency = 1;\n                        break;\n                    case \"CNY\":\n                    case 2:\n                        message.currency = 2;\n                        break;\n                    case \"CNH\":\n                    case 3:\n                        message.currency = 3;\n                        break;\n                    case \"HKD\":\n                    case 4:\n                        message.currency = 4;\n                        break;\n                    case \"JPY\":\n                    case 5:\n                        message.currency = 5;\n                        break;\n                    case \"EUR\":\n                    case 6:\n                        message.currency = 6;\n                        break;\n                    case \"GBP\":\n                    case 7:\n                        message.currency = 7;\n                        break;\n                    case \"DEM\":\n                    case 8:\n                        message.currency = 8;\n                        break;\n                    case \"CHF\":\n                    case 9:\n                        message.currency = 9;\n                        break;\n                    case \"FRF\":\n                    case 10:\n                        message.currency = 10;\n                        break;\n                    case \"CAD\":\n                    case 11:\n                        message.currency = 11;\n                        break;\n                    case \"AUD\":\n                    case 12:\n                        message.currency = 12;\n                        break;\n                    case \"ATS\":\n                    case 13:\n                        message.currency = 13;\n                        break;\n                    case \"FIM\":\n                    case 14:\n                        message.currency = 14;\n                        break;\n                    case \"BEF\":\n                    case 15:\n                        message.currency = 15;\n                        break;\n                    case \"THB\":\n                    case 16:\n                        message.currency = 16;\n                        break;\n                    case \"IEP\":\n                    case 17:\n                        message.currency = 17;\n                        break;\n                    case \"ITL\":\n                    case 18:\n                        message.currency = 18;\n                        break;\n                    case \"LUF\":\n                    case 19:\n                        message.currency = 19;\n                        break;\n                    case \"NLG\":\n                    case 20:\n                        message.currency = 20;\n                        break;\n                    case \"PTE\":\n                    case 21:\n                        message.currency = 21;\n                        break;\n                    case \"ESP\":\n                    case 22:\n                        message.currency = 22;\n                        break;\n                    case \"IDR\":\n                    case 23:\n                        message.currency = 23;\n                        break;\n                    case \"MYR\":\n                    case 24:\n                        message.currency = 24;\n                        break;\n                    case \"NZD\":\n                    case 25:\n                        message.currency = 25;\n                        break;\n                    case \"PHP\":\n                    case 26:\n                        message.currency = 26;\n                        break;\n                    case \"SUR\":\n                    case 27:\n                        message.currency = 27;\n                        break;\n                    case \"SGD\":\n                    case 28:\n                        message.currency = 28;\n                        break;\n                    case \"KRW\":\n                    case 29:\n                        message.currency = 29;\n                        break;\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.SubmitOrderReqField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.volume != null)\n                        message.volume = object.volume >>> 0;\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    switch (object.orderPriceType) {\n                    case \"OPT_Unknown\":\n                    case 0:\n                        message.orderPriceType = 0;\n                        break;\n                    case \"OPT_AnyPrice\":\n                    case 1:\n                        message.orderPriceType = 1;\n                        break;\n                    case \"OPT_LimitPrice\":\n                    case 2:\n                        message.orderPriceType = 2;\n                        break;\n                    case \"OPT_BestPrice\":\n                    case 3:\n                        message.orderPriceType = 3;\n                        break;\n                    case \"OPT_LastPrice\":\n                    case 4:\n                        message.orderPriceType = 4;\n                        break;\n                    case \"OPT_LastPricePlusOneTicks\":\n                    case 5:\n                        message.orderPriceType = 5;\n                        break;\n                    case \"OPT_LastPricePlusTwoTicks\":\n                    case 6:\n                        message.orderPriceType = 6;\n                        break;\n                    case \"OPT_LastPricePlusThreeTicks\":\n                    case 7:\n                        message.orderPriceType = 7;\n                        break;\n                    case \"OPT_AskPrice1\":\n                    case 8:\n                        message.orderPriceType = 8;\n                        break;\n                    case \"OPT_AskPrice1PlusOneTicks\":\n                    case 9:\n                        message.orderPriceType = 9;\n                        break;\n                    case \"OPT_AskPrice1PlusTwoTicks\":\n                    case 10:\n                        message.orderPriceType = 10;\n                        break;\n                    case \"OPT_AskPrice1PlusThreeTicks\":\n                    case 11:\n                        message.orderPriceType = 11;\n                        break;\n                    case \"OPT_BidPrice1\":\n                    case 12:\n                        message.orderPriceType = 12;\n                        break;\n                    case \"OPT_BidPrice1PlusOneTicks\":\n                    case 13:\n                        message.orderPriceType = 13;\n                        break;\n                    case \"OPT_BidPrice1PlusTwoTicks\":\n                    case 14:\n                        message.orderPriceType = 14;\n                        break;\n                    case \"OPT_BidPrice1PlusThreeTicks\":\n                    case 15:\n                        message.orderPriceType = 15;\n                        break;\n                    case \"OPT_FiveLevelPrice\":\n                    case 16:\n                        message.orderPriceType = 16;\n                        break;\n                    }\n                    switch (object.direction) {\n                    case \"D_Unknown\":\n                    case 0:\n                        message.direction = 0;\n                        break;\n                    case \"D_Buy\":\n                    case 1:\n                        message.direction = 1;\n                        break;\n                    case \"D_Sell\":\n                    case 2:\n                        message.direction = 2;\n                        break;\n                    }\n                    switch (object.offsetFlag) {\n                    case \"OF_Unknown\":\n                    case 0:\n                        message.offsetFlag = 0;\n                        break;\n                    case \"OF_Open\":\n                    case 1:\n                        message.offsetFlag = 1;\n                        break;\n                    case \"OF_Close\":\n                    case 2:\n                        message.offsetFlag = 2;\n                        break;\n                    case \"OF_ForceClose\":\n                    case 3:\n                        message.offsetFlag = 3;\n                        break;\n                    case \"OF_CloseToday\":\n                    case 4:\n                        message.offsetFlag = 4;\n                        break;\n                    case \"OF_CloseYesterday\":\n                    case 5:\n                        message.offsetFlag = 5;\n                        break;\n                    case \"OF_ForceOff\":\n                    case 6:\n                        message.offsetFlag = 6;\n                        break;\n                    case \"OF_LocalForceClose\":\n                    case 7:\n                        message.offsetFlag = 7;\n                        break;\n                    }\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    switch (object.timeCondition) {\n                    case \"TC_Unknown\":\n                    case 0:\n                        message.timeCondition = 0;\n                        break;\n                    case \"TC_IOC\":\n                    case 1:\n                        message.timeCondition = 1;\n                        break;\n                    case \"TC_GFS\":\n                    case 2:\n                        message.timeCondition = 2;\n                        break;\n                    case \"TC_GFD\":\n                    case 3:\n                        message.timeCondition = 3;\n                        break;\n                    case \"TC_GTD\":\n                    case 4:\n                        message.timeCondition = 4;\n                        break;\n                    case \"TC_GTC\":\n                    case 5:\n                        message.timeCondition = 5;\n                        break;\n                    case \"TC_GFA\":\n                    case 6:\n                        message.timeCondition = 6;\n                        break;\n                    }\n                    if (object.gtdDate != null)\n                        message.gtdDate = String(object.gtdDate);\n                    switch (object.volumeCondition) {\n                    case \"VC_Unknown\":\n                    case 0:\n                        message.volumeCondition = 0;\n                        break;\n                    case \"VC_AV\":\n                    case 1:\n                        message.volumeCondition = 1;\n                        break;\n                    case \"VC_MV\":\n                    case 2:\n                        message.volumeCondition = 2;\n                        break;\n                    case \"VC_CV\":\n                    case 3:\n                        message.volumeCondition = 3;\n                        break;\n                    }\n                    if (object.minVolume != null)\n                        message.minVolume = object.minVolume >>> 0;\n                    switch (object.contingentCondition) {\n                    case \"CC_Unknown\":\n                    case 0:\n                        message.contingentCondition = 0;\n                        break;\n                    case \"CC_Immediately\":\n                    case 1:\n                        message.contingentCondition = 1;\n                        break;\n                    case \"CC_Touch\":\n                    case 2:\n                        message.contingentCondition = 2;\n                        break;\n                    case \"CC_TouchProfit\":\n                    case 3:\n                        message.contingentCondition = 3;\n                        break;\n                    case \"CC_ParkedOrder\":\n                    case 4:\n                        message.contingentCondition = 4;\n                        break;\n                    case \"CC_LastPriceGreaterThanStopPrice\":\n                    case 5:\n                        message.contingentCondition = 5;\n                        break;\n                    case \"CC_LastPriceGreaterEqualStopPrice\":\n                    case 6:\n                        message.contingentCondition = 6;\n                        break;\n                    case \"CC_LastPriceLesserThanStopPrice\":\n                    case 7:\n                        message.contingentCondition = 7;\n                        break;\n                    case \"CC_LastPriceLesserEqualStopPrice\":\n                    case 8:\n                        message.contingentCondition = 8;\n                        break;\n                    case \"CC_AskPriceGreaterThanStopPrice\":\n                    case 9:\n                        message.contingentCondition = 9;\n                        break;\n                    case \"CC_AskPriceGreaterEqualStopPrice\":\n                    case 10:\n                        message.contingentCondition = 10;\n                        break;\n                    case \"CC_AskPriceLesserThanStopPrice\":\n                    case 11:\n                        message.contingentCondition = 11;\n                        break;\n                    case \"CC_AskPriceLesserEqualStopPrice\":\n                    case 12:\n                        message.contingentCondition = 12;\n                        break;\n                    case \"CC_BidPriceGreaterThanStopPrice\":\n                    case 13:\n                        message.contingentCondition = 13;\n                        break;\n                    case \"CC_BidPriceGreaterEqualStopPrice\":\n                    case 14:\n                        message.contingentCondition = 14;\n                        break;\n                    case \"CC_BidPriceLesserThanStopPrice\":\n                    case 15:\n                        message.contingentCondition = 15;\n                        break;\n                    case \"CC_BidPriceLesserEqualStopPrice\":\n                    case 16:\n                        message.contingentCondition = 16;\n                        break;\n                    case \"CC_LocalLastPriceLesserEqualStopPrice\":\n                    case 17:\n                        message.contingentCondition = 17;\n                        break;\n                    case \"CC_LocalLastPriceGreaterEqualStopPrice\":\n                    case 18:\n                        message.contingentCondition = 18;\n                        break;\n                    }\n                    if (object.stopPrice != null)\n                        message.stopPrice = Number(object.stopPrice);\n                    switch (object.forceCloseReason) {\n                    case \"FCR_Unknown\":\n                    case 0:\n                        message.forceCloseReason = 0;\n                        break;\n                    case \"FCR_NotForceClose\":\n                    case 1:\n                        message.forceCloseReason = 1;\n                        break;\n                    case \"FCR_LackDeposit\":\n                    case 2:\n                        message.forceCloseReason = 2;\n                        break;\n                    case \"FCR_ClientOverPositionLimit\":\n                    case 3:\n                        message.forceCloseReason = 3;\n                        break;\n                    case \"FCR_MemberOverPositionLimit\":\n                    case 4:\n                        message.forceCloseReason = 4;\n                        break;\n                    case \"FCR_NotMultiple\":\n                    case 5:\n                        message.forceCloseReason = 5;\n                        break;\n                    case \"FCR_Violation\":\n                    case 6:\n                        message.forceCloseReason = 6;\n                        break;\n                    case \"FCR_Other\":\n                    case 7:\n                        message.forceCloseReason = 7;\n                        break;\n                    case \"FCR_PersonDeliver\":\n                    case 8:\n                        message.forceCloseReason = 8;\n                        break;\n                    }\n                    if (object.autoSuspend != null)\n                        message.autoSuspend = object.autoSuspend >>> 0;\n                    if (object.userForceClose != null)\n                        message.userForceClose = object.userForceClose >>> 0;\n                    if (object.swapOrder != null)\n                        message.swapOrder = object.swapOrder >>> 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SubmitOrderReqField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.SubmitOrderReqField} message SubmitOrderReqField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SubmitOrderReqField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originOrderId = \"\";\n                        object.accountCode = \"\";\n                        object.currency = options.enums === String ? \"UnknownCurrency\" : 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                        object.volume = 0;\n                        object.price = 0;\n                        object.orderPriceType = options.enums === String ? \"OPT_Unknown\" : 0;\n                        object.direction = options.enums === String ? \"D_Unknown\" : 0;\n                        object.offsetFlag = options.enums === String ? \"OF_Unknown\" : 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.timeCondition = options.enums === String ? \"TC_Unknown\" : 0;\n                        object.gtdDate = \"\";\n                        object.volumeCondition = options.enums === String ? \"VC_Unknown\" : 0;\n                        object.minVolume = 0;\n                        object.contingentCondition = options.enums === String ? \"CC_Unknown\" : 0;\n                        object.stopPrice = 0;\n                        object.forceCloseReason = options.enums === String ? \"FCR_Unknown\" : 0;\n                        object.autoSuspend = 0;\n                        object.userForceClose = 0;\n                        object.swapOrder = 0;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        object.accountCode = message.accountCode;\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        object.volume = message.volume;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        object.orderPriceType = options.enums === String ? $root.xyz.redtorch.pb.OrderPriceTypeEnum[message.orderPriceType] : message.orderPriceType;\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        object.offsetFlag = options.enums === String ? $root.xyz.redtorch.pb.OffsetFlagEnum[message.offsetFlag] : message.offsetFlag;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        object.timeCondition = options.enums === String ? $root.xyz.redtorch.pb.TimeConditionEnum[message.timeCondition] : message.timeCondition;\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        object.gtdDate = message.gtdDate;\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        object.volumeCondition = options.enums === String ? $root.xyz.redtorch.pb.VolumeConditionEnum[message.volumeCondition] : message.volumeCondition;\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        object.minVolume = message.minVolume;\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        object.contingentCondition = options.enums === String ? $root.xyz.redtorch.pb.ContingentConditionEnum[message.contingentCondition] : message.contingentCondition;\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        object.stopPrice = options.json && !isFinite(message.stopPrice) ? String(message.stopPrice) : message.stopPrice;\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        object.forceCloseReason = options.enums === String ? $root.xyz.redtorch.pb.ForceCloseReasonEnum[message.forceCloseReason] : message.forceCloseReason;\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        object.autoSuspend = message.autoSuspend;\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        object.userForceClose = message.userForceClose;\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        object.swapOrder = message.swapOrder;\n                    return object;\n                };\n\n                /**\n                 * Converts this SubmitOrderReqField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SubmitOrderReqField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SubmitOrderReqField;\n            })();\n\n            pb.CancelOrderReqField = (function() {\n\n                /**\n                 * Properties of a CancelOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ICancelOrderReqField\n                 * @property {string|null} [originOrderId] CancelOrderReqField originOrderId\n                 * @property {string|null} [orderId] CancelOrderReqField orderId\n                 */\n\n                /**\n                 * Constructs a new CancelOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a CancelOrderReqField.\n                 * @implements ICancelOrderReqField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField=} [properties] Properties to set\n                 */\n                function CancelOrderReqField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CancelOrderReqField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @instance\n                 */\n                CancelOrderReqField.prototype.originOrderId = \"\";\n\n                /**\n                 * CancelOrderReqField orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @instance\n                 */\n                CancelOrderReqField.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new CancelOrderReqField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField instance\n                 */\n                CancelOrderReqField.create = function create(properties) {\n                    return new CancelOrderReqField(properties);\n                };\n\n                /**\n                 * Encodes the specified CancelOrderReqField message. Does not implicitly {@link xyz.redtorch.pb.CancelOrderReqField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField} message CancelOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CancelOrderReqField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originOrderId);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CancelOrderReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CancelOrderReqField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField} message CancelOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CancelOrderReqField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CancelOrderReqField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CancelOrderReqField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CancelOrderReqField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 3:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 4:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CancelOrderReqField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CancelOrderReqField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CancelOrderReqField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CancelOrderReqField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CancelOrderReqField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField\n                 */\n                CancelOrderReqField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.CancelOrderReqField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.CancelOrderReqField();\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CancelOrderReqField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.CancelOrderReqField} message CancelOrderReqField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CancelOrderReqField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originOrderId = \"\";\n                        object.orderId = \"\";\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CancelOrderReqField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CancelOrderReqField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CancelOrderReqField;\n            })();\n\n            pb.GatewaySettingField = (function() {\n\n                /**\n                 * Properties of a GatewaySettingField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IGatewaySettingField\n                 * @property {string|null} [gatewayId] GatewaySettingField gatewayId\n                 * @property {string|null} [gatewayName] GatewaySettingField gatewayName\n                 * @property {string|null} [gatewayDescription] GatewaySettingField gatewayDescription\n                 * @property {string|null} [implementClassName] GatewaySettingField implementClassName\n                 * @property {xyz.redtorch.pb.GatewayTypeEnum|null} [gatewayType] GatewaySettingField gatewayType\n                 * @property {xyz.redtorch.pb.GatewayAdapterTypeEnum|null} [gatewayAdapterType] GatewaySettingField gatewayAdapterType\n                 * @property {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField|null} [ctpApiSetting] GatewaySettingField ctpApiSetting\n                 * @property {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField|null} [ibApiSetting] GatewaySettingField ibApiSetting\n                 * @property {xyz.redtorch.pb.ConnectStatusEnum|null} [status] GatewaySettingField status\n                 * @property {number|Long|null} [version] GatewaySettingField version\n                 * @property {string|null} [autoConnectTimeRanges] GatewaySettingField autoConnectTimeRanges\n                 */\n\n                /**\n                 * Constructs a new GatewaySettingField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a GatewaySettingField.\n                 * @implements IGatewaySettingField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IGatewaySettingField=} [properties] Properties to set\n                 */\n                function GatewaySettingField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * GatewaySettingField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayId = \"\";\n\n                /**\n                 * GatewaySettingField gatewayName.\n                 * @member {string} gatewayName\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayName = \"\";\n\n                /**\n                 * GatewaySettingField gatewayDescription.\n                 * @member {string} gatewayDescription\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayDescription = \"\";\n\n                /**\n                 * GatewaySettingField implementClassName.\n                 * @member {string} implementClassName\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.implementClassName = \"\";\n\n                /**\n                 * GatewaySettingField gatewayType.\n                 * @member {xyz.redtorch.pb.GatewayTypeEnum} gatewayType\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayType = 0;\n\n                /**\n                 * GatewaySettingField gatewayAdapterType.\n                 * @member {xyz.redtorch.pb.GatewayAdapterTypeEnum} gatewayAdapterType\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayAdapterType = 0;\n\n                /**\n                 * GatewaySettingField ctpApiSetting.\n                 * @member {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField|null|undefined} ctpApiSetting\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.ctpApiSetting = null;\n\n                /**\n                 * GatewaySettingField ibApiSetting.\n                 * @member {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField|null|undefined} ibApiSetting\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.ibApiSetting = null;\n\n                /**\n                 * GatewaySettingField status.\n                 * @member {xyz.redtorch.pb.ConnectStatusEnum} status\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.status = 0;\n\n                /**\n                 * GatewaySettingField version.\n                 * @member {number|Long} version\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * GatewaySettingField autoConnectTimeRanges.\n                 * @member {string} autoConnectTimeRanges\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.autoConnectTimeRanges = \"\";\n\n                /**\n                 * Creates a new GatewaySettingField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewaySettingField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField instance\n                 */\n                GatewaySettingField.create = function create(properties) {\n                    return new GatewaySettingField(properties);\n                };\n\n                /**\n                 * Encodes the specified GatewaySettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewaySettingField} message GatewaySettingField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewaySettingField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.gatewayId);\n                    if (message.gatewayName != null && message.hasOwnProperty(\"gatewayName\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayName);\n                    if (message.gatewayDescription != null && message.hasOwnProperty(\"gatewayDescription\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.gatewayDescription);\n                    if (message.implementClassName != null && message.hasOwnProperty(\"implementClassName\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.implementClassName);\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.gatewayType);\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.gatewayAdapterType);\n                    if (message.ctpApiSetting != null && message.hasOwnProperty(\"ctpApiSetting\"))\n                        $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.encode(message.ctpApiSetting, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.ibApiSetting != null && message.hasOwnProperty(\"ibApiSetting\"))\n                        $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.encode(message.ibApiSetting, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.status);\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.version);\n                    if (message.autoConnectTimeRanges != null && message.hasOwnProperty(\"autoConnectTimeRanges\"))\n                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.autoConnectTimeRanges);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GatewaySettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewaySettingField} message GatewaySettingField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewaySettingField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GatewaySettingField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewaySettingField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 2:\n                            message.gatewayName = reader.string();\n                            break;\n                        case 4:\n                            message.gatewayDescription = reader.string();\n                            break;\n                        case 5:\n                            message.implementClassName = reader.string();\n                            break;\n                        case 6:\n                            message.gatewayType = reader.int32();\n                            break;\n                        case 7:\n                            message.gatewayAdapterType = reader.int32();\n                            break;\n                        case 8:\n                            message.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.decode(reader, reader.uint32());\n                            break;\n                        case 9:\n                            message.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.decode(reader, reader.uint32());\n                            break;\n                        case 10:\n                            message.status = reader.int32();\n                            break;\n                        case 11:\n                            message.version = reader.fixed64();\n                            break;\n                        case 12:\n                            message.autoConnectTimeRanges = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GatewaySettingField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewaySettingField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GatewaySettingField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GatewaySettingField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.gatewayName != null && message.hasOwnProperty(\"gatewayName\"))\n                        if (!$util.isString(message.gatewayName))\n                            return \"gatewayName: string expected\";\n                    if (message.gatewayDescription != null && message.hasOwnProperty(\"gatewayDescription\"))\n                        if (!$util.isString(message.gatewayDescription))\n                            return \"gatewayDescription: string expected\";\n                    if (message.implementClassName != null && message.hasOwnProperty(\"implementClassName\"))\n                        if (!$util.isString(message.implementClassName))\n                            return \"implementClassName: string expected\";\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        switch (message.gatewayType) {\n                        default:\n                            return \"gatewayType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        switch (message.gatewayAdapterType) {\n                        default:\n                            return \"gatewayAdapterType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.ctpApiSetting != null && message.hasOwnProperty(\"ctpApiSetting\")) {\n                        var error = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify(message.ctpApiSetting);\n                        if (error)\n                            return \"ctpApiSetting.\" + error;\n                    }\n                    if (message.ibApiSetting != null && message.hasOwnProperty(\"ibApiSetting\")) {\n                        var error = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify(message.ibApiSetting);\n                        if (error)\n                            return \"ibApiSetting.\" + error;\n                    }\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                            return \"version: integer|Long expected\";\n                    if (message.autoConnectTimeRanges != null && message.hasOwnProperty(\"autoConnectTimeRanges\"))\n                        if (!$util.isString(message.autoConnectTimeRanges))\n                            return \"autoConnectTimeRanges: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a GatewaySettingField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField\n                 */\n                GatewaySettingField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.GatewaySettingField();\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.gatewayName != null)\n                        message.gatewayName = String(object.gatewayName);\n                    if (object.gatewayDescription != null)\n                        message.gatewayDescription = String(object.gatewayDescription);\n                    if (object.implementClassName != null)\n                        message.implementClassName = String(object.implementClassName);\n                    switch (object.gatewayType) {\n                    case \"GTE_TradeAndMarketData\":\n                    case 0:\n                        message.gatewayType = 0;\n                        break;\n                    case \"GTE_MarketData\":\n                    case 1:\n                        message.gatewayType = 1;\n                        break;\n                    case \"GTE_Trade\":\n                    case 2:\n                        message.gatewayType = 2;\n                        break;\n                    }\n                    switch (object.gatewayAdapterType) {\n                    case \"GAT_CTP\":\n                    case 0:\n                        message.gatewayAdapterType = 0;\n                        break;\n                    case \"GAT_IB\":\n                    case 1:\n                        message.gatewayAdapterType = 1;\n                        break;\n                    case \"GAT_COMMON\":\n                    case 2:\n                        message.gatewayAdapterType = 2;\n                        break;\n                    }\n                    if (object.ctpApiSetting != null) {\n                        if (typeof object.ctpApiSetting !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.GatewaySettingField.ctpApiSetting: object expected\");\n                        message.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.fromObject(object.ctpApiSetting);\n                    }\n                    if (object.ibApiSetting != null) {\n                        if (typeof object.ibApiSetting !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.GatewaySettingField.ibApiSetting: object expected\");\n                        message.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.fromObject(object.ibApiSetting);\n                    }\n                    switch (object.status) {\n                    case \"CS_Unknown\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"CS_Disconnected\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"CS_Connected\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"CS_Disconnecting\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    case \"CS_Connecting\":\n                    case 4:\n                        message.status = 4;\n                        break;\n                    }\n                    if (object.version != null)\n                        if ($util.Long)\n                            (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                        else if (typeof object.version === \"string\")\n                            message.version = parseInt(object.version, 10);\n                        else if (typeof object.version === \"number\")\n                            message.version = object.version;\n                        else if (typeof object.version === \"object\")\n                            message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n                    if (object.autoConnectTimeRanges != null)\n                        message.autoConnectTimeRanges = String(object.autoConnectTimeRanges);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GatewaySettingField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.GatewaySettingField} message GatewaySettingField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GatewaySettingField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.gatewayId = \"\";\n                        object.gatewayName = \"\";\n                        object.gatewayDescription = \"\";\n                        object.implementClassName = \"\";\n                        object.gatewayType = options.enums === String ? \"GTE_TradeAndMarketData\" : 0;\n                        object.gatewayAdapterType = options.enums === String ? \"GAT_CTP\" : 0;\n                        object.ctpApiSetting = null;\n                        object.ibApiSetting = null;\n                        object.status = options.enums === String ? \"CS_Unknown\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.version = options.longs === String ? \"0\" : 0;\n                        object.autoConnectTimeRanges = \"\";\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.gatewayName != null && message.hasOwnProperty(\"gatewayName\"))\n                        object.gatewayName = message.gatewayName;\n                    if (message.gatewayDescription != null && message.hasOwnProperty(\"gatewayDescription\"))\n                        object.gatewayDescription = message.gatewayDescription;\n                    if (message.implementClassName != null && message.hasOwnProperty(\"implementClassName\"))\n                        object.implementClassName = message.implementClassName;\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        object.gatewayType = options.enums === String ? $root.xyz.redtorch.pb.GatewayTypeEnum[message.gatewayType] : message.gatewayType;\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        object.gatewayAdapterType = options.enums === String ? $root.xyz.redtorch.pb.GatewayAdapterTypeEnum[message.gatewayAdapterType] : message.gatewayAdapterType;\n                    if (message.ctpApiSetting != null && message.hasOwnProperty(\"ctpApiSetting\"))\n                        object.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.toObject(message.ctpApiSetting, options);\n                    if (message.ibApiSetting != null && message.hasOwnProperty(\"ibApiSetting\"))\n                        object.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.toObject(message.ibApiSetting, options);\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.xyz.redtorch.pb.ConnectStatusEnum[message.status] : message.status;\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        if (typeof message.version === \"number\")\n                            object.version = options.longs === String ? String(message.version) : message.version;\n                        else\n                            object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n                    if (message.autoConnectTimeRanges != null && message.hasOwnProperty(\"autoConnectTimeRanges\"))\n                        object.autoConnectTimeRanges = message.autoConnectTimeRanges;\n                    return object;\n                };\n\n                /**\n                 * Converts this GatewaySettingField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GatewaySettingField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                GatewaySettingField.CtpApiSettingField = (function() {\n\n                    /**\n                     * Properties of a CtpApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @interface ICtpApiSettingField\n                     * @property {string|null} [userId] CtpApiSettingField userId\n                     * @property {string|null} [password] CtpApiSettingField password\n                     * @property {string|null} [brokerId] CtpApiSettingField brokerId\n                     * @property {string|null} [tdHost] CtpApiSettingField tdHost\n                     * @property {string|null} [tdPort] CtpApiSettingField tdPort\n                     * @property {string|null} [mdHost] CtpApiSettingField mdHost\n                     * @property {string|null} [mdPort] CtpApiSettingField mdPort\n                     * @property {string|null} [authCode] CtpApiSettingField authCode\n                     * @property {string|null} [userProductInfo] CtpApiSettingField userProductInfo\n                     * @property {string|null} [appId] CtpApiSettingField appId\n                     */\n\n                    /**\n                     * Constructs a new CtpApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @classdesc Represents a CtpApiSettingField.\n                     * @implements ICtpApiSettingField\n                     * @constructor\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField=} [properties] Properties to set\n                     */\n                    function CtpApiSettingField(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * CtpApiSettingField userId.\n                     * @member {string} userId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.userId = \"\";\n\n                    /**\n                     * CtpApiSettingField password.\n                     * @member {string} password\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.password = \"\";\n\n                    /**\n                     * CtpApiSettingField brokerId.\n                     * @member {string} brokerId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.brokerId = \"\";\n\n                    /**\n                     * CtpApiSettingField tdHost.\n                     * @member {string} tdHost\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.tdHost = \"\";\n\n                    /**\n                     * CtpApiSettingField tdPort.\n                     * @member {string} tdPort\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.tdPort = \"\";\n\n                    /**\n                     * CtpApiSettingField mdHost.\n                     * @member {string} mdHost\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.mdHost = \"\";\n\n                    /**\n                     * CtpApiSettingField mdPort.\n                     * @member {string} mdPort\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.mdPort = \"\";\n\n                    /**\n                     * CtpApiSettingField authCode.\n                     * @member {string} authCode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.authCode = \"\";\n\n                    /**\n                     * CtpApiSettingField userProductInfo.\n                     * @member {string} userProductInfo\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.userProductInfo = \"\";\n\n                    /**\n                     * CtpApiSettingField appId.\n                     * @member {string} appId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.appId = \"\";\n\n                    /**\n                     * Creates a new CtpApiSettingField instance using the specified properties.\n                     * @function create\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField=} [properties] Properties to set\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField instance\n                     */\n                    CtpApiSettingField.create = function create(properties) {\n                        return new CtpApiSettingField(properties);\n                    };\n\n                    /**\n                     * Encodes the specified CtpApiSettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify|verify} messages.\n                     * @function encode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField} message CtpApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    CtpApiSettingField.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n                        if (message.password != null && message.hasOwnProperty(\"password\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);\n                        if (message.brokerId != null && message.hasOwnProperty(\"brokerId\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.brokerId);\n                        if (message.tdHost != null && message.hasOwnProperty(\"tdHost\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.tdHost);\n                        if (message.tdPort != null && message.hasOwnProperty(\"tdPort\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.tdPort);\n                        if (message.mdHost != null && message.hasOwnProperty(\"mdHost\"))\n                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.mdHost);\n                        if (message.mdPort != null && message.hasOwnProperty(\"mdPort\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.mdPort);\n                        if (message.authCode != null && message.hasOwnProperty(\"authCode\"))\n                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.authCode);\n                        if (message.userProductInfo != null && message.hasOwnProperty(\"userProductInfo\"))\n                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.userProductInfo);\n                        if (message.appId != null && message.hasOwnProperty(\"appId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.appId);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified CtpApiSettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField} message CtpApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    CtpApiSettingField.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a CtpApiSettingField message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    CtpApiSettingField.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.userId = reader.string();\n                                break;\n                            case 2:\n                                message.password = reader.string();\n                                break;\n                            case 3:\n                                message.brokerId = reader.string();\n                                break;\n                            case 4:\n                                message.tdHost = reader.string();\n                                break;\n                            case 5:\n                                message.tdPort = reader.string();\n                                break;\n                            case 6:\n                                message.mdHost = reader.string();\n                                break;\n                            case 7:\n                                message.mdPort = reader.string();\n                                break;\n                            case 8:\n                                message.authCode = reader.string();\n                                break;\n                            case 9:\n                                message.userProductInfo = reader.string();\n                                break;\n                            case 10:\n                                message.appId = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a CtpApiSettingField message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    CtpApiSettingField.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a CtpApiSettingField message.\n                     * @function verify\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    CtpApiSettingField.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                            if (!$util.isString(message.userId))\n                                return \"userId: string expected\";\n                        if (message.password != null && message.hasOwnProperty(\"password\"))\n                            if (!$util.isString(message.password))\n                                return \"password: string expected\";\n                        if (message.brokerId != null && message.hasOwnProperty(\"brokerId\"))\n                            if (!$util.isString(message.brokerId))\n                                return \"brokerId: string expected\";\n                        if (message.tdHost != null && message.hasOwnProperty(\"tdHost\"))\n                            if (!$util.isString(message.tdHost))\n                                return \"tdHost: string expected\";\n                        if (message.tdPort != null && message.hasOwnProperty(\"tdPort\"))\n                            if (!$util.isString(message.tdPort))\n                                return \"tdPort: string expected\";\n                        if (message.mdHost != null && message.hasOwnProperty(\"mdHost\"))\n                            if (!$util.isString(message.mdHost))\n                                return \"mdHost: string expected\";\n                        if (message.mdPort != null && message.hasOwnProperty(\"mdPort\"))\n                            if (!$util.isString(message.mdPort))\n                                return \"mdPort: string expected\";\n                        if (message.authCode != null && message.hasOwnProperty(\"authCode\"))\n                            if (!$util.isString(message.authCode))\n                                return \"authCode: string expected\";\n                        if (message.userProductInfo != null && message.hasOwnProperty(\"userProductInfo\"))\n                            if (!$util.isString(message.userProductInfo))\n                                return \"userProductInfo: string expected\";\n                        if (message.appId != null && message.hasOwnProperty(\"appId\"))\n                            if (!$util.isString(message.appId))\n                                return \"appId: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a CtpApiSettingField message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField\n                     */\n                    CtpApiSettingField.fromObject = function fromObject(object) {\n                        if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField)\n                            return object;\n                        var message = new $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField();\n                        if (object.userId != null)\n                            message.userId = String(object.userId);\n                        if (object.password != null)\n                            message.password = String(object.password);\n                        if (object.brokerId != null)\n                            message.brokerId = String(object.brokerId);\n                        if (object.tdHost != null)\n                            message.tdHost = String(object.tdHost);\n                        if (object.tdPort != null)\n                            message.tdPort = String(object.tdPort);\n                        if (object.mdHost != null)\n                            message.mdHost = String(object.mdHost);\n                        if (object.mdPort != null)\n                            message.mdPort = String(object.mdPort);\n                        if (object.authCode != null)\n                            message.authCode = String(object.authCode);\n                        if (object.userProductInfo != null)\n                            message.userProductInfo = String(object.userProductInfo);\n                        if (object.appId != null)\n                            message.appId = String(object.appId);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a CtpApiSettingField message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} message CtpApiSettingField\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    CtpApiSettingField.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.userId = \"\";\n                            object.password = \"\";\n                            object.brokerId = \"\";\n                            object.tdHost = \"\";\n                            object.tdPort = \"\";\n                            object.mdHost = \"\";\n                            object.mdPort = \"\";\n                            object.authCode = \"\";\n                            object.userProductInfo = \"\";\n                            object.appId = \"\";\n                        }\n                        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                            object.userId = message.userId;\n                        if (message.password != null && message.hasOwnProperty(\"password\"))\n                            object.password = message.password;\n                        if (message.brokerId != null && message.hasOwnProperty(\"brokerId\"))\n                            object.brokerId = message.brokerId;\n                        if (message.tdHost != null && message.hasOwnProperty(\"tdHost\"))\n                            object.tdHost = message.tdHost;\n                        if (message.tdPort != null && message.hasOwnProperty(\"tdPort\"))\n                            object.tdPort = message.tdPort;\n                        if (message.mdHost != null && message.hasOwnProperty(\"mdHost\"))\n                            object.mdHost = message.mdHost;\n                        if (message.mdPort != null && message.hasOwnProperty(\"mdPort\"))\n                            object.mdPort = message.mdPort;\n                        if (message.authCode != null && message.hasOwnProperty(\"authCode\"))\n                            object.authCode = message.authCode;\n                        if (message.userProductInfo != null && message.hasOwnProperty(\"userProductInfo\"))\n                            object.userProductInfo = message.userProductInfo;\n                        if (message.appId != null && message.hasOwnProperty(\"appId\"))\n                            object.appId = message.appId;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this CtpApiSettingField to JSON.\n                     * @function toJSON\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    CtpApiSettingField.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return CtpApiSettingField;\n                })();\n\n                GatewaySettingField.IbApiSettingField = (function() {\n\n                    /**\n                     * Properties of an IbApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @interface IIbApiSettingField\n                     * @property {string|null} [host] IbApiSettingField host\n                     * @property {number|null} [port] IbApiSettingField port\n                     * @property {number|null} [clientId] IbApiSettingField clientId\n                     */\n\n                    /**\n                     * Constructs a new IbApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @classdesc Represents an IbApiSettingField.\n                     * @implements IIbApiSettingField\n                     * @constructor\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField=} [properties] Properties to set\n                     */\n                    function IbApiSettingField(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * IbApiSettingField host.\n                     * @member {string} host\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     */\n                    IbApiSettingField.prototype.host = \"\";\n\n                    /**\n                     * IbApiSettingField port.\n                     * @member {number} port\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     */\n                    IbApiSettingField.prototype.port = 0;\n\n                    /**\n                     * IbApiSettingField clientId.\n                     * @member {number} clientId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     */\n                    IbApiSettingField.prototype.clientId = 0;\n\n                    /**\n                     * Creates a new IbApiSettingField instance using the specified properties.\n                     * @function create\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField=} [properties] Properties to set\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField instance\n                     */\n                    IbApiSettingField.create = function create(properties) {\n                        return new IbApiSettingField(properties);\n                    };\n\n                    /**\n                     * Encodes the specified IbApiSettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify|verify} messages.\n                     * @function encode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField} message IbApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    IbApiSettingField.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.host != null && message.hasOwnProperty(\"host\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);\n                        if (message.port != null && message.hasOwnProperty(\"port\"))\n                            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.port);\n                        if (message.clientId != null && message.hasOwnProperty(\"clientId\"))\n                            writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.clientId);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified IbApiSettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField} message IbApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    IbApiSettingField.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an IbApiSettingField message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    IbApiSettingField.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.host = reader.string();\n                                break;\n                            case 2:\n                                message.port = reader.fixed32();\n                                break;\n                            case 3:\n                                message.clientId = reader.fixed32();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an IbApiSettingField message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    IbApiSettingField.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an IbApiSettingField message.\n                     * @function verify\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    IbApiSettingField.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.host != null && message.hasOwnProperty(\"host\"))\n                            if (!$util.isString(message.host))\n                                return \"host: string expected\";\n                        if (message.port != null && message.hasOwnProperty(\"port\"))\n                            if (!$util.isInteger(message.port))\n                                return \"port: integer expected\";\n                        if (message.clientId != null && message.hasOwnProperty(\"clientId\"))\n                            if (!$util.isInteger(message.clientId))\n                                return \"clientId: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an IbApiSettingField message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField\n                     */\n                    IbApiSettingField.fromObject = function fromObject(object) {\n                        if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField)\n                            return object;\n                        var message = new $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField();\n                        if (object.host != null)\n                            message.host = String(object.host);\n                        if (object.port != null)\n                            message.port = object.port >>> 0;\n                        if (object.clientId != null)\n                            message.clientId = object.clientId >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an IbApiSettingField message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} message IbApiSettingField\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    IbApiSettingField.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.host = \"\";\n                            object.port = 0;\n                            object.clientId = 0;\n                        }\n                        if (message.host != null && message.hasOwnProperty(\"host\"))\n                            object.host = message.host;\n                        if (message.port != null && message.hasOwnProperty(\"port\"))\n                            object.port = message.port;\n                        if (message.clientId != null && message.hasOwnProperty(\"clientId\"))\n                            object.clientId = message.clientId;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this IbApiSettingField to JSON.\n                     * @function toJSON\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    IbApiSettingField.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return IbApiSettingField;\n                })();\n\n                return GatewaySettingField;\n            })();\n\n            pb.LogField = (function() {\n\n                /**\n                 * Properties of a LogField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ILogField\n                 * @property {xyz.redtorch.pb.LogLevelEnum|null} [logLevel] LogField logLevel\n                 * @property {number|Long|null} [timestamp] LogField timestamp\n                 * @property {string|null} [content] LogField content\n                 */\n\n                /**\n                 * Constructs a new LogField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a LogField.\n                 * @implements ILogField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ILogField=} [properties] Properties to set\n                 */\n                function LogField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * LogField logLevel.\n                 * @member {xyz.redtorch.pb.LogLevelEnum} logLevel\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 */\n                LogField.prototype.logLevel = 0;\n\n                /**\n                 * LogField timestamp.\n                 * @member {number|Long} timestamp\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 */\n                LogField.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * LogField content.\n                 * @member {string} content\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 */\n                LogField.prototype.content = \"\";\n\n                /**\n                 * Creates a new LogField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.ILogField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.LogField} LogField instance\n                 */\n                LogField.create = function create(properties) {\n                    return new LogField(properties);\n                };\n\n                /**\n                 * Encodes the specified LogField message. Does not implicitly {@link xyz.redtorch.pb.LogField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.ILogField} message LogField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                LogField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.logLevel != null && message.hasOwnProperty(\"logLevel\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.logLevel);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timestamp);\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified LogField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.LogField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.ILogField} message LogField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                LogField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a LogField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.LogField} LogField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                LogField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.LogField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.logLevel = reader.int32();\n                            break;\n                        case 2:\n                            message.timestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.content = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a LogField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.LogField} LogField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                LogField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a LogField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                LogField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.logLevel != null && message.hasOwnProperty(\"logLevel\"))\n                        switch (message.logLevel) {\n                        default:\n                            return \"logLevel: enum value expected\";\n                        case 0:\n                        case 40000:\n                        case 30000:\n                        case 20000:\n                        case 10000:\n                        case 5000:\n                            break;\n                        }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                            return \"timestamp: integer|Long expected\";\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        if (!$util.isString(message.content))\n                            return \"content: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a LogField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.LogField} LogField\n                 */\n                LogField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.LogField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.LogField();\n                    switch (object.logLevel) {\n                    case \"LL_All\":\n                    case 0:\n                        message.logLevel = 0;\n                        break;\n                    case \"LL_Error\":\n                    case 40000:\n                        message.logLevel = 40000;\n                        break;\n                    case \"LL_Warn\":\n                    case 30000:\n                        message.logLevel = 30000;\n                        break;\n                    case \"LL_Info\":\n                    case 20000:\n                        message.logLevel = 20000;\n                        break;\n                    case \"LL_Debug\":\n                    case 10000:\n                        message.logLevel = 10000;\n                        break;\n                    case \"LL_Trace\":\n                    case 5000:\n                        message.logLevel = 5000;\n                        break;\n                    }\n                    if (object.timestamp != null)\n                        if ($util.Long)\n                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                        else if (typeof object.timestamp === \"string\")\n                            message.timestamp = parseInt(object.timestamp, 10);\n                        else if (typeof object.timestamp === \"number\")\n                            message.timestamp = object.timestamp;\n                        else if (typeof object.timestamp === \"object\")\n                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n                    if (object.content != null)\n                        message.content = String(object.content);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a LogField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.LogField} message LogField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                LogField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.logLevel = options.enums === String ? \"LL_All\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.timestamp = options.longs === String ? \"0\" : 0;\n                        object.content = \"\";\n                    }\n                    if (message.logLevel != null && message.hasOwnProperty(\"logLevel\"))\n                        object.logLevel = options.enums === String ? $root.xyz.redtorch.pb.LogLevelEnum[message.logLevel] : message.logLevel;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (typeof message.timestamp === \"number\")\n                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                        else\n                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        object.content = message.content;\n                    return object;\n                };\n\n                /**\n                 * Converts this LogField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                LogField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return LogField;\n            })();\n\n            pb.NoticeField = (function() {\n\n                /**\n                 * Properties of a NoticeField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface INoticeField\n                 * @property {xyz.redtorch.pb.CommonStatusEnum|null} [status] NoticeField status\n                 * @property {number|Long|null} [timestamp] NoticeField timestamp\n                 * @property {string|null} [content] NoticeField content\n                 */\n\n                /**\n                 * Constructs a new NoticeField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a NoticeField.\n                 * @implements INoticeField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.INoticeField=} [properties] Properties to set\n                 */\n                function NoticeField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * NoticeField status.\n                 * @member {xyz.redtorch.pb.CommonStatusEnum} status\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 */\n                NoticeField.prototype.status = 0;\n\n                /**\n                 * NoticeField timestamp.\n                 * @member {number|Long} timestamp\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 */\n                NoticeField.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * NoticeField content.\n                 * @member {string} content\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 */\n                NoticeField.prototype.content = \"\";\n\n                /**\n                 * Creates a new NoticeField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.INoticeField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField instance\n                 */\n                NoticeField.create = function create(properties) {\n                    return new NoticeField(properties);\n                };\n\n                /**\n                 * Encodes the specified NoticeField message. Does not implicitly {@link xyz.redtorch.pb.NoticeField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.INoticeField} message NoticeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NoticeField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timestamp);\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified NoticeField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.NoticeField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.INoticeField} message NoticeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NoticeField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a NoticeField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NoticeField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.NoticeField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.status = reader.int32();\n                            break;\n                        case 2:\n                            message.timestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.content = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a NoticeField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NoticeField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a NoticeField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                NoticeField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                            return \"timestamp: integer|Long expected\";\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        if (!$util.isString(message.content))\n                            return \"content: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a NoticeField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField\n                 */\n                NoticeField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.NoticeField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.NoticeField();\n                    switch (object.status) {\n                    case \"COMS_SUCCESS\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"COMS_INFO\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"COMS_WARN\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"COMS_ERROR\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    }\n                    if (object.timestamp != null)\n                        if ($util.Long)\n                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                        else if (typeof object.timestamp === \"string\")\n                            message.timestamp = parseInt(object.timestamp, 10);\n                        else if (typeof object.timestamp === \"number\")\n                            message.timestamp = object.timestamp;\n                        else if (typeof object.timestamp === \"object\")\n                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n                    if (object.content != null)\n                        message.content = String(object.content);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a NoticeField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.NoticeField} message NoticeField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                NoticeField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.status = options.enums === String ? \"COMS_SUCCESS\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.timestamp = options.longs === String ? \"0\" : 0;\n                        object.content = \"\";\n                    }\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.xyz.redtorch.pb.CommonStatusEnum[message.status] : message.status;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (typeof message.timestamp === \"number\")\n                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                        else\n                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        object.content = message.content;\n                    return object;\n                };\n\n                /**\n                 * Converts this NoticeField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                NoticeField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return NoticeField;\n            })();\n\n            pb.RpcSubscribeReq = (function() {\n\n                /**\n                 * Properties of a RpcSubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubscribeReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSubscribeReq commonReq\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcSubscribeReq contract\n                 */\n\n                /**\n                 * Constructs a new RpcSubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubscribeReq.\n                 * @implements IRpcSubscribeReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq=} [properties] Properties to set\n                 */\n                function RpcSubscribeReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubscribeReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @instance\n                 */\n                RpcSubscribeReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSubscribeReq contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @instance\n                 */\n                RpcSubscribeReq.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcSubscribeReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq instance\n                 */\n                RpcSubscribeReq.create = function create(properties) {\n                    return new RpcSubscribeReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq} message RpcSubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq} message RpcSubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubscribeReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubscribeReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubscribeReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubscribeReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubscribeReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubscribeReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq\n                 */\n                RpcSubscribeReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubscribeReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubscribeReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubscribeReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubscribeReq.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubscribeReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubscribeReq} message RpcSubscribeReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubscribeReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contract = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubscribeReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubscribeReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubscribeReq;\n            })();\n\n            pb.RpcSubscribeRsp = (function() {\n\n                /**\n                 * Properties of a RpcSubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubscribeRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSubscribeRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcSubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubscribeRsp.\n                 * @implements IRpcSubscribeRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp=} [properties] Properties to set\n                 */\n                function RpcSubscribeRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubscribeRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @instance\n                 */\n                RpcSubscribeRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcSubscribeRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp instance\n                 */\n                RpcSubscribeRsp.create = function create(properties) {\n                    return new RpcSubscribeRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp} message RpcSubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp} message RpcSubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubscribeRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubscribeRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubscribeRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubscribeRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubscribeRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubscribeRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp\n                 */\n                RpcSubscribeRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubscribeRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubscribeRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubscribeRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubscribeRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubscribeRsp} message RpcSubscribeRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubscribeRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubscribeRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubscribeRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubscribeRsp;\n            })();\n\n            pb.RpcUnsubscribeReq = (function() {\n\n                /**\n                 * Properties of a RpcUnsubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcUnsubscribeReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcUnsubscribeReq commonReq\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcUnsubscribeReq contract\n                 * @property {string|null} [gatewayId] RpcUnsubscribeReq gatewayId\n                 */\n\n                /**\n                 * Constructs a new RpcUnsubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcUnsubscribeReq.\n                 * @implements IRpcUnsubscribeReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq=} [properties] Properties to set\n                 */\n                function RpcUnsubscribeReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcUnsubscribeReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 */\n                RpcUnsubscribeReq.prototype.commonReq = null;\n\n                /**\n                 * RpcUnsubscribeReq contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 */\n                RpcUnsubscribeReq.prototype.contract = null;\n\n                /**\n                 * RpcUnsubscribeReq gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 */\n                RpcUnsubscribeReq.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new RpcUnsubscribeReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq instance\n                 */\n                RpcUnsubscribeReq.create = function create(properties) {\n                    return new RpcUnsubscribeReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq} message RpcUnsubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq} message RpcUnsubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcUnsubscribeReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcUnsubscribeReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcUnsubscribeReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcUnsubscribeReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq\n                 */\n                RpcUnsubscribeReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcUnsubscribeReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcUnsubscribeReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcUnsubscribeReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcUnsubscribeReq.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcUnsubscribeReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcUnsubscribeReq} message RpcUnsubscribeReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcUnsubscribeReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcUnsubscribeReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcUnsubscribeReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcUnsubscribeReq;\n            })();\n\n            pb.RpcUnsubscribeRsp = (function() {\n\n                /**\n                 * Properties of a RpcUnsubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcUnsubscribeRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcUnsubscribeRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcUnsubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcUnsubscribeRsp.\n                 * @implements IRpcUnsubscribeRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp=} [properties] Properties to set\n                 */\n                function RpcUnsubscribeRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcUnsubscribeRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @instance\n                 */\n                RpcUnsubscribeRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcUnsubscribeRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp instance\n                 */\n                RpcUnsubscribeRsp.create = function create(properties) {\n                    return new RpcUnsubscribeRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp} message RpcUnsubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp} message RpcUnsubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcUnsubscribeRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcUnsubscribeRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcUnsubscribeRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcUnsubscribeRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp\n                 */\n                RpcUnsubscribeRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcUnsubscribeRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcUnsubscribeRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcUnsubscribeRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcUnsubscribeRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcUnsubscribeRsp} message RpcUnsubscribeRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcUnsubscribeRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcUnsubscribeRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcUnsubscribeRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcUnsubscribeRsp;\n            })();\n\n            pb.RpcSubmitOrderReq = (function() {\n\n                /**\n                 * Properties of a RpcSubmitOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubmitOrderReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSubmitOrderReq commonReq\n                 * @property {xyz.redtorch.pb.ISubmitOrderReqField|null} [submitOrderReq] RpcSubmitOrderReq submitOrderReq\n                 */\n\n                /**\n                 * Constructs a new RpcSubmitOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubmitOrderReq.\n                 * @implements IRpcSubmitOrderReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq=} [properties] Properties to set\n                 */\n                function RpcSubmitOrderReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubmitOrderReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @instance\n                 */\n                RpcSubmitOrderReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSubmitOrderReq submitOrderReq.\n                 * @member {xyz.redtorch.pb.ISubmitOrderReqField|null|undefined} submitOrderReq\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @instance\n                 */\n                RpcSubmitOrderReq.prototype.submitOrderReq = null;\n\n                /**\n                 * Creates a new RpcSubmitOrderReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq instance\n                 */\n                RpcSubmitOrderReq.create = function create(properties) {\n                    return new RpcSubmitOrderReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq} message RpcSubmitOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.submitOrderReq != null && message.hasOwnProperty(\"submitOrderReq\"))\n                        $root.xyz.redtorch.pb.SubmitOrderReqField.encode(message.submitOrderReq, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq} message RpcSubmitOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubmitOrderReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubmitOrderReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubmitOrderReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.submitOrderReq != null && message.hasOwnProperty(\"submitOrderReq\")) {\n                        var error = $root.xyz.redtorch.pb.SubmitOrderReqField.verify(message.submitOrderReq);\n                        if (error)\n                            return \"submitOrderReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubmitOrderReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq\n                 */\n                RpcSubmitOrderReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubmitOrderReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubmitOrderReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubmitOrderReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.submitOrderReq != null) {\n                        if (typeof object.submitOrderReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubmitOrderReq.submitOrderReq: object expected\");\n                        message.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.fromObject(object.submitOrderReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubmitOrderReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubmitOrderReq} message RpcSubmitOrderReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubmitOrderReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.submitOrderReq = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.submitOrderReq != null && message.hasOwnProperty(\"submitOrderReq\"))\n                        object.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.toObject(message.submitOrderReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubmitOrderReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubmitOrderReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubmitOrderReq;\n            })();\n\n            pb.RpcSubmitOrderRsp = (function() {\n\n                /**\n                 * Properties of a RpcSubmitOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubmitOrderRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSubmitOrderRsp commonRsp\n                 * @property {string|null} [orderId] RpcSubmitOrderRsp orderId\n                 */\n\n                /**\n                 * Constructs a new RpcSubmitOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubmitOrderRsp.\n                 * @implements IRpcSubmitOrderRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp=} [properties] Properties to set\n                 */\n                function RpcSubmitOrderRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubmitOrderRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @instance\n                 */\n                RpcSubmitOrderRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcSubmitOrderRsp orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @instance\n                 */\n                RpcSubmitOrderRsp.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new RpcSubmitOrderRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp instance\n                 */\n                RpcSubmitOrderRsp.create = function create(properties) {\n                    return new RpcSubmitOrderRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp} message RpcSubmitOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp} message RpcSubmitOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubmitOrderRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubmitOrderRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubmitOrderRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubmitOrderRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp\n                 */\n                RpcSubmitOrderRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubmitOrderRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubmitOrderRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubmitOrderRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubmitOrderRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubmitOrderRsp} message RpcSubmitOrderRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubmitOrderRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.orderId = \"\";\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubmitOrderRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubmitOrderRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubmitOrderRsp;\n            })();\n\n            pb.RpcCancelOrderReq = (function() {\n\n                /**\n                 * Properties of a RpcCancelOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcCancelOrderReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcCancelOrderReq commonReq\n                 * @property {xyz.redtorch.pb.ICancelOrderReqField|null} [cancelOrderReq] RpcCancelOrderReq cancelOrderReq\n                 */\n\n                /**\n                 * Constructs a new RpcCancelOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcCancelOrderReq.\n                 * @implements IRpcCancelOrderReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq=} [properties] Properties to set\n                 */\n                function RpcCancelOrderReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcCancelOrderReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @instance\n                 */\n                RpcCancelOrderReq.prototype.commonReq = null;\n\n                /**\n                 * RpcCancelOrderReq cancelOrderReq.\n                 * @member {xyz.redtorch.pb.ICancelOrderReqField|null|undefined} cancelOrderReq\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @instance\n                 */\n                RpcCancelOrderReq.prototype.cancelOrderReq = null;\n\n                /**\n                 * Creates a new RpcCancelOrderReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq instance\n                 */\n                RpcCancelOrderReq.create = function create(properties) {\n                    return new RpcCancelOrderReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderReq message. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq} message RpcCancelOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.cancelOrderReq != null && message.hasOwnProperty(\"cancelOrderReq\"))\n                        $root.xyz.redtorch.pb.CancelOrderReqField.encode(message.cancelOrderReq, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq} message RpcCancelOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcCancelOrderReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcCancelOrderReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcCancelOrderReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.cancelOrderReq != null && message.hasOwnProperty(\"cancelOrderReq\")) {\n                        var error = $root.xyz.redtorch.pb.CancelOrderReqField.verify(message.cancelOrderReq);\n                        if (error)\n                            return \"cancelOrderReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcCancelOrderReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq\n                 */\n                RpcCancelOrderReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcCancelOrderReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcCancelOrderReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcCancelOrderReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.cancelOrderReq != null) {\n                        if (typeof object.cancelOrderReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcCancelOrderReq.cancelOrderReq: object expected\");\n                        message.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.fromObject(object.cancelOrderReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcCancelOrderReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcCancelOrderReq} message RpcCancelOrderReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcCancelOrderReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.cancelOrderReq = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.cancelOrderReq != null && message.hasOwnProperty(\"cancelOrderReq\"))\n                        object.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.toObject(message.cancelOrderReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcCancelOrderReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcCancelOrderReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcCancelOrderReq;\n            })();\n\n            pb.RpcCancelOrderRsp = (function() {\n\n                /**\n                 * Properties of a RpcCancelOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcCancelOrderRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcCancelOrderRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcCancelOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcCancelOrderRsp.\n                 * @implements IRpcCancelOrderRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp=} [properties] Properties to set\n                 */\n                function RpcCancelOrderRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcCancelOrderRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @instance\n                 */\n                RpcCancelOrderRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcCancelOrderRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp instance\n                 */\n                RpcCancelOrderRsp.create = function create(properties) {\n                    return new RpcCancelOrderRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp} message RpcCancelOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp} message RpcCancelOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcCancelOrderRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcCancelOrderRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcCancelOrderRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcCancelOrderRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp\n                 */\n                RpcCancelOrderRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcCancelOrderRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcCancelOrderRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcCancelOrderRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcCancelOrderRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcCancelOrderRsp} message RpcCancelOrderRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcCancelOrderRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcCancelOrderRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcCancelOrderRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcCancelOrderRsp;\n            })();\n\n            pb.RpcSearchContractReq = (function() {\n\n                /**\n                 * Properties of a RpcSearchContractReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSearchContractReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSearchContractReq commonReq\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcSearchContractReq contract\n                 */\n\n                /**\n                 * Constructs a new RpcSearchContractReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSearchContractReq.\n                 * @implements IRpcSearchContractReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq=} [properties] Properties to set\n                 */\n                function RpcSearchContractReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSearchContractReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @instance\n                 */\n                RpcSearchContractReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSearchContractReq contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @instance\n                 */\n                RpcSearchContractReq.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcSearchContractReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq instance\n                 */\n                RpcSearchContractReq.create = function create(properties) {\n                    return new RpcSearchContractReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq} message RpcSearchContractReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq} message RpcSearchContractReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSearchContractReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSearchContractReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSearchContractReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSearchContractReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSearchContractReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSearchContractReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq\n                 */\n                RpcSearchContractReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSearchContractReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSearchContractReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSearchContractReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSearchContractReq.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSearchContractReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSearchContractReq} message RpcSearchContractReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSearchContractReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contract = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSearchContractReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSearchContractReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSearchContractReq;\n            })();\n\n            pb.RpcSearchContractRsp = (function() {\n\n                /**\n                 * Properties of a RpcSearchContractRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSearchContractRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSearchContractRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcSearchContractRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSearchContractRsp.\n                 * @implements IRpcSearchContractRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp=} [properties] Properties to set\n                 */\n                function RpcSearchContractRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSearchContractRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @instance\n                 */\n                RpcSearchContractRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcSearchContractRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp instance\n                 */\n                RpcSearchContractRsp.create = function create(properties) {\n                    return new RpcSearchContractRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp} message RpcSearchContractRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp} message RpcSearchContractRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSearchContractRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSearchContractRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSearchContractRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSearchContractRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSearchContractRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSearchContractRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp\n                 */\n                RpcSearchContractRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSearchContractRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSearchContractRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSearchContractRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSearchContractRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSearchContractRsp} message RpcSearchContractRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSearchContractRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSearchContractRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSearchContractRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSearchContractRsp;\n            })();\n\n            pb.RpcGetOrderListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetOrderListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetOrderListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetOrderListReq.\n                 * @implements IRpcGetOrderListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq=} [properties] Properties to set\n                 */\n                function RpcGetOrderListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetOrderListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @instance\n                 */\n                RpcGetOrderListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetOrderListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq instance\n                 */\n                RpcGetOrderListReq.create = function create(properties) {\n                    return new RpcGetOrderListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq} message RpcGetOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq} message RpcGetOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetOrderListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetOrderListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetOrderListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetOrderListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq\n                 */\n                RpcGetOrderListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetOrderListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetOrderListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetOrderListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetOrderListReq} message RpcGetOrderListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetOrderListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetOrderListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetOrderListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetOrderListReq;\n            })();\n\n            pb.RpcGetOrderListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetOrderListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetOrderListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcGetOrderListRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcGetOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetOrderListRsp.\n                 * @implements IRpcGetOrderListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp=} [properties] Properties to set\n                 */\n                function RpcGetOrderListRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetOrderListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @instance\n                 */\n                RpcGetOrderListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetOrderListRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @instance\n                 */\n                RpcGetOrderListRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetOrderListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp instance\n                 */\n                RpcGetOrderListRsp.create = function create(properties) {\n                    return new RpcGetOrderListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp} message RpcGetOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp} message RpcGetOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetOrderListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetOrderListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetOrderListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetOrderListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp\n                 */\n                RpcGetOrderListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetOrderListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetOrderListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetOrderListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetOrderListRsp} message RpcGetOrderListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetOrderListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetOrderListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetOrderListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetOrderListRsp;\n            })();\n\n            pb.RpcGetWorkingOrderListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetWorkingOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetWorkingOrderListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetWorkingOrderListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetWorkingOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetWorkingOrderListReq.\n                 * @implements IRpcGetWorkingOrderListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq=} [properties] Properties to set\n                 */\n                function RpcGetWorkingOrderListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetWorkingOrderListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @instance\n                 */\n                RpcGetWorkingOrderListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetWorkingOrderListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq instance\n                 */\n                RpcGetWorkingOrderListReq.create = function create(properties) {\n                    return new RpcGetWorkingOrderListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetWorkingOrderListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetWorkingOrderListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetWorkingOrderListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq\n                 */\n                RpcGetWorkingOrderListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetWorkingOrderListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetWorkingOrderListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetWorkingOrderListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetWorkingOrderListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetWorkingOrderListReq;\n            })();\n\n            pb.RpcGetWorkingOrderListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetWorkingOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetWorkingOrderListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetWorkingOrderListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcGetWorkingOrderListRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcGetWorkingOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetWorkingOrderListRsp.\n                 * @implements IRpcGetWorkingOrderListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp=} [properties] Properties to set\n                 */\n                function RpcGetWorkingOrderListRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetWorkingOrderListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @instance\n                 */\n                RpcGetWorkingOrderListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetWorkingOrderListRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @instance\n                 */\n                RpcGetWorkingOrderListRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetWorkingOrderListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp instance\n                 */\n                RpcGetWorkingOrderListRsp.create = function create(properties) {\n                    return new RpcGetWorkingOrderListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetWorkingOrderListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetWorkingOrderListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetWorkingOrderListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp\n                 */\n                RpcGetWorkingOrderListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetWorkingOrderListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetWorkingOrderListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetWorkingOrderListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetWorkingOrderListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetWorkingOrderListRsp;\n            })();\n\n            pb.RpcQueryOrderByOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderByOrderIdReq commonReq\n                 * @property {string|null} [orderId] RpcQueryOrderByOrderIdReq orderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOrderIdReq.\n                 * @implements IRpcQueryOrderByOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderByOrderIdReq orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdReq.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderByOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq instance\n                 */\n                RpcQueryOrderByOrderIdReq.create = function create(properties) {\n                    return new RpcQueryOrderByOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq\n                 */\n                RpcQueryOrderByOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.orderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOrderIdReq;\n            })();\n\n            pb.RpcQueryOrderByOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderByOrderIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcQueryOrderByOrderIdRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOrderIdRsp.\n                 * @implements IRpcQueryOrderByOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOrderIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderByOrderIdRsp order.\n                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdRsp.prototype.order = null;\n\n                /**\n                 * Creates a new RpcQueryOrderByOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp instance\n                 */\n                RpcQueryOrderByOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryOrderByOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp\n                 */\n                RpcQueryOrderByOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.order: object expected\");\n                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.order = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOrderIdRsp;\n            })();\n\n            pb.RpcQueryOrderByOriginOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOriginOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderByOriginOrderIdReq commonReq\n                 * @property {string|null} [originOrderId] RpcQueryOrderByOriginOrderIdReq originOrderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOriginOrderIdReq.\n                 * @implements IRpcQueryOrderByOriginOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOriginOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdReq originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdReq.prototype.originOrderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderByOriginOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq instance\n                 */\n                RpcQueryOrderByOriginOrderIdReq.create = function create(properties) {\n                    return new RpcQueryOrderByOriginOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originOrderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.originOrderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOriginOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOriginOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOriginOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq\n                 */\n                RpcQueryOrderByOriginOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOriginOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOriginOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.originOrderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOriginOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOriginOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOriginOrderIdReq;\n            })();\n\n            pb.RpcQueryOrderByOriginOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOriginOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderByOriginOrderIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcQueryOrderByOriginOrderIdRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOriginOrderIdRsp.\n                 * @implements IRpcQueryOrderByOriginOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOriginOrderIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdRsp order.\n                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.prototype.order = null;\n\n                /**\n                 * Creates a new RpcQueryOrderByOriginOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp instance\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryOrderByOriginOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOriginOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOriginOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.order: object expected\");\n                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOriginOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.order = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOriginOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOriginOrderIdRsp;\n            })();\n\n            pb.RpcQueryOrderListByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderListByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryOrderListByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByAccountIdReq.\n                 * @implements IRpcQueryOrderListByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderListByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderListByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq instance\n                 */\n                RpcQueryOrderListByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryOrderListByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq\n                 */\n                RpcQueryOrderListByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByAccountIdReq;\n            })();\n\n            pb.RpcQueryOrderListByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderListByAccountIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcQueryOrderListByAccountIdRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByAccountIdRsp.\n                 * @implements IRpcQueryOrderListByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByAccountIdRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderListByAccountIdRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryOrderListByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp instance\n                 */\n                RpcQueryOrderListByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryOrderListByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp\n                 */\n                RpcQueryOrderListByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByAccountIdRsp;\n            })();\n\n            pb.RpcQueryOrderListByUnifiedSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByUnifiedSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderListByUnifiedSymbolReq commonReq\n                 * @property {string|null} [unifiedSymbol] RpcQueryOrderListByUnifiedSymbolReq unifiedSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByUnifiedSymbolReq.\n                 * @implements IRpcQueryOrderListByUnifiedSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByUnifiedSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByUnifiedSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderListByUnifiedSymbolReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderListByUnifiedSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq instance\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.create = function create(properties) {\n                    return new RpcQueryOrderListByUnifiedSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq} message RpcQueryOrderListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq} message RpcQueryOrderListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUnifiedSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByUnifiedSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByUnifiedSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} message RpcQueryOrderListByUnifiedSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.unifiedSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByUnifiedSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByUnifiedSymbolReq;\n            })();\n\n            pb.RpcQueryOrderListByUnifiedSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByUnifiedSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderListByUnifiedSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcQueryOrderListByUnifiedSymbolRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByUnifiedSymbolRsp.\n                 * @implements IRpcQueryOrderListByUnifiedSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByUnifiedSymbolRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByUnifiedSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderListByUnifiedSymbolRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryOrderListByUnifiedSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp instance\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.create = function create(properties) {\n                    return new RpcQueryOrderListByUnifiedSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp} message RpcQueryOrderListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp} message RpcQueryOrderListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUnifiedSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByUnifiedSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByUnifiedSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} message RpcQueryOrderListByUnifiedSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByUnifiedSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByUnifiedSymbolRsp;\n            })();\n\n            pb.RpcGetTradeListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetTradeListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTradeListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetTradeListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetTradeListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTradeListReq.\n                 * @implements IRpcGetTradeListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq=} [properties] Properties to set\n                 */\n                function RpcGetTradeListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTradeListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @instance\n                 */\n                RpcGetTradeListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetTradeListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq instance\n                 */\n                RpcGetTradeListReq.create = function create(properties) {\n                    return new RpcGetTradeListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq} message RpcGetTradeListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq} message RpcGetTradeListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTradeListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTradeListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTradeListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTradeListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq\n                 */\n                RpcGetTradeListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTradeListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTradeListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTradeListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTradeListReq} message RpcGetTradeListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTradeListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTradeListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTradeListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTradeListReq;\n            })();\n\n            pb.RpcGetTradeListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetTradeListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTradeListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetTradeListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcGetTradeListRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcGetTradeListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTradeListRsp.\n                 * @implements IRpcGetTradeListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp=} [properties] Properties to set\n                 */\n                function RpcGetTradeListRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTradeListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @instance\n                 */\n                RpcGetTradeListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetTradeListRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @instance\n                 */\n                RpcGetTradeListRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetTradeListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp instance\n                 */\n                RpcGetTradeListRsp.create = function create(properties) {\n                    return new RpcGetTradeListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp} message RpcGetTradeListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp} message RpcGetTradeListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTradeListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTradeListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTradeListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTradeListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp\n                 */\n                RpcGetTradeListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTradeListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTradeListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTradeListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTradeListRsp} message RpcGetTradeListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTradeListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTradeListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTradeListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTradeListRsp;\n            })();\n\n            pb.RpcQueryTradeByTradeIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeByTradeIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeByTradeIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeByTradeIdReq commonReq\n                 * @property {string|null} [tradeId] RpcQueryTradeByTradeIdReq tradeId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeByTradeIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeByTradeIdReq.\n                 * @implements IRpcQueryTradeByTradeIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeByTradeIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeByTradeIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeByTradeIdReq tradeId.\n                 * @member {string} tradeId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdReq.prototype.tradeId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeByTradeIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq instance\n                 */\n                RpcQueryTradeByTradeIdReq.create = function create(properties) {\n                    return new RpcQueryTradeByTradeIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.tradeId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.tradeId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeByTradeIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeByTradeIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        if (!$util.isString(message.tradeId))\n                            return \"tradeId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeByTradeIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq\n                 */\n                RpcQueryTradeByTradeIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.tradeId != null)\n                        message.tradeId = String(object.tradeId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeByTradeIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeByTradeIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.tradeId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        object.tradeId = message.tradeId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeByTradeIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeByTradeIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeByTradeIdReq;\n            })();\n\n            pb.RpcQueryTradeByTradeIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeByTradeIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeByTradeIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeByTradeIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.ITradeField|null} [trade] RpcQueryTradeByTradeIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeByTradeIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeByTradeIdRsp.\n                 * @implements IRpcQueryTradeByTradeIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeByTradeIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeByTradeIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeByTradeIdRsp trade.\n                 * @member {xyz.redtorch.pb.ITradeField|null|undefined} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdRsp.prototype.trade = null;\n\n                /**\n                 * Creates a new RpcQueryTradeByTradeIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp instance\n                 */\n                RpcQueryTradeByTradeIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeByTradeIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        $root.xyz.redtorch.pb.TradeField.encode(message.trade, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.trade = $root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeByTradeIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeByTradeIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade);\n                        if (error)\n                            return \"trade.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeByTradeIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp\n                 */\n                RpcQueryTradeByTradeIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade != null) {\n                        if (typeof object.trade !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.trade: object expected\");\n                        message.trade = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeByTradeIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeByTradeIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.trade = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        object.trade = $root.xyz.redtorch.pb.TradeField.toObject(message.trade, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeByTradeIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeByTradeIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeByTradeIdRsp;\n            })();\n\n            pb.RpcQueryTradeListByUnifiedSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByUnifiedSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByUnifiedSymbolReq commonReq\n                 * @property {string|null} [unifiedSymbol] RpcQueryTradeListByUnifiedSymbolReq unifiedSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByUnifiedSymbolReq.\n                 * @implements IRpcQueryTradeListByUnifiedSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByUnifiedSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByUnifiedSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByUnifiedSymbolReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByUnifiedSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq instance\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.create = function create(properties) {\n                    return new RpcQueryTradeListByUnifiedSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq} message RpcQueryTradeListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq} message RpcQueryTradeListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUnifiedSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByUnifiedSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByUnifiedSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} message RpcQueryTradeListByUnifiedSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.unifiedSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByUnifiedSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByUnifiedSymbolReq;\n            })();\n\n            pb.RpcQueryTradeListByUnifiedSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByUnifiedSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByUnifiedSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByUnifiedSymbolRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByUnifiedSymbolRsp.\n                 * @implements IRpcQueryTradeListByUnifiedSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByUnifiedSymbolRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByUnifiedSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByUnifiedSymbolRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByUnifiedSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp instance\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByUnifiedSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp} message RpcQueryTradeListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp} message RpcQueryTradeListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUnifiedSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByUnifiedSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByUnifiedSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} message RpcQueryTradeListByUnifiedSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByUnifiedSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByUnifiedSymbolRsp;\n            })();\n\n            pb.RpcQueryTradeListByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryTradeListByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByAccountIdReq.\n                 * @implements IRpcQueryTradeListByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq instance\n                 */\n                RpcQueryTradeListByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryTradeListByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq\n                 */\n                RpcQueryTradeListByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByAccountIdReq;\n            })();\n\n            pb.RpcQueryTradeListByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByAccountIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByAccountIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByAccountIdRsp.\n                 * @implements IRpcQueryTradeListByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByAccountIdRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByAccountIdRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp instance\n                 */\n                RpcQueryTradeListByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp\n                 */\n                RpcQueryTradeListByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByAccountIdRsp;\n            })();\n\n            pb.RpcQueryTradeListByOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByOrderIdReq commonReq\n                 * @property {string|null} [orderId] RpcQueryTradeListByOrderIdReq orderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOrderIdReq.\n                 * @implements IRpcQueryTradeListByOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByOrderIdReq orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdReq.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq instance\n                 */\n                RpcQueryTradeListByOrderIdReq.create = function create(properties) {\n                    return new RpcQueryTradeListByOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq\n                 */\n                RpcQueryTradeListByOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.orderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOrderIdReq;\n            })();\n\n            pb.RpcQueryTradeListByOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByOrderIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByOrderIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOrderIdRsp.\n                 * @implements IRpcQueryTradeListByOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOrderIdRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByOrderIdRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp instance\n                 */\n                RpcQueryTradeListByOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp\n                 */\n                RpcQueryTradeListByOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOrderIdRsp;\n            })();\n\n            pb.RpcQueryTradeListByOriginOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOriginOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByOriginOrderIdReq commonReq\n                 * @property {string|null} [originOrderId] RpcQueryTradeListByOriginOrderIdReq originOrderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOriginOrderIdReq.\n                 * @implements IRpcQueryTradeListByOriginOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOriginOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdReq originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.prototype.originOrderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByOriginOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq instance\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.create = function create(properties) {\n                    return new RpcQueryTradeListByOriginOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originOrderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.originOrderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOriginOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOriginOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOriginOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.originOrderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOriginOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOriginOrderIdReq;\n            })();\n\n            pb.RpcQueryTradeListByOriginOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOriginOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByOriginOrderIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByOriginOrderIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOriginOrderIdRsp.\n                 * @implements IRpcQueryTradeListByOriginOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOriginOrderIdRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByOriginOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp instance\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByOriginOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOriginOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOriginOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOriginOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOriginOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOriginOrderIdRsp;\n            })();\n\n            pb.RpcGetPositionListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetPositionListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetPositionListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetPositionListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetPositionListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetPositionListReq.\n                 * @implements IRpcGetPositionListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq=} [properties] Properties to set\n                 */\n                function RpcGetPositionListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetPositionListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @instance\n                 */\n                RpcGetPositionListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetPositionListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq instance\n                 */\n                RpcGetPositionListReq.create = function create(properties) {\n                    return new RpcGetPositionListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq} message RpcGetPositionListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq} message RpcGetPositionListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetPositionListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetPositionListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetPositionListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetPositionListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq\n                 */\n                RpcGetPositionListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetPositionListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetPositionListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetPositionListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetPositionListReq} message RpcGetPositionListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetPositionListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetPositionListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetPositionListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetPositionListReq;\n            })();\n\n            pb.RpcGetPositionListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetPositionListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetPositionListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetPositionListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcGetPositionListRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcGetPositionListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetPositionListRsp.\n                 * @implements IRpcGetPositionListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp=} [properties] Properties to set\n                 */\n                function RpcGetPositionListRsp(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetPositionListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @instance\n                 */\n                RpcGetPositionListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetPositionListRsp position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @instance\n                 */\n                RpcGetPositionListRsp.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetPositionListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp instance\n                 */\n                RpcGetPositionListRsp.create = function create(properties) {\n                    return new RpcGetPositionListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp} message RpcGetPositionListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp} message RpcGetPositionListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetPositionListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetPositionListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetPositionListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetPositionListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp\n                 */\n                RpcGetPositionListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetPositionListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetPositionListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListRsp.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListRsp.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetPositionListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetPositionListRsp} message RpcGetPositionListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetPositionListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetPositionListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetPositionListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetPositionListRsp;\n            })();\n\n            pb.RpcQueryPositionByPositionIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionByPositionIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionByPositionIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionByPositionIdReq commonReq\n                 * @property {string|null} [positionId] RpcQueryPositionByPositionIdReq positionId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionByPositionIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionByPositionIdReq.\n                 * @implements IRpcQueryPositionByPositionIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryPositionByPositionIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionByPositionIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryPositionByPositionIdReq positionId.\n                 * @member {string} positionId\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdReq.prototype.positionId = \"\";\n\n                /**\n                 * Creates a new RpcQueryPositionByPositionIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq instance\n                 */\n                RpcQueryPositionByPositionIdReq.create = function create(properties) {\n                    return new RpcQueryPositionByPositionIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.positionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.positionId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionByPositionIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionByPositionIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        if (!$util.isString(message.positionId))\n                            return \"positionId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionByPositionIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq\n                 */\n                RpcQueryPositionByPositionIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.positionId != null)\n                        message.positionId = String(object.positionId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionByPositionIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionByPositionIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.positionId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        object.positionId = message.positionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionByPositionIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionByPositionIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionByPositionIdReq;\n            })();\n\n            pb.RpcQueryPositionByPositionIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionByPositionIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionByPositionIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionByPositionIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IPositionField|null} [position] RpcQueryPositionByPositionIdRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionByPositionIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionByPositionIdRsp.\n                 * @implements IRpcQueryPositionByPositionIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryPositionByPositionIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionByPositionIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryPositionByPositionIdRsp position.\n                 * @member {xyz.redtorch.pb.IPositionField|null|undefined} position\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdRsp.prototype.position = null;\n\n                /**\n                 * Creates a new RpcQueryPositionByPositionIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp instance\n                 */\n                RpcQueryPositionByPositionIdRsp.create = function create(properties) {\n                    return new RpcQueryPositionByPositionIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        $root.xyz.redtorch.pb.PositionField.encode(message.position, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.position = $root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionByPositionIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionByPositionIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        var error = $root.xyz.redtorch.pb.PositionField.verify(message.position);\n                        if (error)\n                            return \"position.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionByPositionIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp\n                 */\n                RpcQueryPositionByPositionIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position != null) {\n                        if (typeof object.position !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.position: object expected\");\n                        message.position = $root.xyz.redtorch.pb.PositionField.fromObject(object.position);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionByPositionIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionByPositionIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.position = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        object.position = $root.xyz.redtorch.pb.PositionField.toObject(message.position, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionByPositionIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionByPositionIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionByPositionIdRsp;\n            })();\n\n            pb.RpcQueryPositionListByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionListByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryPositionListByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByAccountIdReq.\n                 * @implements IRpcQueryPositionListByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryPositionListByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryPositionListByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq instance\n                 */\n                RpcQueryPositionListByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryPositionListByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq\n                 */\n                RpcQueryPositionListByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByAccountIdReq;\n            })();\n\n            pb.RpcQueryPositionListByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionListByAccountIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcQueryPositionListByAccountIdRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByAccountIdRsp.\n                 * @implements IRpcQueryPositionListByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByAccountIdRsp(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryPositionListByAccountIdRsp position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdRsp.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryPositionListByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp instance\n                 */\n                RpcQueryPositionListByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryPositionListByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp\n                 */\n                RpcQueryPositionListByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByAccountIdRsp;\n            })();\n\n            pb.RpcQueryPositionListByUnifiedSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByUnifiedSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionListByUnifiedSymbolReq commonReq\n                 * @property {string|null} [unifiedSymbol] RpcQueryPositionListByUnifiedSymbolReq unifiedSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByUnifiedSymbolReq.\n                 * @implements IRpcQueryPositionListByUnifiedSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByUnifiedSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByUnifiedSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryPositionListByUnifiedSymbolReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryPositionListByUnifiedSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq instance\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.create = function create(properties) {\n                    return new RpcQueryPositionListByUnifiedSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq} message RpcQueryPositionListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq} message RpcQueryPositionListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUnifiedSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByUnifiedSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByUnifiedSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} message RpcQueryPositionListByUnifiedSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.unifiedSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByUnifiedSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByUnifiedSymbolReq;\n            })();\n\n            pb.RpcQueryPositionListByUnifiedSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByUnifiedSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionListByUnifiedSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcQueryPositionListByUnifiedSymbolRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByUnifiedSymbolRsp.\n                 * @implements IRpcQueryPositionListByUnifiedSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByUnifiedSymbolRsp(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByUnifiedSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryPositionListByUnifiedSymbolRsp position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryPositionListByUnifiedSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp instance\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.create = function create(properties) {\n                    return new RpcQueryPositionListByUnifiedSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp} message RpcQueryPositionListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp} message RpcQueryPositionListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUnifiedSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByUnifiedSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByUnifiedSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} message RpcQueryPositionListByUnifiedSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByUnifiedSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByUnifiedSymbolRsp;\n            })();\n\n            pb.RpcGetAccountListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetAccountListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetAccountListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetAccountListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetAccountListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetAccountListReq.\n                 * @implements IRpcGetAccountListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq=} [properties] Properties to set\n                 */\n                function RpcGetAccountListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetAccountListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @instance\n                 */\n                RpcGetAccountListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetAccountListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq instance\n                 */\n                RpcGetAccountListReq.create = function create(properties) {\n                    return new RpcGetAccountListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq} message RpcGetAccountListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq} message RpcGetAccountListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetAccountListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetAccountListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetAccountListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetAccountListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq\n                 */\n                RpcGetAccountListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetAccountListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetAccountListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetAccountListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetAccountListReq} message RpcGetAccountListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetAccountListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetAccountListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetAccountListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetAccountListReq;\n            })();\n\n            pb.RpcGetAccountListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetAccountListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetAccountListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetAccountListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcGetAccountListRsp account\n                 */\n\n                /**\n                 * Constructs a new RpcGetAccountListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetAccountListRsp.\n                 * @implements IRpcGetAccountListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp=} [properties] Properties to set\n                 */\n                function RpcGetAccountListRsp(properties) {\n                    this.account = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetAccountListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @instance\n                 */\n                RpcGetAccountListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetAccountListRsp account.\n                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @instance\n                 */\n                RpcGetAccountListRsp.prototype.account = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetAccountListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp instance\n                 */\n                RpcGetAccountListRsp.create = function create(properties) {\n                    return new RpcGetAccountListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp} message RpcGetAccountListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.account != null && message.account.length)\n                        for (var i = 0; i < message.account.length; ++i)\n                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp} message RpcGetAccountListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetAccountListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.account && message.account.length))\n                                message.account = [];\n                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetAccountListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetAccountListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        if (!Array.isArray(message.account))\n                            return \"account: array expected\";\n                        for (var i = 0; i < message.account.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);\n                            if (error)\n                                return \"account.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetAccountListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp\n                 */\n                RpcGetAccountListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetAccountListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetAccountListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.account) {\n                        if (!Array.isArray(object.account))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListRsp.account: array expected\");\n                        message.account = [];\n                        for (var i = 0; i < object.account.length; ++i) {\n                            if (typeof object.account[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListRsp.account: object expected\");\n                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetAccountListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetAccountListRsp} message RpcGetAccountListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetAccountListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.account = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.account && message.account.length) {\n                        object.account = [];\n                        for (var j = 0; j < message.account.length; ++j)\n                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetAccountListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetAccountListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetAccountListRsp;\n            })();\n\n            pb.RpcQueryAccountByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryAccountByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryAccountByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountByAccountIdReq.\n                 * @implements IRpcQueryAccountByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryAccountByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryAccountByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryAccountByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq instance\n                 */\n                RpcQueryAccountByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryAccountByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq\n                 */\n                RpcQueryAccountByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountByAccountIdReq;\n            })();\n\n            pb.RpcQueryAccountByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryAccountByAccountIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IAccountField|null} [account] RpcQueryAccountByAccountIdRsp account\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountByAccountIdRsp.\n                 * @implements IRpcQueryAccountByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryAccountByAccountIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryAccountByAccountIdRsp account.\n                 * @member {xyz.redtorch.pb.IAccountField|null|undefined} account\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdRsp.prototype.account = null;\n\n                /**\n                 * Creates a new RpcQueryAccountByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp instance\n                 */\n                RpcQueryAccountByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryAccountByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        $root.xyz.redtorch.pb.AccountField.encode(message.account, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.account = $root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        var error = $root.xyz.redtorch.pb.AccountField.verify(message.account);\n                        if (error)\n                            return \"account.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp\n                 */\n                RpcQueryAccountByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.account != null) {\n                        if (typeof object.account !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.account: object expected\");\n                        message.account = $root.xyz.redtorch.pb.AccountField.fromObject(object.account);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.account = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        object.account = $root.xyz.redtorch.pb.AccountField.toObject(message.account, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountByAccountIdRsp;\n            })();\n\n            pb.RpcQueryAccountListByAccountCodeReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountListByAccountCodeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountListByAccountCodeReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryAccountListByAccountCodeReq commonReq\n                 * @property {string|null} [accountCode] RpcQueryAccountListByAccountCodeReq accountCode\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountListByAccountCodeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountListByAccountCodeReq.\n                 * @implements IRpcQueryAccountListByAccountCodeReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq=} [properties] Properties to set\n                 */\n                function RpcQueryAccountListByAccountCodeReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountListByAccountCodeReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryAccountListByAccountCodeReq accountCode.\n                 * @member {string} accountCode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeReq.prototype.accountCode = \"\";\n\n                /**\n                 * Creates a new RpcQueryAccountListByAccountCodeReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq instance\n                 */\n                RpcQueryAccountListByAccountCodeReq.create = function create(properties) {\n                    return new RpcQueryAccountListByAccountCodeReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountCode);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountCode = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountListByAccountCodeReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountListByAccountCodeReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        if (!$util.isString(message.accountCode))\n                            return \"accountCode: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountListByAccountCodeReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq\n                 */\n                RpcQueryAccountListByAccountCodeReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountCode != null)\n                        message.accountCode = String(object.accountCode);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountListByAccountCodeReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountListByAccountCodeReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountCode = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        object.accountCode = message.accountCode;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountListByAccountCodeReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountListByAccountCodeReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountListByAccountCodeReq;\n            })();\n\n            pb.RpcQueryAccountListByAccountCodeRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountListByAccountCodeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountListByAccountCodeRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryAccountListByAccountCodeRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcQueryAccountListByAccountCodeRsp account\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountListByAccountCodeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountListByAccountCodeRsp.\n                 * @implements IRpcQueryAccountListByAccountCodeRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp=} [properties] Properties to set\n                 */\n                function RpcQueryAccountListByAccountCodeRsp(properties) {\n                    this.account = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountListByAccountCodeRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryAccountListByAccountCodeRsp account.\n                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeRsp.prototype.account = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryAccountListByAccountCodeRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp instance\n                 */\n                RpcQueryAccountListByAccountCodeRsp.create = function create(properties) {\n                    return new RpcQueryAccountListByAccountCodeRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.account != null && message.account.length)\n                        for (var i = 0; i < message.account.length; ++i)\n                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.account && message.account.length))\n                                message.account = [];\n                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountListByAccountCodeRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountListByAccountCodeRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        if (!Array.isArray(message.account))\n                            return \"account: array expected\";\n                        for (var i = 0; i < message.account.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);\n                            if (error)\n                                return \"account.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountListByAccountCodeRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp\n                 */\n                RpcQueryAccountListByAccountCodeRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.account) {\n                        if (!Array.isArray(object.account))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.account: array expected\");\n                        message.account = [];\n                        for (var i = 0; i < object.account.length; ++i) {\n                            if (typeof object.account[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.account: object expected\");\n                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountListByAccountCodeRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountListByAccountCodeRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.account = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.account && message.account.length) {\n                        object.account = [];\n                        for (var j = 0; j < message.account.length; ++j)\n                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountListByAccountCodeRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountListByAccountCodeRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountListByAccountCodeRsp;\n            })();\n\n            pb.RpcGetContractListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetContractListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetContractListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetContractListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetContractListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetContractListReq.\n                 * @implements IRpcGetContractListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq=} [properties] Properties to set\n                 */\n                function RpcGetContractListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetContractListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @instance\n                 */\n                RpcGetContractListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetContractListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq instance\n                 */\n                RpcGetContractListReq.create = function create(properties) {\n                    return new RpcGetContractListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq} message RpcGetContractListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq} message RpcGetContractListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetContractListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetContractListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetContractListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetContractListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetContractListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetContractListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq\n                 */\n                RpcGetContractListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetContractListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetContractListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetContractListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetContractListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetContractListReq} message RpcGetContractListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetContractListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetContractListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetContractListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetContractListReq;\n            })();\n\n            pb.RpcGetContractListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetContractListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetContractListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetContractListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcGetContractListRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcGetContractListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetContractListRsp.\n                 * @implements IRpcGetContractListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp=} [properties] Properties to set\n                 */\n                function RpcGetContractListRsp(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetContractListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @instance\n                 */\n                RpcGetContractListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetContractListRsp contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @instance\n                 */\n                RpcGetContractListRsp.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetContractListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp instance\n                 */\n                RpcGetContractListRsp.create = function create(properties) {\n                    return new RpcGetContractListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp} message RpcGetContractListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp} message RpcGetContractListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetContractListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetContractListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetContractListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetContractListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetContractListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetContractListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp\n                 */\n                RpcGetContractListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetContractListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetContractListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetContractListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetContractListRsp.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetContractListRsp.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetContractListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetContractListRsp} message RpcGetContractListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetContractListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetContractListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetContractListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetContractListRsp;\n            })();\n\n            pb.RpcQueryContractByContractIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractByContractIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractByContractIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractByContractIdReq commonReq\n                 * @property {string|null} [contractId] RpcQueryContractByContractIdReq contractId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractByContractIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractByContractIdReq.\n                 * @implements IRpcQueryContractByContractIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryContractByContractIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractByContractIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @instance\n                 */\n                RpcQueryContractByContractIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryContractByContractIdReq contractId.\n                 * @member {string} contractId\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @instance\n                 */\n                RpcQueryContractByContractIdReq.prototype.contractId = \"\";\n\n                /**\n                 * Creates a new RpcQueryContractByContractIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq instance\n                 */\n                RpcQueryContractByContractIdReq.create = function create(properties) {\n                    return new RpcQueryContractByContractIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByContractIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq} message RpcQueryContractByContractIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByContractIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.contractId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByContractIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq} message RpcQueryContractByContractIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByContractIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByContractIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByContractIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contractId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByContractIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByContractIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractByContractIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractByContractIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        if (!$util.isString(message.contractId))\n                            return \"contractId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractByContractIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq\n                 */\n                RpcQueryContractByContractIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractByContractIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractByContractIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contractId != null)\n                        message.contractId = String(object.contractId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractByContractIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractByContractIdReq} message RpcQueryContractByContractIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractByContractIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contractId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        object.contractId = message.contractId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractByContractIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractByContractIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractByContractIdReq;\n            })();\n\n            pb.RpcQueryContractByContractIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractByContractIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractByContractIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractByContractIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcQueryContractByContractIdRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractByContractIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractByContractIdRsp.\n                 * @implements IRpcQueryContractByContractIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryContractByContractIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractByContractIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @instance\n                 */\n                RpcQueryContractByContractIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryContractByContractIdRsp contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @instance\n                 */\n                RpcQueryContractByContractIdRsp.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcQueryContractByContractIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp instance\n                 */\n                RpcQueryContractByContractIdRsp.create = function create(properties) {\n                    return new RpcQueryContractByContractIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByContractIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp} message RpcQueryContractByContractIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByContractIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByContractIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp} message RpcQueryContractByContractIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByContractIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByContractIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByContractIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByContractIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByContractIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractByContractIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractByContractIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractByContractIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp\n                 */\n                RpcQueryContractByContractIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractByContractIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractByContractIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractByContractIdRsp.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractByContractIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} message RpcQueryContractByContractIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractByContractIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.contract = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractByContractIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractByContractIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractByContractIdRsp;\n            })();\n\n            pb.RpcQueryContractListByUnifiedSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractListByUnifiedSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractListByUnifiedSymbolReq commonReq\n                 * @property {string|null} [unifiedSymbol] RpcQueryContractListByUnifiedSymbolReq unifiedSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractListByUnifiedSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractListByUnifiedSymbolReq.\n                 * @implements IRpcQueryContractListByUnifiedSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryContractListByUnifiedSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractListByUnifiedSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryContractListByUnifiedSymbolReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @instance\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryContractListByUnifiedSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq instance\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.create = function create(properties) {\n                    return new RpcQueryContractListByUnifiedSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq} message RpcQueryContractListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq} message RpcQueryContractListByUnifiedSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByUnifiedSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractListByUnifiedSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractListByUnifiedSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} message RpcQueryContractListByUnifiedSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.unifiedSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractListByUnifiedSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractListByUnifiedSymbolReq;\n            })();\n\n            pb.RpcQueryContractListByUnifiedSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractListByUnifiedSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractListByUnifiedSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcQueryContractListByUnifiedSymbolRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractListByUnifiedSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractListByUnifiedSymbolRsp.\n                 * @implements IRpcQueryContractListByUnifiedSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryContractListByUnifiedSymbolRsp(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractListByUnifiedSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryContractListByUnifiedSymbolRsp contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @instance\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryContractListByUnifiedSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp instance\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.create = function create(properties) {\n                    return new RpcQueryContractListByUnifiedSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp} message RpcQueryContractListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp} message RpcQueryContractListByUnifiedSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByUnifiedSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractListByUnifiedSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractListByUnifiedSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} message RpcQueryContractListByUnifiedSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractListByUnifiedSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractListByUnifiedSymbolRsp;\n            })();\n\n            pb.RpcQueryContractListByGatewayIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractListByGatewayIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractListByGatewayIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractListByGatewayIdReq commonReq\n                 * @property {string|null} [gatewayId] RpcQueryContractListByGatewayIdReq gatewayId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractListByGatewayIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractListByGatewayIdReq.\n                 * @implements IRpcQueryContractListByGatewayIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryContractListByGatewayIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractListByGatewayIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @instance\n                 */\n                RpcQueryContractListByGatewayIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryContractListByGatewayIdReq gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @instance\n                 */\n                RpcQueryContractListByGatewayIdReq.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new RpcQueryContractListByGatewayIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq instance\n                 */\n                RpcQueryContractListByGatewayIdReq.create = function create(properties) {\n                    return new RpcQueryContractListByGatewayIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByGatewayIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq} message RpcQueryContractListByGatewayIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByGatewayIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByGatewayIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq} message RpcQueryContractListByGatewayIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByGatewayIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByGatewayIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByGatewayIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByGatewayIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByGatewayIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractListByGatewayIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractListByGatewayIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractListByGatewayIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq\n                 */\n                RpcQueryContractListByGatewayIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractListByGatewayIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} message RpcQueryContractListByGatewayIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractListByGatewayIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractListByGatewayIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractListByGatewayIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractListByGatewayIdReq;\n            })();\n\n            pb.RpcQueryContractListByGatewayIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractListByGatewayIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractListByGatewayIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractListByGatewayIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcQueryContractListByGatewayIdRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractListByGatewayIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractListByGatewayIdRsp.\n                 * @implements IRpcQueryContractListByGatewayIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryContractListByGatewayIdRsp(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractListByGatewayIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @instance\n                 */\n                RpcQueryContractListByGatewayIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryContractListByGatewayIdRsp contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @instance\n                 */\n                RpcQueryContractListByGatewayIdRsp.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryContractListByGatewayIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp instance\n                 */\n                RpcQueryContractListByGatewayIdRsp.create = function create(properties) {\n                    return new RpcQueryContractListByGatewayIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByGatewayIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp} message RpcQueryContractListByGatewayIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByGatewayIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractListByGatewayIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp} message RpcQueryContractListByGatewayIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractListByGatewayIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByGatewayIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByGatewayIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractListByGatewayIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractListByGatewayIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractListByGatewayIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractListByGatewayIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractListByGatewayIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp\n                 */\n                RpcQueryContractListByGatewayIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractListByGatewayIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} message RpcQueryContractListByGatewayIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractListByGatewayIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractListByGatewayIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractListByGatewayIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractListByGatewayIdRsp;\n            })();\n\n            pb.RpcSyncSlaveNodeRuntimeDataReq = (function() {\n\n                /**\n                 * Properties of a RpcSyncSlaveNodeRuntimeDataReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSyncSlaveNodeRuntimeDataReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSyncSlaveNodeRuntimeDataReq commonReq\n                 * @property {Array.<xyz.redtorch.pb.IGatewayField>|null} [gateway] RpcSyncSlaveNodeRuntimeDataReq gateway\n                 */\n\n                /**\n                 * Constructs a new RpcSyncSlaveNodeRuntimeDataReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSyncSlaveNodeRuntimeDataReq.\n                 * @implements IRpcSyncSlaveNodeRuntimeDataReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq=} [properties] Properties to set\n                 */\n                function RpcSyncSlaveNodeRuntimeDataReq(properties) {\n                    this.gateway = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataReq gateway.\n                 * @member {Array.<xyz.redtorch.pb.IGatewayField>} gateway\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.prototype.gateway = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcSyncSlaveNodeRuntimeDataReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.create = function create(properties) {\n                    return new RpcSyncSlaveNodeRuntimeDataReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.gateway != null && message.gateway.length)\n                        for (var i = 0; i < message.gateway.length; ++i)\n                            $root.xyz.redtorch.pb.GatewayField.encode(message.gateway[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.gateway && message.gateway.length))\n                                message.gateway = [];\n                            message.gateway.push($root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSyncSlaveNodeRuntimeDataReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.gateway != null && message.hasOwnProperty(\"gateway\")) {\n                        if (!Array.isArray(message.gateway))\n                            return \"gateway: array expected\";\n                        for (var i = 0; i < message.gateway.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway[i]);\n                            if (error)\n                                return \"gateway.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSyncSlaveNodeRuntimeDataReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.gateway) {\n                        if (!Array.isArray(object.gateway))\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.gateway: array expected\");\n                        message.gateway = [];\n                        for (var i = 0; i < object.gateway.length; ++i) {\n                            if (typeof object.gateway[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.gateway: object expected\");\n                            message.gateway[i] = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSyncSlaveNodeRuntimeDataReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.gateway = [];\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.gateway && message.gateway.length) {\n                        object.gateway = [];\n                        for (var j = 0; j < message.gateway.length; ++j)\n                            object.gateway[j] = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSyncSlaveNodeRuntimeDataReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSyncSlaveNodeRuntimeDataReq;\n            })();\n\n            pb.RpcSyncSlaveNodeRuntimeDataRsp = (function() {\n\n                /**\n                 * Properties of a RpcSyncSlaveNodeRuntimeDataRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSyncSlaveNodeRuntimeDataRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSyncSlaveNodeRuntimeDataRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IGatewaySettingField>|null} [gatewaySetting] RpcSyncSlaveNodeRuntimeDataRsp gatewaySetting\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [subscribedContract] RpcSyncSlaveNodeRuntimeDataRsp subscribedContract\n                 */\n\n                /**\n                 * Constructs a new RpcSyncSlaveNodeRuntimeDataRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSyncSlaveNodeRuntimeDataRsp.\n                 * @implements IRpcSyncSlaveNodeRuntimeDataRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp=} [properties] Properties to set\n                 */\n                function RpcSyncSlaveNodeRuntimeDataRsp(properties) {\n                    this.gatewaySetting = [];\n                    this.subscribedContract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataRsp gatewaySetting.\n                 * @member {Array.<xyz.redtorch.pb.IGatewaySettingField>} gatewaySetting\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.gatewaySetting = $util.emptyArray;\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataRsp subscribedContract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} subscribedContract\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.subscribedContract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcSyncSlaveNodeRuntimeDataRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.create = function create(properties) {\n                    return new RpcSyncSlaveNodeRuntimeDataRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.gatewaySetting != null && message.gatewaySetting.length)\n                        for (var i = 0; i < message.gatewaySetting.length; ++i)\n                            $root.xyz.redtorch.pb.GatewaySettingField.encode(message.gatewaySetting[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.subscribedContract != null && message.subscribedContract.length)\n                        for (var i = 0; i < message.subscribedContract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.subscribedContract[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.gatewaySetting && message.gatewaySetting.length))\n                                message.gatewaySetting = [];\n                            message.gatewaySetting.push($root.xyz.redtorch.pb.GatewaySettingField.decode(reader, reader.uint32()));\n                            break;\n                        case 3:\n                            if (!(message.subscribedContract && message.subscribedContract.length))\n                                message.subscribedContract = [];\n                            message.subscribedContract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSyncSlaveNodeRuntimeDataRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.gatewaySetting != null && message.hasOwnProperty(\"gatewaySetting\")) {\n                        if (!Array.isArray(message.gatewaySetting))\n                            return \"gatewaySetting: array expected\";\n                        for (var i = 0; i < message.gatewaySetting.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.GatewaySettingField.verify(message.gatewaySetting[i]);\n                            if (error)\n                                return \"gatewaySetting.\" + error;\n                        }\n                    }\n                    if (message.subscribedContract != null && message.hasOwnProperty(\"subscribedContract\")) {\n                        if (!Array.isArray(message.subscribedContract))\n                            return \"subscribedContract: array expected\";\n                        for (var i = 0; i < message.subscribedContract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.subscribedContract[i]);\n                            if (error)\n                                return \"subscribedContract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSyncSlaveNodeRuntimeDataRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.gatewaySetting) {\n                        if (!Array.isArray(object.gatewaySetting))\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.gatewaySetting: array expected\");\n                        message.gatewaySetting = [];\n                        for (var i = 0; i < object.gatewaySetting.length; ++i) {\n                            if (typeof object.gatewaySetting[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.gatewaySetting: object expected\");\n                            message.gatewaySetting[i] = $root.xyz.redtorch.pb.GatewaySettingField.fromObject(object.gatewaySetting[i]);\n                        }\n                    }\n                    if (object.subscribedContract) {\n                        if (!Array.isArray(object.subscribedContract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.subscribedContract: array expected\");\n                        message.subscribedContract = [];\n                        for (var i = 0; i < object.subscribedContract.length; ++i) {\n                            if (typeof object.subscribedContract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.subscribedContract: object expected\");\n                            message.subscribedContract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.subscribedContract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSyncSlaveNodeRuntimeDataRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.gatewaySetting = [];\n                        object.subscribedContract = [];\n                    }\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.gatewaySetting && message.gatewaySetting.length) {\n                        object.gatewaySetting = [];\n                        for (var j = 0; j < message.gatewaySetting.length; ++j)\n                            object.gatewaySetting[j] = $root.xyz.redtorch.pb.GatewaySettingField.toObject(message.gatewaySetting[j], options);\n                    }\n                    if (message.subscribedContract && message.subscribedContract.length) {\n                        object.subscribedContract = [];\n                        for (var j = 0; j < message.subscribedContract.length; ++j)\n                            object.subscribedContract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.subscribedContract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSyncSlaveNodeRuntimeDataRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSyncSlaveNodeRuntimeDataRsp;\n            })();\n\n            pb.RpcGetMixContractListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetMixContractListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetMixContractListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetMixContractListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetMixContractListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetMixContractListReq.\n                 * @implements IRpcGetMixContractListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq=} [properties] Properties to set\n                 */\n                function RpcGetMixContractListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetMixContractListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @instance\n                 */\n                RpcGetMixContractListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetMixContractListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq instance\n                 */\n                RpcGetMixContractListReq.create = function create(properties) {\n                    return new RpcGetMixContractListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetMixContractListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq} message RpcGetMixContractListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetMixContractListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetMixContractListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq} message RpcGetMixContractListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetMixContractListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetMixContractListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetMixContractListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetMixContractListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetMixContractListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetMixContractListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetMixContractListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetMixContractListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetMixContractListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq\n                 */\n                RpcGetMixContractListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetMixContractListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetMixContractListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetMixContractListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetMixContractListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetMixContractListReq} message RpcGetMixContractListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetMixContractListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetMixContractListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetMixContractListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetMixContractListReq;\n            })();\n\n            pb.RpcGetMixContractListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetMixContractListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetMixContractListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetMixContractListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcGetMixContractListRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcGetMixContractListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetMixContractListRsp.\n                 * @implements IRpcGetMixContractListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp=} [properties] Properties to set\n                 */\n                function RpcGetMixContractListRsp(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetMixContractListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @instance\n                 */\n                RpcGetMixContractListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetMixContractListRsp contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @instance\n                 */\n                RpcGetMixContractListRsp.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetMixContractListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp instance\n                 */\n                RpcGetMixContractListRsp.create = function create(properties) {\n                    return new RpcGetMixContractListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetMixContractListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp} message RpcGetMixContractListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetMixContractListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetMixContractListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp} message RpcGetMixContractListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetMixContractListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetMixContractListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetMixContractListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetMixContractListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetMixContractListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetMixContractListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetMixContractListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetMixContractListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetMixContractListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp\n                 */\n                RpcGetMixContractListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetMixContractListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetMixContractListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetMixContractListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetMixContractListRsp.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetMixContractListRsp.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetMixContractListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetMixContractListRsp} message RpcGetMixContractListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetMixContractListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetMixContractListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetMixContractListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetMixContractListRsp;\n            })();\n\n            pb.RpcGetTickListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTickListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetTickListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTickListReq.\n                 * @implements IRpcGetTickListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq=} [properties] Properties to set\n                 */\n                function RpcGetTickListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTickListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @instance\n                 */\n                RpcGetTickListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetTickListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq instance\n                 */\n                RpcGetTickListReq.create = function create(properties) {\n                    return new RpcGetTickListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq} message RpcGetTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq} message RpcGetTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTickListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTickListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTickListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTickListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTickListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTickListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq\n                 */\n                RpcGetTickListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTickListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTickListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTickListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTickListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTickListReq} message RpcGetTickListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTickListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTickListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTickListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTickListReq;\n            })();\n\n            pb.RpcGetTickListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTickListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetTickListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcGetTickListRsp tick\n                 */\n\n                /**\n                 * Constructs a new RpcGetTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTickListRsp.\n                 * @implements IRpcGetTickListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp=} [properties] Properties to set\n                 */\n                function RpcGetTickListRsp(properties) {\n                    this.tick = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTickListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @instance\n                 */\n                RpcGetTickListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetTickListRsp tick.\n                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @instance\n                 */\n                RpcGetTickListRsp.prototype.tick = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetTickListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp instance\n                 */\n                RpcGetTickListRsp.create = function create(properties) {\n                    return new RpcGetTickListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp} message RpcGetTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tick != null && message.tick.length)\n                        for (var i = 0; i < message.tick.length; ++i)\n                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp} message RpcGetTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTickListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTickListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.tick && message.tick.length))\n                                message.tick = [];\n                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTickListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTickListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTickListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        if (!Array.isArray(message.tick))\n                            return \"tick: array expected\";\n                        for (var i = 0; i < message.tick.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);\n                            if (error)\n                                return \"tick.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTickListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp\n                 */\n                RpcGetTickListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTickListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTickListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTickListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.tick) {\n                        if (!Array.isArray(object.tick))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTickListRsp.tick: array expected\");\n                        message.tick = [];\n                        for (var i = 0; i < object.tick.length; ++i) {\n                            if (typeof object.tick[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetTickListRsp.tick: object expected\");\n                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTickListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTickListRsp} message RpcGetTickListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTickListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tick = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.tick && message.tick.length) {\n                        object.tick = [];\n                        for (var j = 0; j < message.tick.length; ++j)\n                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTickListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTickListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTickListRsp;\n            })();\n\n            pb.RpcQueryDBBarListReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBBarListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryDBBarListReq commonReq\n                 * @property {number|Long|null} [startTimestamp] RpcQueryDBBarListReq startTimestamp\n                 * @property {number|Long|null} [endTimestamp] RpcQueryDBBarListReq endTimestamp\n                 * @property {string|null} [unifiedSymbol] RpcQueryDBBarListReq unifiedSymbol\n                 * @property {xyz.redtorch.pb.BarPeriodEnum|null} [barPeriod] RpcQueryDBBarListReq barPeriod\n                 * @property {xyz.redtorch.pb.MarketDataDBTypeEnum|null} [marketDataDBType] RpcQueryDBBarListReq marketDataDBType\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBBarListReq.\n                 * @implements IRpcQueryDBBarListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq=} [properties] Properties to set\n                 */\n                function RpcQueryDBBarListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBBarListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryDBBarListReq startTimestamp.\n                 * @member {number|Long} startTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.startTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBBarListReq endTimestamp.\n                 * @member {number|Long} endTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.endTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBBarListReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * RpcQueryDBBarListReq barPeriod.\n                 * @member {xyz.redtorch.pb.BarPeriodEnum} barPeriod\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.barPeriod = 0;\n\n                /**\n                 * RpcQueryDBBarListReq marketDataDBType.\n                 * @member {xyz.redtorch.pb.MarketDataDBTypeEnum} marketDataDBType\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.marketDataDBType = 0;\n\n                /**\n                 * Creates a new RpcQueryDBBarListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq instance\n                 */\n                RpcQueryDBBarListReq.create = function create(properties) {\n                    return new RpcQueryDBBarListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq} message RpcQueryDBBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimestamp);\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.endTimestamp);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.unifiedSymbol);\n                    if (message.barPeriod != null && message.hasOwnProperty(\"barPeriod\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.barPeriod);\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.marketDataDBType);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq} message RpcQueryDBBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBBarListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.startTimestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.endTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        case 5:\n                            message.barPeriod = reader.int32();\n                            break;\n                        case 6:\n                            message.marketDataDBType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBBarListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBBarListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (!$util.isInteger(message.startTimestamp) && !(message.startTimestamp && $util.isInteger(message.startTimestamp.low) && $util.isInteger(message.startTimestamp.high)))\n                            return \"startTimestamp: integer|Long expected\";\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (!$util.isInteger(message.endTimestamp) && !(message.endTimestamp && $util.isInteger(message.endTimestamp.low) && $util.isInteger(message.endTimestamp.high)))\n                            return \"endTimestamp: integer|Long expected\";\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    if (message.barPeriod != null && message.hasOwnProperty(\"barPeriod\"))\n                        switch (message.barPeriod) {\n                        default:\n                            return \"barPeriod: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                            break;\n                        }\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        switch (message.marketDataDBType) {\n                        default:\n                            return \"marketDataDBType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBBarListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq\n                 */\n                RpcQueryDBBarListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBBarListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBBarListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.startTimestamp != null)\n                        if ($util.Long)\n                            (message.startTimestamp = $util.Long.fromValue(object.startTimestamp)).unsigned = false;\n                        else if (typeof object.startTimestamp === \"string\")\n                            message.startTimestamp = parseInt(object.startTimestamp, 10);\n                        else if (typeof object.startTimestamp === \"number\")\n                            message.startTimestamp = object.startTimestamp;\n                        else if (typeof object.startTimestamp === \"object\")\n                            message.startTimestamp = new $util.LongBits(object.startTimestamp.low >>> 0, object.startTimestamp.high >>> 0).toNumber();\n                    if (object.endTimestamp != null)\n                        if ($util.Long)\n                            (message.endTimestamp = $util.Long.fromValue(object.endTimestamp)).unsigned = false;\n                        else if (typeof object.endTimestamp === \"string\")\n                            message.endTimestamp = parseInt(object.endTimestamp, 10);\n                        else if (typeof object.endTimestamp === \"number\")\n                            message.endTimestamp = object.endTimestamp;\n                        else if (typeof object.endTimestamp === \"object\")\n                            message.endTimestamp = new $util.LongBits(object.endTimestamp.low >>> 0, object.endTimestamp.high >>> 0).toNumber();\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    switch (object.barPeriod) {\n                    case \"B_5Sec\":\n                    case 0:\n                        message.barPeriod = 0;\n                        break;\n                    case \"B_1Min\":\n                    case 1:\n                        message.barPeriod = 1;\n                        break;\n                    case \"B_3Min\":\n                    case 2:\n                        message.barPeriod = 2;\n                        break;\n                    case \"B_5Min\":\n                    case 3:\n                        message.barPeriod = 3;\n                        break;\n                    case \"B_15Min\":\n                    case 4:\n                        message.barPeriod = 4;\n                        break;\n                    case \"B_1Day\":\n                    case 5:\n                        message.barPeriod = 5;\n                        break;\n                    }\n                    switch (object.marketDataDBType) {\n                    case \"MDDT_MIX\":\n                    case 0:\n                        message.marketDataDBType = 0;\n                        break;\n                    case \"MDDT_TD\":\n                    case 1:\n                        message.marketDataDBType = 1;\n                        break;\n                    case \"MDDT_HIST\":\n                    case 2:\n                        message.marketDataDBType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBBarListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBBarListReq} message RpcQueryDBBarListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBBarListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.startTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.startTimestamp = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.endTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.endTimestamp = options.longs === String ? \"0\" : 0;\n                        object.unifiedSymbol = \"\";\n                        object.barPeriod = options.enums === String ? \"B_5Sec\" : 0;\n                        object.marketDataDBType = options.enums === String ? \"MDDT_MIX\" : 0;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (typeof message.startTimestamp === \"number\")\n                            object.startTimestamp = options.longs === String ? String(message.startTimestamp) : message.startTimestamp;\n                        else\n                            object.startTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestamp) : options.longs === Number ? new $util.LongBits(message.startTimestamp.low >>> 0, message.startTimestamp.high >>> 0).toNumber() : message.startTimestamp;\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (typeof message.endTimestamp === \"number\")\n                            object.endTimestamp = options.longs === String ? String(message.endTimestamp) : message.endTimestamp;\n                        else\n                            object.endTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestamp) : options.longs === Number ? new $util.LongBits(message.endTimestamp.low >>> 0, message.endTimestamp.high >>> 0).toNumber() : message.endTimestamp;\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    if (message.barPeriod != null && message.hasOwnProperty(\"barPeriod\"))\n                        object.barPeriod = options.enums === String ? $root.xyz.redtorch.pb.BarPeriodEnum[message.barPeriod] : message.barPeriod;\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        object.marketDataDBType = options.enums === String ? $root.xyz.redtorch.pb.MarketDataDBTypeEnum[message.marketDataDBType] : message.marketDataDBType;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBBarListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBBarListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBBarListReq;\n            })();\n\n            pb.RpcQueryDBBarListRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBBarListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryDBBarListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IBarField>|null} [bar] RpcQueryDBBarListRsp bar\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBBarListRsp.\n                 * @implements IRpcQueryDBBarListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp=} [properties] Properties to set\n                 */\n                function RpcQueryDBBarListRsp(properties) {\n                    this.bar = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBBarListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @instance\n                 */\n                RpcQueryDBBarListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryDBBarListRsp bar.\n                 * @member {Array.<xyz.redtorch.pb.IBarField>} bar\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @instance\n                 */\n                RpcQueryDBBarListRsp.prototype.bar = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryDBBarListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp instance\n                 */\n                RpcQueryDBBarListRsp.create = function create(properties) {\n                    return new RpcQueryDBBarListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp} message RpcQueryDBBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.bar != null && message.bar.length)\n                        for (var i = 0; i < message.bar.length; ++i)\n                            $root.xyz.redtorch.pb.BarField.encode(message.bar[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp} message RpcQueryDBBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBBarListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.bar && message.bar.length))\n                                message.bar = [];\n                            message.bar.push($root.xyz.redtorch.pb.BarField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBBarListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBBarListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.bar != null && message.hasOwnProperty(\"bar\")) {\n                        if (!Array.isArray(message.bar))\n                            return \"bar: array expected\";\n                        for (var i = 0; i < message.bar.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.BarField.verify(message.bar[i]);\n                            if (error)\n                                return \"bar.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBBarListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp\n                 */\n                RpcQueryDBBarListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBBarListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBBarListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.bar) {\n                        if (!Array.isArray(object.bar))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListRsp.bar: array expected\");\n                        message.bar = [];\n                        for (var i = 0; i < object.bar.length; ++i) {\n                            if (typeof object.bar[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListRsp.bar: object expected\");\n                            message.bar[i] = $root.xyz.redtorch.pb.BarField.fromObject(object.bar[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBBarListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBBarListRsp} message RpcQueryDBBarListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBBarListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.bar = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.bar && message.bar.length) {\n                        object.bar = [];\n                        for (var j = 0; j < message.bar.length; ++j)\n                            object.bar[j] = $root.xyz.redtorch.pb.BarField.toObject(message.bar[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBBarListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBBarListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBBarListRsp;\n            })();\n\n            pb.RpcQueryDBTickListReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBTickListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryDBTickListReq commonReq\n                 * @property {number|Long|null} [startTimestamp] RpcQueryDBTickListReq startTimestamp\n                 * @property {number|Long|null} [endTimestamp] RpcQueryDBTickListReq endTimestamp\n                 * @property {string|null} [unifiedSymbol] RpcQueryDBTickListReq unifiedSymbol\n                 * @property {xyz.redtorch.pb.MarketDataDBTypeEnum|null} [marketDataDBType] RpcQueryDBTickListReq marketDataDBType\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBTickListReq.\n                 * @implements IRpcQueryDBTickListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq=} [properties] Properties to set\n                 */\n                function RpcQueryDBTickListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBTickListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryDBTickListReq startTimestamp.\n                 * @member {number|Long} startTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.startTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBTickListReq endTimestamp.\n                 * @member {number|Long} endTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.endTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBTickListReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * RpcQueryDBTickListReq marketDataDBType.\n                 * @member {xyz.redtorch.pb.MarketDataDBTypeEnum} marketDataDBType\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.marketDataDBType = 0;\n\n                /**\n                 * Creates a new RpcQueryDBTickListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq instance\n                 */\n                RpcQueryDBTickListReq.create = function create(properties) {\n                    return new RpcQueryDBTickListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq} message RpcQueryDBTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimestamp);\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.endTimestamp);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.unifiedSymbol);\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.marketDataDBType);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq} message RpcQueryDBTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBTickListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.startTimestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.endTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        case 5:\n                            message.marketDataDBType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBTickListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBTickListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (!$util.isInteger(message.startTimestamp) && !(message.startTimestamp && $util.isInteger(message.startTimestamp.low) && $util.isInteger(message.startTimestamp.high)))\n                            return \"startTimestamp: integer|Long expected\";\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (!$util.isInteger(message.endTimestamp) && !(message.endTimestamp && $util.isInteger(message.endTimestamp.low) && $util.isInteger(message.endTimestamp.high)))\n                            return \"endTimestamp: integer|Long expected\";\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        switch (message.marketDataDBType) {\n                        default:\n                            return \"marketDataDBType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBTickListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq\n                 */\n                RpcQueryDBTickListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBTickListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBTickListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.startTimestamp != null)\n                        if ($util.Long)\n                            (message.startTimestamp = $util.Long.fromValue(object.startTimestamp)).unsigned = false;\n                        else if (typeof object.startTimestamp === \"string\")\n                            message.startTimestamp = parseInt(object.startTimestamp, 10);\n                        else if (typeof object.startTimestamp === \"number\")\n                            message.startTimestamp = object.startTimestamp;\n                        else if (typeof object.startTimestamp === \"object\")\n                            message.startTimestamp = new $util.LongBits(object.startTimestamp.low >>> 0, object.startTimestamp.high >>> 0).toNumber();\n                    if (object.endTimestamp != null)\n                        if ($util.Long)\n                            (message.endTimestamp = $util.Long.fromValue(object.endTimestamp)).unsigned = false;\n                        else if (typeof object.endTimestamp === \"string\")\n                            message.endTimestamp = parseInt(object.endTimestamp, 10);\n                        else if (typeof object.endTimestamp === \"number\")\n                            message.endTimestamp = object.endTimestamp;\n                        else if (typeof object.endTimestamp === \"object\")\n                            message.endTimestamp = new $util.LongBits(object.endTimestamp.low >>> 0, object.endTimestamp.high >>> 0).toNumber();\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    switch (object.marketDataDBType) {\n                    case \"MDDT_MIX\":\n                    case 0:\n                        message.marketDataDBType = 0;\n                        break;\n                    case \"MDDT_TD\":\n                    case 1:\n                        message.marketDataDBType = 1;\n                        break;\n                    case \"MDDT_HIST\":\n                    case 2:\n                        message.marketDataDBType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBTickListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBTickListReq} message RpcQueryDBTickListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBTickListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.startTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.startTimestamp = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.endTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.endTimestamp = options.longs === String ? \"0\" : 0;\n                        object.unifiedSymbol = \"\";\n                        object.marketDataDBType = options.enums === String ? \"MDDT_MIX\" : 0;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (typeof message.startTimestamp === \"number\")\n                            object.startTimestamp = options.longs === String ? String(message.startTimestamp) : message.startTimestamp;\n                        else\n                            object.startTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestamp) : options.longs === Number ? new $util.LongBits(message.startTimestamp.low >>> 0, message.startTimestamp.high >>> 0).toNumber() : message.startTimestamp;\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (typeof message.endTimestamp === \"number\")\n                            object.endTimestamp = options.longs === String ? String(message.endTimestamp) : message.endTimestamp;\n                        else\n                            object.endTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestamp) : options.longs === Number ? new $util.LongBits(message.endTimestamp.low >>> 0, message.endTimestamp.high >>> 0).toNumber() : message.endTimestamp;\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        object.marketDataDBType = options.enums === String ? $root.xyz.redtorch.pb.MarketDataDBTypeEnum[message.marketDataDBType] : message.marketDataDBType;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBTickListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBTickListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBTickListReq;\n            })();\n\n            pb.RpcQueryDBTickListRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBTickListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryDBTickListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcQueryDBTickListRsp tick\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBTickListRsp.\n                 * @implements IRpcQueryDBTickListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp=} [properties] Properties to set\n                 */\n                function RpcQueryDBTickListRsp(properties) {\n                    this.tick = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBTickListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @instance\n                 */\n                RpcQueryDBTickListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryDBTickListRsp tick.\n                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @instance\n                 */\n                RpcQueryDBTickListRsp.prototype.tick = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryDBTickListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp instance\n                 */\n                RpcQueryDBTickListRsp.create = function create(properties) {\n                    return new RpcQueryDBTickListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp} message RpcQueryDBTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tick != null && message.tick.length)\n                        for (var i = 0; i < message.tick.length; ++i)\n                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp} message RpcQueryDBTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBTickListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.tick && message.tick.length))\n                                message.tick = [];\n                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBTickListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBTickListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        if (!Array.isArray(message.tick))\n                            return \"tick: array expected\";\n                        for (var i = 0; i < message.tick.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);\n                            if (error)\n                                return \"tick.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBTickListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp\n                 */\n                RpcQueryDBTickListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBTickListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBTickListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.tick) {\n                        if (!Array.isArray(object.tick))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListRsp.tick: array expected\");\n                        message.tick = [];\n                        for (var i = 0; i < object.tick.length; ++i) {\n                            if (typeof object.tick[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListRsp.tick: object expected\");\n                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBTickListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBTickListRsp} message RpcQueryDBTickListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBTickListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tick = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.tick && message.tick.length) {\n                        object.tick = [];\n                        for (var j = 0; j < message.tick.length; ++j)\n                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBTickListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBTickListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBTickListRsp;\n            })();\n\n            pb.RpcQueryVolumeBarListReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryVolumeBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryVolumeBarListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryVolumeBarListReq commonReq\n                 * @property {number|Long|null} [startTimestamp] RpcQueryVolumeBarListReq startTimestamp\n                 * @property {number|Long|null} [endTimestamp] RpcQueryVolumeBarListReq endTimestamp\n                 * @property {string|null} [unifiedSymbol] RpcQueryVolumeBarListReq unifiedSymbol\n                 * @property {number|null} [volume] RpcQueryVolumeBarListReq volume\n                 */\n\n                /**\n                 * Constructs a new RpcQueryVolumeBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryVolumeBarListReq.\n                 * @implements IRpcQueryVolumeBarListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq=} [properties] Properties to set\n                 */\n                function RpcQueryVolumeBarListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryVolumeBarListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryVolumeBarListReq startTimestamp.\n                 * @member {number|Long} startTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.startTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryVolumeBarListReq endTimestamp.\n                 * @member {number|Long} endTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.endTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryVolumeBarListReq unifiedSymbol.\n                 * @member {string} unifiedSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.unifiedSymbol = \"\";\n\n                /**\n                 * RpcQueryVolumeBarListReq volume.\n                 * @member {number} volume\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.volume = 0;\n\n                /**\n                 * Creates a new RpcQueryVolumeBarListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq instance\n                 */\n                RpcQueryVolumeBarListReq.create = function create(properties) {\n                    return new RpcQueryVolumeBarListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq} message RpcQueryVolumeBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimestamp);\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.endTimestamp);\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.unifiedSymbol);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.volume);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq} message RpcQueryVolumeBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.startTimestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.endTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.unifiedSymbol = reader.string();\n                            break;\n                        case 5:\n                            message.volume = reader.fixed32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryVolumeBarListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryVolumeBarListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (!$util.isInteger(message.startTimestamp) && !(message.startTimestamp && $util.isInteger(message.startTimestamp.low) && $util.isInteger(message.startTimestamp.high)))\n                            return \"startTimestamp: integer|Long expected\";\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (!$util.isInteger(message.endTimestamp) && !(message.endTimestamp && $util.isInteger(message.endTimestamp.low) && $util.isInteger(message.endTimestamp.high)))\n                            return \"endTimestamp: integer|Long expected\";\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        if (!$util.isString(message.unifiedSymbol))\n                            return \"unifiedSymbol: string expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume))\n                            return \"volume: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryVolumeBarListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq\n                 */\n                RpcQueryVolumeBarListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryVolumeBarListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.startTimestamp != null)\n                        if ($util.Long)\n                            (message.startTimestamp = $util.Long.fromValue(object.startTimestamp)).unsigned = false;\n                        else if (typeof object.startTimestamp === \"string\")\n                            message.startTimestamp = parseInt(object.startTimestamp, 10);\n                        else if (typeof object.startTimestamp === \"number\")\n                            message.startTimestamp = object.startTimestamp;\n                        else if (typeof object.startTimestamp === \"object\")\n                            message.startTimestamp = new $util.LongBits(object.startTimestamp.low >>> 0, object.startTimestamp.high >>> 0).toNumber();\n                    if (object.endTimestamp != null)\n                        if ($util.Long)\n                            (message.endTimestamp = $util.Long.fromValue(object.endTimestamp)).unsigned = false;\n                        else if (typeof object.endTimestamp === \"string\")\n                            message.endTimestamp = parseInt(object.endTimestamp, 10);\n                        else if (typeof object.endTimestamp === \"number\")\n                            message.endTimestamp = object.endTimestamp;\n                        else if (typeof object.endTimestamp === \"object\")\n                            message.endTimestamp = new $util.LongBits(object.endTimestamp.low >>> 0, object.endTimestamp.high >>> 0).toNumber();\n                    if (object.unifiedSymbol != null)\n                        message.unifiedSymbol = String(object.unifiedSymbol);\n                    if (object.volume != null)\n                        message.volume = object.volume >>> 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryVolumeBarListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryVolumeBarListReq} message RpcQueryVolumeBarListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryVolumeBarListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.startTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.startTimestamp = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.endTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.endTimestamp = options.longs === String ? \"0\" : 0;\n                        object.unifiedSymbol = \"\";\n                        object.volume = 0;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (typeof message.startTimestamp === \"number\")\n                            object.startTimestamp = options.longs === String ? String(message.startTimestamp) : message.startTimestamp;\n                        else\n                            object.startTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestamp) : options.longs === Number ? new $util.LongBits(message.startTimestamp.low >>> 0, message.startTimestamp.high >>> 0).toNumber() : message.startTimestamp;\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (typeof message.endTimestamp === \"number\")\n                            object.endTimestamp = options.longs === String ? String(message.endTimestamp) : message.endTimestamp;\n                        else\n                            object.endTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestamp) : options.longs === Number ? new $util.LongBits(message.endTimestamp.low >>> 0, message.endTimestamp.high >>> 0).toNumber() : message.endTimestamp;\n                    if (message.unifiedSymbol != null && message.hasOwnProperty(\"unifiedSymbol\"))\n                        object.unifiedSymbol = message.unifiedSymbol;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        object.volume = message.volume;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryVolumeBarListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryVolumeBarListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryVolumeBarListReq;\n            })();\n\n            pb.RpcQueryVolumeBarListRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryVolumeBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryVolumeBarListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryVolumeBarListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IBarField>|null} [bar] RpcQueryVolumeBarListRsp bar\n                 */\n\n                /**\n                 * Constructs a new RpcQueryVolumeBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryVolumeBarListRsp.\n                 * @implements IRpcQueryVolumeBarListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp=} [properties] Properties to set\n                 */\n                function RpcQueryVolumeBarListRsp(properties) {\n                    this.bar = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryVolumeBarListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @instance\n                 */\n                RpcQueryVolumeBarListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryVolumeBarListRsp bar.\n                 * @member {Array.<xyz.redtorch.pb.IBarField>} bar\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @instance\n                 */\n                RpcQueryVolumeBarListRsp.prototype.bar = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryVolumeBarListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp instance\n                 */\n                RpcQueryVolumeBarListRsp.create = function create(properties) {\n                    return new RpcQueryVolumeBarListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp} message RpcQueryVolumeBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.bar != null && message.bar.length)\n                        for (var i = 0; i < message.bar.length; ++i)\n                            $root.xyz.redtorch.pb.BarField.encode(message.bar[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp} message RpcQueryVolumeBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.bar && message.bar.length))\n                                message.bar = [];\n                            message.bar.push($root.xyz.redtorch.pb.BarField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryVolumeBarListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryVolumeBarListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.bar != null && message.hasOwnProperty(\"bar\")) {\n                        if (!Array.isArray(message.bar))\n                            return \"bar: array expected\";\n                        for (var i = 0; i < message.bar.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.BarField.verify(message.bar[i]);\n                            if (error)\n                                return \"bar.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryVolumeBarListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp\n                 */\n                RpcQueryVolumeBarListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryVolumeBarListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.bar) {\n                        if (!Array.isArray(object.bar))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListRsp.bar: array expected\");\n                        message.bar = [];\n                        for (var i = 0; i < object.bar.length; ++i) {\n                            if (typeof object.bar[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListRsp.bar: object expected\");\n                            message.bar[i] = $root.xyz.redtorch.pb.BarField.fromObject(object.bar[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryVolumeBarListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} message RpcQueryVolumeBarListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryVolumeBarListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.bar = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.bar && message.bar.length) {\n                        object.bar = [];\n                        for (var j = 0; j < message.bar.length; ++j)\n                            object.bar[j] = $root.xyz.redtorch.pb.BarField.toObject(message.bar[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryVolumeBarListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryVolumeBarListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryVolumeBarListRsp;\n            })();\n\n            pb.RpcExceptionRsp = (function() {\n\n                /**\n                 * Properties of a RpcExceptionRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcExceptionRsp\n                 * @property {number|null} [originalRpcId] RpcExceptionRsp originalRpcId\n                 * @property {string|null} [originalTransactionId] RpcExceptionRsp originalTransactionId\n                 * @property {number|Long|null} [originalTimestamp] RpcExceptionRsp originalTimestamp\n                 * @property {string|null} [info] RpcExceptionRsp info\n                 */\n\n                /**\n                 * Constructs a new RpcExceptionRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcExceptionRsp.\n                 * @implements IRpcExceptionRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp=} [properties] Properties to set\n                 */\n                function RpcExceptionRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcExceptionRsp originalRpcId.\n                 * @member {number} originalRpcId\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.originalRpcId = 0;\n\n                /**\n                 * RpcExceptionRsp originalTransactionId.\n                 * @member {string} originalTransactionId\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.originalTransactionId = \"\";\n\n                /**\n                 * RpcExceptionRsp originalTimestamp.\n                 * @member {number|Long} originalTimestamp\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.originalTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcExceptionRsp info.\n                 * @member {string} info\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.info = \"\";\n\n                /**\n                 * Creates a new RpcExceptionRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp instance\n                 */\n                RpcExceptionRsp.create = function create(properties) {\n                    return new RpcExceptionRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcExceptionRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcExceptionRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp} message RpcExceptionRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcExceptionRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originalRpcId != null && message.hasOwnProperty(\"originalRpcId\"))\n                        writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.originalRpcId);\n                    if (message.originalTransactionId != null && message.hasOwnProperty(\"originalTransactionId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originalTransactionId);\n                    if (message.originalTimestamp != null && message.hasOwnProperty(\"originalTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.originalTimestamp);\n                    if (message.info != null && message.hasOwnProperty(\"info\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcExceptionRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcExceptionRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp} message RpcExceptionRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcExceptionRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcExceptionRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcExceptionRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcExceptionRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.originalRpcId = reader.fixed32();\n                            break;\n                        case 2:\n                            message.originalTransactionId = reader.string();\n                            break;\n                        case 3:\n                            message.originalTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.info = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcExceptionRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcExceptionRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcExceptionRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcExceptionRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originalRpcId != null && message.hasOwnProperty(\"originalRpcId\"))\n                        if (!$util.isInteger(message.originalRpcId))\n                            return \"originalRpcId: integer expected\";\n                    if (message.originalTransactionId != null && message.hasOwnProperty(\"originalTransactionId\"))\n                        if (!$util.isString(message.originalTransactionId))\n                            return \"originalTransactionId: string expected\";\n                    if (message.originalTimestamp != null && message.hasOwnProperty(\"originalTimestamp\"))\n                        if (!$util.isInteger(message.originalTimestamp) && !(message.originalTimestamp && $util.isInteger(message.originalTimestamp.low) && $util.isInteger(message.originalTimestamp.high)))\n                            return \"originalTimestamp: integer|Long expected\";\n                    if (message.info != null && message.hasOwnProperty(\"info\"))\n                        if (!$util.isString(message.info))\n                            return \"info: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcExceptionRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp\n                 */\n                RpcExceptionRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcExceptionRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcExceptionRsp();\n                    if (object.originalRpcId != null)\n                        message.originalRpcId = object.originalRpcId >>> 0;\n                    if (object.originalTransactionId != null)\n                        message.originalTransactionId = String(object.originalTransactionId);\n                    if (object.originalTimestamp != null)\n                        if ($util.Long)\n                            (message.originalTimestamp = $util.Long.fromValue(object.originalTimestamp)).unsigned = false;\n                        else if (typeof object.originalTimestamp === \"string\")\n                            message.originalTimestamp = parseInt(object.originalTimestamp, 10);\n                        else if (typeof object.originalTimestamp === \"number\")\n                            message.originalTimestamp = object.originalTimestamp;\n                        else if (typeof object.originalTimestamp === \"object\")\n                            message.originalTimestamp = new $util.LongBits(object.originalTimestamp.low >>> 0, object.originalTimestamp.high >>> 0).toNumber();\n                    if (object.info != null)\n                        message.info = String(object.info);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcExceptionRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcExceptionRsp} message RpcExceptionRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcExceptionRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originalRpcId = 0;\n                        object.originalTransactionId = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.originalTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.originalTimestamp = options.longs === String ? \"0\" : 0;\n                        object.info = \"\";\n                    }\n                    if (message.originalRpcId != null && message.hasOwnProperty(\"originalRpcId\"))\n                        object.originalRpcId = message.originalRpcId;\n                    if (message.originalTransactionId != null && message.hasOwnProperty(\"originalTransactionId\"))\n                        object.originalTransactionId = message.originalTransactionId;\n                    if (message.originalTimestamp != null && message.hasOwnProperty(\"originalTimestamp\"))\n                        if (typeof message.originalTimestamp === \"number\")\n                            object.originalTimestamp = options.longs === String ? String(message.originalTimestamp) : message.originalTimestamp;\n                        else\n                            object.originalTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.originalTimestamp) : options.longs === Number ? new $util.LongBits(message.originalTimestamp.low >>> 0, message.originalTimestamp.high >>> 0).toNumber() : message.originalTimestamp;\n                    if (message.info != null && message.hasOwnProperty(\"info\"))\n                        object.info = message.info;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcExceptionRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcExceptionRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcExceptionRsp;\n            })();\n\n            pb.RpcOrderRtn = (function() {\n\n                /**\n                 * Properties of a RpcOrderRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcOrderRtn\n                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcOrderRtn order\n                 */\n\n                /**\n                 * Constructs a new RpcOrderRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcOrderRtn.\n                 * @implements IRpcOrderRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn=} [properties] Properties to set\n                 */\n                function RpcOrderRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcOrderRtn order.\n                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @instance\n                 */\n                RpcOrderRtn.prototype.order = null;\n\n                /**\n                 * Creates a new RpcOrderRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn instance\n                 */\n                RpcOrderRtn.create = function create(properties) {\n                    return new RpcOrderRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcOrderRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcOrderRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn} message RpcOrderRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcOrderRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcOrderRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn} message RpcOrderRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcOrderRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcOrderRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcOrderRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcOrderRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcOrderRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcOrderRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn\n                 */\n                RpcOrderRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcOrderRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcOrderRtn();\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcOrderRtn.order: object expected\");\n                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcOrderRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcOrderRtn} message RpcOrderRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcOrderRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.order = null;\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcOrderRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcOrderRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcOrderRtn;\n            })();\n\n            pb.RpcTradeRtn = (function() {\n\n                /**\n                 * Properties of a RpcTradeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTradeRtn\n                 * @property {xyz.redtorch.pb.ITradeField|null} [trade] RpcTradeRtn trade\n                 */\n\n                /**\n                 * Constructs a new RpcTradeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTradeRtn.\n                 * @implements IRpcTradeRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn=} [properties] Properties to set\n                 */\n                function RpcTradeRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTradeRtn trade.\n                 * @member {xyz.redtorch.pb.ITradeField|null|undefined} trade\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @instance\n                 */\n                RpcTradeRtn.prototype.trade = null;\n\n                /**\n                 * Creates a new RpcTradeRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn instance\n                 */\n                RpcTradeRtn.create = function create(properties) {\n                    return new RpcTradeRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTradeRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTradeRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn} message RpcTradeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        $root.xyz.redtorch.pb.TradeField.encode(message.trade, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTradeRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTradeRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn} message RpcTradeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTradeRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTradeRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.trade = $root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTradeRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTradeRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTradeRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade);\n                        if (error)\n                            return \"trade.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTradeRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn\n                 */\n                RpcTradeRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTradeRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTradeRtn();\n                    if (object.trade != null) {\n                        if (typeof object.trade !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcTradeRtn.trade: object expected\");\n                        message.trade = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTradeRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTradeRtn} message RpcTradeRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTradeRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.trade = null;\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        object.trade = $root.xyz.redtorch.pb.TradeField.toObject(message.trade, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTradeRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTradeRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTradeRtn;\n            })();\n\n            pb.RpcContractRtn = (function() {\n\n                /**\n                 * Properties of a RpcContractRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcContractRtn\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcContractRtn contract\n                 */\n\n                /**\n                 * Constructs a new RpcContractRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcContractRtn.\n                 * @implements IRpcContractRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcContractRtn=} [properties] Properties to set\n                 */\n                function RpcContractRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcContractRtn contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @instance\n                 */\n                RpcContractRtn.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcContractRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn instance\n                 */\n                RpcContractRtn.create = function create(properties) {\n                    return new RpcContractRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcContractRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcContractRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractRtn} message RpcContractRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcContractRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcContractRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractRtn} message RpcContractRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcContractRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcContractRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcContractRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcContractRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcContractRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcContractRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn\n                 */\n                RpcContractRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcContractRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcContractRtn();\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcContractRtn.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcContractRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcContractRtn} message RpcContractRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcContractRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.contract = null;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcContractRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcContractRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcContractRtn;\n            })();\n\n            pb.RpcPositionRtn = (function() {\n\n                /**\n                 * Properties of a RpcPositionRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcPositionRtn\n                 * @property {xyz.redtorch.pb.IPositionField|null} [position] RpcPositionRtn position\n                 */\n\n                /**\n                 * Constructs a new RpcPositionRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcPositionRtn.\n                 * @implements IRpcPositionRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn=} [properties] Properties to set\n                 */\n                function RpcPositionRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcPositionRtn position.\n                 * @member {xyz.redtorch.pb.IPositionField|null|undefined} position\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @instance\n                 */\n                RpcPositionRtn.prototype.position = null;\n\n                /**\n                 * Creates a new RpcPositionRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn instance\n                 */\n                RpcPositionRtn.create = function create(properties) {\n                    return new RpcPositionRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcPositionRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcPositionRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn} message RpcPositionRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        $root.xyz.redtorch.pb.PositionField.encode(message.position, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcPositionRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcPositionRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn} message RpcPositionRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcPositionRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcPositionRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.position = $root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcPositionRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcPositionRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcPositionRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        var error = $root.xyz.redtorch.pb.PositionField.verify(message.position);\n                        if (error)\n                            return \"position.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcPositionRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn\n                 */\n                RpcPositionRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcPositionRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcPositionRtn();\n                    if (object.position != null) {\n                        if (typeof object.position !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcPositionRtn.position: object expected\");\n                        message.position = $root.xyz.redtorch.pb.PositionField.fromObject(object.position);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcPositionRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcPositionRtn} message RpcPositionRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcPositionRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.position = null;\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        object.position = $root.xyz.redtorch.pb.PositionField.toObject(message.position, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcPositionRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcPositionRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcPositionRtn;\n            })();\n\n            pb.RpcAccountRtn = (function() {\n\n                /**\n                 * Properties of a RpcAccountRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcAccountRtn\n                 * @property {xyz.redtorch.pb.IAccountField|null} [account] RpcAccountRtn account\n                 */\n\n                /**\n                 * Constructs a new RpcAccountRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcAccountRtn.\n                 * @implements IRpcAccountRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn=} [properties] Properties to set\n                 */\n                function RpcAccountRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcAccountRtn account.\n                 * @member {xyz.redtorch.pb.IAccountField|null|undefined} account\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @instance\n                 */\n                RpcAccountRtn.prototype.account = null;\n\n                /**\n                 * Creates a new RpcAccountRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn instance\n                 */\n                RpcAccountRtn.create = function create(properties) {\n                    return new RpcAccountRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcAccountRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcAccountRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn} message RpcAccountRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        $root.xyz.redtorch.pb.AccountField.encode(message.account, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcAccountRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcAccountRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn} message RpcAccountRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcAccountRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcAccountRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.account = $root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcAccountRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcAccountRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcAccountRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        var error = $root.xyz.redtorch.pb.AccountField.verify(message.account);\n                        if (error)\n                            return \"account.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcAccountRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn\n                 */\n                RpcAccountRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcAccountRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcAccountRtn();\n                    if (object.account != null) {\n                        if (typeof object.account !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcAccountRtn.account: object expected\");\n                        message.account = $root.xyz.redtorch.pb.AccountField.fromObject(object.account);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcAccountRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcAccountRtn} message RpcAccountRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcAccountRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.account = null;\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        object.account = $root.xyz.redtorch.pb.AccountField.toObject(message.account, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcAccountRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcAccountRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcAccountRtn;\n            })();\n\n            pb.RpcTickRtn = (function() {\n\n                /**\n                 * Properties of a RpcTickRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTickRtn\n                 * @property {xyz.redtorch.pb.ITickField|null} [tick] RpcTickRtn tick\n                 */\n\n                /**\n                 * Constructs a new RpcTickRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTickRtn.\n                 * @implements IRpcTickRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTickRtn=} [properties] Properties to set\n                 */\n                function RpcTickRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTickRtn tick.\n                 * @member {xyz.redtorch.pb.ITickField|null|undefined} tick\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @instance\n                 */\n                RpcTickRtn.prototype.tick = null;\n\n                /**\n                 * Creates a new RpcTickRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn instance\n                 */\n                RpcTickRtn.create = function create(properties) {\n                    return new RpcTickRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTickRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTickRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickRtn} message RpcTickRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tick != null && message.hasOwnProperty(\"tick\"))\n                        $root.xyz.redtorch.pb.TickField.encode(message.tick, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTickRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTickRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickRtn} message RpcTickRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTickRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTickRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.tick = $root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTickRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTickRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTickRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        var error = $root.xyz.redtorch.pb.TickField.verify(message.tick);\n                        if (error)\n                            return \"tick.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTickRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn\n                 */\n                RpcTickRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTickRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTickRtn();\n                    if (object.tick != null) {\n                        if (typeof object.tick !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcTickRtn.tick: object expected\");\n                        message.tick = $root.xyz.redtorch.pb.TickField.fromObject(object.tick);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTickRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTickRtn} message RpcTickRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTickRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.tick = null;\n                    if (message.tick != null && message.hasOwnProperty(\"tick\"))\n                        object.tick = $root.xyz.redtorch.pb.TickField.toObject(message.tick, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTickRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTickRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTickRtn;\n            })();\n\n            pb.RpcOrderListRtn = (function() {\n\n                /**\n                 * Properties of a RpcOrderListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcOrderListRtn\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcOrderListRtn order\n                 */\n\n                /**\n                 * Constructs a new RpcOrderListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcOrderListRtn.\n                 * @implements IRpcOrderListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn=} [properties] Properties to set\n                 */\n                function RpcOrderListRtn(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcOrderListRtn order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @instance\n                 */\n                RpcOrderListRtn.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcOrderListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn instance\n                 */\n                RpcOrderListRtn.create = function create(properties) {\n                    return new RpcOrderListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcOrderListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcOrderListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn} message RpcOrderListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcOrderListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcOrderListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn} message RpcOrderListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcOrderListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcOrderListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcOrderListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcOrderListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcOrderListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcOrderListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn\n                 */\n                RpcOrderListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcOrderListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcOrderListRtn();\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcOrderListRtn.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcOrderListRtn.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcOrderListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcOrderListRtn} message RpcOrderListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcOrderListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcOrderListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcOrderListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcOrderListRtn;\n            })();\n\n            pb.RpcTradeListRtn = (function() {\n\n                /**\n                 * Properties of a RpcTradeListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTradeListRtn\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcTradeListRtn trade\n                 */\n\n                /**\n                 * Constructs a new RpcTradeListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTradeListRtn.\n                 * @implements IRpcTradeListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn=} [properties] Properties to set\n                 */\n                function RpcTradeListRtn(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTradeListRtn trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @instance\n                 */\n                RpcTradeListRtn.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcTradeListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn instance\n                 */\n                RpcTradeListRtn.create = function create(properties) {\n                    return new RpcTradeListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTradeListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTradeListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn} message RpcTradeListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTradeListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTradeListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn} message RpcTradeListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTradeListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTradeListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTradeListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTradeListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTradeListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTradeListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn\n                 */\n                RpcTradeListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTradeListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTradeListRtn();\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcTradeListRtn.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcTradeListRtn.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTradeListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTradeListRtn} message RpcTradeListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTradeListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTradeListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTradeListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTradeListRtn;\n            })();\n\n            pb.RpcContractListRtn = (function() {\n\n                /**\n                 * Properties of a RpcContractListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcContractListRtn\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcContractListRtn contract\n                 */\n\n                /**\n                 * Constructs a new RpcContractListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcContractListRtn.\n                 * @implements IRpcContractListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn=} [properties] Properties to set\n                 */\n                function RpcContractListRtn(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcContractListRtn contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @instance\n                 */\n                RpcContractListRtn.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcContractListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn instance\n                 */\n                RpcContractListRtn.create = function create(properties) {\n                    return new RpcContractListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcContractListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcContractListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn} message RpcContractListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcContractListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcContractListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn} message RpcContractListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcContractListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcContractListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcContractListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcContractListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcContractListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcContractListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn\n                 */\n                RpcContractListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcContractListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcContractListRtn();\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcContractListRtn.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcContractListRtn.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcContractListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcContractListRtn} message RpcContractListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcContractListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcContractListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcContractListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcContractListRtn;\n            })();\n\n            pb.RpcPositionListRtn = (function() {\n\n                /**\n                 * Properties of a RpcPositionListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcPositionListRtn\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcPositionListRtn position\n                 */\n\n                /**\n                 * Constructs a new RpcPositionListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcPositionListRtn.\n                 * @implements IRpcPositionListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn=} [properties] Properties to set\n                 */\n                function RpcPositionListRtn(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcPositionListRtn position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @instance\n                 */\n                RpcPositionListRtn.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcPositionListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn instance\n                 */\n                RpcPositionListRtn.create = function create(properties) {\n                    return new RpcPositionListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcPositionListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcPositionListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn} message RpcPositionListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcPositionListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcPositionListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn} message RpcPositionListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcPositionListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcPositionListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcPositionListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcPositionListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcPositionListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcPositionListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn\n                 */\n                RpcPositionListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcPositionListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcPositionListRtn();\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcPositionListRtn.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcPositionListRtn.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcPositionListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcPositionListRtn} message RpcPositionListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcPositionListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcPositionListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcPositionListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcPositionListRtn;\n            })();\n\n            pb.RpcAccountListRtn = (function() {\n\n                /**\n                 * Properties of a RpcAccountListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcAccountListRtn\n                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcAccountListRtn account\n                 */\n\n                /**\n                 * Constructs a new RpcAccountListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcAccountListRtn.\n                 * @implements IRpcAccountListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn=} [properties] Properties to set\n                 */\n                function RpcAccountListRtn(properties) {\n                    this.account = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcAccountListRtn account.\n                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @instance\n                 */\n                RpcAccountListRtn.prototype.account = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcAccountListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn instance\n                 */\n                RpcAccountListRtn.create = function create(properties) {\n                    return new RpcAccountListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcAccountListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcAccountListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn} message RpcAccountListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.account != null && message.account.length)\n                        for (var i = 0; i < message.account.length; ++i)\n                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcAccountListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcAccountListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn} message RpcAccountListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcAccountListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcAccountListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.account && message.account.length))\n                                message.account = [];\n                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcAccountListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcAccountListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcAccountListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        if (!Array.isArray(message.account))\n                            return \"account: array expected\";\n                        for (var i = 0; i < message.account.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);\n                            if (error)\n                                return \"account.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcAccountListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn\n                 */\n                RpcAccountListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcAccountListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcAccountListRtn();\n                    if (object.account) {\n                        if (!Array.isArray(object.account))\n                            throw TypeError(\".xyz.redtorch.pb.RpcAccountListRtn.account: array expected\");\n                        message.account = [];\n                        for (var i = 0; i < object.account.length; ++i) {\n                            if (typeof object.account[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcAccountListRtn.account: object expected\");\n                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcAccountListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcAccountListRtn} message RpcAccountListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcAccountListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.account = [];\n                    if (message.account && message.account.length) {\n                        object.account = [];\n                        for (var j = 0; j < message.account.length; ++j)\n                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcAccountListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcAccountListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcAccountListRtn;\n            })();\n\n            pb.RpcTickListRtn = (function() {\n\n                /**\n                 * Properties of a RpcTickListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTickListRtn\n                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcTickListRtn tick\n                 */\n\n                /**\n                 * Constructs a new RpcTickListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTickListRtn.\n                 * @implements IRpcTickListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn=} [properties] Properties to set\n                 */\n                function RpcTickListRtn(properties) {\n                    this.tick = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTickListRtn tick.\n                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @instance\n                 */\n                RpcTickListRtn.prototype.tick = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcTickListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn instance\n                 */\n                RpcTickListRtn.create = function create(properties) {\n                    return new RpcTickListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTickListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTickListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn} message RpcTickListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tick != null && message.tick.length)\n                        for (var i = 0; i < message.tick.length; ++i)\n                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTickListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTickListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn} message RpcTickListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTickListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTickListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.tick && message.tick.length))\n                                message.tick = [];\n                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTickListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTickListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTickListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        if (!Array.isArray(message.tick))\n                            return \"tick: array expected\";\n                        for (var i = 0; i < message.tick.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);\n                            if (error)\n                                return \"tick.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTickListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn\n                 */\n                RpcTickListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTickListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTickListRtn();\n                    if (object.tick) {\n                        if (!Array.isArray(object.tick))\n                            throw TypeError(\".xyz.redtorch.pb.RpcTickListRtn.tick: array expected\");\n                        message.tick = [];\n                        for (var i = 0; i < object.tick.length; ++i) {\n                            if (typeof object.tick[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcTickListRtn.tick: object expected\");\n                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTickListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTickListRtn} message RpcTickListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTickListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tick = [];\n                    if (message.tick && message.tick.length) {\n                        object.tick = [];\n                        for (var j = 0; j < message.tick.length; ++j)\n                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTickListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTickListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTickListRtn;\n            })();\n\n            pb.RpcNoticeRtn = (function() {\n\n                /**\n                 * Properties of a RpcNoticeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcNoticeRtn\n                 * @property {xyz.redtorch.pb.INoticeField|null} [notice] RpcNoticeRtn notice\n                 */\n\n                /**\n                 * Constructs a new RpcNoticeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcNoticeRtn.\n                 * @implements IRpcNoticeRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn=} [properties] Properties to set\n                 */\n                function RpcNoticeRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcNoticeRtn notice.\n                 * @member {xyz.redtorch.pb.INoticeField|null|undefined} notice\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @instance\n                 */\n                RpcNoticeRtn.prototype.notice = null;\n\n                /**\n                 * Creates a new RpcNoticeRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn instance\n                 */\n                RpcNoticeRtn.create = function create(properties) {\n                    return new RpcNoticeRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcNoticeRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcNoticeRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn} message RpcNoticeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcNoticeRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.notice != null && message.hasOwnProperty(\"notice\"))\n                        $root.xyz.redtorch.pb.NoticeField.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcNoticeRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcNoticeRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn} message RpcNoticeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcNoticeRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcNoticeRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcNoticeRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcNoticeRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.notice = $root.xyz.redtorch.pb.NoticeField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcNoticeRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcNoticeRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcNoticeRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcNoticeRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.notice != null && message.hasOwnProperty(\"notice\")) {\n                        var error = $root.xyz.redtorch.pb.NoticeField.verify(message.notice);\n                        if (error)\n                            return \"notice.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcNoticeRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn\n                 */\n                RpcNoticeRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcNoticeRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcNoticeRtn();\n                    if (object.notice != null) {\n                        if (typeof object.notice !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcNoticeRtn.notice: object expected\");\n                        message.notice = $root.xyz.redtorch.pb.NoticeField.fromObject(object.notice);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcNoticeRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcNoticeRtn} message RpcNoticeRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcNoticeRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.notice = null;\n                    if (message.notice != null && message.hasOwnProperty(\"notice\"))\n                        object.notice = $root.xyz.redtorch.pb.NoticeField.toObject(message.notice, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcNoticeRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcNoticeRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcNoticeRtn;\n            })();\n\n            /**\n             * RpcId enum.\n             * @name xyz.redtorch.pb.RpcId\n             * @enum {string}\n             * @property {number} UNKNOWN_RPC_ID=0 UNKNOWN_RPC_ID value\n             * @property {number} SUBSCRIBE_REQ=1 SUBSCRIBE_REQ value\n             * @property {number} SUBSCRIBE_RSP=2 SUBSCRIBE_RSP value\n             * @property {number} UNSUBSCRIBE_REQ=3 UNSUBSCRIBE_REQ value\n             * @property {number} UNSUBSCRIBE_RSP=4 UNSUBSCRIBE_RSP value\n             * @property {number} SUBMIT_ORDER_REQ=5 SUBMIT_ORDER_REQ value\n             * @property {number} SUBMIT_ORDER_RSP=6 SUBMIT_ORDER_RSP value\n             * @property {number} CANCEL_ORDER_REQ=7 CANCEL_ORDER_REQ value\n             * @property {number} CANCEL_ORDER_RSP=8 CANCEL_ORDER_RSP value\n             * @property {number} SEARCH_CONTRACT_REQ=9 SEARCH_CONTRACT_REQ value\n             * @property {number} SEARCH_CONTRACT_RSP=10 SEARCH_CONTRACT_RSP value\n             * @property {number} GET_ORDER_LIST_REQ=11 GET_ORDER_LIST_REQ value\n             * @property {number} GET_ORDER_LIST_RSP=12 GET_ORDER_LIST_RSP value\n             * @property {number} GET_WORKING_ORDER_LIST_REQ=13 GET_WORKING_ORDER_LIST_REQ value\n             * @property {number} GET_WORKING_ORDER_LIST_RSP=14 GET_WORKING_ORDER_LIST_RSP value\n             * @property {number} QUERY_ORDER_BY_ORDER_ID_REQ=15 QUERY_ORDER_BY_ORDER_ID_REQ value\n             * @property {number} QUERY_ORDER_BY_ORDER_ID_RSP=16 QUERY_ORDER_BY_ORDER_ID_RSP value\n             * @property {number} QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ=17 QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ value\n             * @property {number} QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP=18 QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP value\n             * @property {number} QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ=19 QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP=20 QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_REQ=21 QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_REQ value\n             * @property {number} QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_RSP=22 QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_RSP value\n             * @property {number} GET_TRADE_LIST_REQ=23 GET_TRADE_LIST_REQ value\n             * @property {number} GET_TRADE_LIST_RSP=24 GET_TRADE_LIST_RSP value\n             * @property {number} QUERY_TRADE_BY_TRADE_ID_REQ=25 QUERY_TRADE_BY_TRADE_ID_REQ value\n             * @property {number} QUERY_TRADE_BY_TRADE_ID_RSP=26 QUERY_TRADE_BY_TRADE_ID_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_REQ=27 QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_RSP=28 QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ=29 QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP=30 QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_ORDER_ID_REQ=31 QUERY_TRADE_LIST_BY_ORDER_ID_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_ORDER_ID_RSP=32 QUERY_TRADE_LIST_BY_ORDER_ID_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ=33 QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP=34 QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP value\n             * @property {number} GET_POSITION_LIST_REQ=35 GET_POSITION_LIST_REQ value\n             * @property {number} GET_POSITION_LIST_RSP=36 GET_POSITION_LIST_RSP value\n             * @property {number} QUERY_POSITION_BY_POSITION_ID_REQ=37 QUERY_POSITION_BY_POSITION_ID_REQ value\n             * @property {number} QUERY_POSITION_BY_POSITION_ID_RSP=38 QUERY_POSITION_BY_POSITION_ID_RSP value\n             * @property {number} QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ=39 QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP=40 QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_REQ=41 QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_REQ value\n             * @property {number} QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_RSP=42 QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_RSP value\n             * @property {number} GET_ACCOUNT_LIST_REQ=43 GET_ACCOUNT_LIST_REQ value\n             * @property {number} GET_ACCOUNT_LIST_RSP=44 GET_ACCOUNT_LIST_RSP value\n             * @property {number} QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ=45 QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP=46 QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ=47 QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ value\n             * @property {number} QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP=48 QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP value\n             * @property {number} GET_CONTRACT_LIST_REQ=49 GET_CONTRACT_LIST_REQ value\n             * @property {number} GET_CONTRACT_LIST_RSP=50 GET_CONTRACT_LIST_RSP value\n             * @property {number} QUERY_CONTRACT_BY_CONTRACT_ID_REQ=51 QUERY_CONTRACT_BY_CONTRACT_ID_REQ value\n             * @property {number} QUERY_CONTRACT_BY_CONTRACT_ID_RSP=52 QUERY_CONTRACT_BY_CONTRACT_ID_RSP value\n             * @property {number} QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_REQ=53 QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_REQ value\n             * @property {number} QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_RSP=54 QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_RSP value\n             * @property {number} QUERY_CONTRACT_LIST_BY_GATEWAY_ID_REQ=55 QUERY_CONTRACT_LIST_BY_GATEWAY_ID_REQ value\n             * @property {number} QUERY_CONTRACT_LIST_BY_GATEWAY_ID_RSP=56 QUERY_CONTRACT_LIST_BY_GATEWAY_ID_RSP value\n             * @property {number} SYNC_SLAVE_NODE_RUNTIME_DATA_REQ=57 SYNC_SLAVE_NODE_RUNTIME_DATA_REQ value\n             * @property {number} SYNC_SLAVE_NODE_RUNTIME_DATA_RSP=58 SYNC_SLAVE_NODE_RUNTIME_DATA_RSP value\n             * @property {number} GET_MIX_CONTRACT_LIST_REQ=59 GET_MIX_CONTRACT_LIST_REQ value\n             * @property {number} GET_MIX_CONTRACT_LIST_RSP=60 GET_MIX_CONTRACT_LIST_RSP value\n             * @property {number} GET_TICK_LIST_REQ=61 GET_TICK_LIST_REQ value\n             * @property {number} GET_TICK_LIST_RSP=62 GET_TICK_LIST_RSP value\n             * @property {number} QUERY_DB_BAR_LIST_REQ=63 QUERY_DB_BAR_LIST_REQ value\n             * @property {number} QUERY_DB_BAR_LIST_RSP=64 QUERY_DB_BAR_LIST_RSP value\n             * @property {number} QUERY_DB_TICK_LIST_REQ=65 QUERY_DB_TICK_LIST_REQ value\n             * @property {number} QUERY_DB_TICK_LIST_RSP=66 QUERY_DB_TICK_LIST_RSP value\n             * @property {number} QUERY_VOLUME_BAR_LIST_REQ=67 QUERY_VOLUME_BAR_LIST_REQ value\n             * @property {number} QUERY_VOLUME_BAR_LIST_RSP=68 QUERY_VOLUME_BAR_LIST_RSP value\n             * @property {number} EXCEPTION_RSP=999999 EXCEPTION_RSP value\n             * @property {number} ORDER_RTN=1001 ORDER_RTN value\n             * @property {number} TRADE_RTN=1002 TRADE_RTN value\n             * @property {number} CONTRACT_RTN=1003 CONTRACT_RTN value\n             * @property {number} POSITION_RTN=1004 POSITION_RTN value\n             * @property {number} ACCOUNT_RTN=1005 ACCOUNT_RTN value\n             * @property {number} TICK_RTN=1006 TICK_RTN value\n             * @property {number} ORDER_LIST_RTN=1007 ORDER_LIST_RTN value\n             * @property {number} TRADE_LIST_RTN=1008 TRADE_LIST_RTN value\n             * @property {number} CONTRACT_LIST_RTN=1009 CONTRACT_LIST_RTN value\n             * @property {number} POSITION_LIST_RTN=1010 POSITION_LIST_RTN value\n             * @property {number} ACCOUNT_LIST_RTN=1011 ACCOUNT_LIST_RTN value\n             * @property {number} TICK_LIST_RTN=1012 TICK_LIST_RTN value\n             * @property {number} NOTICE_RTN=1013 NOTICE_RTN value\n             */\n            pb.RpcId = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UNKNOWN_RPC_ID\"] = 0;\n                values[valuesById[1] = \"SUBSCRIBE_REQ\"] = 1;\n                values[valuesById[2] = \"SUBSCRIBE_RSP\"] = 2;\n                values[valuesById[3] = \"UNSUBSCRIBE_REQ\"] = 3;\n                values[valuesById[4] = \"UNSUBSCRIBE_RSP\"] = 4;\n                values[valuesById[5] = \"SUBMIT_ORDER_REQ\"] = 5;\n                values[valuesById[6] = \"SUBMIT_ORDER_RSP\"] = 6;\n                values[valuesById[7] = \"CANCEL_ORDER_REQ\"] = 7;\n                values[valuesById[8] = \"CANCEL_ORDER_RSP\"] = 8;\n                values[valuesById[9] = \"SEARCH_CONTRACT_REQ\"] = 9;\n                values[valuesById[10] = \"SEARCH_CONTRACT_RSP\"] = 10;\n                values[valuesById[11] = \"GET_ORDER_LIST_REQ\"] = 11;\n                values[valuesById[12] = \"GET_ORDER_LIST_RSP\"] = 12;\n                values[valuesById[13] = \"GET_WORKING_ORDER_LIST_REQ\"] = 13;\n                values[valuesById[14] = \"GET_WORKING_ORDER_LIST_RSP\"] = 14;\n                values[valuesById[15] = \"QUERY_ORDER_BY_ORDER_ID_REQ\"] = 15;\n                values[valuesById[16] = \"QUERY_ORDER_BY_ORDER_ID_RSP\"] = 16;\n                values[valuesById[17] = \"QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ\"] = 17;\n                values[valuesById[18] = \"QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP\"] = 18;\n                values[valuesById[19] = \"QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ\"] = 19;\n                values[valuesById[20] = \"QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP\"] = 20;\n                values[valuesById[21] = \"QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_REQ\"] = 21;\n                values[valuesById[22] = \"QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_RSP\"] = 22;\n                values[valuesById[23] = \"GET_TRADE_LIST_REQ\"] = 23;\n                values[valuesById[24] = \"GET_TRADE_LIST_RSP\"] = 24;\n                values[valuesById[25] = \"QUERY_TRADE_BY_TRADE_ID_REQ\"] = 25;\n                values[valuesById[26] = \"QUERY_TRADE_BY_TRADE_ID_RSP\"] = 26;\n                values[valuesById[27] = \"QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_REQ\"] = 27;\n                values[valuesById[28] = \"QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_RSP\"] = 28;\n                values[valuesById[29] = \"QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ\"] = 29;\n                values[valuesById[30] = \"QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP\"] = 30;\n                values[valuesById[31] = \"QUERY_TRADE_LIST_BY_ORDER_ID_REQ\"] = 31;\n                values[valuesById[32] = \"QUERY_TRADE_LIST_BY_ORDER_ID_RSP\"] = 32;\n                values[valuesById[33] = \"QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ\"] = 33;\n                values[valuesById[34] = \"QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP\"] = 34;\n                values[valuesById[35] = \"GET_POSITION_LIST_REQ\"] = 35;\n                values[valuesById[36] = \"GET_POSITION_LIST_RSP\"] = 36;\n                values[valuesById[37] = \"QUERY_POSITION_BY_POSITION_ID_REQ\"] = 37;\n                values[valuesById[38] = \"QUERY_POSITION_BY_POSITION_ID_RSP\"] = 38;\n                values[valuesById[39] = \"QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ\"] = 39;\n                values[valuesById[40] = \"QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP\"] = 40;\n                values[valuesById[41] = \"QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_REQ\"] = 41;\n                values[valuesById[42] = \"QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_RSP\"] = 42;\n                values[valuesById[43] = \"GET_ACCOUNT_LIST_REQ\"] = 43;\n                values[valuesById[44] = \"GET_ACCOUNT_LIST_RSP\"] = 44;\n                values[valuesById[45] = \"QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ\"] = 45;\n                values[valuesById[46] = \"QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP\"] = 46;\n                values[valuesById[47] = \"QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ\"] = 47;\n                values[valuesById[48] = \"QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP\"] = 48;\n                values[valuesById[49] = \"GET_CONTRACT_LIST_REQ\"] = 49;\n                values[valuesById[50] = \"GET_CONTRACT_LIST_RSP\"] = 50;\n                values[valuesById[51] = \"QUERY_CONTRACT_BY_CONTRACT_ID_REQ\"] = 51;\n                values[valuesById[52] = \"QUERY_CONTRACT_BY_CONTRACT_ID_RSP\"] = 52;\n                values[valuesById[53] = \"QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_REQ\"] = 53;\n                values[valuesById[54] = \"QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_RSP\"] = 54;\n                values[valuesById[55] = \"QUERY_CONTRACT_LIST_BY_GATEWAY_ID_REQ\"] = 55;\n                values[valuesById[56] = \"QUERY_CONTRACT_LIST_BY_GATEWAY_ID_RSP\"] = 56;\n                values[valuesById[57] = \"SYNC_SLAVE_NODE_RUNTIME_DATA_REQ\"] = 57;\n                values[valuesById[58] = \"SYNC_SLAVE_NODE_RUNTIME_DATA_RSP\"] = 58;\n                values[valuesById[59] = \"GET_MIX_CONTRACT_LIST_REQ\"] = 59;\n                values[valuesById[60] = \"GET_MIX_CONTRACT_LIST_RSP\"] = 60;\n                values[valuesById[61] = \"GET_TICK_LIST_REQ\"] = 61;\n                values[valuesById[62] = \"GET_TICK_LIST_RSP\"] = 62;\n                values[valuesById[63] = \"QUERY_DB_BAR_LIST_REQ\"] = 63;\n                values[valuesById[64] = \"QUERY_DB_BAR_LIST_RSP\"] = 64;\n                values[valuesById[65] = \"QUERY_DB_TICK_LIST_REQ\"] = 65;\n                values[valuesById[66] = \"QUERY_DB_TICK_LIST_RSP\"] = 66;\n                values[valuesById[67] = \"QUERY_VOLUME_BAR_LIST_REQ\"] = 67;\n                values[valuesById[68] = \"QUERY_VOLUME_BAR_LIST_RSP\"] = 68;\n                values[valuesById[999999] = \"EXCEPTION_RSP\"] = 999999;\n                values[valuesById[1001] = \"ORDER_RTN\"] = 1001;\n                values[valuesById[1002] = \"TRADE_RTN\"] = 1002;\n                values[valuesById[1003] = \"CONTRACT_RTN\"] = 1003;\n                values[valuesById[1004] = \"POSITION_RTN\"] = 1004;\n                values[valuesById[1005] = \"ACCOUNT_RTN\"] = 1005;\n                values[valuesById[1006] = \"TICK_RTN\"] = 1006;\n                values[valuesById[1007] = \"ORDER_LIST_RTN\"] = 1007;\n                values[valuesById[1008] = \"TRADE_LIST_RTN\"] = 1008;\n                values[valuesById[1009] = \"CONTRACT_LIST_RTN\"] = 1009;\n                values[valuesById[1010] = \"POSITION_LIST_RTN\"] = 1010;\n                values[valuesById[1011] = \"ACCOUNT_LIST_RTN\"] = 1011;\n                values[valuesById[1012] = \"TICK_LIST_RTN\"] = 1012;\n                values[valuesById[1013] = \"NOTICE_RTN\"] = 1013;\n                return values;\n            })();\n\n            pb.DataExchangeProtocol = (function() {\n\n                /**\n                 * Properties of a DataExchangeProtocol.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IDataExchangeProtocol\n                 * @property {xyz.redtorch.pb.DataExchangeProtocol.ContentType|null} [contentType] DataExchangeProtocol contentType\n                 * @property {number|null} [rpcId] DataExchangeProtocol rpcId\n                 * @property {Uint8Array|null} [contentBytes] DataExchangeProtocol contentBytes\n                 * @property {number|Long|null} [timestamp] DataExchangeProtocol timestamp\n                 */\n\n                /**\n                 * Constructs a new DataExchangeProtocol.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a DataExchangeProtocol.\n                 * @implements IDataExchangeProtocol\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol=} [properties] Properties to set\n                 */\n                function DataExchangeProtocol(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * DataExchangeProtocol contentType.\n                 * @member {xyz.redtorch.pb.DataExchangeProtocol.ContentType} contentType\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.contentType = 0;\n\n                /**\n                 * DataExchangeProtocol rpcId.\n                 * @member {number} rpcId\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.rpcId = 0;\n\n                /**\n                 * DataExchangeProtocol contentBytes.\n                 * @member {Uint8Array} contentBytes\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.contentBytes = $util.newBuffer([]);\n\n                /**\n                 * DataExchangeProtocol timestamp.\n                 * @member {number|Long} timestamp\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new DataExchangeProtocol instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol instance\n                 */\n                DataExchangeProtocol.create = function create(properties) {\n                    return new DataExchangeProtocol(properties);\n                };\n\n                /**\n                 * Encodes the specified DataExchangeProtocol message. Does not implicitly {@link xyz.redtorch.pb.DataExchangeProtocol.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol} message DataExchangeProtocol message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                DataExchangeProtocol.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);\n                    if (message.rpcId != null && message.hasOwnProperty(\"rpcId\"))\n                        writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.rpcId);\n                    if (message.contentBytes != null && message.hasOwnProperty(\"contentBytes\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.contentBytes);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.timestamp);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified DataExchangeProtocol message, length delimited. Does not implicitly {@link xyz.redtorch.pb.DataExchangeProtocol.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol} message DataExchangeProtocol message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                DataExchangeProtocol.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a DataExchangeProtocol message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                DataExchangeProtocol.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.DataExchangeProtocol();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contentType = reader.int32();\n                            break;\n                        case 2:\n                            message.rpcId = reader.fixed32();\n                            break;\n                        case 3:\n                            message.contentBytes = reader.bytes();\n                            break;\n                        case 4:\n                            message.timestamp = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a DataExchangeProtocol message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                DataExchangeProtocol.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a DataExchangeProtocol message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                DataExchangeProtocol.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        switch (message.contentType) {\n                        default:\n                            return \"contentType: enum value expected\";\n                        case 0:\n                        case 1:\n                            break;\n                        }\n                    if (message.rpcId != null && message.hasOwnProperty(\"rpcId\"))\n                        if (!$util.isInteger(message.rpcId))\n                            return \"rpcId: integer expected\";\n                    if (message.contentBytes != null && message.hasOwnProperty(\"contentBytes\"))\n                        if (!(message.contentBytes && typeof message.contentBytes.length === \"number\" || $util.isString(message.contentBytes)))\n                            return \"contentBytes: buffer expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                            return \"timestamp: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a DataExchangeProtocol message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol\n                 */\n                DataExchangeProtocol.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.DataExchangeProtocol)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.DataExchangeProtocol();\n                    switch (object.contentType) {\n                    case \"ROUTINE\":\n                    case 0:\n                        message.contentType = 0;\n                        break;\n                    case \"COMPRESSED_LZ4\":\n                    case 1:\n                        message.contentType = 1;\n                        break;\n                    }\n                    if (object.rpcId != null)\n                        message.rpcId = object.rpcId >>> 0;\n                    if (object.contentBytes != null)\n                        if (typeof object.contentBytes === \"string\")\n                            $util.base64.decode(object.contentBytes, message.contentBytes = $util.newBuffer($util.base64.length(object.contentBytes)), 0);\n                        else if (object.contentBytes.length)\n                            message.contentBytes = object.contentBytes;\n                    if (object.timestamp != null)\n                        if ($util.Long)\n                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                        else if (typeof object.timestamp === \"string\")\n                            message.timestamp = parseInt(object.timestamp, 10);\n                        else if (typeof object.timestamp === \"number\")\n                            message.timestamp = object.timestamp;\n                        else if (typeof object.timestamp === \"object\")\n                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a DataExchangeProtocol message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.DataExchangeProtocol} message DataExchangeProtocol\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                DataExchangeProtocol.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.contentType = options.enums === String ? \"ROUTINE\" : 0;\n                        object.rpcId = 0;\n                        if (options.bytes === String)\n                            object.contentBytes = \"\";\n                        else {\n                            object.contentBytes = [];\n                            if (options.bytes !== Array)\n                                object.contentBytes = $util.newBuffer(object.contentBytes);\n                        }\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.timestamp = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        object.contentType = options.enums === String ? $root.xyz.redtorch.pb.DataExchangeProtocol.ContentType[message.contentType] : message.contentType;\n                    if (message.rpcId != null && message.hasOwnProperty(\"rpcId\"))\n                        object.rpcId = message.rpcId;\n                    if (message.contentBytes != null && message.hasOwnProperty(\"contentBytes\"))\n                        object.contentBytes = options.bytes === String ? $util.base64.encode(message.contentBytes, 0, message.contentBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.contentBytes) : message.contentBytes;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (typeof message.timestamp === \"number\")\n                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                        else\n                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n                    return object;\n                };\n\n                /**\n                 * Converts this DataExchangeProtocol to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                DataExchangeProtocol.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * ContentType enum.\n                 * @name xyz.redtorch.pb.DataExchangeProtocol.ContentType\n                 * @enum {string}\n                 * @property {number} ROUTINE=0 ROUTINE value\n                 * @property {number} COMPRESSED_LZ4=1 COMPRESSED_LZ4 value\n                 */\n                DataExchangeProtocol.ContentType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"ROUTINE\"] = 0;\n                    values[valuesById[1] = \"COMPRESSED_LZ4\"] = 1;\n                    return values;\n                })();\n\n                return DataExchangeProtocol;\n            })();\n\n            return pb;\n        })();\n\n        return redtorch;\n    })();\n\n    return xyz;\n})();\n\nmodule.exports = $root;\n","import { xyz } from \"../../pb/pb\";\r\nimport { rpcClientProcess } from './rpcClientProcess';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { authenticationStore } from \"../../../stores/storesIndex\";\r\n\r\nconst {\r\n    RpcId,\r\n    RpcSubscribeReq,\r\n    RpcUnsubscribeReq,\r\n    RpcSubmitOrderReq,\r\n    RpcCancelOrderReq,\r\n    RpcSearchContractReq,\r\n    RpcGetAccountListReq,\r\n    RpcGetMixContractListReq,\r\n    RpcGetPositionListReq,\r\n    RpcGetOrderListReq,\r\n    RpcGetTradeListReq,\r\n    RpcGetTickListReq,\r\n    CommonReqField,\r\n    CancelOrderReqField,\r\n} = xyz.redtorch.pb\r\n\r\nclass RpcClientApi {\r\n    public static getInstance = (): RpcClientApi => {\r\n        if (!RpcClientApi.instance) {\r\n            RpcClientApi.instance = new RpcClientApi();\r\n        }\r\n        return RpcClientApi.instance;\r\n    }\r\n\r\n    private static instance: RpcClientApi;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    private generateCommonReq = (transactionId: string) => {\r\n        const operatorId = authenticationStore.operatorId;\r\n        const commonReq = new CommonReqField()\r\n        commonReq.operatorId = operatorId;\r\n        commonReq.transactionId = transactionId;\r\n\r\n        return commonReq\r\n    }\r\n\r\n    public asyncSubscribe = (contract: xyz.redtorch.pb.ContractField): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcSubscribeReq = new RpcSubscribeReq();\r\n        rpcSubscribeReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcSubscribeReq.contract = contract;\r\n        rpcSubscribeReq.contract.gatewayId = \"\";\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.SUBSCRIBE_REQ, transactionId, RpcSubscribeReq.encode(rpcSubscribeReq).finish());\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncUnsubscribe = (contract: xyz.redtorch.pb.ContractField, gatewayId: string): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcUnsubscribeReq = new RpcUnsubscribeReq();\r\n\r\n        rpcUnsubscribeReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcUnsubscribeReq.contract = contract;\r\n        rpcUnsubscribeReq.gatewayId = gatewayId;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.UNSUBSCRIBE_REQ, transactionId, RpcUnsubscribeReq.encode(rpcUnsubscribeReq).finish());\r\n\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncSubmitOrder = (submitOrderReq: xyz.redtorch.pb.SubmitOrderReqField): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcSubmitOrderReq = new RpcSubmitOrderReq();\r\n\r\n        rpcSubmitOrderReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcSubmitOrderReq.submitOrderReq = submitOrderReq;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.SUBMIT_ORDER_REQ, transactionId, RpcSubmitOrderReq.encode(rpcSubmitOrderReq).finish());\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncCancelOrder = (orderId: string, originOrderId?: string): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const cancelOrderReq = new CancelOrderReqField()\r\n        cancelOrderReq.orderId = orderId;\r\n        if (originOrderId) {\r\n            cancelOrderReq.originOrderId = originOrderId;\r\n        }\r\n\r\n        const rpcCancelOrderReq = new RpcCancelOrderReq();\r\n        rpcCancelOrderReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcCancelOrderReq.cancelOrderReq = cancelOrderReq;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.CANCEL_ORDER_REQ, transactionId, RpcCancelOrderReq.encode(rpcCancelOrderReq).finish());\r\n\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncSearchContract = (contract: xyz.redtorch.pb.ContractField): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcSearchContractReq = new RpcSearchContractReq();\r\n\r\n        rpcSearchContractReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcSearchContractReq.contract = contract;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.SEARCH_CONTRACT_REQ, transactionId, RpcSearchContractReq.encode(rpcSearchContractReq).finish());\r\n\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetAccountList = () => {\r\n        const transactionId = uuidv4()\r\n        const rpcGetAccountListReq = new RpcGetAccountListReq();\r\n\r\n        rpcGetAccountListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_ACCOUNT_LIST_REQ, transactionId, RpcGetAccountListReq.encode(rpcGetAccountListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetMixContractList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetMixContractListReq = new RpcGetMixContractListReq();\r\n\r\n        rpcGetMixContractListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_MIX_CONTRACT_LIST_REQ, transactionId, RpcGetMixContractListReq.encode(rpcGetMixContractListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetPositionList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetPositionListReq = new RpcGetPositionListReq();\r\n\r\n        rpcGetPositionListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_POSITION_LIST_REQ, transactionId, RpcGetPositionListReq.encode(rpcGetPositionListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetOrderList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetOrderListReq = new RpcGetOrderListReq();\r\n\r\n        rpcGetOrderListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_ORDER_LIST_REQ, transactionId, RpcGetOrderListReq.encode(rpcGetOrderListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetTradeList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetTradeListReq = new RpcGetTradeListReq();\r\n\r\n        rpcGetTradeListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_TRADE_LIST_REQ, transactionId, RpcGetTradeListReq.encode(rpcGetTradeListReq).finish());\r\n    }\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetTickList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetTickListReq = new RpcGetTickListReq();\r\n\r\n        rpcGetTickListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_TICK_LIST_REQ, transactionId, RpcGetTickListReq.encode(rpcGetTickListReq).finish());\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst rpcClientApi = RpcClientApi.getInstance()\r\n\r\nexport { rpcClientApi };","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\nimport './ManagementPage.css';\r\nimport { withRouter } from 'react-router';\r\nimport { RouteWithSubRoutes } from '../../router'\r\n\r\nexport const ManagementPage = inject('routingStore')(observer(class ManagementPage extends React.Component<any> {\r\n\r\n  public state = { selectedKey: 'Settings' };\r\n\r\n  public render() {\r\n    const { routes, location } = this.props;\r\n\r\n    let defaultSelectedKey = '';\r\n    routes.map((route: any, i: any) => {\r\n      if (location.pathname.startsWith(route.path)) {\r\n        defaultSelectedKey = route.path;\r\n      }\r\n    })\r\n\r\n    return (\r\n      <Pivot\r\n        defaultSelectedKey={defaultSelectedKey}\r\n        onLinkClick={this.onLinkClick}\r\n        styles={{ linkIsSelected: { height: 24 }, link: { height: 24 }, linkContent: { height: 24 }, root: { height: 24 }, text: { lineHeight: 24 } }}\r\n      >\r\n        {routes.map((route: any, i: any) => (\r\n          <PivotItem key={`PivotItemKey_${route.name}`} itemKey={route.path} headerText={route.name}>\r\n            <RouteWithSubRoutes {...route} />\r\n          </PivotItem>\r\n        ))}\r\n      </Pivot>\r\n    );\r\n  }\r\n\r\n  onLinkClick = (item: PivotItem | undefined): void => {\r\n    const { history } = this.props;\r\n    if (item) {\r\n      history.push(item.props.itemKey)\r\n    }\r\n  };\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(ManagementPage)","import * as React from 'react';\r\n// import * as ReactDOM from 'react-dom';\r\nimport { inject, observer } from 'mobx-react';\r\n// import { counterStore, routingStore } from '../stores'\r\n// import { TextField, MaskedTextField } from '@fluentui/react/lib/TextField';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\r\nimport { withRouter } from 'react-router';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, IColumn, IDetailsHeaderProps, ConstrainMode, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { PrimaryButton, DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const NodePage = inject('nodeStore')(observer(class NodePage extends React.Component<any> {\r\n\r\n  public state = {\r\n    showTokenModal: false,\r\n    tokenForShow: '',\r\n    nodeIdForTokenShow: '',\r\n    hiddenDeleteNodeDialog: true,\r\n    nodeIdForDelete: null,\r\n    hiddenResetNodeTokenDialog: true,\r\n    nodeIdForReset: null,\r\n    editNodeDescription: '',\r\n    editNodeId: null,\r\n    showUpdateNodeDescriptionModal: false,\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n    const { nodeStore } = this.props\r\n\r\n    nodeStore.getNodeList()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n\r\n  public render() {\r\n\r\n    // const { routes, location } = this.props;\r\n\r\n    const columns: IColumn[] = [{\r\n      key: \"nodeId\",\r\n      name: \"ID\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.nodeId}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: \"status\",\r\n      name: \"状态\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        if (item.status === 0) {\r\n          return (\r\n            <span style={{ color: 'red' }}>已经断开</span>\r\n          );\r\n        } else if (item.status === 1) {\r\n          return (\r\n            <span style={{ color: 'green' }}>已经连接</span>\r\n          );\r\n        }\r\n        return (\r\n          <span style={{ color: 'aqua' }}>{item.status}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"description\",\r\n      name: \"描述\",\r\n      minWidth: 200,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.description}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlySessionId\",\r\n      name: \"最近的会话ID\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlySessionId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyIpAddress\",\r\n      name: \"最近的IP地址\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyIpAddress}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyPort\",\r\n      name: \"最近的端口\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyPort}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLoginTime\",\r\n      name: \"最近的登录时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLoginTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLogoutTime\",\r\n      name: \"最近的断开时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLogoutTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"action\",\r\n      name: \"操作\",\r\n      minWidth: 30,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      onRender: (item) => {\r\n        return (\r\n          <IconButton\r\n            menuIconProps={{ iconName: 'MoreVertical' }}\r\n            role=\"button\"\r\n            aria-haspopup={true}\r\n            aria-label=\"Show actions\"\r\n            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n            menuProps={{\r\n              items: [\r\n                {\r\n                  key: 'showToken',\r\n                  text: '查看令牌',\r\n                  iconProps: {\r\n                    iconName: \"EntryView\"\r\n                  },\r\n                  onClick: () => this.openShowTokenModal(item.nodeId, item.token)\r\n                },\r\n                {\r\n                  key: 'resetToken',\r\n                  text: '重置令牌',\r\n                  iconProps: {\r\n                    iconName: \"SingleColumnEdit\"\r\n                  },\r\n                  onClick: () => this.openResetNodeTokenDialog(item.nodeId)\r\n                },\r\n                {\r\n                  key: 'updateDescription',\r\n                  text: '更新描述',\r\n                  iconProps: {\r\n                    iconName: \"EditNote\"\r\n                  },\r\n                  onClick: () => this.openUpdateNodeDescriptionModal(item.nodeId, item.description)\r\n                },\r\n                {\r\n                  key: 'delete',\r\n                  text: '删除',\r\n                  iconProps: {\r\n                    iconName: \"DeleteRows\"\r\n                  },\r\n                  onClick: () => this.openDeleteNodeDialog(item.nodeId)\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    ]\r\n\r\n\r\n    const { nodeStore } = this.props\r\n\r\n    const classNames = mergeStyleSets({\r\n      wrapper: {\r\n        height: `${this.state.windowInnerHeight - 81}px`,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Stack>\r\n        <Stack>\r\n          <CommandBar\r\n            items={this.getCommandBarItems()}\r\n          // 以下功能可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n          // overflowItems={this.getOverlflowItems()}\r\n          // overflowButtonProps={{ ariaLabel: 'More commands' }}\r\n          // farItems={this.getFarItems()}\r\n          // ariaLabel={'Use left and right arrow keys to navigate between commands'}\r\n          />\r\n          <div className={classNames.wrapper}>\r\n            <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n              <DetailsList\r\n                // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                items={nodeStore.nodeList}\r\n                compact={true}\r\n                columns={columns}\r\n                selectionMode={SelectionMode.none}\r\n                setKey=\"id\"\r\n                layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                constrainMode={ConstrainMode.unconstrained}\r\n                // data-is-scrollable={true}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsHeader={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                      <DetailsHeader\r\n                        {...detailsHeaderProps}\r\n                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                      />\r\n                      {/* {defaultRender(detailsHeaderProps)} */}\r\n                    </Sticky>\r\n                  )}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsFooter={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                      {defaultRender(detailsFooterProps)}\r\n                    </Sticky>\r\n                  )}\r\n              />\r\n            </ScrollablePane>\r\n          </div>\r\n        </Stack>\r\n        <Modal\r\n          isOpen={this.state.showTokenModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeShowTokenModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"节点ID\" defaultValue={this.state.nodeIdForTokenShow} disabled={true} />\r\n                  <TextField label=\"令牌\" defaultValue={this.state.tokenForShow} readOnly={true} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteNodeDialog}\r\n          onDismiss={() => this.closeDeleteNodeDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除提示',\r\n            subText: `确认删除节点？ID:${this.state.nodeIdForDelete},此操作将断开当前ID存在的会话`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteNodeByNodeId()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteNodeDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenResetNodeTokenDialog}\r\n          onDismiss={this.closeResetNodeTokenDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '重置节点令牌提示',\r\n            subText: `确认重置节点令牌？ID:${this.state.nodeIdForReset},此操作将断开当前ID存在的会话`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.resetNodeTokenByNodeId()} text=\"重置\" />\r\n            <DefaultButton onClick={() => this.closeResetNodeTokenDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateNodeDescriptionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateNodeDescriptionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >节点ID: {this.state.editNodeId}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"节点描述\" multiline={true} resizable={true} defaultValue={this.state.editNodeDescription ? this.state.editNodeDescription : \"\"} onChange={(event: any, newValue?: string) => this.editNodeDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateNodeDescriptionByNodeId()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateNodeDescriptionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private openShowTokenModal = (nodeId: number, token: string) => {\r\n    this.setState({ tokenForShow: token, nodeIdForTokenShow: nodeId, showTokenModal: true });\r\n  }\r\n\r\n  private closeShowTokenModal = () => {\r\n    this.setState({ showTokenModal: false, tokenForShow: '', nodeIdForTokenShow: '' });\r\n  }\r\n\r\n  private openDeleteNodeDialog = (nodeId: number) => {\r\n    this.setState({ nodeIdForDelete: nodeId, hiddenDeleteNodeDialog: false });\r\n  }\r\n\r\n  private closeDeleteNodeDialog = () => {\r\n    this.setState({ hiddenDeleteNodeDialog: true, nodeIdForDelete: null });\r\n  }\r\n\r\n  private deleteNodeByNodeId = () => {\r\n    const { nodeStore } = this.props\r\n    nodeStore.deleteNodeByNodeId(this.state.nodeIdForDelete)\r\n    this.closeDeleteNodeDialog();\r\n  }\r\n\r\n  private openResetNodeTokenDialog = (nodeId: number) => {\r\n    this.setState({ nodeIdForReset: nodeId, hiddenResetNodeTokenDialog: false });\r\n  }\r\n\r\n  private closeResetNodeTokenDialog = () => {\r\n    this.setState({ hiddenResetNodeTokenDialog: true, nodeIdForReset: null });\r\n  }\r\n\r\n  private resetNodeTokenByNodeId = () => {\r\n    const { nodeStore } = this.props\r\n    nodeStore.resetNodeTokenByNodeId(this.state.nodeIdForReset)\r\n    this.closeResetNodeTokenDialog();\r\n  }\r\n\r\n  private openUpdateNodeDescriptionModal = (nodeId: number, description: string) => {\r\n    this.setState({ editNodeId: nodeId, editNodeDescription: description, showUpdateNodeDescriptionModal: true });\r\n  }\r\n\r\n  private closeUpdateNodeDescriptionModal = () => {\r\n    this.setState({ showUpdateNodeDescriptionModal: false, editNodeId: null, editNodeDescription: '' });\r\n  }\r\n\r\n  private updateNodeDescriptionByNodeId = () => {\r\n    this.props.nodeStore.updateNodeDescriptionByNodeId(this.state.editNodeId, this.state.editNodeDescription)\r\n    this.closeUpdateNodeDescriptionModal();\r\n  }\r\n\r\n  private editNodeDescriptionOnChange(event: any) {\r\n    this.setState({ editNodeDescription: event.target.value })\r\n  }\r\n\r\n  private getCommandBarItems = () => {\r\n\r\n    const { nodeStore } = this.props\r\n    return [\r\n      {\r\n        key: 'add',\r\n        name: '新增',\r\n        iconProps: {\r\n          iconName: 'Add'\r\n        },\r\n        onClick: () => nodeStore.createNode()\r\n      },\r\n      {\r\n        key: 'refresh',\r\n        name: '刷新',\r\n        iconProps: {\r\n          iconName: 'Refresh'\r\n        },\r\n        onClick: () => nodeStore.getNodeList()\r\n      }\r\n    ];\r\n  };\r\n\r\n  // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 以下可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\r\n  // private getOverlflowItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'blocked',\r\n  //       name: '禁用',\r\n  //       iconProps: {\r\n  //         iconName: 'Blocked'\r\n  //       },\r\n  //       onClick: () => console.log('禁用')\r\n  //     },\r\n  //     {\r\n  //       key: 'delete',\r\n  //       name: '删除',\r\n  //       iconProps: {\r\n  //         iconName: 'DeleteTable'\r\n  //       },\r\n  //       onClick: () => console.log('Share')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // private getFarItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'sort',\r\n  //       name: 'Sort',\r\n  //       ariaLabel: 'Sort',\r\n  //       iconProps: {\r\n  //         iconName: 'SortLines'\r\n  //       },\r\n  //       subMenuProps: {\r\n  //         items: [\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据ID',\r\n  //           },\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据状态',\r\n  //           }\r\n  //         ]\r\n  //       },\r\n  //       onClick: () => console.log('Sort')\r\n  //     },\r\n  //     {\r\n  //       key: 'info',\r\n  //       name: 'Info',\r\n  //       ariaLabel: 'Info',\r\n  //       iconProps: {\r\n  //         iconName: 'Info'\r\n  //       },\r\n  //       iconOnly: true,\r\n  //       onClick: () => console.log('Info')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(NodePage);","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\r\nimport { withRouter } from 'react-router';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, IColumn, IDetailsHeaderProps, ConstrainMode, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { ActionButton, PrimaryButton, DefaultButton, IButtonStyles, IconButton } from '@fluentui/react/lib/Button';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { Dropdown, IDropdownStyles, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\nimport { ComboBox, IComboBoxOption } from '@fluentui/react/lib/ComboBox';\r\nimport { hostNamePattern, ipv4PattenPattern, portPattern, normalIntegerPattern } from '../../utils';\r\nimport { toast } from 'react-toastify';\r\nimport { createTheme, ITheme, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { xyz } from \"../../node/pb/pb\";\r\n\r\nconst { GatewayTypeEnum, GatewayAdapterTypeEnum, ConnectStatusEnum } = xyz.redtorch.pb\r\n\r\n\r\nconst theme: ITheme = createTheme({\r\n  fonts: {\r\n    medium: {\r\n      fontFamily: 'Monaco, Menlo, Consolas',\r\n      fontSize: '30px'\r\n    }\r\n  }\r\n});\r\n\r\nconst actionButtonStyles: IButtonStyles = {\r\n  root: {\r\n    fontSize: '12px',\r\n    height: 16\r\n  }\r\n}\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: { width: 300 }\r\n};\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nconst gatewayTypeOptions: IDropdownOption[] = [\r\n  { key: 0, text: '行情和交易' },\r\n  { key: 1, text: '行情' },\r\n  { key: 2, text: '交易' },\r\n];\r\n\r\nconst gatewayAdapterTypeOptions: IDropdownOption[] = [\r\n  { key: 0, text: 'CTP' },\r\n  { key: 1, text: 'IB' },\r\n  { key: 2, text: 'COMMON' }\r\n];\r\n\r\nconst gatewayImplementClassNameOptions: IComboBoxOption[] = [\r\n  { key: 'xyz.redtorch.gateway.ctp.x64v6v3v15v.CtpGatewayImpl', text: 'xyz.redtorch.gateway.ctp.x64v6v3v15v.CtpGatewayImpl' },\r\n  { key: 'xyz.redtorch.gateway.ctp.x64v6v3v19p1v.CtpGatewayImpl', text: 'xyz.redtorch.gateway.ctp.x64v6v3v19p1v.CtpGatewayImpl' },\r\n  { key: 'xyz.redtorch.gateway.ctp.x64v6v3v19t1v.CtpGatewayImpl', text: 'xyz.redtorch.gateway.ctp.x64v6v3v19t1v.CtpGatewayImpl' }\r\n];\r\n\r\n\r\nexport const GatewayPage = inject('gatewayStore')(observer(class GatewayPage extends React.Component<any> {\r\n\r\n  public state = {\r\n    hiddenDisconnectGatewayDialog: true,\r\n    gatewayIdForDisconnect: '',\r\n    // -----------------------------------------\r\n    hiddenDeleteGatewayDialog: true,\r\n    gatewayIdForDelete: null,\r\n    // -----------------------------------------\r\n    hiddenConnectAllGatewaysDialog: true,\r\n    hiddenDisconnectAllGatewaysDialog: true,\r\n    // -----------------------------------------\r\n    showEditGatewayModal: false,\r\n    // -----------------------------------------\r\n    editGatewayId: '',\r\n    editGatewayName: '',\r\n    editGatewayNameErrorMessage: '',\r\n    editGatewayDescription: '',\r\n    editGatewayTargetNodeId: 10000,\r\n    editGatewayTargetNodeIdErrorMessage: '',\r\n    editGatewayImplementClassName: '',\r\n    editGatewayImplementClassNameErrorMessage: '',\r\n    editGatewayType: 0,\r\n    editGatewayAdapterType: 0,\r\n    editAutoConnectTimeRanges: \"\",\r\n    editGatewayCtpSettingUserId: '',\r\n    editGatewayCtpSettingUserIdErrorMessage: '',\r\n    editGatewayCtpSettingPassword: '',\r\n    editGatewayCtpSettingPasswordErrorMessage: '',\r\n    editGatewayCtpSettingMdHost: '',\r\n    editGatewayCtpSettingMdHostErrorMessage: '',\r\n    editGatewayCtpSettingMdPort: 0,\r\n    editGatewayCtpSettingMdPortErrorMessage: '',\r\n    editGatewayCtpSettingTdHost: '',\r\n    editGatewayCtpSettingTdHostErrorMessage: '',\r\n    editGatewayCtpSettingTdPort: 0,\r\n    editGatewayCtpSettingTdPortErrorMessage: '',\r\n    editGatewayCtpSettingUserProductInfo: '',\r\n    editGatewayCtpSettingAuthCode: '',\r\n    editGatewayCtpSettingBrokerId: '',\r\n    editGatewayCtpSettingBrokerIdErrorMessage: '',\r\n    editGatewayCtpSettingAppId: '',\r\n    editGatewayIbSettingClientId: 0,\r\n    editGatewayIbSettingHost: '127.0.0.1',\r\n    editGatewayIbSettingHostErrorMessage: '',\r\n    editGatewayIbSettingPort: 7496,\r\n    editGatewayIbSettingPortErrorMessage: '',\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n    const { gatewayStore } = this.props\r\n\r\n    gatewayStore.getGatewayList()\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n  public render() {\r\n\r\n    // const { routes, location } = this.props;\r\n\r\n    const columns: IColumn[] = [{\r\n      key: \"gatewayId\",\r\n      name: \"ID\",\r\n      minWidth: 250,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.gatewayId}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: \"status\",\r\n      name: \"连接状态\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'boolean',\r\n      onRender: (item) => {\r\n        if (item.status === ConnectStatusEnum.CS_Disconnected) {\r\n          return (\r\n            <span style={{ color: 'red' }}>已经断开</span>\r\n          );\r\n        } else if (item.status === ConnectStatusEnum.CS_Connected) {\r\n          return (\r\n            <span style={{ color: 'green' }}>已经连接</span>\r\n          );\r\n        } else if (item.status === ConnectStatusEnum.CS_Disconnecting) {\r\n          return (\r\n            <span style={{ color: 'orange' }}>正在断开</span>\r\n          );\r\n        } else if (item.status === ConnectStatusEnum.CS_Connecting) {\r\n          return (\r\n            <span style={{ color: 'orange' }}>正在连接</span>\r\n          );\r\n        }\r\n        return (\r\n          <span style={{ color: 'aqua' }}>{item.status}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"autoConnectTimeRanges\",\r\n      name: \"自动连接时间段\",\r\n      minWidth: 120,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.autoConnectTimeRanges}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"gatewayName\",\r\n      name: \"网关名称\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.gatewayName}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"gatewayDescription\",\r\n      name: \"网关描述\",\r\n      minWidth: 120,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.gatewayDescription}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"implementClassName\",\r\n      name: \"网关实现类\",\r\n      minWidth: 120,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.implementClassName}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"gatewayType\",\r\n      name: \"网关类型\",\r\n      minWidth: 80,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        if (item.gatewayType === GatewayTypeEnum.GTE_TradeAndMarketData) {\r\n          return (\r\n            <span>行情和交易</span>\r\n          );\r\n        } else if (item.gatewayType === GatewayTypeEnum.GTE_MarketData) {\r\n          return (\r\n            <span>行情</span>\r\n          );\r\n        } else if (item.gatewayType === GatewayTypeEnum.GTE_Trade) {\r\n          return (\r\n            <span>交易</span>\r\n          );\r\n        }\r\n        return (\r\n          <span>{item.gatewayType}</span>\r\n        );\r\n\r\n      }\r\n    }, {\r\n      key: \"gatewayAdapterType\",\r\n      name: \"网关适配器类型\",\r\n      minWidth: 80,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        if (item.gatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP) {\r\n          return (\r\n            <span>CTP</span>\r\n          );\r\n        } else if (item.gatewayAdapterType === GatewayAdapterTypeEnum.GAT_IB) {\r\n          return (\r\n            <span>IB</span>\r\n          );\r\n        } else if (item.gatewayAdapterType === GatewayAdapterTypeEnum.GAT_COMMON) {\r\n          return (\r\n            <span>COMMON</span>\r\n          );\r\n        }\r\n        return (\r\n          <span>{item.gatewayAdapterType}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"targetNodeId\",\r\n      name: \"目标节点ID\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.targetNodeId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"action\",\r\n      name: \"操作\",\r\n      minWidth: 110,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      onRender: (item) => {\r\n        return (\r\n          <span>\r\n            {\r\n              (item.status === ConnectStatusEnum.CS_Connected || item.status === ConnectStatusEnum.CS_Connecting) ?\r\n                <ActionButton\r\n                  iconProps={{ iconName: 'PlugConnected' }}\r\n                  allowDisabledFocus={true}\r\n                  disabled={false}\r\n                  checked={false}\r\n                  onClick={() => this.openDisconnectGatewayDialog(item.gatewayId)}\r\n                  styles={actionButtonStyles}\r\n                >\r\n                  断开\r\n            </ActionButton> :\r\n                <ActionButton\r\n                  iconProps={{ iconName: 'PlugDisconnected' }}\r\n                  allowDisabledFocus={true}\r\n                  disabled={false}\r\n                  checked={false}\r\n                  onClick={() => this.props.gatewayStore.connectGatewayByGatewayId(item.gatewayId)}\r\n                  styles={actionButtonStyles}\r\n                >\r\n                  连接\r\n              </ActionButton>\r\n            }\r\n\r\n            <IconButton\r\n              menuIconProps={{ iconName: 'MoreVertical' }}\r\n              role=\"button\"\r\n              aria-haspopup={true}\r\n              aria-label=\"Show actions\"\r\n              styles={{ root: { float: 'right', height: 'inherit' } }}\r\n              menuProps={{\r\n                items: [\r\n                  {\r\n                    key: 'edit',\r\n                    text: '编辑',\r\n                    iconProps: {\r\n                      iconName: \"PageEdit\"\r\n                    },\r\n                    onClick: () => this.openEditGatewayModal(item)\r\n                  },\r\n                  {\r\n                    key: 'delete',\r\n                    text: '删除',\r\n                    iconProps: {\r\n                      iconName: \"DeleteRows\"\r\n                    },\r\n                    onClick: () => this.openDeleteGatewayDialog(item.gatewayId)\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n    ]\r\n\r\n\r\n    const { gatewayStore } = this.props\r\n    const classNames = mergeStyleSets({\r\n      wrapper: {\r\n        height: `${this.state.windowInnerHeight - 81}px`,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Stack>\r\n        <Stack>\r\n          <CommandBar\r\n            items={this.getCommandBarItems()}\r\n          />\r\n          <div className={classNames.wrapper}>\r\n            <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n              <DetailsList\r\n                // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                items={gatewayStore.gatewayList}\r\n                compact={true}\r\n                columns={columns}\r\n                selectionMode={SelectionMode.none}\r\n                setKey=\"id\"\r\n                layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                constrainMode={ConstrainMode.unconstrained}\r\n                // data-is-scrollable={true}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsHeader={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                      <DetailsHeader\r\n                        {...detailsHeaderProps}\r\n                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                      />\r\n                      {/* {defaultRender(detailsHeaderProps)} */}\r\n                    </Sticky>\r\n                  )}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsFooter={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                      {defaultRender(detailsFooterProps)}\r\n                    </Sticky>\r\n                  )}\r\n              />\r\n            </ScrollablePane>\r\n          </div>\r\n\r\n        </Stack>\r\n        <Modal\r\n          isOpen={this.state.showEditGatewayModal}\r\n          isBlocking={true}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >基本配置</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"网关ID\" id='editGatewayId' disabled={true} defaultValue={this.state.editGatewayId} />\r\n                  <TextField label=\"网关名称\" id='editGatewayName' defaultValue={this.state.editGatewayName} errorMessage={this.state.editGatewayNameErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  <TextField label=\"网关描述\" id='editGatewayDescription' defaultValue={this.state.editGatewayDescription} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  <TextField label=\"目标节点\" id='editGatewayTargetNodeId' type='number' defaultValue={`${this.state.editGatewayTargetNodeId}`} errorMessage={this.state.editGatewayTargetNodeIdErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  {/* <TextField label=\"网关实现类\"  id={'editGatewayImplementClassName'}   defaultValue={this.state.editGatewayImplementClassName}/> */}\r\n                  <ComboBox\r\n                    label=\"网关实现类\"\r\n                    id=\"editGatewayImplementClassName\"\r\n                    allowFreeform={true}\r\n                    autoComplete={'off'}\r\n                    options={gatewayImplementClassNameOptions}\r\n                    onChange={(event: any, option?: IComboBoxOption, index?: number, value?: string) => {\r\n                      if (option !== undefined) {\r\n                        this.commonHandleFieldChange(\"editGatewayImplementClassName\", option.text)\r\n                      }\r\n                    }}\r\n                    onPendingValueChanged={(option?: IComboBoxOption, index?: number, value?: string) => {\r\n                      if (value !== undefined) {\r\n                        this.commonHandleFieldChange(\"editGatewayImplementClassName\", value)\r\n                      }\r\n                    }}\r\n                    errorMessage={this.state.editGatewayImplementClassNameErrorMessage}\r\n                    text={this.state.editGatewayImplementClassName}\r\n                  />\r\n\r\n                  <Dropdown\r\n                    id='editGatewayType'\r\n                    label=\"网关类型\"\r\n                    defaultSelectedKey={this.state.editGatewayType}\r\n                    options={gatewayTypeOptions}\r\n                    styles={dropdownStyles}\r\n                    onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => this.commonHandleFieldChange(event.target.id, index)}\r\n                  />\r\n\r\n                  <Dropdown\r\n                    id='editGatewayAdapterType'\r\n                    label=\"网关适配器类型\"\r\n                    defaultSelectedKey={this.state.editGatewayAdapterType}\r\n                    options={gatewayAdapterTypeOptions}\r\n                    styles={dropdownStyles}\r\n                    onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => this.commonHandleFieldChange(event.target.id, index)}\r\n                  />\r\n\r\n                  <TextField label=\"自动连接时间段(t1-t2#tm-tn#...)\" id='editAutoConnectTimeRanges' type='string' defaultValue={`${this.state.editAutoConnectTimeRanges}`} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP ?\r\n              <Stack.Item align=\"center\">\r\n                <Separator><div style={{ fontSize: FontSizes.xxLarge }} >CTP配置</div></Separator>\r\n              </Stack.Item> : null\r\n            }\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP ?\r\n              <Stack.Item align=\"center\">\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                  <Stack {...columnProps}>\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_MarketData) ?\r\n                      <TextField label=\"行情主机\" id={'editGatewayCtpSettingMdHost'} defaultValue={this.state.editGatewayCtpSettingMdHost} errorMessage={this.state.editGatewayCtpSettingMdHostErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_Trade) ?\r\n                      <TextField label=\"交易主机\" id={'editGatewayCtpSettingTdHost'} defaultValue={this.state.editGatewayCtpSettingTdHost} errorMessage={this.state.editGatewayCtpSettingTdHostErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    <TextField label=\"用户名\" id={'editGatewayCtpSettingUserId'} defaultValue={this.state.editGatewayCtpSettingUserId} errorMessage={this.state.editGatewayCtpSettingUserIdErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"UserProductInfo\" id={'editGatewayCtpSettingUserProductInfo'} defaultValue={this.state.editGatewayCtpSettingUserProductInfo} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"AppID\" id='editGatewayCtpSettingAppId' defaultValue={this.state.editGatewayCtpSettingAppId} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  </Stack>\r\n                  <Stack {...columnProps}>\r\n\r\n                    {/* 弃用,样式有偏差\r\n                    <SpinButton\r\n                      defaultValue ={`${this.state.editGatewayCtpSettingMdPort}`}\r\n                      label={'行情端口'}\r\n                      labelPosition={Position.top}\r\n                      min={0}\r\n                      max={65535}\r\n                      step={1}\r\n                      incrementButtonAriaLabel={'Increase value by 1'}\r\n                      decrementButtonAriaLabel={'Decrease value by 1'}\r\n                    /> */}\r\n\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_MarketData) ?\r\n                      <TextField label=\"行情端口\" id='editGatewayCtpSettingMdPort' type='number' defaultValue={`${this.state.editGatewayCtpSettingMdPort}`} errorMessage={this.state.editGatewayCtpSettingMdPortErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_Trade) ?\r\n                      <TextField label=\"交易端口\" id='editGatewayCtpSettingTdPort' type='number' defaultValue={`${this.state.editGatewayCtpSettingTdPort}`} errorMessage={this.state.editGatewayCtpSettingTdPortErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    <TextField label=\"密码\" id='editGatewayCtpSettingPassword' type='password' defaultValue={this.state.editGatewayCtpSettingPassword} errorMessage={this.state.editGatewayCtpSettingPasswordErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"AuthCode\" id='editGatewayCtpSettingAuthCode' defaultValue={this.state.editGatewayCtpSettingAuthCode} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                    <TextField label=\"BrokerID\" id='editGatewayCtpSettingBrokerId' defaultValue={this.state.editGatewayCtpSettingBrokerId} errorMessage={this.state.editGatewayCtpSettingBrokerIdErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item> : null\r\n            }\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_IB ?\r\n              <Stack.Item align=\"center\">\r\n                <Separator theme={theme}>IB配置</Separator>\r\n              </Stack.Item> : null\r\n            }\r\n\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_IB ?\r\n              <Stack.Item align=\"center\">\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                  <Stack {...columnProps}>\r\n                    <TextField label=\"主机\" id='editGatewayIbSettingHost' defaultValue={this.state.editGatewayIbSettingHost} errorMessage={this.state.editGatewayIbSettingHostErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"客户端ID\" id='editGatewayIbSettingClientId' type='number' defaultValue={`${this.state.editGatewayIbSettingClientId}`} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  </Stack>\r\n                  <Stack {...columnProps}>\r\n                    <TextField label=\"端口\" id='editGatewayIbSettingPort' type='number' defaultValue={`${this.state.editGatewayIbSettingPort}`} errorMessage={this.state.editGatewayIbSettingPortErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item> : null\r\n            }\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.saveEditGateway()} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeEditGatewayModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDisconnectGatewayDialog}\r\n          onDismiss={() => this.closeDisconnectGatewayDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '断开提示',\r\n            subText: `确认断开网关？ID:${this.state.gatewayIdForDisconnect}`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.disconnectGatewayByGatewayId()} text=\"断开\" />\r\n            <DefaultButton onClick={() => this.closeDisconnectGatewayDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteGatewayDialog}\r\n          onDismiss={this.closeDeleteGatewayDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除提示',\r\n            subText: `确认删除网关？ID:${this.state.gatewayIdForDelete},此操作将同时断开当前网关ID存在的连接`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteGatewayByGatewayId()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteGatewayDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenConnectAllGatewaysDialog}\r\n          onDismiss={this.closeConnectAllGatewaysDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '连接提示',\r\n            subText: \"确认连接全部网关?\"\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.connectAllGateways()} text=\"连接全部\" />\r\n            <DefaultButton onClick={() => this.closeConnectAllGatewaysDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDisconnectAllGatewaysDialog}\r\n          onDismiss={this.closeDisconnectAllGatewaysDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '断开提示',\r\n            subText: \"确认断开全部网关?\"\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.disconnectAllGateways()} text=\"断开全部\" />\r\n            <DefaultButton onClick={() => this.closeDisconnectAllGatewaysDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private openConnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenConnectAllGatewaysDialog: false, });\r\n  }\r\n\r\n  private closeConnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenConnectAllGatewaysDialog: true });\r\n  }\r\n  private connectAllGateways = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.connectAllGateways()\r\n    this.closeConnectAllGatewaysDialog();\r\n  }\r\n\r\n  private openDisconnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenDisconnectAllGatewaysDialog: false, });\r\n  }\r\n\r\n  private closeDisconnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenDisconnectAllGatewaysDialog: true });\r\n  }\r\n  private disconnectAllGateways = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.disconnectAllGateways()\r\n    this.closeDisconnectAllGatewaysDialog();\r\n  }\r\n\r\n  private openDisconnectGatewayDialog = (gatewayId: string) => {\r\n    this.setState({ gatewayIdForDisconnect: gatewayId, hiddenDisconnectGatewayDialog: false, });\r\n  }\r\n\r\n  private closeDisconnectGatewayDialog = () => {\r\n    this.setState({ hiddenDisconnectGatewayDialog: true, gatewayIdForDisconnect: '' });\r\n  }\r\n  private disconnectGatewayByGatewayId = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.disconnectGatewayByGatewayId(this.state.gatewayIdForDisconnect)\r\n    this.closeDisconnectGatewayDialog();\r\n  }\r\n\r\n  private openDeleteGatewayDialog = (gatewayId: number) => {\r\n    this.setState({ gatewayIdForDelete: gatewayId, hiddenDeleteGatewayDialog: false });\r\n  }\r\n\r\n  private closeDeleteGatewayDialog = () => {\r\n    this.setState({ hiddenDeleteGatewayDialog: true, gatewayIdForDelete: null });\r\n  }\r\n\r\n  private deleteGatewayByGatewayId = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.deleteGatewayByGatewayId(this.state.gatewayIdForDelete)\r\n    this.closeDeleteGatewayDialog();\r\n  }\r\n\r\n  private getCommandBarItems = () => {\r\n\r\n    const { gatewayStore } = this.props\r\n    return [\r\n      {\r\n        key: 'add',\r\n        name: '新增',\r\n        iconProps: {\r\n          iconName: 'Add'\r\n        },\r\n        onClick: () => this.openEditGatewayModal(null)\r\n      },\r\n      {\r\n        key: 'refresh',\r\n        name: '刷新',\r\n        iconProps: {\r\n          iconName: 'Refresh'\r\n        },\r\n        onClick: () => gatewayStore.getGatewayList()\r\n      },\r\n      {\r\n        key: 'connectAll',\r\n        name: '全部连接',\r\n        iconProps: {\r\n          iconName: 'PlugConnected'\r\n        },\r\n        onClick: () => this.openConnectAllGatewaysDialog()\r\n      },\r\n      {\r\n        key: 'disconnectAll',\r\n        name: '全部断开',\r\n        iconProps: {\r\n          iconName: 'PlugDisconnected'\r\n        },\r\n        onClick: () => this.openDisconnectAllGatewaysDialog()\r\n      }\r\n    ];\r\n  }\r\n\r\n  private commonHandleFieldChange(id: string, value: any) {\r\n    this.setState({ [id]: value }, () => this.validateAllField())\r\n  }\r\n\r\n\r\n\r\n  private validateEditGatewayName() {\r\n    if (!this.state.editGatewayName || this.state.editGatewayName === '') {\r\n      return { status: false, message: { \"editGatewayNameErrorMessage\": '名称不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayNameErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayTargetNodeId() {\r\n    if (!this.state.editGatewayTargetNodeId || !normalIntegerPattern.test(`${this.state.editGatewayTargetNodeId}`)) {\r\n      return { status: false, message: { \"editGatewayTargetNodeIdErrorMessage\": '目标节点为数字且不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayTargetNodeIdErrorMessage\": '' } }\r\n  }\r\n\r\n\r\n  private validateEditGatewayImplementClassName() {\r\n    if (!this.state.editGatewayImplementClassName || this.state.editGatewayImplementClassName === '') {\r\n      return { status: false, message: { \"editGatewayImplementClassNameErrorMessage\": '实现类不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayImplementClassNameErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingUserId() {\r\n    if (!this.state.editGatewayCtpSettingUserId || this.state.editGatewayCtpSettingUserId === '') {\r\n      return { status: false, message: { \"editGatewayCtpSettingUserIdErrorMessage\": '用户名不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingUserIdErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingBrokerId() {\r\n    if (!this.state.editGatewayCtpSettingBrokerId || this.state.editGatewayCtpSettingBrokerId === '') {\r\n      return { status: false, message: { \"editGatewayCtpSettingBrokerIdErrorMessage\": '用户名不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingBrokerIdErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingPassword() {\r\n    if (!this.state.editGatewayCtpSettingPassword || this.state.editGatewayCtpSettingPassword === '') {\r\n      return { status: false, message: { \"editGatewayCtpSettingPasswordErrorMessage\": '密码不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingPasswordErrorMessage\": '' } }\r\n  }\r\n\r\n\r\n  private validateEditGatewayCtpSettingMdHost() {\r\n    if (!hostNamePattern.test(this.state.editGatewayCtpSettingMdHost) && !ipv4PattenPattern.test(this.state.editGatewayCtpSettingMdHost)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingMdHostErrorMessage\": '错误的主机' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingMdHostErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingMdPort() {\r\n    if (!portPattern.test(`${this.state.editGatewayCtpSettingMdPort}`)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingMdPortErrorMessage\": '错误的端口' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingMdPortErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingTdHost() {\r\n    if (!hostNamePattern.test(this.state.editGatewayCtpSettingTdHost) && !ipv4PattenPattern.test(this.state.editGatewayCtpSettingTdHost)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingTdHostErrorMessage\": '错误的主机' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingTdHostErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingTdPort() {\r\n    if (!portPattern.test(`${this.state.editGatewayCtpSettingTdPort}`)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingTdPortErrorMessage\": '错误的端口' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingTdPortErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayIbSettingHost() {\r\n    if (!hostNamePattern.test(this.state.editGatewayIbSettingHost) && !ipv4PattenPattern.test(this.state.editGatewayIbSettingHost)) {\r\n      return { status: false, message: { \"editGatewayIbSettingHostErrorMessage\": '错误的主机' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayIbSettingHostErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayIbSettingPort() {\r\n    if (!portPattern.test(`${this.state.editGatewayIbSettingPort}`)) {\r\n      return { status: false, message: { \"editGatewayIbSettingPortErrorMessage\": '错误的端口' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayIbSettingPortErrorMessage\": '' } }\r\n  }\r\n\r\n\r\n\r\n  private validateAllField() {\r\n    let errorMessateState = {}\r\n\r\n    let isValidated = true;\r\n\r\n    let result;\r\n\r\n    result = this.validateEditGatewayName();\r\n    isValidated = isValidated && result.status\r\n    errorMessateState = {\r\n      ...errorMessateState,\r\n      ...result.message\r\n    }\r\n\r\n    result = this.validateEditGatewayTargetNodeId();\r\n    isValidated = isValidated && result.status\r\n    errorMessateState = {\r\n      ...errorMessateState,\r\n      ...result.message\r\n    }\r\n\r\n    result = this.validateEditGatewayImplementClassName();\r\n    isValidated = isValidated && result.status\r\n    errorMessateState = {\r\n      ...errorMessateState,\r\n      ...result.message\r\n    }\r\n\r\n\r\n    // 验证CTP字段\r\n    if (this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP) {\r\n      result = this.validateEditGatewayCtpSettingUserId();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n\r\n      result = this.validateEditGatewayCtpSettingPassword();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n\r\n      result = this.validateEditGatewayCtpSettingBrokerId();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n\r\n\r\n      if (this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_MarketData) {\r\n        result = this.validateEditGatewayCtpSettingMdHost();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n        result = this.validateEditGatewayCtpSettingMdPort();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n      }\r\n\r\n\r\n      if (this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_Trade) {\r\n        result = this.validateEditGatewayCtpSettingTdHost();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n        result = this.validateEditGatewayCtpSettingTdPort();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n      }\r\n\r\n      // 验证IB字段\r\n    } else if (this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_COMMON) {\r\n      result = this.validateEditGatewayIbSettingHost();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n      result = this.validateEditGatewayIbSettingPort();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n    }\r\n\r\n\r\n    this.setState(errorMessateState)\r\n    return isValidated;\r\n  }\r\n\r\n  private openEditGatewayModal(gateway: any) {\r\n    let newState = {}\r\n\r\n\r\n    if (gateway !== undefined && gateway !== null) {\r\n\r\n      newState = {\r\n        ...newState,\r\n        \"editGatewayId\": gateway.gatewayId,\r\n        \"editGatewayName\": gateway.gatewayName,\r\n        \"editGatewayTargetNodeId\": gateway.targetNodeId,\r\n        \"editGatewayDescription\": gateway.gatewayDescription,\r\n        \"editGatewayImplementClassName\": gateway.implementClassName,\r\n        \"editGatewayType\": gateway.gatewayType,\r\n        \"editGatewayAdapterType\": gateway.gatewayAdapterType,\r\n        \"editAutoConnectTimeRanges\": gateway.autoConnectTimeRanges\r\n      }\r\n\r\n      if (gateway.ctpSetting !== undefined && gateway.ctpSetting !== null) {\r\n        newState = {\r\n          ...newState,\r\n          \"editGatewayCtpSettingUserId\": gateway.ctpSetting.userId,\r\n          \"editGatewayCtpSettingPassword\": gateway.ctpSetting.password,\r\n          \"editGatewayCtpSettingMdHost\": gateway.ctpSetting.mdHost,\r\n          \"editGatewayCtpSettingMdPort\": gateway.ctpSetting.mdPort,\r\n          \"editGatewayCtpSettingTdHost\": gateway.ctpSetting.tdHost,\r\n          \"editGatewayCtpSettingTdPort\": gateway.ctpSetting.tdPort,\r\n          \"editGatewayCtpSettingUserProductInfo\": gateway.ctpSetting.userProductInfo,\r\n          \"editGatewayCtpSettingAuthCode\": gateway.ctpSetting.authCode,\r\n          \"editGatewayCtpSettingAppId\": gateway.ctpSetting.appId,\r\n          \"editGatewayCtpSettingBrokerId\": gateway.ctpSetting.brokerId,\r\n        }\r\n      }\r\n\r\n      if (gateway.ibSetting !== undefined && gateway.ibSetting !== null) {\r\n        newState = {\r\n          ...newState,\r\n          \"editGatewayIbSettingClientId\": gateway.ibSetting.clientId,\r\n          \"editGatewayIbSettingHost\": gateway.ibSetting.host,\r\n          \"editGatewayIbSettingPort\": gateway.ibSetting.port,\r\n        }\r\n      }\r\n    }\r\n    newState = {\r\n      ...newState,\r\n      \"showEditGatewayModal\": true,\r\n    }\r\n    this.setState(newState)\r\n\r\n  }\r\n\r\n  private closeEditGatewayModal() {\r\n    this.setState({\r\n      \"showEditGatewayModal\": false,\r\n      // -----------------------------------------\r\n      \"editGatewayId\": '',\r\n      \"editGatewayName\": '',\r\n      \"editGatewayNameErrorMessage\": '',\r\n      \"editGatewayDescription\": '',\r\n      \"editGatewayTargetNodeId\": 10000,\r\n      \"editGatewayTargetNodeIdErrorMessage\": '',\r\n      \"editGatewayImplementClassName\": '',\r\n      \"editGatewayImplementClassNameErrorMessage\": '',\r\n      \"editGatewayType\": 0,\r\n      \"editGatewayAdapterType\": 0,\r\n      \"editAutoConnectTimeRanges\": '',\r\n      \"editGatewayCtpSettingUserId\": '',\r\n      \"editGatewayCtpSettingUserIdErrorMessage\": '',\r\n      \"editGatewayCtpSettingPassword\": '',\r\n      \"editGatewayCtpSettingPasswordErrorMessage\": '',\r\n      \"editGatewayCtpSettingMdHost\": '',\r\n      \"editGatewayCtpSettingMdHostErrorMessage\": '',\r\n      \"editGatewayCtpSettingMdPort\": 0,\r\n      \"editGatewayCtpSettingMdPortErrorMessage\": '',\r\n      \"editGatewayCtpSettingTdHost\": '',\r\n      \"editGatewayCtpSettingTdHostErrorMessage\": '',\r\n      \"editGatewayCtpSettingTdPort\": 0,\r\n      \"editGatewayCtpSettingTdPortErrorMessage\": '',\r\n      \"editGatewayCtpSettingUserProductInfo\": '',\r\n      \"editGatewayCtpSettingAuthCode\": '',\r\n      \"editGatewayCtpSettingAppId\": '',\r\n      \"editGatewayCtpSettingBrokerId\": '',\r\n      'editGatewayCtpSettingBrokerIdErrorMessage': '',\r\n      \"editGatewayIbSettingClientId\": 0,\r\n      \"editGatewayIbSettingHost\": '127.0.0.1',\r\n      \"editGatewayIbSettingHostErrorMessage\": '',\r\n      \"editGatewayIbSettingPort\": 7496,\r\n      \"editGatewayIbSettingPortErrorMessage\": ''\r\n    })\r\n  }\r\n\r\n  private saveEditGateway() {\r\n    if (this.validateAllField()) {\r\n      const gateway = {\r\n        \"gatewayId\": this.state.editGatewayId,\r\n        \"gatewayName\": this.state.editGatewayName,\r\n        \"targetNodeId\": parseInt(`${this.state.editGatewayTargetNodeId}`, 0),\r\n        \"gatewayDescription\": this.state.editGatewayDescription,\r\n        \"implementClassName\": this.state.editGatewayImplementClassName,\r\n        \"gatewayType\": parseInt(`${this.state.editGatewayType}`, 0),\r\n        \"gatewayAdapterType\": parseInt(`${this.state.editGatewayAdapterType}`, 0),\r\n        \"autoConnectTimeRanges\": this.state.editAutoConnectTimeRanges,\r\n        \"ctpSetting\": {\r\n          \"userId\": this.state.editGatewayCtpSettingUserId,\r\n          \"password\": this.state.editGatewayCtpSettingPassword,\r\n          \"mdHost\": this.state.editGatewayCtpSettingMdHost,\r\n          \"mdPort\": parseInt(`${this.state.editGatewayCtpSettingMdPort}`, 0),\r\n          \"tdHost\": this.state.editGatewayCtpSettingTdHost,\r\n          \"tdPort\": parseInt(`${this.state.editGatewayCtpSettingTdPort}`, 0),\r\n          \"userProductInfo\": this.state.editGatewayCtpSettingUserProductInfo,\r\n          \"authCode\": this.state.editGatewayCtpSettingAuthCode,\r\n          \"appId\": this.state.editGatewayCtpSettingAppId,\r\n          \"brokerId\": this.state.editGatewayCtpSettingBrokerId\r\n        },\r\n        \"ibSetting\": {\r\n          \"clientId\": parseInt(`${this.state.editGatewayIbSettingClientId}`, 0),\r\n          \"host\": this.state.editGatewayIbSettingHost,\r\n          \"port\": parseInt(`${this.state.editGatewayIbSettingPort}`, 0),\r\n        }\r\n      }\r\n      this.props.gatewayStore.saveOrUpdateGateway(gateway)\r\n      this.closeEditGatewayModal()\r\n    } else {\r\n      toast.warn(\"请将表单中标红的字段修正后提交\")\r\n    }\r\n  }\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(GatewayPage);","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\r\nimport { withRouter } from 'react-router';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\n\r\n\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const SettingPage = inject('authenticationStore')(observer(class SettingPage extends React.Component<any> {\r\n\r\n  public state = { password: '', newPassword: '' };\r\n\r\n  public render() {\r\n    return (\r\n      <Stack tokens={{ childrenGap: 12 }}>\r\n        <Stack.Item align=\"center\">\r\n          <Separator><div style={{ fontSize: FontSizes.xxLarge }} >退出登录</div></Separator>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnProps}>\r\n              <PrimaryButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"注销\"\r\n                onClick={() => {\r\n                  this.props.authenticationStore.deleteLoginInfo();\r\n                  this.props.authenticationStore.logout()\r\n                  this.props.history.push('/login')\r\n                }}\r\n              />\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Separator><div style={{ fontSize: FontSizes.xxLarge }} >修改密码</div></Separator>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnProps}>\r\n              <TextField label=\"旧密码\" type='password' onChange={this.handlePasswordChange} defaultValue={this.state.password} />\r\n              <TextField label=\"新密码\" type='password' onChange={this.handleNewPasswordChange} defaultValue={this.state.newPassword} />\r\n              <PrimaryButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"修改\"\r\n                onClick={() => {\r\n                  this.props.authenticationStore.changePassword(this.state.password, this.state.newPassword)\r\n                  this.setState({ 'password': '', 'newPassword': '' })\r\n                }}\r\n              />\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private handlePasswordChange = (event: any) => {\r\n    this.setState({ 'password': event.target.value })\r\n  }\r\n\r\n  private handleNewPasswordChange = (event: any) => {\r\n    this.setState({ 'newPassword': event.target.value })\r\n  }\r\n\r\n}));\r\n\r\nexport default withRouter(SettingPage)\r\n","import * as React from 'react';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { PrimaryButton, ActionButton, DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const LoginPage = inject('authenticationStore')(observer(class LoginPage extends React.Component<any> {\r\n\r\n  public state = {\r\n    redirectToPah: \"/trade/home\"\r\n  }\r\n\r\n  public render() {\r\n    const { authenticationStore } = this.props;\r\n\r\n    if (authenticationStore.isAuthenticated) {\r\n      return (\r\n        <Redirect to={this.state.redirectToPah} />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Stack tokens={{ childrenGap: 12 }}>\r\n\r\n        <Stack.Item align=\"center\">\r\n          <Separator><div style={{ fontSize: FontSizes.xxLarge }} >RedTorch</div></Separator>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnProps}>\r\n              <TextField label=\"用户名\" id=\"useranme\" value={authenticationStore.username} onChange={this.handleUsernameChange} />\r\n              <TextField label=\"密码\" type='password' id=\"password\" value={authenticationStore.password} onChange={this.handlePasswordChange} />\r\n              <Checkbox label=\"保存登录信息(非常不安全)\" checked={authenticationStore.saveLoginInfoState} onChange={this.handleSaveLoginInfoChange} />\r\n              <PrimaryButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"登录交易(PC)\"\r\n                onClick={() => {\r\n                  this.props.authenticationStore.login()\r\n                }}\r\n              />\r\n              <DefaultButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"登录交易(移动端)\"\r\n                onClick={() => {\r\n                  this.setState({ \"redirectToPah\": \"/tradeMobile/home\" })\r\n                  this.props.authenticationStore.login()\r\n                }}\r\n              />\r\n              <DefaultButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"登录管理\"\r\n                onClick={() => {\r\n                  this.setState({ \"redirectToPah\": \"/management/gateway\" })\r\n                  this.props.authenticationStore.login()\r\n                }}\r\n              />\r\n              <div>\r\n                <ActionButton\r\n                  style={{ float: \"left\" }}\r\n                  iconProps={{ iconName: 'Delete' }}\r\n                  allowDisabledFocus={true}\r\n                  disabled={false}\r\n                  checked={false}\r\n                  onClick={() => {\r\n                    authenticationStore.deleteLoginInfo()\r\n                  }}\r\n                >\r\n                  清除登录信息\r\n                </ActionButton>\r\n              </div>\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private handleUsernameChange = (event: any) => {\r\n    const { authenticationStore } = this.props\r\n    authenticationStore.setUsername(event.target.value)\r\n  }\r\n\r\n  private handlePasswordChange = (event: any) => {\r\n    const { authenticationStore } = this.props\r\n    authenticationStore.setPassword(event.target.value)\r\n  }\r\n\r\n  private handleSaveLoginInfoChange = (event: any) => {\r\n    const { authenticationStore } = this.props\r\n    authenticationStore.setSaveLoginInfoState(event.currentTarget.checked)\r\n  }\r\n\r\n\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(LoginPage)\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { createTheme, ITheme } from '@fluentui/react/lib/Styling';\r\nimport { mergeStyleSets, DefaultPalette } from '@fluentui/react/lib/Styling';\r\nimport { Redirect } from 'react-router-dom';\r\nconst theme: ITheme = createTheme({\r\n  fonts: {\r\n    medium: {\r\n      fontFamily: 'Monaco, Menlo, Consolas',\r\n      fontSize: '30px'\r\n    }\r\n  }\r\n});\r\n\r\nconst styles = mergeStyleSets({\r\n  root: {\r\n    background: DefaultPalette.themeTertiary\r\n  },\r\n\r\n  item: {\r\n    color: DefaultPalette.white,\r\n    background: DefaultPalette.themePrimary,\r\n    padding: 5\r\n  }\r\n});\r\n\r\nconst NotFoundPage = observer((synchronizedHistory:any) => {\r\n  console.log(synchronizedHistory)\r\n  const { history } =  synchronizedHistory;\r\n  console.log(history)\r\n\r\n  if (history.location.pathname === '/') {\r\n    return (<Redirect to={{\r\n      pathname: '/trade/home',\r\n    }} />)\r\n  }\r\n\r\n  return (\r\n    <Stack tokens={{ childrenGap: 12 }}>\r\n      <Separator theme={theme}>404 所请求的页面不存在或已被删除!</Separator>\r\n      <Stack.Item align=\"center\" className={styles.item}>\r\n        <PrimaryButton\r\n          allowDisabledFocus={true}\r\n          disabled={false}\r\n          checked={false}\r\n          text=\"返回主页\"\r\n          onClick={() => { history.push('/trade/home') }}\r\n        />\r\n      </Stack.Item>\r\n    </Stack>\r\n  )\r\n})\r\n\r\nexport default NotFoundPage","import * as React from 'react';\r\n// import * as ReactDOM from 'react-dom';\r\nimport { inject, observer } from 'mobx-react';\r\n// import { counterStore, routingStore } from '../stores'\r\n// import { TextField, MaskedTextField } from '@fluentui/react/lib/TextField';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\r\nimport { withRouter } from 'react-router';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, IColumn, IDetailsHeaderProps, ConstrainMode, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { PrimaryButton, DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { toast } from 'react-toastify';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const UserPage = inject('userStore')(observer(class UserPage extends React.Component<any> {\r\n\r\n  public state = {\r\n    hiddenDeleteUserDialog: true,\r\n    usernameForDelete: null,\r\n    editUserDescription: '',\r\n    editUsername: \"\",\r\n    editUserPassword: null,\r\n    editCanReadGateway: false,\r\n    editCanChangeGatewayStatus: false,\r\n    editCanWriteGateway: false,\r\n    editCanReadUser: false,\r\n    editCanChangeUserStatus: false,\r\n    editCanWriteUser: false,\r\n    editCanReadOperator: false,\r\n    editCanChangeOperatorStatus: false,\r\n    editCanWriteOperator: false,\r\n    editCanReadNode: false,\r\n    editCanChangeNodeToken: false,\r\n    editCanWriteNode: false,\r\n    editCanReadLog: false,\r\n    editCanReadMarketDataRecording: false,\r\n    editCanWriteMarketDataRecording: false,\r\n    showUpdateUserDescriptionModal: false,\r\n    showUpdateUserPasswordModal: false,\r\n    showEditPermissionModal: false,\r\n    showAddUserModal: false,\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n\r\n    const { userStore } = this.props\r\n\r\n    userStore.getUserList()\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n\r\n  public render() {\r\n\r\n    // const { routes, location } = this.props;\r\n\r\n    const columns: IColumn[] = [{\r\n      key: \"username\",\r\n      name: \"用户名\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.username}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"operatorId\",\r\n      name: \"操作者ID\",\r\n      minWidth: 250,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.operatorId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"description\",\r\n      name: \"描述\",\r\n      minWidth: 200,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.description}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: \"loginTimes\",\r\n      name: \"登录次数\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.loginTimes}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyNodeId\",\r\n      name: \"最近的节点ID\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyNodeId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlySessionId\",\r\n      name: \"最近的会话ID\",\r\n      minWidth: 250,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlySessionId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyIpAddress\",\r\n      name: \"最近的IP地址\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyIpAddress}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyPort\",\r\n      name: \"最近的端口\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyPort}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLoginTime\",\r\n      name: \"最近的登录时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLoginTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLogoutTime\",\r\n      name: \"最近的断开时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLogoutTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"action\",\r\n      name: \"操作\",\r\n      minWidth: 30,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      onRender: (item) => {\r\n        return (\r\n          <IconButton\r\n            menuIconProps={{ iconName: 'MoreVertical' }}\r\n            role=\"button\"\r\n            aria-haspopup={true}\r\n            aria-label=\"Show actions\"\r\n            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n            menuProps={{\r\n              items: [\r\n                {\r\n                  key: 'editPermission',\r\n                  text: '更新权限',\r\n                  iconProps: {\r\n                    iconName: \"Shield\"\r\n                  },\r\n                  onClick: () => this.openEditPermissionModal(item)\r\n                },\r\n                {\r\n                  key: 'updateUserPassword',\r\n                  text: '更新密码',\r\n                  iconProps: {\r\n                    iconName: \"AzureKeyVault\"\r\n                  },\r\n                  onClick: () => this.openUpdateUserPasswordModal(item.username)\r\n                },\r\n                {\r\n                  key: 'updateDescription',\r\n                  text: '更新描述',\r\n                  iconProps: {\r\n                    iconName: \"EditNote\"\r\n                  },\r\n                  onClick: () => this.openUpdateUserDescriptionModal(item.username, item.description)\r\n                },\r\n                {\r\n                  key: 'delete',\r\n                  text: '删除',\r\n                  iconProps: {\r\n                    iconName: \"DeleteRows\"\r\n                  },\r\n                  onClick: () => this.openDeleteUserDialog(item.username)\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    ]\r\n\r\n    const { userStore } = this.props\r\n    const classNames = mergeStyleSets({\r\n      wrapper: {\r\n        height: `${this.state.windowInnerHeight - 81}px`,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Stack>\r\n        <Stack>\r\n          <CommandBar\r\n            items={this.getCommandBarItems()}\r\n          // 以下功能可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n          // overflowItems={this.getOverlflowItems()}\r\n          // overflowButtonProps={{ ariaLabel: 'More commands' }}\r\n          // farItems={this.getFarItems()}\r\n          // ariaLabel={'Use left and right arrow keys to navigate between commands'}\r\n          />\r\n          <div className={classNames.wrapper}>\r\n            <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n              <DetailsList\r\n                // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                items={userStore.userList}\r\n                compact={true}\r\n                columns={columns}\r\n                selectionMode={SelectionMode.none}\r\n                setKey=\"id\"\r\n                layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                constrainMode={ConstrainMode.unconstrained}\r\n                // data-is-scrollable={true}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsHeader={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                      <DetailsHeader\r\n                        {...detailsHeaderProps}\r\n                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                      />\r\n                      {/* {defaultRender(detailsHeaderProps)} */}\r\n                    </Sticky>\r\n                  )}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsFooter={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                      {defaultRender(detailsFooterProps)}\r\n                    </Sticky>\r\n                  )}\r\n              />\r\n            </ScrollablePane>\r\n          </div>\r\n        </Stack>\r\n\r\n        <Modal\r\n          isOpen={this.state.showAddUserModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeAddUserModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >新增用户</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Separator><div style={{ fontSize: FontSizes.medium }} >基本信息</div></Separator>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"用户名\" onChange={(event: any) => { this.commonHandleFieldChange(\"editUsername\", event.target.value) }} />\r\n                  <TextField label=\"密码\" type=\"password\" onChange={(event: any, newValue?: string) => this.editUserPasswordOnChange(event)} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"用户描述\" multiline={true} resizable={true} onChange={(event: any, newValue?: string) => this.editUserDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Separator><div style={{ fontSize: FontSizes.medium }} >用户权限</div></Separator>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"读取网关\" checked={this.state.editCanReadGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入网关\" checked={this.state.editCanWriteGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入用户\" checked={this.state.editCanWriteUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入操作者\" checked={this.state.editCanWriteOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"更改节点令牌\" checked={this.state.editCanChangeNodeToken} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeNodeToken\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取日志\" checked={this.state.editCanReadLog} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadLog\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入行情记录列表\" checked={this.state.editCanWriteMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"更改网关状态\" checked={this.state.editCanChangeGatewayStatus} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeGatewayStatus\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取用户\" checked={this.state.editCanReadUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取操作者\" checked={this.state.editCanReadOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取节点\" checked={this.state.editCanReadNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入节点\" checked={this.state.editCanWriteNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取行情记录列表\" checked={this.state.editCanReadMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.addUser()} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeAddUserModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={this.state.showEditPermissionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeEditPermissionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >更新用户权限</div></Separator>\r\n              <Separator><div style={{ fontSize: FontSizes.medium }} >{this.state.editUsername}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"读取网关\" checked={this.state.editCanReadGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入网关\" checked={this.state.editCanWriteGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入用户\" checked={this.state.editCanWriteUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入操作者\" checked={this.state.editCanWriteOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"更改节点令牌\" checked={this.state.editCanChangeNodeToken} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeNodeToken\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取日志\" checked={this.state.editCanReadLog} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadLog\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入行情记录列表\" checked={this.state.editCanWriteMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"更改网关状态\" checked={this.state.editCanChangeGatewayStatus} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeGatewayStatus\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取用户\" checked={this.state.editCanReadUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取操作者\" checked={this.state.editCanReadOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取节点\" checked={this.state.editCanReadNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入节点\" checked={this.state.editCanWriteNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取行情记录列表\" checked={this.state.editCanReadMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateUserPermissionByUsername()} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeEditPermissionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteUserDialog}\r\n          onDismiss={() => this.closeDeleteUserDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除用户提示',\r\n            subText: `确认删除用户？ID:${this.state.usernameForDelete},此操作将断开当前ID存在的会话`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteUserByUsername()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteUserDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateUserDescriptionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateUserDescriptionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >更新用户描述</div></Separator>\r\n              <Separator><div style={{ fontSize: FontSizes.medium }} >{this.state.editUsername}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"用户描述\" multiline={true} resizable={true} defaultValue={this.state.editUserDescription ? this.state.editUserDescription : \"\"} onChange={(event: any, newValue?: string) => this.editUserDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateUserDescriptionByUsername()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateUserDescriptionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateUserPasswordModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateUserPasswordModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >更新用户密码</div></Separator>\r\n              <Separator><div style={{ fontSize: FontSizes.medium }} >{this.state.editUsername}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"新密码\" type=\"password\" onChange={(event: any, newValue?: string) => this.editUserPasswordOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateUserPasswordByUsername()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateUserPasswordModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n\r\n  private commonHandleFieldChange(id: string, value: any) {\r\n    this.setState({ [id]: value })\r\n  }\r\n\r\n  private openAddUserModal = () => {\r\n    this.setState({\r\n      showAddUserModal: true,\r\n      editUsername: '',\r\n      editUserPassword: \"\",\r\n      editUserDescription: \"\",\r\n      editCanReadGateway: false,\r\n      editCanChangeGatewayStatus: false,\r\n      editCanWriteGateway: false,\r\n      editCanReadUser: false,\r\n      editCanChangeUserStatus: false,\r\n      editCanWriteUser: false,\r\n      editCanReadOperator: false,\r\n      editCanChangeOperatorStatus: false,\r\n      editCanWriteOperator: false,\r\n      editCanReadNode: false,\r\n      editCanChangeNodeToken: false,\r\n      editCanWriteNode: false,\r\n      editCanReadLog: false,\r\n      editCanReadMarketDataRecording: false,\r\n      editCanWriteMarketDataRecording: false\r\n    });\r\n  }\r\n\r\n  private closeAddUserModal = () => {\r\n    this.setState({\r\n      showAddUserModal: false,\r\n      editUsername: '',\r\n      editUserPassword: \"\",\r\n      editUserDescription: \"\",\r\n      editCanReadGateway: false,\r\n      editCanChangeGatewayStatus: false,\r\n      editCanWriteGateway: false,\r\n      editCanReadUser: false,\r\n      editCanChangeUserStatus: false,\r\n      editCanWriteUser: false,\r\n      editCanReadOperator: false,\r\n      editCanChangeOperatorStatus: false,\r\n      editCanWriteOperator: false,\r\n      editCanReadNode: false,\r\n      editCanChangeNodeToken: false,\r\n      editCanWriteNode: false,\r\n      editCanReadLog: false,\r\n      editCanReadMarketDataRecording: false,\r\n      editCanWriteMarketDataRecording: false\r\n    });\r\n  }\r\n\r\n  private addUser = () => {\r\n\r\n    const { userStore } = this.props;\r\n\r\n    if (!this.state.editUsername || this.state.editUsername === \"\") {\r\n      toast.error(\"用户名不可为空\");\r\n      return;\r\n    }\r\n\r\n    if (!this.state.editUserPassword || this.state.editUserPassword === \"\") {\r\n      toast.error(\"密码不可为空\");\r\n      return;\r\n    }\r\n\r\n    let checked = true;\r\n    if (userStore.userList) {\r\n      userStore.userList.forEach((element: any) => {\r\n        if (element.username === this.state.editUsername) {\r\n          checked = false;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!checked) {\r\n      toast.error(\"用户名不可重复\");\r\n      return;\r\n    }\r\n\r\n    const user = {\r\n      username: this.state.editUsername,\r\n      newPassword: this.state.editUserPassword,\r\n      description: this.state.editUserDescription,\r\n      canReadGateway: this.state.editCanReadGateway,\r\n      canChangeGatewayStatus: this.state.editCanChangeGatewayStatus,\r\n      canWriteGateway: this.state.editCanWriteGateway,\r\n      canReadUser: this.state.editCanReadUser,\r\n      canChangeUserStatus: this.state.editCanChangeUserStatus,\r\n      canWriteUser: this.state.editCanWriteUser,\r\n      canReadOperator: this.state.editCanReadOperator,\r\n      canChangeOperatorStatus: this.state.editCanChangeOperatorStatus,\r\n      canWriteOperator: this.state.editCanWriteOperator,\r\n      canReadNode: this.state.editCanReadNode,\r\n      canChangeNodeToken: this.state.editCanChangeNodeToken,\r\n      canWriteNode: this.state.editCanWriteNode,\r\n      canReadLog: this.state.editCanReadLog,\r\n      canReadMarketDataRecording: this.state.editCanReadMarketDataRecording,\r\n      canWriteMarketDataRecording: this.state.editCanWriteMarketDataRecording\r\n    }\r\n\r\n    userStore.addUser(user)\r\n    this.closeAddUserModal()\r\n  }\r\n\r\n\r\n  private openEditPermissionModal = (user: any) => {\r\n    this.setState({\r\n      showEditPermissionModal: true,\r\n      editUsername: user.username,\r\n      editCanReadGateway: user.canReadGateway ? true : false,\r\n      editCanChangeGatewayStatus: user.canChangeGatewayStatus ? true : false,\r\n      editCanWriteGateway: user.canWriteGateway ? true : false,\r\n      editCanReadUser: user.canReadUser ? true : false,\r\n      editCanChangeUserStatus: user.canChangeUserStatus ? true : false,\r\n      editCanWriteUser: user.canWriteUser ? true : false,\r\n      editCanReadOperator: user.canReadOperator ? true : false,\r\n      editCanChangeOperatorStatus: user.canChangeOperatorStatus ? true : false,\r\n      editCanWriteOperator: user.canWriteOperator ? true : false,\r\n      editCanReadNode: user.canReadNode ? true : false,\r\n      editCanChangeNodeToken: user.canChangeNodeToken ? true : false,\r\n      editCanWriteNode: user.canWriteNode ? true : false,\r\n      editCanReadLog: user.canReadLog ? true : false,\r\n      editCanReadMarketDataRecording: user.canReadMarketDataRecording ? true : false,\r\n      editCanWriteMarketDataRecording: user.canWriteMarketDataRecording ? true : false\r\n    });\r\n  }\r\n\r\n  private closeEditPermissionModal = () => {\r\n    this.setState({\r\n      showEditPermissionModal: false,\r\n      editUsername: '',\r\n      editCanReadGateway: false,\r\n      editCanChangeGatewayStatus: false,\r\n      editCanWriteGateway: false,\r\n      editCanReadUser: false,\r\n      editCanChangeUserStatus: false,\r\n      editCanWriteUser: false,\r\n      editCanReadOperator: false,\r\n      editCanChangeOperatorStatus: false,\r\n      editCanWriteOperator: false,\r\n      editCanReadNode: false,\r\n      editCanChangeNodeToken: false,\r\n      editCanWriteNode: false,\r\n      editCanReadLog: false,\r\n      editCanReadMarketDataRecording: false,\r\n      editCanWriteMarketDataRecording: false\r\n    });\r\n  }\r\n\r\n  private updateUserPermissionByUsername = () => {\r\n    const user = {\r\n      username: this.state.editUsername,\r\n      canReadGateway: this.state.editCanReadGateway,\r\n      canChangeGatewayStatus: this.state.editCanChangeGatewayStatus,\r\n      canWriteGateway: this.state.editCanWriteGateway,\r\n      canReadUser: this.state.editCanReadUser,\r\n      canChangeUserStatus: this.state.editCanChangeUserStatus,\r\n      canWriteUser: this.state.editCanWriteUser,\r\n      canReadOperator: this.state.editCanReadOperator,\r\n      canChangeOperatorStatus: this.state.editCanChangeOperatorStatus,\r\n      canWriteOperator: this.state.editCanWriteOperator,\r\n      canReadNode: this.state.editCanReadNode,\r\n      canChangeNodeToken: this.state.editCanChangeNodeToken,\r\n      canWriteNode: this.state.editCanWriteNode,\r\n      canReadLog: this.state.editCanReadLog,\r\n      canReadMarketDataRecording: this.state.editCanReadMarketDataRecording,\r\n      canWriteMarketDataRecording: this.state.editCanWriteMarketDataRecording\r\n    }\r\n    this.props.userStore.updateUserPermissionByUsername(user)\r\n    this.closeEditPermissionModal()\r\n  }\r\n\r\n  private openDeleteUserDialog = (username: number) => {\r\n    this.setState({ usernameForDelete: username, hiddenDeleteUserDialog: false });\r\n  }\r\n\r\n  private closeDeleteUserDialog = () => {\r\n    this.setState({ hiddenDeleteUserDialog: true, usernameForDelete: null });\r\n  }\r\n\r\n  private deleteUserByUsername = () => {\r\n    const { userStore } = this.props\r\n    userStore.deleteUserByUsername(this.state.usernameForDelete)\r\n    this.closeDeleteUserDialog();\r\n  }\r\n\r\n  private openUpdateUserPasswordModal = (username: string) => {\r\n    this.setState({ editUsername: username, showUpdateUserPasswordModal: true });\r\n  }\r\n\r\n  private closeUpdateUserPasswordModal = () => {\r\n    this.setState({ showUpdateUserPasswordModal: false, editUsername: null, editUserPassword: '' });\r\n  }\r\n\r\n  private updateUserPasswordByUsername = () => {\r\n    this.props.userStore.updateUserPasswordByUsername(this.state.editUsername, this.state.editUserPassword)\r\n    this.closeUpdateUserPasswordModal();\r\n  }\r\n\r\n  private openUpdateUserDescriptionModal = (username: string, description: string) => {\r\n    this.setState({ editUsername: username, editUserDescription: description, showUpdateUserDescriptionModal: true });\r\n  }\r\n\r\n  private closeUpdateUserDescriptionModal = () => {\r\n    this.setState({ showUpdateUserDescriptionModal: false, editUsername: null, editUserDescription: '' });\r\n  }\r\n\r\n  private updateUserDescriptionByUsername = () => {\r\n    this.props.userStore.updateUserDescriptionByUsername(this.state.editUsername, this.state.editUserDescription)\r\n    this.closeUpdateUserDescriptionModal();\r\n  }\r\n\r\n  private editUserDescriptionOnChange(event: any) {\r\n    this.setState({ editUserDescription: event.target.value })\r\n  }\r\n\r\n  private editUserPasswordOnChange(event: any) {\r\n    this.setState({ editUserPassword: event.target.value })\r\n  }\r\n\r\n  private getCommandBarItems = () => {\r\n\r\n    const { userStore } = this.props\r\n    return [\r\n      {\r\n        key: 'add',\r\n        name: '新增',\r\n        iconProps: {\r\n          iconName: 'Add'\r\n        },\r\n        onClick: () => this.openAddUserModal()\r\n      },\r\n      {\r\n        key: 'refresh',\r\n        name: '刷新',\r\n        iconProps: {\r\n          iconName: 'Refresh'\r\n        },\r\n        onClick: () => userStore.getUserList()\r\n      }\r\n    ];\r\n  };\r\n\r\n  // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 以下可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\r\n  // private getOverlflowItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'blocked',\r\n  //       name: '禁用',\r\n  //       iconProps: {\r\n  //         iconName: 'Blocked'\r\n  //       },\r\n  //       onClick: () => console.log('禁用')\r\n  //     },\r\n  //     {\r\n  //       key: 'delete',\r\n  //       name: '删除',\r\n  //       iconProps: {\r\n  //         iconName: 'DeleteTable'\r\n  //       },\r\n  //       onClick: () => console.log('Share')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // private getFarItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'sort',\r\n  //       name: 'Sort',\r\n  //       ariaLabel: 'Sort',\r\n  //       iconProps: {\r\n  //         iconName: 'SortLines'\r\n  //       },\r\n  //       subMenuProps: {\r\n  //         items: [\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据ID',\r\n  //           },\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据状态',\r\n  //           }\r\n  //         ]\r\n  //       },\r\n  //       onClick: () => console.log('Sort')\r\n  //     },\r\n  //     {\r\n  //       key: 'info',\r\n  //       name: 'Info',\r\n  //       ariaLabel: 'Info',\r\n  //       iconProps: {\r\n  //         iconName: 'Info'\r\n  //       },\r\n  //       iconOnly: true,\r\n  //       onClick: () => console.log('Info')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(UserPage);","import * as React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst RedirectToManagementPage = observer(() => (\r\n  <Redirect to=\"/management/gateway\" />\r\n))\r\n\r\nexport default RedirectToManagementPage\r\n\r\nexport { RedirectToManagementPage }","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst RedirectToTradeMobilePage = observer(() => (\r\n  <Redirect to=\"/tradeMobile/home\" />\r\n))\r\n\r\nexport default RedirectToTradeMobilePage\r\n\r\nexport { RedirectToTradeMobilePage }","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst RedirectToTradePage = observer(() => (\r\n  <Redirect to=\"/trade/home\" />\r\n))\r\n\r\nexport default RedirectToTradePage\r\n\r\nexport { RedirectToTradePage }","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, Selection, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { MarqueeSelection } from '@fluentui/react/lib/MarqueeSelection';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { numberFormat } from '../../../utils';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { CurrencyEnum } = xyz.redtorch.pb\r\n\r\nexport const AccountDetailsPage = inject('authenticationStore', 'tradeAccountStore', 'tradePositionStore')(observer(class AccountDetailsPage extends React.Component<any> {\r\n\r\n    public componentDidMount = () => {\r\n        const { tradeAccountStore } = this.props;\r\n        tradeAccountStore.setSelectedAccountIdSet(new Set());\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { tradeAccountStore, tradePositionStore } = this.props;\r\n\r\n        const {\r\n            allBalance,\r\n            allPreBalance,\r\n            allCloseProfit,\r\n            allTodayProfit,\r\n            allPositionProfit,\r\n            allMargin,\r\n            allCommission,\r\n            allDepositAndWithdraw\r\n        } = tradeAccountStore.summaryMap.get(\"CNY\")\r\n\r\n        const {\r\n            allContractValue,\r\n            allOpenPositionProfit\r\n        } = tradePositionStore.summaryMap.get(\"CNY\")\r\n\r\n        let accountList: any[] = []\r\n        if (tradeAccountStore.accountList) {\r\n            accountList = tradeAccountStore.accountList\r\n        }\r\n\r\n        const handleAccountSelectionChange = (pAccountSelection: Selection) => {\r\n            const selectedAccountIdSet = new Set();\r\n\r\n            const selectionList: any[] = pAccountSelection.getSelection();\r\n            for (let i = 0; i < selectionList.length; i++) {\r\n                selectedAccountIdSet.add(selectionList[i].accountId);\r\n            }\r\n\r\n            tradeAccountStore.setSelectedAccountIdSet(selectedAccountIdSet);\r\n        }\r\n\r\n        const accountSelection: Selection = new Selection({\r\n            onSelectionChanged: () => {\r\n                handleAccountSelectionChange(accountSelection)\r\n            }\r\n        });\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 71}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [{\r\n            key: \"code\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                return (\r\n                    <TooltipHost\r\n                        calloutProps={{ gapSpace: 20 }}\r\n                        tooltipProps={{\r\n                            onRenderContent: () => {                                                  \r\n                                return (\r\n                                    <div>\r\n                                        <ul style={{ margin: 0, padding: 0 }}>\r\n                                            <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                        </ul>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        }}\r\n                        delay={TooltipDelay.long}\r\n                        directionalHint={DirectionalHint.bottomCenter}\r\n                    >\r\n                        <span>{item.code}</span>\r\n                    </TooltipHost>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"holder\",\r\n            name: \"持有人\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.holder}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"currency\",\r\n            name: \"币种\",\r\n            minWidth: 40,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{CurrencyEnum[item.currency]}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"balance\",\r\n            name: \"权益\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let styleClasses = \"\"\r\n                const todayProfit = item.balance - item.preBalance + item.withdraw - item.deposit;\r\n                if (todayProfit !== 0) {\r\n                    if (todayProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n                return (\r\n                    <span className={styleClasses}>{numberFormat(item.balance, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"available\",\r\n            name: \"可用\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.available, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"marginRate\",\r\n            name: \"使用率\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let marginRate = \"0.00\";\r\n                if (item.margin && item.balance && item.balance !== 0) {\r\n                    marginRate = numberFormat(item.margin / item.balance * 100, 2, true)\r\n                }\r\n\r\n                return (\r\n                    <span>{marginRate}%</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"todayProfit\",\r\n            name: \"今日盈亏\",\r\n            minWidth: 95,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                const todayProfit = (item.balance - item.preBalance + item.withdraw - item.deposit);\r\n                let styleClasses = \"\";\r\n                if (todayProfit && todayProfit !== 0) {\r\n                    if (todayProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <div><span className={styleClasses} >{numberFormat(todayProfit, 2, true)}</span>  ({numberFormat(todayProfit / item.preBalance * 100, 2, true)}%)</div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"closeProfit\",\r\n            name: \"平仓盈亏\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let styleClasses = \"\"\r\n                if (item.closeProfit !== 0) {\r\n                    if (item.closeProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <span className={styleClasses} >{numberFormat(item.closeProfit, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"positionProfit\",\r\n            name: \"持仓盈亏\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let styleClasses = \"\"\r\n                if (item.positionProfit !== 0) {\r\n                    if (item.positionProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n                return (\r\n                    <span className={styleClasses}>{numberFormat(item.positionProfit, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"margin\",\r\n            name: \"保证金\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.margin, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"preBalance\",\r\n            name: \"昨日权益\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.preBalance, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"commission\",\r\n            name: \"佣金\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.commission, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"deposit\",\r\n            name: \"入金\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.deposit, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"withdraw\",\r\n            name: \"出金\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.withdraw, 2, true)}</span>\r\n                );\r\n            }\r\n        }\r\n\r\n        ]\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 69, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\" } }}>\r\n                                        今日盈亏(率)：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allTodayProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allTodayProfit, 2, true)} ({numberFormat(allTodayProfit / allPreBalance * 100, 2, true)}%)</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allTodayProfit, 2, true)} ({numberFormat(allTodayProfit / allPreBalance * 100, 2, true)}%)</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit === 0 ?\r\n                                                <span>{numberFormat(allTodayProfit, 2, true)} ({numberFormat(allTodayProfit / allPreBalance * 100, 2, true)}%)</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        盯市持仓盈亏：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allPositionProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allPositionProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allPositionProfit === 0 ?\r\n                                                <span>{numberFormat(allPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        盯市平仓盈亏：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allCloseProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allCloseProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allCloseProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allCloseProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allCloseProfit === 0 ?\r\n                                                <span>{numberFormat(allCloseProfit, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\" } }}>\r\n                                        资金：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allTodayProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allBalance, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allBalance, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit === 0 ?\r\n                                                <span>{numberFormat(allBalance, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        保证金(率)：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allMargin, 2, true)} ({numberFormat(allMargin / allBalance * 100, 2, true)}%)\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        合约价值：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allContractValue, 2, true)}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\" } }}>\r\n                                        持仓盈亏：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allOpenPositionProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allOpenPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allOpenPositionProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allOpenPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allOpenPositionProfit === 0 ?\r\n                                                <span>{numberFormat(allOpenPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        佣金：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allCommission, 2, true)}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        出入金：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allDepositAndWithdraw, 2, true)}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <MarqueeSelection selection={accountSelection}>\r\n                                        <DetailsList\r\n                                            items={accountList}\r\n                                            compact={true}\r\n                                            columns={columns}\r\n                                            selectionMode={SelectionMode.multiple}\r\n                                            setKey=\"accountId\"\r\n                                            layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                            constrainMode={ConstrainMode.unconstrained}\r\n                                            selection={accountSelection}\r\n                                            selectionPreservedOnEmptyClick={true}\r\n                               \r\n                                            // data-is-scrollable={true}\r\n\r\n                                            // @ts-ignore\r\n                                            onRenderDetailsHeader={\r\n                                                // tslint:disable-next-line:jsx-no-lambda\r\n                                                (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                        <DetailsHeader\r\n                                                            {...detailsHeaderProps}\r\n                                                            styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                            // onRenderDetailsCheckbox={\r\n                                                            //     ()=> {\r\n                                                            //         const styles = {\r\n                                                            //             checkbox: {\r\n                                                            //                 width: \"16px\",\r\n                                                            //                 height: \"16px\"\r\n                                                            //             }\r\n                                                            //         }\r\n                                                            //         return <Checkbox styles={styles}/>\r\n                                                            //     }\r\n                                                            // }\r\n                                                        />\r\n                                                        {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                    </Sticky>\r\n                                                )}\r\n                                                \r\n                                            // @ts-ignore\r\n                                            onRenderDetailsFooter={\r\n                                                // tslint:disable-next-line:jsx-no-lambda\r\n                                                (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                        {defaultRender(detailsFooterProps)}\r\n                                                    </Sticky>\r\n                                                )}\r\n                                        />\r\n                                    </MarqueeSelection>\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(AccountDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, SelectionMode, IColumn, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { numberFormat, deepCopy } from '../../../utils';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { IconButton } from '@fluentui/react/lib/Button';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { isNumber } from 'util';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { PositionDirectionEnum, ExchangeEnum, ProductClassEnum, CurrencyEnum, HedgeFlagEnum} = xyz.redtorch.pb\r\n\r\n\r\nconst tableLabelStyls: React.CSSProperties = { display: 'inline-block', width: 27, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\nexport const PositionDetailsPage = inject('authenticationStore', \"tradeAccountStore\", \"tradePositionStore\", \"tradeActionStore\")(observer(class PositionDetailsPage extends React.Component<any> {\r\n\r\n    public state = { showMerged: false, showEmpty: true };\r\n\r\n    public render() {\r\n\r\n        const { componentHeight, tradePositionStore, tradeAccountStore, tradeActionStore } = this.props;\r\n\r\n        const { accountMap } = tradeAccountStore;\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let positionList: any[] = []\r\n        const tradePositionStorePositionList = tradePositionStore.positionList\r\n\r\n        for (let i = 0; i < tradePositionStorePositionList.length; i++) {\r\n            const position = tradePositionStorePositionList[i]\r\n            if (tradeAccountStore.selectedAccountIdSet.has(position.accountId)) {\r\n                if (position.position !== 0 || this.state.showEmpty) {\r\n                    positionList.push(position)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.state.showMerged) {\r\n            const mergedPositionMap = new Map();\r\n\r\n            for (let i = 0; i < positionList.length; i++) {\r\n                const position = positionList[i]\r\n                try {\r\n                    const tmpKey = `${position.contract.unifiedSymbol}@${position.positionDirection}`\r\n                    let tmpPosition;\r\n                    if (mergedPositionMap.has(tmpKey)) {\r\n                        tmpPosition = mergedPositionMap.get(tmpKey)\r\n                        tmpPosition.contractValue += position.contractValue\r\n                        tmpPosition.exchangeMargin += position.exchangeMargin\r\n                        tmpPosition.frozen += position.frozen\r\n                        tmpPosition.openPositionProfit += position.openPositionProfit\r\n                        tmpPosition.position += position.position\r\n                        tmpPosition.positionProfit += position.positionProfit\r\n                        tmpPosition.tdFrozen += position.tdFrozen\r\n                        tmpPosition.tdPosition += position.tdPosition\r\n                        tmpPosition.useMargin += position.useMargin\r\n                        tmpPosition.ydFrozen += position.ydFrozen\r\n                        tmpPosition.ydPosition += position.ydPosition\r\n                    } else {\r\n                        const tmpGateway = {\r\n                            description: \"\",\r\n                            gatewayAdapterType: \"\",\r\n                            gatewayId: \"\",\r\n                            gatewayType: \"\",\r\n                            name: \"\",\r\n                            status: \"\",\r\n                        }\r\n\r\n                        tmpPosition = {\r\n                            accountId: \"\",\r\n                            contract: deepCopy(position.contract),\r\n                            contractValue: position.contractValue,\r\n                            positionDirection: position.positionDirection,\r\n                            exchangeMargin: position.exchangeMargin,\r\n                            frozen: position.frozen,\r\n                            gateway: tmpGateway,\r\n                            lastPrice: position.lastPrice,\r\n                            openPositionProfit: position.openPositionProfit,\r\n                            openPositionProfitRatio: 0,\r\n                            openPrice: 0,\r\n                            openPriceDiff: 0,\r\n                            position: position.position,\r\n                            positionId: uuidv4().replace(\"-\", \"\"),\r\n                            positionProfit: position.positionProfit,\r\n                            positionProfitRatio: 0,\r\n                            price: 0,\r\n                            priceDiff: 0,\r\n                            tdFrozen: position.tdFrozen,\r\n                            tdPosition: position.tdPosition,\r\n                            useMargin: position.useMargin,\r\n                            ydFrozen: position.ydFrozen,\r\n                            ydPosition: position.ydPosition,\r\n                        }\r\n\r\n\r\n                        tmpPosition.contract.gateway = tmpGateway;\r\n                        // tmpPosition.contract.contractId = \"\"\r\n\r\n                    }\r\n\r\n                    if (isNumber(position.useMargin) && position.useMargin !== 0) {\r\n                        tmpPosition.positionProfitRatio = position.positionProfit / position.useMargin;\r\n                        tmpPosition.openPositionProfitRatio = position.openPositionProfit / position.useMargin;\r\n                    }\r\n\r\n                    mergedPositionMap.set(tmpKey, tmpPosition)\r\n                } catch (error) {\r\n                    console.error(\"合并计算仓位错误\", error)\r\n                }\r\n\r\n            }\r\n            // positionList = Array.from(mergedPositionMap.values())\r\n            positionList = [...mergedPositionMap.values()]\r\n        }\r\n\r\n        const columns: IColumn[] = [{\r\n            key: \"contract\",\r\n            name: \"合约\",\r\n            minWidth: 150,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contract) {\r\n                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.contract.unifiedSymbol === selectedContract.unifiedSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={tooltipLabelStyls}>合约代码:</span><span>{item.contract.symbol}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>简称:</span><span>{item.contract.name}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>完整名称:</span><span>{item.contract.fullName}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[item.contract.exchange]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[item.contract.productClass]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{item.contract.thirdPartyId}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[item.contract.currency]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{item.contract.multiplier}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{item.contract.priceTick}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{item.contract.lastTradeDateOrContractMonth}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div style={{ cursor: \"pointer\" }} className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item.contract)\r\n                                }\r\n                            }>\r\n                                <div>{item.contract.unifiedSymbol}</div>\r\n                                <div>{item.contract.name}</div>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>无有效合约信息</span>\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n        }, {\r\n            key: \"direction\",\r\n            name: \"方向\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.positionDirection === PositionDirectionEnum.PD_Long) {\r\n                    return (\r\n                        <span className=\"trade-long-color\">多</span>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Short) {\r\n                    return (\r\n                        <span className=\"trade-short-color\">空</span>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Net) {\r\n                    return (\r\n                        <span>净</span>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                }  else {\r\n                    return (\r\n                        <span>{item.positionDirection}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"hedgeFlag\",\r\n            name: \"投机套保\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                    return (\r\n                        <span>投机</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                    return (\r\n                        <span>套利</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                    return (\r\n                        <span>套保</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                    return (\r\n                        <span>做市商</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                    return (\r\n                        <span>第一条腿套保第二条腿投机 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                    return (\r\n                        <span>第一条腿投机第二条腿套保 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.hedgeFlag}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"position\",\r\n            name: \"持仓\",\r\n            minWidth: 75,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                if (item.positionDirection === PositionDirectionEnum.PD_Long) {\r\n                    return (\r\n                        <div>\r\n                            <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-long-color\">{item.position}</span></div>\r\n                            <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                        </div>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Short) {\r\n                    return (\r\n                        <div>\r\n                            <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-short-color\">{item.position}</span></div>\r\n                            <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                        </div>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Net) {\r\n                    if (item.position > 0) {\r\n                        return (\r\n                            <div>\r\n                                <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-long-color\">{item.position}</span></div>\r\n                                <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                            </div>\r\n                        );\r\n                    } else if (item.position < 0) {\r\n                        return (\r\n                            <div>\r\n                                <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-short-color\">{item.position}</span></div>\r\n                                <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{item.position}</span></div>\r\n                        <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"tdPosition\",\r\n            name: \"今仓\",\r\n            minWidth: 75,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{item.tdPosition}</span></div>\r\n                        <div><span style={tableLabelStyls}>冻结:</span><span>{item.tdFrozen}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"action\",\r\n            name: \"操作\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            onRender: (item) => {\r\n                if (this.state.showMerged) {\r\n                    return <span />\r\n                }\r\n                return (\r\n                    <IconButton\r\n                        menuIconProps={{ iconName: 'MoreVertical' }}\r\n                        role=\"button\"\r\n                        aria-haspopup={true}\r\n                        aria-label=\"Show actions\"\r\n                        styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                        menuProps={{\r\n                            items: [\r\n                                {\r\n                                    key: 'CLOSE',\r\n                                    text: '对价平仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Blocked2\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"close\") }\r\n                                },\r\n                                {\r\n                                    key: 'CLOSE_TODAY',\r\n                                    text: '对价平今仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Blocked2\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"closeToday\") }\r\n                                },\r\n                                {\r\n                                    key: 'CLOSE_YESTERDAY',\r\n                                    text: '对价平昨仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Blocked2\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"closeYesterday\") }\r\n                                }, {\r\n                                    key: 'LOCK',\r\n                                    text: '对价锁仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Lock\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"lock\") }\r\n                                },\r\n\r\n                            ]\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        }, {\r\n            key: \"price\",\r\n            name: \"均价\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let decimalsLen = 4;\r\n                try {\r\n                    const prictTickStringArray = item.contract.priceTick.toString().split(\".\")\r\n                    if (prictTickStringArray.length === 1) {\r\n                        decimalsLen = 0\r\n                    } else {\r\n                        decimalsLen = [1].length\r\n                    }\r\n                } catch (error) {\r\n                    console.log(\"均价获取合约小数点位数错误\", error)\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{numberFormat(item.price, decimalsLen)}</span></div>\r\n                        <div><span style={tableLabelStyls}>开仓:</span><span>{numberFormat(item.openPrice, decimalsLen)}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"priceDiff\",\r\n            name: \"盈利价差\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{numberFormat(item.priceDiff, 4)}</span></div>\r\n                        <div><span style={tableLabelStyls}>开仓:</span><span>{numberFormat(item.openPriceDiff, 4)}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"openPositionProfit\",\r\n            name: \"逐笔浮盈\",\r\n            minWidth: 80,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                if (item.openPositionProfit > 0) {\r\n                    return (\r\n                        <div className=\"trade-long-color\">\r\n                            <div><span>{numberFormat(item.openPositionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.openPositionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                } else if (item.openPositionProfit < 0) {\r\n                    return (\r\n                        <div className=\"trade-short-color\">\r\n                            <div><span>{numberFormat(item.openPositionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.openPositionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span>{numberFormat(item.openPositionProfit, 2, true)}</span></div>\r\n                        <div><span>{numberFormat(item.openPositionProfitRatio * 100, 2, true)}%</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"positionProfit\",\r\n            name: \"盯市浮盈\",\r\n            minWidth: 80,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                if (item.positionProfit > 0) {\r\n                    return (\r\n                        <div className=\"trade-long-color\">\r\n                            <div><span>{numberFormat(item.positionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.positionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                } else if (item.positionProfit < 0) {\r\n                    return (\r\n                        <div className=\"trade-short-color\">\r\n                            <div><span>{numberFormat(item.positionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.positionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span>{numberFormat(item.positionProfit, 2, true)}</span></div>\r\n                        <div><span>{numberFormat(item.positionProfitRatio * 100, 2, true)}%</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"marginRatio\",\r\n            name: \"资金占比\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let marginRatio = \"无效值\"\r\n\r\n                try {\r\n                    if (this.state.showMerged) {\r\n                        const {\r\n                            allBalance\r\n                        } = tradeAccountStore.summaryMap.get(\"CNY\")\r\n\r\n                        marginRatio = numberFormat(item.useMargin / allBalance * 100, 2, true) + \"%\"\r\n                    } else {\r\n                        const account = accountMap.get(item.accountId)\r\n                        if (account) {\r\n                            marginRatio = numberFormat(item.useMargin / account.balance * 100, 2, true) + \"%\"\r\n                        } else {\r\n                            console.info(\"账户不存在,无法计算资金占比\")\r\n                        }\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.log(\"计算保证金占比错误\", error)\r\n                }\r\n\r\n\r\n                return (\r\n                    <div>\r\n                        {marginRatio}\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"margin\",\r\n            name: \"保证金\",\r\n            minWidth: 100,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={{ ...tableLabelStyls, width: 40 }}>经纪商:</span><span>{numberFormat(item.useMargin, 2, true)}</span></div>\r\n                        <div><span style={{ ...tableLabelStyls, width: 40 }}>交易所:</span><span>{numberFormat(item.exchangeMargin, 2, true)}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"contractValue\",\r\n            name: \"合约价值\",\r\n            minWidth: 100,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.contractValue, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"accountCode\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                let account: any;\r\n\r\n                try {\r\n                    account = accountMap.get(item.accountId)\r\n                } catch (error) {\r\n                    console.log(\"获取账户代码错误\", error)\r\n                }\r\n\r\n                if (account && account.code) {\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{account.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <span>{account.code}</span>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <span>无账户信息</span>\r\n                )\r\n\r\n\r\n\r\n            }\r\n        },\r\n\r\n        ]\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 30}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit'\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                                        items={positionList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"id\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                            \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    // onItemInvoked={\r\n                                    //     (item: any, index: number | undefined): void => {\r\n                                    //         alert(`Item ${item.positionId} at index ${index} has been invoked.`);\r\n                                    //       }\r\n                                    // }\r\n\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox label=\"合并显示\" styles={{ root: { marginTop: 3 } }} onChange={(event: any) => {\r\n                                this.setState({ \"showMerged\": event.currentTarget.checked })\r\n                            }} />\r\n                        </Stack>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox label=\"显示空仓\" styles={{ root: { marginTop: 3 } }} checked={this.state.showEmpty} onChange={(event: any) => {\r\n                                this.setState({ \"showEmpty\": event.currentTarget.checked })\r\n                            }} />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(PositionDetailsPage)\r\n\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, SelectionMode, IColumn, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { IconButton } from '@fluentui/react/lib/Button';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { OrderStatusEnum, DirectionEnum, OffsetFlagEnum, TimeConditionEnum, ProductClassEnum, ExchangeEnum, CurrencyEnum, OrderPriceTypeEnum, HedgeFlagEnum, VolumeConditionEnum, ContingentConditionEnum} = xyz.redtorch.pb\r\n\r\n\r\nconst tableLabelStyls: React.CSSProperties = { display: 'inline-block', width: 27, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\nexport const OrderDetailsPage = inject('authenticationStore', \"tradeOrderStore\", \"tradeAccountStore\", \"tradeActionStore\")(observer(class OrderDetailsPage extends React.Component<any> {\r\n\r\n    public state = { statusChoice: 'ALL', showRejected: false };\r\n\r\n    public render() {\r\n\r\n        const { componentHeight, tradeOrderStore, tradeAccountStore, tradeActionStore } = this.props;\r\n\r\n        const { accountMap } = tradeAccountStore;\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        const orderList: any[] = []\r\n        const tradeAccountStoreOrderList = tradeOrderStore.orderList\r\n\r\n        for (let i = 0; i < tradeAccountStoreOrderList.length; i++) {\r\n            const order = tradeAccountStoreOrderList[i]\r\n\r\n            if (tradeAccountStore.selectedAccountIdSet.has(order.accountId)) {\r\n                if (this.state.statusChoice === \"ALL\"\r\n                    || (order.orderStatus !== OrderStatusEnum.OS_AllTraded && order.orderStatus !== OrderStatusEnum.OS_Canceled && order.orderStatus !== OrderStatusEnum.OS_Rejected && this.state.statusChoice === \"CANCELABLE\")\r\n                    || (order.orderStatus === OrderStatusEnum.OS_Canceled && this.state.statusChoice === \"CANCELLED\")\r\n                ) {\r\n                    if ((order.orderStatus === OrderStatusEnum.OS_Rejected && this.state.showRejected)\r\n                        || order.orderStatus !== OrderStatusEnum.OS_Rejected\r\n                    ) {\r\n                        orderList.push(order)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const columns: IColumn[] = [{\r\n            key: \"contract\",\r\n            name: \"合约\",\r\n            minWidth: 150,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contract) {\r\n                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.contract.unifiedSymbol === selectedContract.unifiedSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={tooltipLabelStyls}>合约代码:</span><span>{item.contract.symbol}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>简称:</span><span>{item.contract.name}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>完整名称:</span><span>{item.contract.fullName}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[item.contract.exchange]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[item.contract.productClass]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{item.contract.thirdPartyId}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[item.contract.currency]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{item.contract.multiplier}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{item.contract.priceTick}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{item.contract.lastTradeDateOrContractMonth}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div style={{ cursor: \"pointer\" }} className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item.contract)\r\n                                }\r\n                            }>\r\n                                <div>{item.contract.unifiedSymbol}</div>\r\n                                <div>{item.contract.name}</div>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>无有效合约信息</span>\r\n                    )\r\n                }\r\n\r\n            }\r\n        }, {\r\n            key: \"direction\",\r\n            name: \"方向\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.direction === DirectionEnum.D_Buy) {\r\n                    return (\r\n                        <span className=\"trade-long-color\">多</span>\r\n                    );\r\n                } else if (item.direction === DirectionEnum.D_Sell) {\r\n                    return (\r\n                        <span className=\"trade-short-color\">空</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.direction}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"offsetFlag\",\r\n            name: \"开平\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.offsetFlag === OffsetFlagEnum.OF_Open) {\r\n                    return (\r\n                        <span>开仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Close) {\r\n                    return (\r\n                        <span>平仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseYesterday) {\r\n                    return (\r\n                        <span>平昨</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseToday) {\r\n                    return (\r\n                        <span>平今</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.offsetFlag} </span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"hedgeFlag\",\r\n            name: \"投机套保\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                    return (\r\n                        <span>投机</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                    return (\r\n                        <span>套利</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                    return (\r\n                        <span>套保</span>\r\n                    );\r\n                }  else if (item.hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                    return (\r\n                        <span>做市商</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                    return (\r\n                        <span>第一条腿套保第二条腿投机 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                    return (\r\n                        <span>第一条腿投机第二条腿套保 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.hedgeFlag}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"orderPriceType\",\r\n            name: \"价格类型\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.orderPriceType === OrderPriceTypeEnum.OPT_LimitPrice) {\r\n                    return (\r\n                        <span>限价</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_AnyPrice) {\r\n                    return (\r\n                        <span>市价</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_BestPrice) {\r\n                    return (\r\n                        <span>最优价</span>\r\n                    );\r\n                }  else if (item.orderPriceType === OrderPriceTypeEnum.OPT_LastPrice) {\r\n                    return (\r\n                        <span>最新价</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusOneTicks) {\r\n                    return (\r\n                        <span>新价浮动上浮1个ticks</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks) {\r\n                    return (\r\n                        <span>新价浮动上浮3个ticks</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.orderPriceType}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"price\",\r\n            name: \"价格\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span className=\"trade-info-color\">{item.price}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"volume\",\r\n            name: \"量\",\r\n            minWidth: 75,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>总量:</span><span className=\"trade-info-color\">{item.totalVolume}</span></div>\r\n                        <div><span style={tableLabelStyls}>成交:</span><span className=\"trade-info-color\">{item.tradedVolume}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"action\",\r\n            name: \"操作\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            onRender: (item) => {\r\n                return (\r\n                    <IconButton\r\n                        menuIconProps={{ iconName: 'MoreVertical' }}\r\n                        role=\"button\"\r\n                        aria-haspopup={true}\r\n                        aria-label=\"Show actions\"\r\n                        styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                        menuProps={{\r\n                            items: [\r\n                                {\r\n                                    key: 'cancel',\r\n                                    text: '撤销',\r\n                                    iconProps: {\r\n                                        iconName: \"RevToggleKey\"\r\n                                    },\r\n                                    onClick: () => {\r\n                                        tradeActionStore.cancelOrder(item.orderId)\r\n                                    }\r\n                                },\r\n\r\n                                {\r\n                                    key: 'followUpWithActivePrice',\r\n                                    text: '对价追(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"DoubleChevronRight8\"\r\n                                    },\r\n                                    onClick: () => {\r\n                                        console.error(\"对价追\")\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        }, {\r\n            key: \"status\",\r\n            name: \"状态\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.orderStatus === OrderStatusEnum.OS_AllTraded) {\r\n                    return (\r\n                        <span>全部成交</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Canceled) {\r\n                    return (\r\n                        <span>已撤销</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Rejected) {\r\n                    return (\r\n                        <span>已拒绝</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_PartTradedQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">部分成交还在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_PartTradedNotQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">部分成交不在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_NoTradeQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">未成交还在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_NoTradeNotQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">未成交不在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Touched) {\r\n                    return (\r\n                        <span>已触发</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_NotTouched) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">尚未触发</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">{item.orderStatus}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"statusMsg\",\r\n            name: \"状态信息\",\r\n            minWidth: 80,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.statusMsg}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"time\",\r\n            name: \"时间\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div>{item.orderDate}</div>\r\n                        <div>{item.orderTime}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"timeCondition\",\r\n            name: \"时效\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_GTC) {\r\n                    return (\r\n                        <div>\r\n                            <div>撤销前有效(GTC)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_GFD) {\r\n                    return (\r\n                        <div>\r\n                            <div>当日有效(GFD)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_GFA) {\r\n                    return (\r\n                        <div>\r\n                            <div>集合竞价有效(GFA)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                \r\n                if (item.timeCondition === TimeConditionEnum.TC_GFS) {\r\n                    return (\r\n                        <div>\r\n                            <div>本节有效(GFS)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                \r\n                if (item.timeCondition === TimeConditionEnum.TC_GTD) {\r\n                    return (\r\n                        <div>\r\n                            <div>指定日期前有效(GTD)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_IOC) {\r\n                    return (\r\n                        <div>\r\n                            <div>立即完成，否则撤销(IOC)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_Unknown) {\r\n                    return (\r\n                        <div>\r\n                            <div>未知</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div>\r\n                        <div>{item.timeCondition}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"volumeCondition\",\r\n            name: \"成交量类型\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.volumeCondition === VolumeConditionEnum.VC_AV) {\r\n                    return (\r\n                        <span>任何数量</span>\r\n                    );\r\n                } else if (item.volumeCondition === VolumeConditionEnum.VC_MV) {\r\n                    return (\r\n                        <span>最小数量</span>\r\n                    );\r\n                } else if (item.volumeCondition === VolumeConditionEnum.VC_CV) {\r\n                    return (\r\n                        <span>全部数量</span>\r\n                    );\r\n                } else if (item.volumeCondition === VolumeConditionEnum.VC_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                }  else {\r\n                    return (\r\n                        <span>{item.volumeCondition}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"minVolume\",\r\n            name: \"最小数量\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.minVolume}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"contingentCondition\",\r\n            name: \"触发条件\",\r\n            minWidth: 100,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contingentCondition === ContingentConditionEnum.CC_Immediately) {\r\n                    return (\r\n                        <span>立即</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice) {\r\n                    return (\r\n                        <span>最新价大于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice) {\r\n                    return (\r\n                        <span>最新价小于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice) {\r\n                    return (\r\n                        <span>(本地)最新价大于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice) {\r\n                    return (\r\n                        <span>(本地)最新价小于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                }else {\r\n                    return (\r\n                        <span>{item.contingentCondition}</span>\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        , {\r\n            key: \"stopPrice\",\r\n            name: \"条件价格\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.stopPrice}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"adapterOrderId\",\r\n            name: \"适配器定单编号\",\r\n            minWidth: 120,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.adapterOrderId}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"accountCode\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                let account: any;\r\n\r\n                try {\r\n                    account = accountMap.get(item.accountId)\r\n                } catch (error) {\r\n                    console.log(\"获取账户代码错误\", error)\r\n                }\r\n\r\n                if (account && account.code) {\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{account.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <span>{account.code}</span>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <span>无账户信息</span>\r\n                )\r\n\r\n\r\n\r\n            }\r\n        }\r\n\r\n        ]\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 30}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit'\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                                        items={orderList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"id\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                        onItemInvoked={\r\n                                            (item: any, index: number | undefined): void => {\r\n                                                tradeActionStore.cancelOrder(item.orderId)\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <ChoiceGroup\r\n                                defaultSelectedKey=\"ALL\"\r\n                                options={[\r\n                                    {\r\n                                        key: 'ALL',\r\n                                        text: '全部',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0,\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'CANCELABLE',\r\n                                        text: '可撤销',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'CANCELLED',\r\n                                        text: '已撤销',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                onChange={(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n                                    if (option) {\r\n                                        this.setState({ \"statusChoice\": option.key })\r\n                                    }\r\n                                }}\r\n                            // label=\"显示方式\"\r\n                            // required={true}\r\n                            />\r\n                        </Stack>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox\r\n                                label=\"显示拒单\"\r\n                                styles={{ root: { marginTop: 3 } }}\r\n                                onChange={(event: any) => {\r\n                                    this.setState({ \"showRejected\": event.currentTarget.checked })\r\n                                }} />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(OrderDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { PrimaryButton, DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\n\r\nimport { exchangeOptions, currencyOptions, productClassOptions } from '../../../utils'\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\n\r\nconst { CurrencyEnum, ExchangeEnum, ProductClassEnum, OptionsTypeEnum } = xyz.redtorch.pb\r\n\r\n\r\n\r\nexport const ContractDetailsPage = inject('authenticationStore', 'tradeContractStore', 'tradeActionStore', 'customizeStore', 'marketDataRecordingStore')(observer(class ContractDetailsPage extends React.Component<any> {\r\n\r\n    state = {\r\n        filterExchange: 9999,\r\n        filterProductClass: 9999,\r\n        filterCurrency: 9999,\r\n        filterSymbol: \"\",\r\n        filterUnderlyingSymbol: \"\",\r\n        filterThirdPartyId: \"\",\r\n        filterName: \"\",\r\n        filterLastTradeDateOrContractMonth: \"\"\r\n    }\r\n\r\n    public componentDidMount = () => {\r\n        this.getMixContractList()\r\n    }\r\n\r\n    public getMixContractList = () => {\r\n        const { tradeContractStore } = this.props\r\n        tradeContractStore.getMixContractList()\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { tradeContractStore, tradeActionStore, customizeStore, marketDataRecordingStore } = this.props;\r\n\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let mixContractList = []\r\n        if ((this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0))\r\n            && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0))\r\n            && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0))\r\n            && (this.state.filterSymbol === \"\" || !this.state.filterSymbol)\r\n            && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth)\r\n            && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId)\r\n            && (this.state.filterName === \"\" || !this.state.filterName)\r\n            && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol)) {\r\n            mixContractList = tradeContractStore.mixContractList\r\n        } else {\r\n\r\n            for (let i = 0; i <  tradeContractStore.mixContractList.length; i++) {\r\n                const contract = tradeContractStore.mixContractList[i]\r\n\r\n                let flag = false;\r\n                flag = this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0) || contract.currency === this.state.filterCurrency\r\n                flag = flag && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0) || contract.exchange === this.state.filterExchange)\r\n                flag = flag && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0) || contract.productClass === this.state.filterProductClass)\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n                flag = flag && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth || (contract.lastTradeDateOrContractMonth && `${contract.lastTradeDateOrContractMonth}`.indexOf(this.state.filterLastTradeDateOrContractMonth) !== -1))\r\n                flag = flag && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol || (contract.underlyingSymbol && `${contract.underlyingSymbol}`.indexOf(this.state.filterUnderlyingSymbol) !== -1))\r\n                flag = flag && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId || (contract.thirdPartyId && `${contract.thirdPartyId}`.indexOf(this.state.filterThirdPartyId) !== -1))\r\n                flag = flag && (this.state.filterName === \"\" || !this.state.filterName || (contract.name && `${contract.name}`.indexOf(this.state.filterName) !== -1) || (contract.fullName && `${contract.fullName}`.indexOf(this.state.filterName) !== -1))\r\n\r\n                if (flag) {\r\n                    mixContractList.push(contract)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 209}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [\r\n            {\r\n                key: \"unifiedSymbol\",\r\n                name: \"统一标识\",\r\n                minWidth: 150,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.unifiedSymbol === selectedContract.unifiedSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item)\r\n                                }\r\n                            }>\r\n                                <span style={{ cursor: \"pointer\" }}>{item.unifiedSymbol}</span>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"shortName\",\r\n                name: \"简称\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.name}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"fullName\",\r\n                name: \"完整名称\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.fullName}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"action\",\r\n                name: \"操作\",\r\n                minWidth: 30,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                onRender: (item) => {\r\n                    return (\r\n                        <IconButton\r\n                            menuIconProps={{ iconName: 'MoreVertical' }}\r\n                            role=\"button\"\r\n                            aria-haspopup={true}\r\n                            aria-label=\"Show actions\"\r\n                            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                            menuProps={{\r\n                                items: [\r\n                                    {\r\n                                        key: 'addTofavorite',\r\n                                        text: '加入常用',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            customizeStore.addFavoriteContractByUnifiedSymbol(item.unifiedSymbol)\r\n                                        }\r\n                                    },\r\n\r\n                                    {\r\n                                        key: 'addToMarketDataRecording',\r\n                                        // disabled: true,\r\n                                        text: '加入行情记录',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            marketDataRecordingStore.addContractByUnifiedSymbol(item.unifiedSymbol)\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"symbol\",\r\n                name: \"代码\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.symbol}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"exchange\",\r\n                name: \"交易所\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ExchangeEnum[item.exchange]}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"productClass\",\r\n                name: \"产品类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ProductClassEnum[item.productClass]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"lastTradeDateOrContractMonth\",\r\n                name: \"合约月或最后交易日\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.lastTradeDateOrContractMonth}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"currency\",\r\n                name: \"币种\",\r\n                minWidth: 40,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{CurrencyEnum[item.currency]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"thirdPartyId\",\r\n                name: \"第三方ID\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.thirdPartyId}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"multiplier\",\r\n                name: \"合约乘数\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.multiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"priceTick\",\r\n                name: \"最小变动价位\",\r\n                minWidth: 70,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.priceTick}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"optionsType\",\r\n                name: \"期权类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    if (item.optionsType === OptionsTypeEnum.O_CallOptions) {\r\n                        return (\r\n                            <span>看涨</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_PutOptions) {\r\n                        return (\r\n                            <span>看跌</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_Unknown) {\r\n                        return (\r\n                            <span>未知</span>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <span>{item.optionsType}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingSymbol\",\r\n                name: \"基础商品代码\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingSymbol}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingMultiplier\",\r\n                name: \"基础商品乘数\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingMultiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"strikePrice\",\r\n                name: \"执行价\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.strikePrice}</span>\r\n                    );\r\n                }\r\n            }\r\n\r\n        ]\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 207, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"交易所\"\r\n                                            // styles={{ root: { width: \"90%\" } }}\r\n                                            defaultSelectedKey={this.state.filterExchange}\r\n                                            options={\r\n                                                exchangeOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterExchange: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"产品类型\"\r\n                                            defaultSelectedKey={this.state.filterProductClass}\r\n                                            options={\r\n                                                productClassOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterProductClass: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"币种\"\r\n                                            defaultSelectedKey={this.state.filterCurrency}\r\n                                            options={\r\n                                                currencyOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterCurrency: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterSymbol} label=\"合约代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterLastTradeDateOrContractMonth} label=\"最后交易日或合约月\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterLastTradeDateOrContractMonth: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterThirdPartyId} label=\"第三方ID\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterThirdPartyId: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterUnderlyingSymbol} label=\"基础商品代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterUnderlyingSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterName} label=\"名称\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterName: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <PrimaryButton\r\n                                            text=\"搜寻(开发中)\"\r\n                                            onClick={() => {\r\n                                                console.log(123)\r\n                                            }}\r\n                                            disabled={true}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                        <DefaultButton\r\n                                            text=\"刷新\"\r\n                                            onClick={() => {\r\n                                                tradeContractStore.getMixContractList()\r\n                                            }}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        items={mixContractList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"accountId\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                        \r\n                                            // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(ContractDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\n\r\nimport { exchangeOptions, currencyOptions, productClassOptions } from '../../../utils'\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\n\r\nconst { CurrencyEnum, ExchangeEnum, ProductClassEnum, OptionsTypeEnum } = xyz.redtorch.pb\r\n\r\n\r\n\r\nexport const FavoriteContractDetailsPage = inject('authenticationStore', 'tradeContractStore', 'tradeActionStore', 'customizeStore', 'marketDataRecordingStore')(observer(class FavoriteContractDetailsPage extends React.Component<any> {\r\n\r\n    state = {\r\n        filterExchange: 9999,\r\n        filterProductClass: 9999,\r\n        filterCurrency: 9999,\r\n        filterSymbol: \"\",\r\n        filterUnderlyingSymbol: \"\",\r\n        filterThirdPartyId: \"\",\r\n        filterName: \"\",\r\n        filterLastTradeDateOrContractMonth: \"\"\r\n    }\r\n\r\n    public componentDidMount = () => {\r\n        this.getFavoriteContractList()\r\n    }\r\n\r\n    public getFavoriteContractList = () => {\r\n        const { customizeStore, tradeContractStore } = this.props\r\n        tradeContractStore.getMixContractList()\r\n        customizeStore.getFavoriteContractList()\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { customizeStore, tradeActionStore, marketDataRecordingStore } = this.props;\r\n\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let favoriteContractList = []\r\n        if ((this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0))\r\n            && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0))\r\n            && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0))\r\n            && (this.state.filterSymbol === \"\" || !this.state.filterSymbol)\r\n            && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth)\r\n            && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId)\r\n            && (this.state.filterName === \"\" || !this.state.filterName)\r\n            && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol)) {\r\n            favoriteContractList = customizeStore.favoriteContractList\r\n        } else {\r\n\r\n            for (let i = 0; i < customizeStore.favoriteContractList.length; i++) {\r\n                const contract = customizeStore.favoriteContractList[i]\r\n\r\n                let flag = false;\r\n                flag = this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0) || contract.currency === this.state.filterCurrency\r\n\r\n                flag = flag && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0) || contract.exchange === this.state.filterExchange)\r\n\r\n                flag = flag && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0) || contract.productClass === this.state.filterProductClass)\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth || (contract.lastTradeDateOrContractMonth && `${contract.lastTradeDateOrContractMonth}`.indexOf(this.state.filterLastTradeDateOrContractMonth) !== -1))\r\n\r\n                flag = flag && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol || (contract.underlyingSymbol && `${contract.underlyingSymbol}`.indexOf(this.state.filterUnderlyingSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId || (contract.thirdPartyId && `${contract.thirdPartyId}`.indexOf(this.state.filterThirdPartyId) !== -1))\r\n\r\n                flag = flag && (this.state.filterName === \"\" || !this.state.filterName || (contract.name && `${contract.name}`.indexOf(this.state.filterName) !== -1) || (contract.fullName && `${contract.fullName}`.indexOf(this.state.filterName) !== -1))\r\n\r\n\r\n                if (flag) {\r\n                    favoriteContractList.push(contract)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 209}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [\r\n            {\r\n                key: \"unifiedSymbol\",\r\n                name: \"统一标识\",\r\n                minWidth: 150,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.unifiedSymbol === selectedContract.unifiedSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item)\r\n                                }\r\n                            }>\r\n                                <span style={{ cursor: \"pointer\" }}>{item.unifiedSymbol}</span>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"shortName\",\r\n                name: \"简称\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.name}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"fullName\",\r\n                name: \"完整名称\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.fullName}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"action\",\r\n                name: \"操作\",\r\n                minWidth: 30,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                onRender: (item) => {\r\n                    return (\r\n                        <IconButton\r\n                            menuIconProps={{ iconName: 'MoreVertical' }}\r\n                            role=\"button\"\r\n                            aria-haspopup={true}\r\n                            aria-label=\"Show actions\"\r\n                            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                            menuProps={{\r\n                                items: [\r\n                                    {\r\n                                        key: 'deleteFavoriteContractByUnifiedSymbol',\r\n                                        text: '从常用中移除',\r\n                                        iconProps: {\r\n                                            iconName: \"Delete\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            customizeStore.deleteFavoriteContractByUnifiedSymbol(item.unifiedSymbol)\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'addToMarketDataRecording',\r\n                                        // disabled: true,\r\n                                        text: '加入行情记录',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            marketDataRecordingStore.addContractByUnifiedSymbol(item.unifiedSymbol)\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"symbol\",\r\n                name: \"代码\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.symbol}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"exchange\",\r\n                name: \"交易所\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ExchangeEnum[item.exchange]}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"productClass\",\r\n                name: \"产品类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ProductClassEnum[item.productClass]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"lastTradeDateOrContractMonth\",\r\n                name: \"合约月或最后交易日\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.lastTradeDateOrContractMonth}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"currency\",\r\n                name: \"币种\",\r\n                minWidth: 40,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{CurrencyEnum[item.currency]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"thirdPartyId\",\r\n                name: \"第三方ID\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.thirdPartyId}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"multiplier\",\r\n                name: \"合约乘数\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.multiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"priceTick\",\r\n                name: \"最小变动价位\",\r\n                minWidth: 70,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.priceTick}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"optionsType\",\r\n                name: \"期权类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    if (item.optionsType === OptionsTypeEnum.O_CallOptions) {\r\n                        return (\r\n                            <span>看涨</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_PutOptions) {\r\n                        return (\r\n                            <span>看跌</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_Unknown) {\r\n                        return (\r\n                            <span>未知</span>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <span>{item.optionsType}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingSymbol\",\r\n                name: \"基础商品代码\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingSymbol}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingMultiplier\",\r\n                name: \"基础商品乘数\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingMultiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"strikePrice\",\r\n                name: \"执行价\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.strikePrice}</span>\r\n                    );\r\n                }\r\n            }\r\n\r\n        ]\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 207, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"交易所\"\r\n                                            // styles={{ root: { width: \"90%\" } }}\r\n                                            defaultSelectedKey={this.state.filterExchange}\r\n                                            options={\r\n                                                exchangeOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterExchange: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"产品类型\"\r\n                                            defaultSelectedKey={this.state.filterProductClass}\r\n                                            options={\r\n                                                productClassOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterProductClass: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"币种\"\r\n                                            defaultSelectedKey={this.state.filterCurrency}\r\n                                            options={\r\n                                                currencyOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterCurrency: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterSymbol} label=\"合约代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterLastTradeDateOrContractMonth} label=\"最后交易日或合约月\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterLastTradeDateOrContractMonth: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterThirdPartyId} label=\"第三方ID\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterThirdPartyId: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterUnderlyingSymbol} label=\"基础商品代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterUnderlyingSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterName} label=\"名称\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterName: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5, paddingTop: 29 } }}>\r\n                                        <DefaultButton\r\n                                            text=\"刷新\"\r\n                                            onClick={() => {\r\n                                                this.getFavoriteContractList()\r\n                                            }}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        items={favoriteContractList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"accountId\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                            \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(FavoriteContractDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, SelectionMode, IColumn, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { deepCopy } from '../../../utils';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { DirectionEnum, OffsetFlagEnum, ProductClassEnum, ExchangeEnum, CurrencyEnum, HedgeFlagEnum } = xyz.redtorch.pb\r\n\r\n// const tableLabelStyls: React.CSSProperties = { display: 'inline-block', width: 27, textAlign: \"right\", color: '#999',paddingRight:3 }\r\n\r\nexport const TradeDetailsPage = inject('authenticationStore', \"tradeTradeStore\", \"tradeAccountStore\", \"tradeActionStore\")(observer(class TradeDetailsPage extends React.Component<any> {\r\n    public state = { directionChoice: 'ALL', showMerged: false };\r\n    public render() {\r\n\r\n\r\n        const { componentHeight, tradeTradeStore, tradeAccountStore, tradeActionStore } = this.props;\r\n\r\n        const { accountMap } = tradeAccountStore;\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let tradeList: any[] = []\r\n        const tradeTradeStoreTradeList = tradeTradeStore.tradeList\r\n        for (let i = 0; i < tradeTradeStoreTradeList.length; i++) {\r\n            const trade = tradeTradeStoreTradeList[i]\r\n            if (tradeAccountStore.selectedAccountIdSet.has(trade.accountId)) {\r\n                if (this.state.directionChoice === \"ALL\"\r\n                    || (this.state.directionChoice === 'LONG' && trade.direction === DirectionEnum.D_Buy)\r\n                    || (this.state.directionChoice === 'SHORT' && trade.direction === DirectionEnum.D_Sell)\r\n                ) {\r\n                    tradeList.push(trade)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.state.showMerged) {\r\n\r\n            const mergedTradeMap = new Map();\r\n\r\n            for (let i = 0; i < tradeList.length; i++) {\r\n                const trade = tradeList[i]\r\n                try {\r\n                    const tmpKey = `${trade.contract.unifiedSymbol}@${trade.direction}@${trade.offsetFlag}`\r\n                    let tmpTrade;\r\n                    if (mergedTradeMap.has(tmpKey)) {\r\n                        tmpTrade = mergedTradeMap.get(tmpKey)\r\n                        tmpTrade.volume += trade.volume\r\n                    } else {\r\n                        const tmpGateway = {\r\n                            description: \"\",\r\n                            gatewayAdapterType: \"\",\r\n                            gatewayId: \"\",\r\n                            gatewayType: \"\",\r\n                            name: \"\",\r\n                            status: \"\",\r\n                        }\r\n                        tmpTrade = {\r\n                            accountId: \"\",\r\n                            adapterOrderId: \"\",\r\n                            adapterTradeId: \"\",\r\n                            contract: deepCopy(trade.contract),\r\n                            direction: trade.direction,\r\n                            gateway: tmpGateway,\r\n                            offsetFlag: trade.offsetFlag,\r\n                            orderId: \"\",\r\n                            originOrderId: \"\",\r\n                            price: 0,\r\n                            tradeDate: \"\",\r\n                            tradeId: uuidv4().replace(\"-\", \"\"),\r\n                            tradeTime: \"\",\r\n                            tradeTimestamp: \"\",\r\n                            tradingDay: \"\",\r\n                            volume: trade.volume\r\n                        }\r\n                        tmpTrade.contract.gateway = tmpGateway;\r\n\r\n                    }\r\n                    mergedTradeMap.set(tmpKey, tmpTrade)\r\n                } catch (error) {\r\n                    console.error(\"合并计算成交错误\", error)\r\n                }\r\n            }\r\n\r\n            tradeList = [...mergedTradeMap.values()]\r\n\r\n        }\r\n\r\n\r\n        const columns: IColumn[] = [{\r\n            key: \"contract\",\r\n            name: \"合约\",\r\n            minWidth: 150,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contract) {\r\n                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.contract.unifiedSymbol === selectedContract.unifiedSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={tooltipLabelStyls}>合约代码:</span><span>{item.contract.symbol}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>简称:</span><span>{item.contract.name}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>完整名称:</span><span>{item.contract.fullName}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[item.contract.exchange]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[item.contract.productClass]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{item.contract.thirdPartyId}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[item.contract.currency]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{item.contract.multiplier}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{item.contract.priceTick}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{item.contract.lastTradeDateOrContractMonth}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div style={{ cursor: \"pointer\" }} className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item.contract)\r\n                                }\r\n                            }>\r\n                                <div>{item.contract.unifiedSymbol}</div>\r\n                                <div>{item.contract.name}</div>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>无有效合约信息</span>\r\n                    )\r\n                }\r\n\r\n            }\r\n        }, {\r\n            key: \"direction\",\r\n            name: \"方向\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.direction === DirectionEnum.D_Buy) {\r\n                    return (\r\n                        <span className=\"trade-long-color\">多</span>\r\n                    );\r\n                } else if (item.direction === DirectionEnum.D_Sell) {\r\n                    return (\r\n                        <span className=\"trade-short-color\">空</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.direction}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"hedgeFlag\",\r\n            name: \"投机套保\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                    return (\r\n                        <span>投机</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                    return (\r\n                        <span>套利</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                    return (\r\n                        <span>套保</span>\r\n                    );\r\n                }  else if (item.hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                    return (\r\n                        <span>做市商</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                    return (\r\n                        <span>第一条腿套保第二条腿投机 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                    return (\r\n                        <span>第一条腿投机第二条腿套保 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.hedgeFlag}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"offsetFlag\",\r\n            name: \"开平\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.offsetFlag === OffsetFlagEnum.OF_Open) {\r\n                    return (\r\n                        <span>开仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Close) {\r\n                    return (\r\n                        <span>平仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseYesterday) {\r\n                    return (\r\n                        <span>平昨</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseToday) {\r\n                    return (\r\n                        <span>平今</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.offsetFlag} </span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"price\",\r\n            name: \"价格\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span className=\"trade-info-color\">{item.price}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"volume\",\r\n            name: \"量\",\r\n            minWidth: 40,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.volume}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"time\",\r\n            name: \"时间\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div>{item.tradeDate}</div>\r\n                        <div>{item.tradeTime}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"adapterOrderId\",\r\n            name: \"适配器定单编号\",\r\n            minWidth: 120,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.adapterOrderId}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"adapterTradeId\",\r\n            name: \"适配器成交编号\",\r\n            minWidth: 240,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.adapterTradeId}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"accountCode\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                let account: any;\r\n\r\n                try {\r\n                    account = accountMap.get(item.accountId)\r\n                } catch (error) {\r\n                    console.log(\"获取账户代码错误\", error)\r\n                }\r\n\r\n                if (account && account.code) {\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{account.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <span>{account.code}</span>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <span>无账户信息</span>\r\n                )\r\n\r\n\r\n\r\n            }\r\n        }\r\n\r\n        ]\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 30}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit'\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                                        items={tradeList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"id\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <ChoiceGroup\r\n                                defaultSelectedKey=\"ALL\"\r\n                                options={[\r\n                                    {\r\n                                        key: 'ALL',\r\n                                        text: '全部',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'LONG',\r\n                                        text: '做多记录',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'SHORT',\r\n                                        text: '做空记录',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ]}\r\n\r\n                                onChange={(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n                                    if (option) {\r\n                                        this.setState({ \"directionChoice\": option.key })\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Stack>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox label=\"合并显示\" styles={{ root: { marginTop: 3 } }} onChange={(event: any) => {\r\n                                this.setState({ \"showMerged\": event.currentTarget.checked })\r\n                            }} />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(TradeDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { isDevEnv } from '../../../utils';\r\nimport { toast } from 'react-toastify';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ContextualMenu } from '@fluentui/react/lib/ContextualMenu';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\n\r\nconst { \r\n    ExchangeEnum,\r\n    ProductClassEnum, \r\n    CurrencyEnum,\r\n    OrderPriceTypeEnum,\r\n    DirectionEnum,\r\n    OffsetFlagEnum,\r\n    TimeConditionEnum,\r\n    VolumeConditionEnum,\r\n    ContingentConditionEnum,\r\n    HedgeFlagEnum,\r\n } = xyz.redtorch.pb\r\n\r\n\r\nexport const TradeBoardPage = inject('authenticationStore', 'tradeActionStore', 'tradeAccountStore')(observer(class TradeBoardPage extends React.Component<any> {\r\n\r\n    public state = { showSubmitOrderModal: false, confirmPrice: null, actionType: '' };\r\n\r\n\r\n    public render() {\r\n\r\n        const { tradeActionStore, tradeAccountStore } = this.props;\r\n\r\n        let priceTick = 0.0001\r\n        let unifiedSymbol = \"\"\r\n        let shortName = \"\"\r\n        if (tradeActionStore.selectedContract) {\r\n            if (tradeActionStore.selectedContract.priceTick) {\r\n                priceTick = tradeActionStore.selectedContract.priceTick\r\n            }\r\n\r\n            if (tradeActionStore.selectedContract.unifiedSymbol) {\r\n                unifiedSymbol = tradeActionStore.selectedContract.unifiedSymbol\r\n            }\r\n\r\n            if (tradeActionStore.selectedContract.name) {\r\n                shortName = tradeActionStore.selectedContract.name\r\n            }\r\n        }\r\n\r\n        const generateAccountVolumeDom = (isFinal: any) => {\r\n\r\n            const tmpAccountVolumeDomList: any[] = []\r\n\r\n            let key = 0;\r\n            tradeAccountStore.selectedAccountIdSet.forEach((element: any) => {\r\n                key++\r\n                if (tradeAccountStore.accountMap.has(element)) {\r\n                    const account = tradeAccountStore.accountMap.get(element)\r\n                    const finalVolume = this.state[`CONFIRM_VOLUME_KEY_${account.accountId}`] ? this.state[`CONFIRM_VOLUME_KEY_${account.accountId}`] : tradeActionStore.volume\r\n                    if (!isFinal || (finalVolume && finalVolume > 0)) {\r\n                        tmpAccountVolumeDomList.push(\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }} key={key}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                        <TextField style={{ width: \"100%\" }} defaultValue={account.holder} disabled={true} />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                        <TextField style={{ width: \"100%\" }} defaultValue={account.accountId} disabled={true} />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"calc(33%)\" } }}>\r\n                                        <TextField\r\n                                            style={{ color: \"rgb(80, 255, 255)\", width: \"100%\" }}\r\n                                            className=\"trade-info-color\"\r\n                                            defaultValue={`${finalVolume}`}\r\n                                            type=\"number\"\r\n                                            step={1}\r\n                                            min={0}\r\n                                            onChange={(event: any, newValue?: any) => {\r\n                                                if (isDevEnv) {\r\n                                                    console.log(`账户${account.accountId}变更数量${newValue}`)\r\n                                                }\r\n                                                const newState = {}\r\n                                                newState[`CONFIRM_VOLUME_KEY_${account.accountId}`] = newValue\r\n                                                this.setState(newState)\r\n                                            }}\r\n                                        />\r\n\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        )\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (tmpAccountVolumeDomList.length === 0) {\r\n                if (isFinal) {\r\n\r\n                    tmpAccountVolumeDomList.push(\r\n                        <Stack.Item styles={{ root: { width: \"100%\" } }} key={key}>\r\n                            <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"请选择至少为一个账户输入数量\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"请选择至少为一个账户输入数量\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33%)\" } }}>\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\", width: \"100%\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={\"0\"}\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack.Item>\r\n                    )\r\n                } else {\r\n                    tmpAccountVolumeDomList.push(\r\n                        <Stack.Item styles={{ root: { width: \"100%\" } }} key={key}>\r\n                            <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"请选择\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"至少一个账户\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33%)\" } }}>\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\", width: \"100%\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={\"0\"}\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack.Item>\r\n                    )\r\n\r\n                }\r\n            }\r\n            return tmpAccountVolumeDomList;\r\n        }\r\n\r\n        const accountVolumeDomList = generateAccountVolumeDom(false)\r\n\r\n        const execOrders = (direction: number, offsetFlag: number) => {\r\n            if (tradeActionStore.orderPriceType !== \"ANY\" && !this.state.confirmPrice) {\r\n                toast.error(`发单错误,请确定价格`)\r\n                return;\r\n            }\r\n\r\n            let submitFlag = false;\r\n            tradeAccountStore.selectedAccountIdSet.forEach((accountId: any) => {\r\n                const finalVolume = this.state[`CONFIRM_VOLUME_KEY_${accountId}`] ? this.state[`CONFIRM_VOLUME_KEY_${accountId}`] : tradeActionStore.volume\r\n\r\n                if (!finalVolume || finalVolume <= 0) {\r\n                    console.warn(`发单警告,数量异常，账户ID:${accountId},数量:${finalVolume}`)\r\n                } else {\r\n                    submitFlag = true;\r\n                    tradeActionStore.submitOrder(\r\n                        tradeActionStore.selectedContract,\r\n                        direction, \r\n                        offsetFlag,\r\n                        this.state.confirmPrice,\r\n                        tradeActionStore.orderPriceType,\r\n                        finalVolume, \r\n                        tradeActionStore.timeCondition,\r\n                        tradeActionStore.volumeCondition,\r\n                        tradeActionStore.hedgeFlag,\r\n                        tradeActionStore.minVolume,\r\n                        accountId, \r\n                        tradeActionStore.stopPrice,\r\n                        tradeActionStore.contingentCondition,\r\n                        uuidv4())\r\n                }\r\n            });\r\n            if (submitFlag) {\r\n                toast(\"本地信息:提交定单操作已执行\", { autoClose: 5000, type: \"info\" })\r\n            }\r\n            this.closeSubmitOrderModal()\r\n\r\n        }\r\n\r\n        const buyButtonForModal =\r\n            <Stack.Item align=\"center\" key={\"buyButtonForModal\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_Open)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n        const coverButtonForModal = [\r\n            <Stack.Item align=\"center\" key={\"coverButtonForModal0\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平昨空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_CloseYesterday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平今空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_CloseToday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>,\r\n            <Stack.Item align=\"center\" key={\"coverButtonForModal1\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_Close)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n        ]\r\n\r\n        const shortButtonForModal =\r\n            <Stack.Item align=\"center\" key={\"shortButtonForModal\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_Open)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n        const sellButtonForModal = [\r\n\r\n            <Stack.Item align=\"center\" key={'sellButtonForModal0'}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平昨多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_CloseYesterday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平今多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_CloseToday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>,\r\n            <Stack.Item align=\"center\" key={\"sellButtonForModal1\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_Close)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n        ]\r\n\r\n        const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\", paddingLeft: 5 } }}>\r\n                <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                    <Stack horizontal={true} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 0 }} styles={{ root: { width: \"calc(33% - 2px)\", borderRight: \"solid 2px rgb(25,25,25)\" } }}>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: '100%', background: \"rgb(25,25,25)\" } }} >\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', paddingTop: 5, paddingBottom: 5 } }}>\r\n                                    选项\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: '100%' } }} >\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { height: 425, width: '100%', paddingRight: 5, overflowY: 'auto' } }}>\r\n                                    <Dropdown label=\"价格类型\"\r\n                                        defaultSelectedKey={tradeActionStore.orderPriceType}\r\n                                        options={\r\n                                            [\r\n                                                { key: OrderPriceTypeEnum.OPT_LimitPrice, text: '限价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_AnyPrice, text: '市价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_FiveLevelPrice, text: '五档' },\r\n                                                { key: OrderPriceTypeEnum.OPT_BestPrice, text: '最优价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_LastPrice, text: '最新价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_LastPricePlusOneTicks, text: '最新价浮动上浮1个ticks' },\r\n                                                { key: OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks, text: '最新价浮动上浮3个ticks' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setOrderPriceType(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Dropdown label=\"自动填价\"\r\n                                        defaultSelectedKey={tradeActionStore.autoFillOrderPriceType}\r\n                                        options={\r\n                                            [\r\n                                                { key: 'LAST', text: '最新' },\r\n                                                { key: 'UPPER_LIMIT', text: '涨停' },\r\n                                                { key: 'ASK1', text: '卖一' },\r\n                                                { key: 'BID1', text: '买一' },\r\n                                                { key: 'LOWER_LIMIT', text: '跌停' },\r\n                                                { key: 'MANUAL', text: '手动' },\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setAutoFillOrderPriceType(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        label=\"价格\"\r\n                                        type=\"number\"\r\n                                        step={priceTick}\r\n                                        value={tradeActionStore.price}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setPrice(newValue)} />\r\n\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={`${tradeActionStore.volume}`}\r\n                                        label=\"数量\"\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setVolume(newValue)}\r\n                                    />\r\n                                    <Dropdown label=\"投机套保标志\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.hedgeFlag}\r\n                                        options={\r\n                                            [\r\n                                                { key: HedgeFlagEnum.HF_Speculation, text: '投机' },\r\n                                                { key: HedgeFlagEnum.HF_Arbitrage, text: '套利' },\r\n                                                { key: HedgeFlagEnum.HF_Hedge, text: '套保' },\r\n                                                { key: HedgeFlagEnum.HF_MarketMaker, text: '做市商' },\r\n                                                { key: HedgeFlagEnum.HF_SpecHedge, text: '第一腿投机第二腿套保 大商所专用' },\r\n                                                { key: HedgeFlagEnum.HF_HedgeSpec, text: '第一腿套保第二腿投机 大商所专用' }\r\n                                                \r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setHedgeFlag(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Dropdown label=\"时效类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.timeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: TimeConditionEnum.TC_GFD, text: 'GFD(当日有效)' },\r\n                                                { key: TimeConditionEnum.TC_GTC, text: 'GTC(撤销前有效)' },\r\n                                                { key: TimeConditionEnum.TC_IOC, text: 'IOC(立即成交,否则撤销)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setTimeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                    <Dropdown label=\"成交量类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.volumeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: VolumeConditionEnum.VC_AV, text: 'AV(任何数量)' },\r\n                                                { key: VolumeConditionEnum.VC_MV, text: 'MV(最小数量)' },\r\n                                                { key: VolumeConditionEnum.VC_AV, text: 'CV(全部数量)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setVolumeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={`${tradeActionStore.minVolume}`}\r\n                                        label=\"最小成交量\"\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setMinVolume(newValue)}\r\n                                    />\r\n                                    <Dropdown label=\"触发条件\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.contingentCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: ContingentConditionEnum.CC_Immediately, text: '立即' },\r\n                                                { key: ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice, text: '最新价大于等于条件价' },\r\n                                                { key: ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice, text: '最新价小于等于条件价' },\r\n                                                { key: ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice, text: '(本地)最新价大于等于条件价' },\r\n                                                { key: ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice, text: '(本地)最新价小于等于条件价' },\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setContingentCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        label=\"条件价格\"\r\n                                        type=\"number\"\r\n                                        step={priceTick}\r\n                                        defaultValue={tradeActionStore.stopPrice}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setStopPrice(newValue)} />\r\n\r\n                                    \r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n\r\n                        <Stack tokens={{ childrenGap: 5 }} styles={{ root: { width: '67%' } }}>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: '100%', background: \"rgb(25,25,25)\" } }} >\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', paddingTop: 5, paddingBottom: 5, paddingLeft: 5 } }}>\r\n                                    <Stack styles={{ root: { width: \"33%\" } }}>\r\n                                        名称\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"33%\" } }}>\r\n                                        账户ID\r\n                                    </Stack>\r\n                                    <Stack>\r\n                                        交易数量\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: '100%', height: 340, paddingLeft: 5 } }} >\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { height: '100%', width: '100%', overflowY: 'auto' } }}>\r\n                                    {accountVolumeDomList}\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 3 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"重用数量\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.reuseVolume();\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            &nbsp;\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%', paddingRight: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#a4373a\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"多\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_BUY\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n\r\n                                        <Stack styles={{ root: { width: '50%', paddingLeft: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#217346\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"空\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_SHORT\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 3 }} styles={{ root: { width: '100%' } }}>\r\n\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"重置数量\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.resetVolume();\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            &nbsp;\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%', paddingRight: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#a4373a\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"平空\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_COVER\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n                                        <Stack styles={{ root: { width: '50%', paddingLeft: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#217346\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"平多\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_SELL\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n\r\n                </Stack.Item>\r\n\r\n                <Modal\r\n                    isOpen={this.state.showSubmitOrderModal}\r\n                    isBlocking={true}\r\n                    onDismiss={() => this.closeSubmitOrderModal()}\r\n                    dragOptions={\r\n                        {\r\n                            moveMenuItemText: 'Move',\r\n                            closeMenuItemText: 'Close',\r\n                            menu: ContextualMenu\r\n                        }\r\n                    }\r\n                >\r\n                    <Stack tokens={{ childrenGap: 5, padding:20 }}>\r\n                        <Stack.Item align=\"center\" styles={{ root: { width: '100%' } }}>\r\n                            <Stack styles={{ root: { textAlign: \"center\", fontSize: FontSizes.large } }}>\r\n                                定单确认\r\n                            </Stack>\r\n                            <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { width: \"calc(50% - 5px)\" } }}>\r\n                                    {\r\n                                        tradeActionStore.selectedContract ?\r\n                                            <TooltipHost\r\n                                                calloutProps={{ gapSpace: 20 }}\r\n                                                tooltipProps={{\r\n                                                    onRenderContent: () => {\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <ul style={{ margin: 0, padding: 0 }}>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约代码:</span><span>{tradeActionStore.selectedContract.symbol}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>简称:</span><span>{tradeActionStore.selectedContract.name}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>完整名称:</span><span>{tradeActionStore.selectedContract.fullName}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[tradeActionStore.selectedContract.exchange]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[tradeActionStore.selectedContract.productClass]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{tradeActionStore.selectedContract.thirdPartyId}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[tradeActionStore.selectedContract.currency]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{tradeActionStore.selectedContract.multiplier}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{tradeActionStore.selectedContract.priceTick}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{tradeActionStore.selectedContract.lastTradeDateOrContractMonth}</span></li>\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                                delay={TooltipDelay.long}\r\n                                                directionalHint={DirectionalHint.bottomCenter}\r\n                                            >\r\n                                                <TextField style={{ color: \"rgb(220, 220, 10)\" }} className=\"trade-remind-color-important\" label=\"合约代码\" defaultValue={unifiedSymbol} disabled={true} />\r\n                                            </TooltipHost> : null\r\n                                    }\r\n                                    {\r\n                                        tradeActionStore.selectedContract ? null :\r\n                                            <TextField label=\"合约代码\" defaultValue={unifiedSymbol} disabled={true} />\r\n                                    }\r\n                                    <Dropdown label=\"价格类型\"\r\n                                        defaultSelectedKey={tradeActionStore.orderPriceType}\r\n                                        options={\r\n                                            [\r\n                                                { key: OrderPriceTypeEnum.OPT_LimitPrice, text: '限价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_AnyPrice, text: '市价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_FiveLevelPrice, text: '五档' }\r\n                                            ]\r\n                                        }\r\n\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setOrderPriceType(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        label=\"确认价格\"\r\n                                        type=\"number\"\r\n                                        step={priceTick}\r\n                                        min={0}\r\n                                        defaultValue={`${this.state.confirmPrice}`}\r\n                                        onChange={(event: any, newValue?: any) => newValue ? this.setState({ confirmPrice: newValue }) : null} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(50% - 5px)\" } }}>\r\n                                    <TextField style={{ color: \"rgb(220, 220, 10)\" }} className=\"trade-remind-color-important\" label=\"合约名称\" defaultValue={shortName} disabled={true} />\r\n                                    <Dropdown label=\"时效类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.timeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: TimeConditionEnum.TC_GFD, text: 'GFD(当日有效)' },\r\n                                                { key: TimeConditionEnum.TC_GTC, text: 'GTC(撤销前有效)' },\r\n                                                { key: TimeConditionEnum.TC_IOC, text: 'IOC(立即成交,否则撤销)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setTimeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Dropdown label=\"成交量类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.volumeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: VolumeConditionEnum.VC_AV, text: 'AV(任何数量)' },\r\n                                                { key: VolumeConditionEnum.VC_MV, text: 'MV(最小数量)' },\r\n                                                { key: VolumeConditionEnum.VC_AV, text: 'CV(全部数量)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setVolumeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack.Item>\r\n                        {generateAccountVolumeDom(true)}\r\n                        {this.state.actionType === \"ACTION_TYPE_BUY\" ? buyButtonForModal : null}\r\n                        {this.state.actionType === \"ACTION_TYPE_SELL\" ? sellButtonForModal : null}\r\n                        {this.state.actionType === \"ACTION_TYPE_SHORT\" ? shortButtonForModal : null}\r\n                        {this.state.actionType === \"ACTION_TYPE_COVER\" ? coverButtonForModal : null}\r\n                    </Stack>\r\n                </Modal>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n    closeSubmitOrderModal = () => {\r\n        const newState = {}\r\n        Object.keys(this.state).forEach(\r\n            (element: any) => {\r\n                if (`${element}`.startsWith(\"CONFIRM_VOLUME_KEY_\")) {\r\n                    newState[`PRE_${element}`] = this.state[element]\r\n                    newState[element] = undefined\r\n                }\r\n            }\r\n        )\r\n        this.setState({ showSubmitOrderModal: false, confirmPrice: null, actionType: '', ...newState })\r\n    }\r\n\r\n    openSubmitOrderModal = (actionType: string, price: number|string) => {\r\n\r\n        const { tradeActionStore, tradeAccountStore } = this.props;\r\n        if (!tradeActionStore.selectedContract) {\r\n            toast.error(\"请选择合约\");\r\n            return;\r\n        }\r\n        if (!tradeAccountStore.selectedAccountIdSet || tradeAccountStore.selectedAccountIdSet.size <= 0) {\r\n            toast.error(\"请选择至少一个账户\");\r\n            return;\r\n        }\r\n\r\n        if(!price||price === \"\"){\r\n            toast.error(\"请确定价格\");\r\n            return;\r\n        }\r\n\r\n        const newState = {}\r\n        let counter = 0;\r\n        tradeAccountStore.selectedAccountIdSet.forEach((accountId: any) => {\r\n            if (this.state[`CONFIRM_VOLUME_KEY_${accountId}`] && this.state[`CONFIRM_VOLUME_KEY_${accountId}`] !== 0) {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = this.state[`CONFIRM_VOLUME_KEY_${accountId}`]\r\n                counter += 1\r\n            } else if (tradeActionStore.volume && tradeActionStore.volume !== 0) {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = tradeActionStore.volume\r\n                counter += 1\r\n            }\r\n        });\r\n        if (counter > 0) {\r\n            tradeActionStore.setVolume(0)\r\n            this.setState({ showSubmitOrderModal: true, confirmPrice: price, \"actionType\": actionType, ...newState })\r\n        } else {\r\n            toast.error(\"请至少为一个账户输入数量\")\r\n        }\r\n    }\r\n\r\n    reuseVolume = () => {\r\n\r\n        const { tradeAccountStore } = this.props;\r\n\r\n        const newState = {}\r\n\r\n        if (!tradeAccountStore.selectedAccountIdSet || tradeAccountStore.selectedAccountIdSet.size <= 0) {\r\n            toast.error(\"请选择至少一个账户\");\r\n            return;\r\n        }\r\n\r\n        let counter = 0;\r\n        tradeAccountStore.selectedAccountIdSet.forEach((accountId: any) => {\r\n            if (this.state[`PRE_CONFIRM_VOLUME_KEY_${accountId}`]) {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = this.state[`PRE_CONFIRM_VOLUME_KEY_${accountId}`]\r\n            } else {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = 0\r\n                counter += 1\r\n            }\r\n        });\r\n\r\n        if (counter > 0) {\r\n            toast.warn(\"部分账户数量输入为0\")\r\n        }\r\n\r\n        this.setState(newState)\r\n\r\n\r\n    }\r\n\r\n    resetVolume = () => {\r\n\r\n        const { tradeActionStore } = this.props\r\n        const newState = {}\r\n\r\n        Object.keys(this.state).forEach(\r\n            (element: any) => {\r\n                if (`${element}`.startsWith(\"CONFIRM_VOLUME_KEY_\")) {\r\n                    newState[element] = undefined\r\n                }\r\n            }\r\n        )\r\n        tradeActionStore.setVolume(0)\r\n\r\n        this.setState(newState)\r\n\r\n    }\r\n\r\n}));\r\n\r\nexport default withRouter(TradeBoardPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { getNumberOfDecimalDigits, numberFormat, checkEffectiveNumber, timestampFormat } from '../../../utils';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { isNumber } from 'util';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst {ProductClassEnum, ExchangeEnum, CurrencyEnum} = xyz.redtorch.pb\r\n\r\n\r\n\r\nexport const MarketDetailsPage = inject('authenticationStore', 'tradeActionStore', 'tradeTickStore')(observer(class MarketDetailsPage extends React.Component<any> {\r\n\r\n    public state = { password: '', newPassword: '' };\r\n\r\n\r\n    public render() {\r\n\r\n        const { tradeActionStore, tradeTickStore } = this.props\r\n\r\n        const { selectedTick } = tradeTickStore\r\n\r\n        let askPrice1: number | string = \"--\";\r\n        let askPrice1ClassName = \"\";\r\n        let askVolume1 = \"--\";\r\n        let askPrice2: number | string = \"--\";\r\n        let askPrice2ClassName = \"\";\r\n        let askVolume2 = \"--\";\r\n        let askPrice3: number | string = \"--\";\r\n        let askPrice3ClassName = \"\";\r\n        let askVolume3 = \"--\";\r\n        let askPrice4: number | string = \"--\";\r\n        let askPrice4ClassName = \"\";\r\n        let askVolume4 = \"--\";\r\n        let askPrice5: number | string = \"--\";\r\n        let askPrice5ClassName = \"\";\r\n        let askVolume5 = \"--\";\r\n\r\n        let bidPrice1: number | string = \"--\";\r\n        let bidPrice1ClassName = \"\";\r\n        let bidVolume1 = \"--\";\r\n        let bidPrice2: number | string = \"--\";\r\n        let bidPrice2ClassName = \"\";\r\n        let bidVolume2 = \"--\";\r\n        let bidPrice3: number | string = \"--\";\r\n        let bidPrice3ClassName = \"\";\r\n        let bidVolume3 = \"--\";\r\n        let bidPrice4: number | string = \"--\";\r\n        let bidPrice4ClassName = \"\";\r\n        let bidVolume4 = \"--\";\r\n        let bidPrice5: number | string = \"--\";\r\n        let bidPrice5ClassName = \"\";\r\n        let bidVolume5 = \"--\"\r\n\r\n        // ------------------------\r\n\r\n        let lastPrice: number | string = \"--\";\r\n        let lastPriceClassName = \"\";\r\n        let priceDiff: number | string = \"--\";\r\n        let pctChange: number | string = \"--\";\r\n        let openPrice: number | string = \"--\";\r\n        let openPriceClassName = \"\";\r\n        let highPrice: number | string = \"--\";\r\n        let highPriceClassName = \"\";\r\n        let lowPrice: number | string = \"--\";\r\n        let lowPriceClassName = \"\";\r\n        let upperLimit: number | string = \"--\";\r\n        let lowerLimit: number | string = \"--\";\r\n        let preClosePrice: number | string = \"--\";\r\n        let preSettlePrice: number | string = \"--\";\r\n        let settlePrice: number | string = \"--\";\r\n        let settlePriceClassName = \"\";\r\n        let volume = \"--\"\r\n        let volumeDelta = \"--\"\r\n        let openInterest = \"--\"\r\n        let dayOpenInterestChange = \"--\"\r\n        let time = \"--\"\r\n\r\n        if (selectedTick) {\r\n            try {\r\n                let numberOfDecimalDigits = 6\r\n                if (tradeActionStore.selectedContract && tradeActionStore.selectedContract.priceTick && tradeActionStore.selectedContract.priceTick > 0) {\r\n                    const tmpNumberOfDecimalDigits = getNumberOfDecimalDigits(tradeActionStore.selectedContract.priceTick)\r\n                    if (tmpNumberOfDecimalDigits || tmpNumberOfDecimalDigits === 0) {\r\n                        numberOfDecimalDigits = tmpNumberOfDecimalDigits\r\n                    }\r\n                }\r\n\r\n                let preReferencePrice;\r\n                if (selectedTick.preSettlePrice && selectedTick.preSettlePrice !== 0 && selectedTick.preSettlePrice !== Number.MAX_VALUE) {\r\n                    preReferencePrice = selectedTick.preSettlePrice\r\n                } else if (selectedTick.preClosePrice && selectedTick.preClosePrice !== 0 && selectedTick.preClosePrice !== Number.MAX_VALUE) {\r\n                    preReferencePrice = selectedTick.preClosePrice\r\n                }\r\n\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 1 && selectedTick.askPrice[0] !== Number.MAX_VALUE) {\r\n                    askPrice1 = selectedTick.askPrice[0]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice1 > preReferencePrice) {\r\n                            askPrice1ClassName = \"trade-long-color\"\r\n                        } else if (askPrice1 < preReferencePrice) {\r\n                            askPrice1ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice1 = numberFormat(Number(askPrice1), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 1 && selectedTick.askVolume[0] !== Number.MAX_VALUE) {\r\n                    askVolume1 = selectedTick.askVolume[0]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 2 && selectedTick.askPrice[1] !== Number.MAX_VALUE) {\r\n                    askPrice2 = selectedTick.askPrice[1]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice2 > preReferencePrice) {\r\n                            askPrice2ClassName = \"trade-long-color\"\r\n                        } else if (askPrice2 < preReferencePrice) {\r\n                            askPrice2ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice2 = numberFormat(Number(askPrice2), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 2 && selectedTick.askVolume[1] !== Number.MAX_VALUE) {\r\n                    askVolume2 = selectedTick.askVolume[1]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 3 && selectedTick.askPrice[2] !== Number.MAX_VALUE) {\r\n                    askPrice3 = selectedTick.askPrice[2]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice3 > preReferencePrice) {\r\n                            askPrice3ClassName = \"trade-long-color\"\r\n                        } else if (askPrice3 < preReferencePrice) {\r\n                            askPrice3ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice3 = numberFormat(Number(askPrice3), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 3 && selectedTick.askVolume[2] !== Number.MAX_VALUE) {\r\n                    askVolume3 = selectedTick.askVolume[2]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 4 && selectedTick.askPrice[3] !== Number.MAX_VALUE) {\r\n                    askPrice4 = selectedTick.askPrice[3]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice4 > preReferencePrice) {\r\n                            askPrice4ClassName = \"trade-long-color\"\r\n                        } else if (askPrice4 < preReferencePrice) {\r\n                            askPrice4ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice4 = numberFormat(Number(askPrice4), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 4 && selectedTick.askVolume[3] !== Number.MAX_VALUE) {\r\n                    askVolume4 = selectedTick.askVolume[3]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 5 && selectedTick.askPrice[4] !== Number.MAX_VALUE) {\r\n                    askPrice5 = selectedTick.askPrice[4]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice5 > preReferencePrice) {\r\n                            askPrice5ClassName = \"trade-long-color\"\r\n                        } else if (askPrice5 < preReferencePrice) {\r\n                            askPrice5ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice5 = numberFormat(Number(askPrice5), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 5 && selectedTick.askVolume[4] !== Number.MAX_VALUE) {\r\n                    askVolume5 = selectedTick.askVolume[4]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 1 && selectedTick.bidPrice[0] !== Number.MAX_VALUE) {\r\n                    bidPrice1 = selectedTick.bidPrice[0]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice1 > preReferencePrice) {\r\n                            bidPrice1ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice1 < preReferencePrice) {\r\n                            bidPrice1ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice1 = numberFormat(Number(bidPrice1), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 1 && selectedTick.bidVolume[0] !== Number.MAX_VALUE) {\r\n                    bidVolume1 = selectedTick.bidVolume[0]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 2 && selectedTick.bidPrice[1] !== Number.MAX_VALUE) {\r\n                    bidPrice2 = selectedTick.bidPrice[1]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice2 > preReferencePrice) {\r\n                            bidPrice2ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice2 < preReferencePrice) {\r\n                            bidPrice2ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice2 = numberFormat(Number(bidPrice2), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 2 && selectedTick.bidVolume[1] !== Number.MAX_VALUE) {\r\n                    bidVolume2 = selectedTick.bidVolume[1]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 3 && selectedTick.bidPrice[2] !== Number.MAX_VALUE) {\r\n                    bidPrice3 = selectedTick.bidPrice[2]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice3 > preReferencePrice) {\r\n                            bidPrice3ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice3 < preReferencePrice) {\r\n                            bidPrice3ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice3 = numberFormat(Number(bidPrice3), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 3 && selectedTick.bidVolume[2] !== Number.MAX_VALUE) {\r\n                    bidVolume3 = selectedTick.bidVolume[2]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 4 && selectedTick.bidPrice[3] !== Number.MAX_VALUE) {\r\n                    bidPrice4 = selectedTick.bidPrice[3]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice4 > preReferencePrice) {\r\n                            bidPrice4ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice4 < preReferencePrice) {\r\n                            bidPrice4ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice4 = numberFormat(Number(bidPrice4), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 4 && selectedTick.bidVolume[3] !== Number.MAX_VALUE) {\r\n                    bidVolume4 = selectedTick.bidVolume[3]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 5 && selectedTick.bidPrice[4] !== Number.MAX_VALUE) {\r\n                    bidPrice5 = selectedTick.bidPrice[4]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice5 > preReferencePrice) {\r\n                            bidPrice5ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice5 < preReferencePrice) {\r\n                            bidPrice5ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice5 = numberFormat(Number(bidPrice5), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 5 && selectedTick.bidVolume[4] !== Number.MAX_VALUE) {\r\n                    bidVolume5 = selectedTick.bidVolume[4]\r\n                }\r\n                // -----------------------------\r\n\r\n\r\n                if (checkEffectiveNumber(selectedTick.lastPrice)) {\r\n                    lastPrice = selectedTick.lastPrice\r\n                    if (preReferencePrice) {\r\n                        if (lastPrice > preReferencePrice) {\r\n                            lastPriceClassName = \"trade-long-color\"\r\n                        } else if (lastPrice < preReferencePrice) {\r\n                            lastPriceClassName = \"trade-short-color\"\r\n                        }\r\n                        priceDiff = Number(lastPrice) - preReferencePrice\r\n                        pctChange = numberFormat(priceDiff / preReferencePrice * 100, 2)\r\n                        priceDiff = numberFormat(Number(priceDiff), numberOfDecimalDigits)\r\n                    }\r\n                    lastPrice = numberFormat(Number(lastPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.openPrice)) {\r\n                    openPrice = selectedTick.openPrice\r\n                    if (preReferencePrice) {\r\n                        if (openPrice > preReferencePrice) {\r\n                            openPriceClassName = \"trade-long-color\"\r\n                        } else if (openPrice < preReferencePrice) {\r\n                            openPriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    openPrice = numberFormat(Number(openPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.highPrice)) {\r\n                    highPrice = selectedTick.highPrice\r\n                    if (preReferencePrice) {\r\n                        if (highPrice > preReferencePrice) {\r\n                            highPriceClassName = \"trade-long-color\"\r\n                        } else if (highPrice < preReferencePrice) {\r\n                            highPriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    highPrice = numberFormat(Number(highPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.lowPrice)) {\r\n                    lowPrice = selectedTick.lowPrice\r\n                    if (preReferencePrice) {\r\n                        if (lowPrice > preReferencePrice) {\r\n                            lowPriceClassName = \"trade-long-color\"\r\n                        } else if (lowPrice < preReferencePrice) {\r\n                            lowPriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    lowPrice = numberFormat(Number(lowPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.settlePrice)) {\r\n                    settlePrice = selectedTick.settlePrice\r\n                    if (preReferencePrice) {\r\n                        if (settlePrice > preReferencePrice) {\r\n                            settlePriceClassName = \"trade-long-color\"\r\n                        } else if (settlePrice < preReferencePrice) {\r\n                            settlePriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    settlePrice = numberFormat(Number(settlePrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.upperLimit)) {\r\n                    upperLimit = selectedTick.upperLimit\r\n                    upperLimit = numberFormat(Number(upperLimit), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.lowerLimit)) {\r\n                    lowerLimit = selectedTick.lowerLimit\r\n                    lowerLimit = numberFormat(Number(lowerLimit), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.preClosePrice)) {\r\n                    preClosePrice = selectedTick.preClosePrice\r\n                    preClosePrice = numberFormat(Number(preClosePrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.preSettlePrice)) {\r\n                    preSettlePrice = selectedTick.preSettlePrice\r\n                    preSettlePrice = numberFormat(Number(preSettlePrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.volume)) {\r\n                    volume = selectedTick.volume\r\n                }\r\n                if (checkEffectiveNumber(selectedTick.volumeDelta)) {\r\n                    volumeDelta = selectedTick.volumeDelta\r\n                }\r\n\r\n\r\n                if (checkEffectiveNumber(selectedTick.openInterest)) {\r\n                    openInterest = selectedTick.openInterest\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.openInterest)\r\n                    && checkEffectiveNumber(selectedTick.preOpenInterest)) {\r\n                    dayOpenInterestChange = `${selectedTick.openInterest - selectedTick.preOpenInterest}`\r\n                }\r\n\r\n                if (isNumber(selectedTick.actionTimestamp)) {\r\n                    time = timestampFormat(selectedTick.actionTimestamp, \"HH:mm:ss.SSS\")\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n\r\n        }\r\n\r\n        const { selectedContract } = tradeActionStore\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { height: componentHeight, background: \"rgb(17,17,17)\", width: \"100%\", paddingTop: 2, fontSize: FontSizes.xSmall, overflowY: \"auto\" } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"100%\", textAlign: \"center\", fontSize: FontSizes.xLarge } }}>\r\n                                        {selectedContract ? selectedContract.name : <span>--</span>}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"100%\", textAlign: \"center\", fontSize: FontSizes.xLarge } }}>\r\n                                        <TooltipHost\r\n                                            calloutProps={{ gapSpace: 20 }}\r\n                                            tooltipProps={{\r\n                                                onRenderContent: () => {\r\n                                                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                                                    if (selectedContract) {\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <ul style={{ margin: 0, padding: 0 }}>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约代码:</span><span>{selectedContract.symbol}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>简称:</span><span>{selectedContract.name}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>完整名称:</span><span>{selectedContract.fullName}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[selectedContract.exchange]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[selectedContract.productClass]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{selectedContract.thirdPartyId}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[selectedContract.currency]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{selectedContract.multiplier}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{selectedContract.priceTick}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{selectedContract.lastTradeDateOrContractMonth}</span></li>\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        );\r\n                                                    } else {\r\n                                                        return (\r\n                                                            <div>无合约信息</div>\r\n                                                        )\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                            delay={TooltipDelay.zero}\r\n                                            directionalHint={DirectionalHint.bottomCenter}\r\n                                        >\r\n                                            <span style={{ cursor: \"help\" }}> {selectedContract ? selectedContract.symbol : \"--\"}</span>\r\n                                        </TooltipHost>\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖五\r\n                                            </Stack>\r\n                                    <Stack className={askPrice5ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice5\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume5\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖四\r\n                                            </Stack>\r\n                                    <Stack className={askPrice4ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice4\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume4\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖三\r\n                                            </Stack>\r\n                                    <Stack className={askPrice3ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice3\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume3\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖二\r\n                                            </Stack>\r\n                                    <Stack className={askPrice2ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice2\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume2\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3 } }}>\r\n                                        卖一\r\n                                            </Stack>\r\n                                    <Stack className={askPrice1ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            askPrice1\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            askVolume1\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3 } }}>\r\n                                        买一\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice1ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            bidPrice1\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            bidVolume1\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买二\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice2ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice2\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume2\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买三\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice3ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice3\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume3\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买四\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice4ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice4\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume4\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买五\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice5ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice5\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume5\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        最新\r\n                                            </Stack>\r\n                                    <Stack className={lastPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {lastPrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        涨跌\r\n                                            </Stack>\r\n                                    <Stack className={lastPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {pctChange}%\r\n                                            </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        现手\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {volumeDelta}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        价差\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {priceDiff}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        总手\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {volume}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        开盘\r\n                                            </Stack>\r\n                                    <Stack className={openPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {openPrice}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        持仓\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {openInterest}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        最高\r\n                                            </Stack>\r\n                                    <Stack className={highPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {highPrice}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        日增\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {dayOpenInterestChange}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        最低\r\n                                            </Stack>\r\n                                    <Stack className={lowPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {lowPrice}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        昨收\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {preClosePrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        涨停\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-long-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {upperLimit}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        昨结\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {preSettlePrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        跌停\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-short-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {lowerLimit}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"20%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        结算价\r\n                                            </Stack>\r\n                                    <Stack className={settlePriceClassName} styles={{ root: { width: \"30%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {settlePrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        时间\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {time}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(MarketDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\nimport './TradeHomePage.css';\r\nimport AccountDetailsPage from './childcomponents/AccountDetailsPage';\r\nimport PositionDetailsPage from './childcomponents/PositionDetailsPage';\r\nimport OrderDetailsPage from './childcomponents/OrderDetailsPage';\r\nimport ContractDetailsPage from './childcomponents/ContractDetailsPage';\r\nimport FavoriteContractDetailsPage from './childcomponents/FavoriteContractDetailsPage';\r\nimport TradeDetailsPage from './childcomponents/TradeDetailsPage';\r\nimport TradeBoardPage from './childcomponents/TradeBoardPage';\r\nimport MarketDetailsPage from './childcomponents/MarketDetailsPage';\r\n\r\nexport const TradeHomePage = inject('authenticationStore')(observer(class TradeHomePage extends React.Component<any> {\r\n\r\n  public state = {\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { authenticationStore } = this.props;\r\n    authenticationStore.checkLoginStatus()\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n  public render() {\r\n\r\n    return (\r\n      <Stack horizontal={true} tokens={{ childrenGap: 2 }} styles={{ root: { width: '100%' } }}>\r\n        <Stack styles={{ root: { background: \"#111111\", width: \"100%\" } }}>\r\n          <Stack.Item>\r\n            <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', borderBottom: \"2px solid rgb(25,25,25)\" } }}>\r\n              <Stack styles={{ root: { width: \"249px\", borderRight: \"1px solid rgb(102,102,102)\" } }}>\r\n                <MarketDetailsPage componentHeight={456} />\r\n              </Stack>\r\n              <Stack styles={{ root: { width: \"calc(100% - 250px)\" } }}>\r\n                <TradeBoardPage componentHeight={456} />\r\n              </Stack>\r\n            </Stack>\r\n          </Stack.Item>\r\n          <Stack.Item>\r\n            <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n              <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Pivot\r\n                  styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n                >\r\n                  <PivotItem\r\n                    headerText=\"定单\"\r\n                  >\r\n                    <OrderDetailsPage componentHeight={this.state.windowInnerHeight - 50 - 456} />\r\n                  </PivotItem>\r\n                  <PivotItem headerText=\"成交\">\r\n                    <TradeDetailsPage componentHeight={this.state.windowInnerHeight - 50 - 456} />\r\n                  </PivotItem>\r\n                </Pivot>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack.Item>\r\n        </Stack>\r\n        <Stack styles={{ root: { width: \"100%\" } }}>\r\n          <Stack.Item>\r\n            <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n              <Stack styles={{ root: { background: \"#111111\", width: \"100%\" } }}>\r\n                <Pivot\r\n                  styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n                >\r\n                  <PivotItem\r\n                    headerText=\"投资组合\"\r\n                  >\r\n                    <Stack styles={{ root: { width: \"100%\" } }}>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <AccountDetailsPage componentHeight={(this.state.windowInnerHeight - 48) / 2} />\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <PositionDetailsPage componentHeight={(this.state.windowInnerHeight - 48) / 2} />\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                    </Stack>\r\n                  </PivotItem>\r\n                  <PivotItem headerText=\"常用合约\">\r\n                    <Stack styles={{ root: { width: \"100%\" } }}>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <FavoriteContractDetailsPage componentHeight={this.state.windowInnerHeight - 50} />\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                    </Stack>\r\n                  </PivotItem>\r\n                  <PivotItem headerText=\"全部合约(缓存)\">\r\n                    <Stack styles={{ root: { width: \"100%\" } }}>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <ContractDetailsPage componentHeight={this.state.windowInnerHeight - 50} />\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                    </Stack>\r\n                  </PivotItem>\r\n                </Pivot>\r\n              </Stack>\r\n\r\n            </Stack>\r\n          </Stack.Item>\r\n        </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(TradeHomePage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\n\r\nimport './TradePage.css';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { RouteWithSubRoutes } from '../../router'\r\n\r\nexport const TradePage = inject('routingStore')(observer(class TradePage extends React.Component<any> {\r\n\r\n  public state = { selectedKey: 'Settings' };\r\n\r\n  public render() {\r\n    const { routes, location } = this.props;\r\n\r\n    let defaultSelectedKey = '';\r\n    routes.map((route: any, i: any) => {\r\n      if (location.pathname.startsWith(route.path)) {\r\n        defaultSelectedKey = route.path;\r\n      }\r\n    })\r\n\r\n    return (\r\n      <Pivot defaultSelectedKey={defaultSelectedKey} onLinkClick={this.onLinkClick} style={{ height: \"100%\" }}\r\n        styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n      >\r\n        {routes.map((route: any, i: any) => (\r\n          <PivotItem key={`PivotItemKey_${route.name}`} itemKey={route.path} headerText={route.name} style={{ height: \"calc(100% - 24px)\" }}>\r\n            <RouteWithSubRoutes {...route} />\r\n          </PivotItem>\r\n        ))}\r\n      </Pivot>\r\n    );\r\n  }\r\n\r\n  onLinkClick = (item: PivotItem|undefined): void => {\r\n    const { history } = this.props;\r\n    if(item){\r\n      history.push(item.props.itemKey)\r\n    }\r\n  };\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(TradePage)","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\n\r\nexport const TradeMobileHomePage = inject('authenticationStore')(observer(class TradeMobileHomePage extends React.Component<any> {\r\n\r\n  public state = { password: '', newPassword: '' };\r\n\r\n  public render() {\r\n    return (\r\n      <div>开发中</div>\r\n    );\r\n  }\r\n\r\n}));\r\n\r\nexport default withRouter(TradeMobileHomePage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\n\r\nimport './TradeMobilePage.css';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { RouteWithSubRoutes } from '../../router'\r\n\r\nexport const TradeMobilePage = inject('routingStore')(observer(class TradeMobilePage extends React.Component<any> {\r\n\r\n  public state = { selectedKey: 'Settings' };\r\n\r\n  public render() {\r\n    const { routes, location } = this.props;\r\n\r\n    let defaultSelectedKey = '';\r\n    routes.map((route: any, i: any) => {\r\n      if (location.pathname.startsWith(route.path)) {\r\n        defaultSelectedKey = route.path;\r\n      }\r\n    })\r\n\r\n    return (\r\n      <Pivot \r\n        defaultSelectedKey={defaultSelectedKey} onLinkClick={this.onLinkClick}\r\n        styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n      >\r\n        {routes.map((route: any, i: any) => (\r\n          <PivotItem key={`PivotItemKey_${route.name}`} itemKey={route.path} headerText={route.name}>\r\n            <RouteWithSubRoutes {...route} />\r\n          </PivotItem>\r\n        ))}\r\n      </Pivot>\r\n    );\r\n  }\r\n\r\n  onLinkClick = (item: PivotItem|undefined): void => {\r\n    const { history } = this.props;\r\n    if(item){\r\n      history.push(item.props.itemKey)\r\n    }\r\n  };\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(TradeMobilePage)","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { PrimaryButton, DefaultButton, IconButton, ActionButton, IButtonStyles } from '@fluentui/react/lib/Button';\r\nimport { IColumn, DetailsList, SelectionMode, DetailsListLayoutMode, Selection, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Dialog, DialogFooter, DialogType } from '@fluentui/react/lib/Dialog';\r\nimport { MarqueeSelection } from '@fluentui/react/lib/MarqueeSelection';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { FontSizes, mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { StickyPositionType, Sticky } from '@fluentui/react/lib/Sticky';\r\nimport { toast } from 'react-toastify';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nconst actionButtonStyles: IButtonStyles = {\r\n  root: {\r\n    fontSize: '12px',\r\n    height: 16\r\n  }\r\n}\r\n\r\nexport const HomePage = inject('authenticationStore', 'operatorStore')(observer(class HomePage extends React.Component<any> {\r\n\r\n  state = {\r\n    hiddenDeleteOperatorDialog: true,\r\n    showUpdateOperatorDescriptionModal: false,\r\n    operatorIdForUpdateDescription: null,\r\n    editOperatorDescription: \"\",\r\n    operatorIdForDelete: null,\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight,\r\n    selectedOperatorId: '',\r\n\r\n    acceptReadSpecialAccountIdInput: '',\r\n    denyReadSpecialAccountIdInput: '',\r\n    acceptTradeSpecialAccountIdInput: '',\r\n    denyTradeSpecialAccountIdInput: '',\r\n    acceptTradeSpecialUnifiedSymbolInput: '',\r\n    denyTradeSpecialUnifiedSymbolInput: '',\r\n    acceptSubscribeSpecialUnifiedSymbolInput: '',\r\n    denySubscribeSpecialUnifiedSymbolInput: '',\r\n\r\n\r\n  }\r\n\r\n\r\n  private operatorSelection: Selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      const selectionCount = this.operatorSelection.getSelectedCount();\r\n      if (selectionCount === 0) {\r\n        if (this.state.selectedOperatorId !== '') {\r\n          this.setState({ \"selectedOperatorId\": '' })\r\n        }\r\n\r\n      } else if (selectionCount > 0) {\r\n        const operator: any = this.operatorSelection.getSelection()[0]\r\n        if (this.state.selectedOperatorId !== operator.operatorId) {\r\n          this.setState({ \"selectedOperatorId\": operator.operatorId })\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  componentDidMount() {\r\n    this.props.operatorStore.getOperatorList()\r\n    this.resize()\r\n    window.addEventListener('resize', () => { this.resize() });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    // const columnProps: Partial<IStackProps> = {\r\n    //   tokens: { childrenGap: 5 },\r\n    //   styles: { root: { width: 300 } }\r\n    // };\r\n    const operatorItems = this.props.operatorStore.operatorList.slice()\r\n\r\n    let canReadAllAccounts = false\r\n    const acceptReadSpecialAccountIdList: any[] = []\r\n    const denyReadSpecialAccountIdList: any[] = []\r\n\r\n    let canTradeAllAccounts = false\r\n    const acceptTradeSpecialAccountIdList: any[] = []\r\n    const denyTradeSpecialAccountIdList: any[] = []\r\n\r\n    let canTradeAllContracts = false;\r\n    const acceptTradeSpecialUnifiedSymbolList: any[] = []\r\n    const denyTradeSpecialUnifiedSymbolList: any[] = []\r\n\r\n    let canSubscribeAllContracts = false\r\n    const acceptSubscribeSpecialUnifiedSymbolList: any[] = []\r\n    const denySubscribeSpecialUnifiedSymbolList: any[] = []\r\n\r\n\r\n    const { operatorStore } = this.props\r\n\r\n    let selectedOperator: any = null;\r\n\r\n    if (this.state.selectedOperatorId) {\r\n\r\n\r\n      if (operatorStore.operatorMap.has(this.state.selectedOperatorId)) {\r\n\r\n\r\n        selectedOperator = operatorStore.operatorMap.get(this.state.selectedOperatorId)\r\n\r\n\r\n        if (selectedOperator.canReadAllAccounts) {\r\n          canReadAllAccounts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptReadSpecialAccountIdSet) {\r\n          selectedOperator.acceptReadSpecialAccountIdSet.forEach((element: any) => {\r\n            acceptReadSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n        if (selectedOperator.denyReadSpecialAccountIdSet) {\r\n          selectedOperator.denyReadSpecialAccountIdSet.forEach((element: any) => {\r\n            denyReadSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n\r\n        if (selectedOperator.canTradeAllAccounts) {\r\n          canTradeAllAccounts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptTradeSpecialAccountIdSet) {\r\n          selectedOperator.acceptTradeSpecialAccountIdSet.forEach((element: any) => {\r\n            acceptTradeSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n\r\n        }\r\n\r\n        if (selectedOperator.denyTradeSpecialAccountIdSet) {\r\n          selectedOperator.denyTradeSpecialAccountIdSet.forEach((element: any) => {\r\n            denyTradeSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n\r\n        }\r\n\r\n\r\n        if (selectedOperator.canTradeAllContracts) {\r\n          canTradeAllContracts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptTradeSpecialUnifiedSymbolSet) {\r\n          selectedOperator.acceptTradeSpecialUnifiedSymbolSet.forEach((element: any) => {\r\n            acceptTradeSpecialUnifiedSymbolList.push({\r\n              \"unifiedSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n        if (selectedOperator.denyTradeSpecialUnifiedSymbolSet) {\r\n          selectedOperator.denyTradeSpecialUnifiedSymbolSet.forEach((element: any) => {\r\n            denyTradeSpecialUnifiedSymbolList.push({\r\n              \"unifiedSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n\r\n        if (selectedOperator.canSubscribeAllContracts) {\r\n          canSubscribeAllContracts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet) {\r\n          selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet.forEach((element: any) => {\r\n            acceptSubscribeSpecialUnifiedSymbolList.push({\r\n              \"unifiedSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n        if (selectedOperator.denySubscribeSpecialUnifiedSymbolSet) {\r\n          selectedOperator.denySubscribeSpecialUnifiedSymbolSet.forEach((element: any) => {\r\n            denySubscribeSpecialUnifiedSymbolList.push({\r\n              \"unifiedSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n      } else {\r\n        this.setState({ \"selselectedOperatorIde\": '' })\r\n      }\r\n\r\n    }\r\n\r\n\r\n    const columnLeftProps: Partial<IStackProps> = {\r\n      tokens: { childrenGap: 5 },\r\n      styles: { root: { width: 499, borderRight: \"solid 1px #383838\" } }\r\n    };\r\n\r\n    const columnRightProps: Partial<IStackProps> = {\r\n      tokens: { childrenGap: 5 },\r\n      styles: { root: { width: this.state.windowInnerWidth - 450, height: this.state.windowInnerHeight - 41, overflowY: \"auto\" } }\r\n    };\r\n\r\n    const operatorColumns: IColumn[] = [\r\n      {\r\n        key: \"operatorId\",\r\n        name: \"ID\",\r\n        minWidth: 220,\r\n        maxWidth: 220,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.operatorId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }, {\r\n        key: \"username\",\r\n        name: \"用户名\",\r\n        minWidth: 40,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.username}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }, {\r\n        key: \"description\",\r\n        name: \"描述\",\r\n        minWidth: 75,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.description}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <IconButton\r\n              menuIconProps={{ iconName: 'MoreVertical' }}\r\n              role=\"button\"\r\n              aria-haspopup={true}\r\n              aria-label=\"Show actions\"\r\n              styles={{ root: { float: 'right', height: 'inherit' } }}\r\n              menuProps={{\r\n                items: [\r\n                  {\r\n                    key: 'delete',\r\n                    text: '删除',\r\n                    disabled: item.associatedToUser,\r\n                    iconProps: {\r\n                      iconName: \"DeleteRows\"\r\n                    },\r\n                    onClick: () => {\r\n                      this.openDeleteOperatorDialog(item)\r\n                    }\r\n                  },\r\n\r\n                  {\r\n                    key: 'updateDescription',\r\n                    text: '更新描述',\r\n                    iconProps: {\r\n                      iconName: \"EditNote\"\r\n                    },\r\n                    onClick: () => {\r\n                      this.openUpdateOperatorDescriptionModal(item.operatorId, item.description)\r\n                    }\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const acceptReadSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptReadSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptReadSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.acceptReadSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denyReadSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denyReadSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.denyReadSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.denyReadSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const acceptTradeSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptTradeSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptTradeSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.acceptTradeSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denyTradeSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denyTradeSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.denyTradeSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.denyTradeSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const acceptTradeSpecialUnifiedSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"unifiedSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.unifiedSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptTradeSpecialUnifiedSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptTradeSpecialUnifiedSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.unifiedSymbol)\r\n                    selectedOperator.acceptTradeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denyTradeSpecialUnifiedSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"unifiedSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.unifiedSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denyTradeSpecialUnifiedSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.denyTradeSpecialUnifiedSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.unifiedSymbol)\r\n                    selectedOperator.denyTradeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n\r\n\r\n    const acceptSubscribeSpecialUnifiedSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"unifiedSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.unifiedSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.unifiedSymbol)\r\n                    selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denySubscribeSpecialUnifiedSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"unifiedSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.unifiedSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denySubscribeSpecialUnifiedSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.denySubscribeSpecialUnifiedSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.unifiedSymbol)\r\n                    selectedOperator.denySubscribeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const classNames = mergeStyleSets({\r\n      selectTableWrapper: {\r\n        height: this.state.windowInnerHeight - 90,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      },\r\n      childTableWrapper: {\r\n        height: 250,\r\n        position: 'relative',\r\n        maxHeight: 'inherit',\r\n        borderBottom: \"solid 1px #383838\"\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      <Stack tokens={{ childrenGap: 12, padding:20 }} styles={{ root: { width: '100%' } }}>\r\n        <Stack.Item>\r\n          <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnLeftProps}>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} styles={{ root: { width: 498, } }}>\r\n                  <Stack {...{ tokens: { childrenGap: 5 }, styles: { root: { width: 498, paddingTop: 5 } } }}>\r\n                    <MarqueeSelection selection={this.operatorSelection} isEnabled={false}>\r\n                      <div className={classNames.selectTableWrapper}>\r\n                        <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                          <DetailsList\r\n                            items={operatorItems}\r\n                            compact={true}\r\n                            columns={operatorColumns}\r\n                            selectionMode={SelectionMode.single}\r\n                            setKey=\"operatorId\"\r\n                            selection={this.operatorSelection}\r\n                            layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                            constrainMode={ConstrainMode.unconstrained}\r\n                            selectionPreservedOnEmptyClick={true}\r\n                            // data-is-scrollable={true}\r\n\r\n                            // @ts-ignore\r\n                            onRenderDetailsHeader={\r\n                              // tslint:disable-next-line:jsx-no-lambda\r\n                              (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                  <DetailsHeader\r\n                                    {...detailsHeaderProps}\r\n                                    styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                  />\r\n                                  {/* {defaultRender(detailsHeaderProps)} */}\r\n                                </Sticky>\r\n                              )}\r\n\r\n                            // @ts-ignore\r\n                            onRenderDetailsFooter={\r\n                              // tslint:disable-next-line:jsx-no-lambda\r\n                              (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                  {defaultRender(detailsFooterProps)}\r\n                                </Sticky>\r\n                              )}\r\n                          />\r\n                        </ScrollablePane>\r\n                      </div>\r\n                    </MarqueeSelection>\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增\"\r\n                      onClick={() => {\r\n                        this.createOperator()\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n            </Stack>\r\n            <Stack {...columnRightProps}>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 20 } }\r\n                  }}>\r\n\r\n                    {selectedOperator ?\r\n                      <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>操作员ID: </span><span style={{ fontSize: FontSizes.xLarge }} >{selectedOperator.operatorId}</span></div>\r\n                      : <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>操作员ID: </span><span style={{ fontSize: FontSizes.medium }} >&nbsp;</span></div>\r\n                    }\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 20 } }\r\n                  }}>\r\n\r\n                    {selectedOperator ?\r\n                      <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>用户名: </span><span style={{ fontSize: FontSizes.xLarge }} >{selectedOperator.username}</span></div>\r\n                      : <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>用户名: </span><span style={{ fontSize: FontSizes.medium }} >&nbsp;</span></div>\r\n                    }\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 20 } }\r\n                  }}>\r\n                    {selectedOperator ?\r\n                      <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>描述: </span><span style={{ fontSize: FontSizes.large }} >{selectedOperator.description}</span></div>\r\n                      : <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>描述: </span><span style={{ fontSize: FontSizes.large }} >&nbsp;</span></div>\r\n                    }\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    账户读取权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许读取所有帐户\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canReadAllAccounts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canReadAllAccounts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptReadSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={acceptReadSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptReadSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptReadSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptReadSpecialAccountIdInput && this.state.acceptReadSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptReadSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptReadSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptReadSpecialAccountIdInput)\r\n                            selectedOperator.acceptReadSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptReadSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denyReadSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={denyReadSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denyReadSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denyReadSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denyReadSpecialAccountIdInput && this.state.denyReadSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denyReadSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.denyReadSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.denyReadSpecialAccountIdInput)\r\n                            selectedOperator.denyReadSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denyReadSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderTop: \"solid 1px #383838\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    账户交易权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许交易所有帐户\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canTradeAllAccounts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canTradeAllAccounts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptTradeSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={acceptTradeSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptTradeSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptTradeSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptTradeSpecialAccountIdInput && this.state.acceptTradeSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptTradeSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptTradeSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptTradeSpecialAccountIdInput)\r\n                            selectedOperator.acceptTradeSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptTradeSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denyTradeSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={denyTradeSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denyTradeSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denyTradeSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denyTradeSpecialAccountIdInput && this.state.denyTradeSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denyTradeSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.denyTradeSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.denyTradeSpecialAccountIdInput)\r\n                            selectedOperator.denyTradeSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denyTradeSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderTop: \"solid 1px #383838\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    合约交易权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许交易所有合约\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canTradeAllContracts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canTradeAllContracts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptTradeSpecialUnifiedSymbolList}\r\n                          compact={true}\r\n                          columns={acceptTradeSpecialUnifiedSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"unifiedSymbol\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptTradeSpecialUnifiedSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptTradeSpecialUnifiedSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptTradeSpecialUnifiedSymbolInput && this.state.acceptTradeSpecialUnifiedSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptTradeSpecialUnifiedSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptTradeSpecialUnifiedSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptTradeSpecialUnifiedSymbolInput)\r\n                            selectedOperator.acceptTradeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptTradeSpecialUnifiedSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denyTradeSpecialUnifiedSymbolList}\r\n                          compact={true}\r\n                          columns={denyTradeSpecialUnifiedSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"opunifiedSymboleratorId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denyTradeSpecialUnifiedSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denyTradeSpecialUnifiedSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denyTradeSpecialUnifiedSymbolInput && this.state.denyTradeSpecialUnifiedSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denyTradeSpecialUnifiedSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.denyTradeSpecialUnifiedSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.denyTradeSpecialUnifiedSymbolInput)\r\n                            selectedOperator.denyTradeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denyTradeSpecialUnifiedSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderTop: \"solid 1px #383838\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    合约订阅权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许订阅所有合约\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canSubscribeAllContracts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canSubscribeAllContracts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptSubscribeSpecialUnifiedSymbolList}\r\n                          compact={true}\r\n                          columns={acceptSubscribeSpecialUnifiedSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"unifiedSymbol\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptSubscribeSpecialUnifiedSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptSubscribeSpecialUnifiedSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptSubscribeSpecialUnifiedSymbolInput && this.state.acceptSubscribeSpecialUnifiedSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptSubscribeSpecialUnifiedSymbolInput)\r\n                            selectedOperator.acceptSubscribeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptSubscribeSpecialUnifiedSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denySubscribeSpecialUnifiedSymbolList}\r\n                          compact={true}\r\n                          columns={denySubscribeSpecialUnifiedSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"unifiedSymbol\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denySubscribeSpecialUnifiedSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denySubscribeSpecialUnifiedSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denySubscribeSpecialUnifiedSymbolInput && this.state.denySubscribeSpecialUnifiedSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denySubscribeSpecialUnifiedSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.denySubscribeSpecialUnifiedSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.denySubscribeSpecialUnifiedSymbolInput)\r\n                            selectedOperator.denySubscribeSpecialUnifiedSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denySubscribeSpecialUnifiedSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteOperatorDialog}\r\n          onDismiss={() => this.closeDeleteOperatorDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除操作员确认',\r\n            subText: `是否删除操作员 ${this.state.operatorIdForDelete} ？此操作不可逆`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 498 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteOperatorById()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteOperatorDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateOperatorDescriptionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateOperatorDescriptionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n            <Stack.Item align=\"center\">\r\n              <div style={{ fontSize: FontSizes.medium }} >操作员ID: {this.state.operatorIdForUpdateDescription}</div>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"操作员描述\" multiline={true} resizable={true} defaultValue={this.state.editOperatorDescription ? this.state.editOperatorDescription : \"\"} onChange={(event: any, newValue?: string) => this.editOperatorDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateOperatorDescriptionByOperatorId()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateOperatorDescriptionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n      </Stack>\r\n    )\r\n  }\r\n\r\n  private resize() {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n  private createOperator() {\r\n    this.props.operatorStore.createOperator()\r\n  }\r\n\r\n\r\n  private openDeleteOperatorDialog(operator: any) {\r\n    this.setState({ operatorIdForDelete: operator.operatorId, hiddenDeleteOperatorDialog: false })\r\n  }\r\n\r\n  private deleteOperatorById() {\r\n    this.operatorSelection.setAllSelected(false)\r\n    this.props.operatorStore.deleteOperatorByOperatorId(this.state.operatorIdForDelete);\r\n    this.closeDeleteOperatorDialog();\r\n  }\r\n\r\n  private closeDeleteOperatorDialog() {\r\n    this.setState({ operatorIdForDelete: null, hiddenDeleteOperatorDialog: true })\r\n  }\r\n\r\n  private openUpdateOperatorDescriptionModal = (operatorId: number, description: string) => {\r\n    this.setState({ operatorIdForUpdateDescription: operatorId, editOperatorDescription: description, showUpdateOperatorDescriptionModal: true });\r\n  }\r\n\r\n  private closeUpdateOperatorDescriptionModal = () => {\r\n    this.setState({ showUpdateOperatorDescriptionModal: false, operatorIdForUpdateDescription: null, editOperatorDescription: '' });\r\n  }\r\n\r\n  private updateOperatorDescriptionByOperatorId = () => {\r\n    const operatorId = this.state.operatorIdForUpdateDescription\r\n    const operatorDescription = this.state.editOperatorDescription\r\n    if (this.props.operatorStore.operatorMap.has(operatorId)) {\r\n      const operator = this.props.operatorStore.operatorMap.get(operatorId)\r\n      operator.description = operatorDescription\r\n      this.props.operatorStore.saveOrUpdateOperator(operator)\r\n    } else {\r\n      toast(\"未能根据ID找到对应的操作员\", { type: 'error' })\r\n    }\r\n\r\n    this.closeUpdateOperatorDescriptionModal();\r\n  }\r\n\r\n  private editOperatorDescriptionOnChange(event: any) {\r\n    this.setState({ editOperatorDescription: event.target.value })\r\n  }\r\n\r\n\r\n}));\r\n\r\n\r\nexport default withRouter(HomePage);\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../node/pb/pb\";\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\n\r\nimport { exchangeOptions, currencyOptions, productClassOptions } from '../../utils'\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\n\r\nconst { CurrencyEnum, ExchangeEnum, ProductClassEnum, OptionsTypeEnum } = xyz.redtorch.pb\r\n\r\nexport const MarketDataRecordingPage = inject('authenticationStore', 'tradeContractStore', 'tradeActionStore', 'customizeStore', 'marketDataRecordingStore')(observer(class MarketDataRecordingPage extends React.Component<any> {\r\n\r\n    state = {\r\n        filterExchange: 9999,\r\n        filterProductClass: 9999,\r\n        filterCurrency: 9999,\r\n        filterSymbol: \"\",\r\n        filterUnderlyingSymbol: \"\",\r\n        filterThirdPartyId: \"\",\r\n        filterName: \"\",\r\n        filterLastTradeDateOrContractMonth: \"\",\r\n        windowInnerWidth: window.innerWidth,\r\n        windowInnerHeight: window.innerHeight\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resize()\r\n        window.addEventListener('resize', this.resize);\r\n        this.getContractList()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize);\r\n    }\r\n\r\n    resize = () => {\r\n        this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n    }\r\n\r\n    public getContractList = () => {\r\n        const { marketDataRecordingStore } = this.props\r\n        marketDataRecordingStore.getContractList()\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { customizeStore, tradeActionStore, marketDataRecordingStore } = this.props;\r\n\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let contractList = []\r\n        if ((this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0))\r\n            && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0))\r\n            && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0))\r\n            && (this.state.filterSymbol === \"\" || !this.state.filterSymbol)\r\n            && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth)\r\n            && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId)\r\n            && (this.state.filterName === \"\" || !this.state.filterName)\r\n            && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol)) {\r\n            contractList = marketDataRecordingStore.contractList\r\n\r\n        } else {\r\n\r\n            for (let i = 0; i < marketDataRecordingStore.contractList.length; i++) {\r\n                const contract = marketDataRecordingStore.contractList[i]\r\n\r\n                let flag = false;\r\n                flag = this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0) || contract.currency === this.state.filterCurrency\r\n\r\n                flag = flag && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0) || contract.exchange === this.state.filterExchange)\r\n\r\n                flag = flag && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0) || contract.productClass === this.state.filterProductClass)\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth || (contract.lastTradeDateOrContractMonth && `${contract.lastTradeDateOrContractMonth}`.indexOf(this.state.filterLastTradeDateOrContractMonth) !== -1))\r\n\r\n                flag = flag && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol || (contract.underlyingSymbol && `${contract.underlyingSymbol}`.indexOf(this.state.filterUnderlyingSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId || (contract.thirdPartyId && `${contract.thirdPartyId}`.indexOf(this.state.filterThirdPartyId) !== -1))\r\n\r\n                flag = flag && (this.state.filterName === \"\" || !this.state.filterName || (contract.name && `${contract.name}`.indexOf(this.state.filterName) !== -1) || (contract.fullName && `${contract.fullName}`.indexOf(this.state.filterName) !== -1))\r\n\r\n\r\n                if (flag) {\r\n                    contractList.push(contract)\r\n                }\r\n            }\r\n        }\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${this.state.windowInnerHeight - 249}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [\r\n            {\r\n                key: \"unifiedSymbol\",\r\n                name: \"统一标识\",\r\n                minWidth: 150,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.unifiedSymbol === selectedContract.unifiedSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item)\r\n                                }\r\n                            }>\r\n                                <span style={{ cursor: \"pointer\" }}>{item.unifiedSymbol}</span>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"shortName\",\r\n                name: \"简称\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.name}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"fullName\",\r\n                name: \"完整名称\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.fullName}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"action\",\r\n                name: \"操作\",\r\n                minWidth: 30,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                onRender: (item) => {\r\n                    return (\r\n                        <IconButton\r\n                            menuIconProps={{ iconName: 'MoreVertical' }}\r\n                            role=\"button\"\r\n                            aria-haspopup={true}\r\n                            aria-label=\"Show actions\"\r\n                            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                            menuProps={{\r\n                                items: [\r\n                                    {\r\n                                        key: 'deleteFavoriteContractByUnifiedSymbol',\r\n                                        text: '从行情记录中移除',\r\n                                        iconProps: {\r\n                                            iconName: \"Delete\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            marketDataRecordingStore.deleteContractByUnifiedSymbol(item.unifiedSymbol)\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'addToMarketDataRecording',\r\n                                        // disabled: true,\r\n                                        text: '加入常用',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            customizeStore.addFavoriteContractByUnifiedSymbol(item.unifiedSymbol)\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"symbol\",\r\n                name: \"代码\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.symbol}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"exchange\",\r\n                name: \"交易所\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ExchangeEnum[item.exchange]}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"productClass\",\r\n                name: \"产品类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ProductClassEnum[item.productClass]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"lastTradeDateOrContractMonth\",\r\n                name: \"合约月或最后交易日\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.lastTradeDateOrContractMonth}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"currency\",\r\n                name: \"币种\",\r\n                minWidth: 40,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{CurrencyEnum[item.currency]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"thirdPartyId\",\r\n                name: \"第三方ID\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.thirdPartyId}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"multiplier\",\r\n                name: \"合约乘数\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.multiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"priceTick\",\r\n                name: \"最小变动价位\",\r\n                minWidth: 70,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.priceTick}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"optionsType\",\r\n                name: \"期权类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    if (item.optionsType === OptionsTypeEnum.O_CallOptions) {\r\n                        return (\r\n                            <span>看涨</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_PutOptions) {\r\n                        return (\r\n                            <span>看跌</span>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <span>{item.optionsType}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingSymbol\",\r\n                name: \"基础商品代码\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingSymbol}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingMultiplier\",\r\n                name: \"基础商品乘数\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingMultiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"strikePrice\",\r\n                name: \"执行价\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.strikePrice}</span>\r\n                    );\r\n                }\r\n            }\r\n\r\n        ]\r\n\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 207, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"交易所\"\r\n                                            // styles={{ root: { width: \"90%\" } }}\r\n                                            defaultSelectedKey={this.state.filterExchange}\r\n                                            options={\r\n                                                exchangeOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterExchange: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"产品类型\"\r\n                                            defaultSelectedKey={this.state.filterProductClass}\r\n                                            options={\r\n                                                productClassOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterProductClass: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"币种\"\r\n                                            defaultSelectedKey={this.state.filterCurrency}\r\n                                            options={\r\n                                                currencyOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterCurrency: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterName} label=\"名称\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterName: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterSymbol} label=\"合约代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterUnderlyingSymbol} label=\"基础商品代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterUnderlyingSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterLastTradeDateOrContractMonth} label=\"最后交易日或合约月\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterLastTradeDateOrContractMonth: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterThirdPartyId} label=\"第三方ID\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterThirdPartyId: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        &nbsp;\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        &nbsp;\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        &nbsp;\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        <DefaultButton\r\n                                            text=\"刷新\"\r\n                                            onClick={() => {\r\n                                                this.getContractList()\r\n                                            }}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        items={contractList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"accountId\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n}));\r\n\r\nexport default withRouter(MarketDataRecordingPage)\r\n","import * as React from 'react';\r\nimport ManagementPage from './pages/management/ManagementPage'\r\n\r\nimport NodePage from './pages/management/NodePage'\r\nimport GatewayPage from './pages/management/GatewayPage'\r\nimport SettingPage from './pages/common/SettingPage'\r\nimport LoginPage from './pages/LoginPage'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport { inject } from 'mobx-react';\r\nimport UserPage from './pages/management/UserPage';\r\nimport RedirectToManagementPage from './pages/common/RedirectToManagementPage';\r\nimport RedirectToTradeMobilePage from './pages/common/RedirectToTradeMobilePage';\r\nimport RedirectToTradePage from './pages/common/RedirectToTradePage'\r\nimport TradeHomePage from './pages/trade/TradeHomePage';\r\nimport TradePage from './pages/trade/TradePage';\r\nimport { TradeMobileHomePage } from './pages/tradeMobile/TradeMobileHomePage';\r\nimport { TradeMobilePage } from './pages/tradeMobile/TradeMobilePage';\r\nimport OperatorPage from './pages/management/OperatorPage';\r\n// import LogPage from './pages/management/LogPage';\r\nimport MarketDataRecordingPage from './pages/management/MarketDataRecordingPage';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst routes = [\r\n  {\r\n    name: \"登录\",\r\n    path: \"/login\",\r\n    component: LoginPage\r\n  },\r\n  {\r\n    path: \"/trade\",\r\n    component: TradePage,\r\n    routes: [\r\n      {\r\n        name: \"交易(PC)\",\r\n        path: \"/trade/home\",\r\n        component: TradeHomePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"管理\",\r\n        path: \"/trade/redirectToManagement\",\r\n        component: RedirectToManagementPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"交易（移动端)\",\r\n        path: \"/trade/redirectToMobileTrade\",\r\n        component: RedirectToTradeMobilePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"设置\",\r\n        path: \"/trade/setting\",\r\n        component: SettingPage,\r\n        isPrivate: true\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: \"/management\",\r\n    component: ManagementPage,\r\n    routes: [\r\n      {\r\n        name: \"交易(PC)\",\r\n        path: \"/management/redirectToTrade\",\r\n        component: RedirectToTradePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"网关\",\r\n        path: \"/management/gateway\",\r\n        component: GatewayPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"节点\",\r\n        path: \"/management/node\",\r\n        component: NodePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"用户\",\r\n        path: \"/management/user\",\r\n        component: UserPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"操作员\",\r\n        path: \"/management/operator\",\r\n        component: OperatorPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"行情数据记录\",\r\n        path: \"/management/marketDataRecording\",\r\n        component: MarketDataRecordingPage,\r\n        isPrivate: true\r\n      },\r\n      // {\r\n      //   name: \"日志\",\r\n      //   path: \"/management/log\",\r\n      //   component: LogPage,\r\n      //   isPrivate: true\r\n      // },\r\n      {\r\n        name: \"设置\",\r\n        path: \"/management/setting\",\r\n        component: SettingPage,\r\n        isPrivate: true\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: \"/tradeMobile\",\r\n    component: TradeMobilePage,\r\n    routes: [\r\n      {\r\n        name: \"交易(PC)\",\r\n        path: \"/management/redirectToTrade\",\r\n        component: RedirectToTradePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"交易(移动端)\",\r\n        path: \"/tradeMobile/home\",\r\n        component: TradeMobileHomePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"设置\",\r\n        path: \"/tradeMobile/setting\",\r\n        component: SettingPage,\r\n        isPrivate: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    component: NotFoundPage\r\n  }\r\n];\r\n\r\n\r\n@inject('authenticationStore')\r\nclass RouteWithSubRoutes extends React.Component<any> {\r\n\r\n  render() {\r\n    const { authenticationStore } = this.props;\r\n    return (\r\n      <Route\r\n        path={this.props.path}\r\n        render={props => {\r\n          if (this.props.isPrivate) {\r\n            if (authenticationStore.isAuthenticated) {\r\n              return (\r\n                <this.props.component {...props} routes={this.props.routes} />\r\n              )\r\n            } else {\r\n              return (\r\n                <Redirect from=\"*\" to='/login' />\r\n              )\r\n            }\r\n          }\r\n          return (\r\n            // pass the sub-routes down to keep nesting\r\n            <this.props.component {...props} routes={this.props.routes} />\r\n          )\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport { routes, RouteWithSubRoutes }","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'mobx-react';\r\nimport { Router, Switch } from 'react-router';\r\nimport {\r\n  history,\r\n  routingStore,\r\n  authenticationStore,\r\n  nodeStore,\r\n  gatewayStore,\r\n  userStore,\r\n  tradeAccountStore,\r\n  tradeContractStore,\r\n  tradeOrderStore,\r\n  tradePositionStore,\r\n  tradeTradeStore,\r\n  tradeTickStore,\r\n  tradeActionStore,\r\n  marketDataRecordingStore,\r\n  customizeStore,\r\n  operatorStore\r\n} from './stores/storesIndex'\r\nimport { routes, RouteWithSubRoutes } from './router'\r\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './index.css';\r\nimport { loadTheme } from '@fluentui/react/lib/Styling';\r\n// import 'mobx-react-lite/batchingForReactDom'\r\n\r\n// Call it once in your app. At the root of your app is the best place\r\ntoast.configure({\r\n  autoClose: 15000,\r\n  style: { width: 400, wordBreak: \"break-all\", whiteSpace: \"pre-wrap\", zIndex: 10000000 }\r\n})\r\n\r\ninitializeIcons('../fabric/fonts/');\r\n\r\nloadTheme({\r\n  palette: {\r\n    themePrimary: '#00a0ff',\r\n    themeLighterAlt: '#00060a',\r\n    themeLighter: '#001a29',\r\n    themeLight: '#00304d',\r\n    themeTertiary: '#006199',\r\n    themeSecondary: '#008ee0',\r\n    themeDarkAlt: '#19abff',\r\n    themeDark: '#3db8ff',\r\n    themeDarker: '#70cbff',\r\n    neutralLighterAlt: '#232323',\r\n    neutralLighter: '#2c2c2c',\r\n    neutralLight: '#3b3b3b',\r\n    neutralQuaternaryAlt: '#444444',\r\n    neutralQuaternary: '#4b4b4b',\r\n    neutralTertiaryAlt: '#6a6a6a',\r\n    neutralTertiary: '#c8c8c8',\r\n    neutralSecondary: '#d0d0d0',\r\n    neutralPrimaryAlt: '#dadada',\r\n    neutralPrimary: '#ffffff',\r\n    neutralDark: '#f4f4f4',\r\n    black: '#f8f8f8',\r\n    white: '#191919',\r\n  }\r\n});\r\n\r\n\r\n// Stores\r\nconst stores = {\r\n  authenticationStore,\r\n  routingStore,\r\n  nodeStore,\r\n  gatewayStore,\r\n  userStore,\r\n  tradeAccountStore,\r\n  tradeContractStore,\r\n  tradeOrderStore,\r\n  tradePositionStore,\r\n  tradeTradeStore,\r\n  tradeTickStore,\r\n  tradeActionStore,\r\n  marketDataRecordingStore,\r\n  customizeStore,\r\n  operatorStore\r\n};\r\n\r\nReactDOM.render(\r\n  <Provider {...stores} style={{ height: \"100%\" }}>\r\n    <Router history={history}>\r\n      <Switch>\r\n        {routes.map((route, i) => (\r\n          <RouteWithSubRoutes key={i} {...route} />\r\n        ))}\r\n      </Switch>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\n","\r\n\r\nimport { xyz } from \"../../pb/pb\"\r\nimport { webSocketClientHandler } from '../websocket/webSocketClientHandler'\r\nimport { rpcClientRtnHandler } from './rpcClientRtnHandler';\r\nimport { rpcClientRspHandler } from './rpcClientRspHandler';\r\n\r\nimport * as lz4 from \"lz4js\";\r\nimport { rpcClientApi } from \"./rpcClientApi\";\r\nimport request from \"../../../request\";\r\nimport * as base64 from \"byte-base64\";\r\n\r\nconst {\r\n    DataExchangeProtocol,\r\n    RpcExceptionRsp,\r\n    RpcId,\r\n    RpcSubscribeRsp,\r\n    RpcUnsubscribeRsp,\r\n    RpcSubmitOrderRsp,\r\n    RpcCancelOrderRsp,\r\n    RpcSearchContractRsp,\r\n    RpcGetAccountListRsp,\r\n    RpcGetPositionListRsp,\r\n    RpcGetTradeListRsp,\r\n    RpcGetOrderListRsp,\r\n    RpcGetMixContractListRsp,\r\n    RpcGetTickListRsp,\r\n    RpcOrderRtn,\r\n    RpcTradeRtn,\r\n    RpcPositionRtn,\r\n    RpcAccountRtn,\r\n    RpcTickRtn,\r\n    RpcContractRtn,\r\n    RpcNoticeRtn,\r\n    RpcOrderListRtn,\r\n    RpcTradeListRtn,\r\n    RpcPositionListRtn,\r\n    RpcAccountListRtn,\r\n    RpcTickListRtn,\r\n    RpcContractListRtn\r\n} = xyz.redtorch.pb\r\n\r\nclass RpcClientProcess {\r\n\r\n    public static getInstance = (): RpcClientProcess => {\r\n        if (!RpcClientProcess.instance) {\r\n            RpcClientProcess.instance = new RpcClientProcess();\r\n        }\r\n        return RpcClientProcess.instance;\r\n    }\r\n\r\n    private static instance: RpcClientProcess;\r\n    private intervalRefreshAllDataStarted = false;\r\n    // private intervalRefreshContractDataStarted = false;\r\n    private constructor() {\r\n    }\r\n\r\n    // 定时刷新全部合约列表功能停用,对性能要求太高\r\n    // startIntervalRefreshContractData = () => {\r\n    //     this.intervalRefreshContractDataStarted = true;\r\n    //     if(webSocketClientHandler.checkConnected()){\r\n    //         rpcClientApi.asyncGetMixContractList()\r\n    //     }\r\n    //     setTimeout(this.startIntervalRefreshContractData,70*1000)\r\n\r\n    // }\r\n\r\n    private startIntervalRefreshAllData = () => {\r\n        this.intervalRefreshAllDataStarted = true;\r\n        if (webSocketClientHandler.checkConnected()) {\r\n            // 合约列表太大，单独刷新，减少刷新频率\r\n            // rpcClientApi.asyncGetMixContractList()\r\n            rpcClientApi.asyncGetAccountList()\r\n            rpcClientApi.asyncGetOrderList()\r\n            rpcClientApi.asyncGetTradeList()\r\n            rpcClientApi.asyncGetPositionList()\r\n            rpcClientApi.asyncGetTickList()\r\n        }\r\n        setTimeout(this.startIntervalRefreshAllData, 30 * 1000)\r\n\r\n    }\r\n\r\n    public onConnectd = () => {\r\n        if (!this.intervalRefreshAllDataStarted) {\r\n            this.startIntervalRefreshAllData()\r\n        }\r\n\r\n        // if(!this.intervalRefreshContractDataStarted){\r\n        //     this.startIntervalRefreshContractData()\r\n        // }\r\n    }\r\n\r\n    public processData = (data: Uint8Array) => {\r\n        let dep;\r\n        try {\r\n            dep = DataExchangeProtocol.decode(data);\r\n        } catch (error) {\r\n            console.error(\"处理DEP错误,PB解析数据发生错误\", error)\r\n            console.error(`处理DEP错误,PB解析数据发生错误,原始数据HEX:${Buffer.from(data).toString('hex')}`);\r\n            return;\r\n        }\r\n\r\n        const { rpcId, timestamp, contentType, contentBytes } = dep;\r\n\r\n        // console.info(`处理DEP记录,RPC类型:${rpcType},RPC ID:${rpcId},业务ID:${transactionId}内容类型:${contentType},时间戳:${timestamp}`);\r\n\r\n        let finalContentBytes;\r\n        if (contentType === DataExchangeProtocol.ContentType.COMPRESSED_LZ4) {\r\n            try {\r\n                finalContentBytes = lz4.decompress(contentBytes, undefined);\r\n            } catch (error) {\r\n                console.error(`处理DEP异常,RPC ID:${rpcId},时间戳:${timestamp},无法使用LZ4正确解析报文内容`)\r\n                return;\r\n            }\r\n        } else if (contentType === DataExchangeProtocol.ContentType.ROUTINE) {\r\n            finalContentBytes = contentBytes\r\n        } else {\r\n            console.error(`处理DEP错误,RPC ID:${rpcId},时间戳:${timestamp},不支持的报文类型`)\r\n            return;\r\n        }\r\n        if (!finalContentBytes || finalContentBytes.length <= 0) {\r\n            console.error(`处理DEP错误,RPC ID:${rpcId},时间戳:${timestamp},报文长度错误`)\r\n            return;\r\n        }\r\n\r\n        this.doCoreRpc(rpcId, finalContentBytes, timestamp);\r\n    }\r\n\r\n    private doCoreRpc = (rpcId: number, contentBytes: any, timestamp: number | Long) => {\r\n\r\n        let transactionId: string | null | undefined = \"\";\r\n        switch (rpcId) {\r\n            case RpcId.UNKNOWN_RPC_ID: {\r\n                console.log(`处理RPC,RPC ID:${rpcId}`);\r\n                break;\r\n            }\r\n            case RpcId.SUBSCRIBE_RSP: {\r\n                try {\r\n                    const rpcSubscribeRsp = RpcSubscribeRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcSubscribeRsp.commonRsp);\r\n                    transactionId = rpcSubscribeRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onSubscribeRsp(rpcSubscribeRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:SUBSCRIBE_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.UNSUBSCRIBE_RSP: {\r\n                try {\r\n                    const rpcUnsubscribeRsp = RpcUnsubscribeRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcUnsubscribeRsp.commonRsp);\r\n                    transactionId = rpcUnsubscribeRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onUnsubscribeRsp(rpcUnsubscribeRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:UNSUBSCRIBE_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.SUBMIT_ORDER_RSP: {\r\n                try {\r\n                    const rpcSubmitOrderRsp = RpcSubmitOrderRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcSubmitOrderRsp.commonRsp);\r\n                    transactionId = rpcSubmitOrderRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onSubmitOrderRsp(rpcSubmitOrderRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:SUBMIT_ORDER_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.CANCEL_ORDER_RSP: {\r\n                try {\r\n                    const rpcCancelOrderRsp = RpcCancelOrderRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcCancelOrderRsp.commonRsp);\r\n                    transactionId = rpcCancelOrderRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onCancelOrderRsp(rpcCancelOrderRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:CANCEL_ORDER_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.SEARCH_CONTRACT_RSP: {\r\n                try {\r\n                    const rpcSearchContractRsp = RpcSearchContractRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcSearchContractRsp.commonRsp);\r\n                    transactionId = rpcSearchContractRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onCancelOrderRsp(rpcSearchContractRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:SEARCH_CONTRACT_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_ACCOUNT_LIST_RSP: {\r\n                try {\r\n                    const rpcGetAccountListRsp = RpcGetAccountListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetAccountListRsp.commonRsp);\r\n                    transactionId = rpcGetAccountListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetAccountListRsp(rpcGetAccountListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_ACCOUNT_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_MIX_CONTRACT_LIST_RSP: {\r\n                try {\r\n                    const rpcGetMixContractListRsp = RpcGetMixContractListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetMixContractListRsp.commonRsp);\r\n                    transactionId = rpcGetMixContractListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetMixContractListRsp(rpcGetMixContractListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_MIX_CONTRACT_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_POSITION_LIST_RSP: {\r\n                try {\r\n                    const rpcGetPositionListRsp = RpcGetPositionListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetPositionListRsp.commonRsp);\r\n                    transactionId = rpcGetPositionListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetPositionListRsp(rpcGetPositionListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_POSITION_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_TRADE_LIST_RSP: {\r\n                try {\r\n                    const rpcGetTradeListRsp = RpcGetTradeListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetTradeListRsp.commonRsp);\r\n                    transactionId = rpcGetTradeListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetTradeListRsp(rpcGetTradeListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_TRADE_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_ORDER_LIST_RSP: {\r\n                try {\r\n                    const rpcGetOrderListRsp = RpcGetOrderListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetOrderListRsp.commonRsp);\r\n                    transactionId = rpcGetOrderListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetOrderListRsp(rpcGetOrderListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_ORDER_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_TICK_LIST_RSP: {\r\n                try {\r\n                    const rpcGetTickListRsp = RpcGetTickListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetTickListRsp.commonRsp);\r\n                    transactionId = rpcGetTickListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetTickListRsp(rpcGetTickListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_TICK_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            // -------------------------------------------------------------------------------\r\n            case RpcId.EXCEPTION_RSP: {\r\n                try {\r\n                    const rpcExceptionRsp = RpcExceptionRsp.decode(contentBytes);\r\n                    rpcClientRspHandler.onExceptionRsp(rpcExceptionRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:EXCEPTION_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.ORDER_RTN: {\r\n                try {\r\n                    const rpcOrderRtn = RpcOrderRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onOrderRtn(rpcOrderRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ORDER_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TRADE_RTN: {\r\n                try {\r\n                    const rpcTradeRtn = RpcTradeRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTradeRtn(rpcTradeRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TRADE_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.POSITION_RTN: {\r\n                try {\r\n                    const rpcPositionRtn = RpcPositionRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onPositionRtn(rpcPositionRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:POSITION_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.ACCOUNT_RTN: {\r\n                try {\r\n                    const rpcAccountRtn = RpcAccountRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onAccountRtn(rpcAccountRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ACCOUNT_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.CONTRACT_RTN: {\r\n                try {\r\n                    const rpcContractRtn = RpcContractRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onContractRtn(rpcContractRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:CONTRACT_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TICK_RTN: {\r\n                try {\r\n                    const rpcTickRtn = RpcTickRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTickRtn(rpcTickRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TICK_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.ORDER_LIST_RTN: {\r\n                try {\r\n                    const rpcOrderListRtn = RpcOrderListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onOrderListRtn(rpcOrderListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ORDER_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TRADE_LIST_RTN: {\r\n                try {\r\n                    const rpcTradeListRtn = RpcTradeListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTradeListRtn(rpcTradeListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TRADE_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.POSITION_LIST_RTN: {\r\n                try {\r\n                    const rpcPositionListRtn = RpcPositionListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onPositionListRtn(rpcPositionListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:POSITION_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.ACCOUNT_LIST_RTN: {\r\n                try {\r\n                    const rpcAccountListRtn = RpcAccountListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onAccountListRtn(rpcAccountListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ACCOUNT_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.CONTRACT_LIST_RTN: {\r\n                try {\r\n                    const rpcContractListRtn = RpcContractListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onContractListRtn(rpcContractListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:CONTRACT_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TICK_LIST_RTN: {\r\n                try {\r\n                    const rpcTickListRtn = RpcTickListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTickListRtn(rpcTickListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TICK_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.NOTICE_RTN: {\r\n                try {\r\n                    const rpcNoticeRtn = RpcNoticeRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onNoticeRtn(rpcNoticeRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:NOTICE_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                console.error(`处理RPC错误,RPC ID:${rpcId}不支持此功能`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // HTTP\r\n    public sendAsyncHttpRpc = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n\r\n        const data = this.generateRpcDep(rpcId, transactionId, content);\r\n        if (data) {\r\n\r\n            request('/api/rpc', {\r\n                method: 'POST',\r\n                data: {\r\n                    voData: base64.bytesToBase64(data)\r\n                }\r\n            }).then((res: any) => {\r\n                if (res) {\r\n                    if (res.status) {\r\n                        if (res.voData) {\r\n                            const resData = base64.base64ToBytes(res.voData)\r\n                            this.processData(resData)\r\n                        }\r\n                    } else {\r\n                        console.error(`发送HTTP RPC错误,业务ID:${transactionId},RPC ID:${rpcId}`)\r\n                    }\r\n                }\r\n            }).catch((err: any) => {\r\n                console.log(err);\r\n            });\r\n        }\r\n        return false;\r\n\r\n\r\n\r\n    }\r\n\r\n    public sendRpc = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n\r\n        const data = this.generateRpcDep(rpcId, transactionId, content);\r\n        if (data) {\r\n            if (!webSocketClientHandler.sendData(data)) {\r\n                console.error(`发送RPC错误,业务ID:${transactionId},RPC ID:${rpcId}`)\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private generateRpcDep = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n        if (content.length > 10240) {\r\n            return this.generateLz4RpcDep(rpcId, transactionId, content);\r\n        } else {\r\n            return this.generateRoutineRpcDep(rpcId, transactionId, content)\r\n        }\r\n    }\r\n\r\n    private generateLz4RpcDep = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n        let encodeContent;\r\n        try {\r\n            encodeContent = lz4.compress(content, undefined)\r\n        } catch (error) {\r\n            console.error(`发送RPC错误,压缩错误,业务ID:${transactionId},RPC ID:${rpcId}`, error)\r\n            return null;\r\n        }\r\n\r\n        const dep = new DataExchangeProtocol();\r\n        dep.contentType = DataExchangeProtocol.ContentType.COMPRESSED_LZ4;\r\n        dep.rpcId = rpcId;\r\n        dep.timestamp = Date.now();\r\n        dep.contentBytes = encodeContent;\r\n\r\n        return DataExchangeProtocol.encode(dep).finish()\r\n    }\r\n\r\n    private generateRoutineRpcDep = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n        const dep = new DataExchangeProtocol();\r\n        dep.contentType = DataExchangeProtocol.ContentType.ROUTINE\r\n        dep.rpcId = rpcId\r\n        dep.timestamp = Date.now()\r\n        dep.contentBytes = content\r\n\r\n        return DataExchangeProtocol.encode(dep).finish()\r\n    }\r\n\r\n    private checkCommonRsp = (commonRsp: xyz.redtorch.pb.ICommonRspField | null | undefined) => {\r\n        if (!commonRsp) {\r\n            console.error(\"参数commonRsp缺失\");\r\n            throw new Error(\"参数commonRsp缺失\");\r\n        }\r\n\r\n        if (!commonRsp.transactionId || commonRsp.transactionId === \"\") {\r\n            console.error(\"参数transactionId缺失\");\r\n            throw new Error(\"参数transactionId缺失\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst rpcClientProcess = RpcClientProcess.getInstance()\r\n\r\nexport { rpcClientProcess };","import { xyz } from \"../../pb/pb\";\r\nimport { tradeOrderStore, tradeTradeStore, tradeAccountStore, tradePositionStore, tradeContractStore, tradeTickStore } from \"../../../stores/storesIndex\";\r\nimport { toast } from 'react-toastify';\r\nimport { timestampFormat } from \"../../../utils\";\r\n\r\nconst {\r\n    CommonStatusEnum\r\n} = xyz.redtorch.pb\r\n\r\nclass RpcClientRtnHandler {\r\n\r\n    public static getInstance(): RpcClientRtnHandler {\r\n        if (!RpcClientRtnHandler.instance) {\r\n            RpcClientRtnHandler.instance = new RpcClientRtnHandler();\r\n        }\r\n        return RpcClientRtnHandler.instance;\r\n    }\r\n\r\n    private static instance: RpcClientRtnHandler;\r\n    private constructor() {\r\n    }\r\n\r\n    public onOrderRtn = (rpcOrderRtn: xyz.redtorch.pb.IRpcOrderRtn) => {\r\n        if (rpcOrderRtn.order) {\r\n            tradeOrderStore.storeOrder(rpcOrderRtn.order)\r\n        }\r\n    }\r\n\r\n    public onTradeRtn = (rpcTradeRtn: xyz.redtorch.pb.IRpcTradeRtn) => {\r\n        if (rpcTradeRtn.trade) {\r\n            tradeTradeStore.storeTrade(rpcTradeRtn.trade)\r\n        }\r\n    }\r\n\r\n    public onContractRtn = (rpcContractRtn: xyz.redtorch.pb.IRpcContractRtn) => {\r\n        if (rpcContractRtn.contract) {\r\n            tradeContractStore.storeContract(rpcContractRtn.contract)\r\n        }\r\n    }\r\n\r\n    public onPositionRtn = (rpcPositionRtn: xyz.redtorch.pb.IRpcPositionRtn) => {\r\n        if (rpcPositionRtn.position) {\r\n            tradePositionStore.storePosition(rpcPositionRtn.position)\r\n        }\r\n    }\r\n\r\n    public onAccountRtn = (rpcAccountRtn: xyz.redtorch.pb.IRpcAccountRtn) => {\r\n        if (rpcAccountRtn.account) {\r\n            tradeAccountStore.storeAccount(rpcAccountRtn.account)\r\n        }\r\n    }\r\n\r\n    public onTickRtn = (rpcTickRtn: xyz.redtorch.pb.RpcTickRtn) => {\r\n        if (rpcTickRtn.tick) {\r\n            tradeTickStore.storeTick(rpcTickRtn.tick)\r\n        }\r\n\r\n    }\r\n\r\n    public onOrderListRtn = (rpcOrderListRtn: xyz.redtorch.pb.IRpcOrderListRtn) => {\r\n        if (rpcOrderListRtn.order) {\r\n            tradeOrderStore.storeOrderList(rpcOrderListRtn.order)\r\n        }\r\n    }\r\n\r\n    public onTradeListRtn = (rpcTradeListRtn: xyz.redtorch.pb.IRpcTradeListRtn) => {\r\n        if (rpcTradeListRtn.trade) {\r\n            tradeTradeStore.storeTradeList(rpcTradeListRtn.trade)\r\n        }\r\n    }\r\n\r\n    public onContractListRtn = (rpcContractListRtn: xyz.redtorch.pb.IRpcContractListRtn) => {\r\n        if (rpcContractListRtn.contract) {\r\n            tradeContractStore.storeContractList(rpcContractListRtn.contract)\r\n        }\r\n    }\r\n\r\n    public onPositionListRtn = (rpcPositionListRtn: xyz.redtorch.pb.IRpcPositionListRtn) => {\r\n        if (rpcPositionListRtn.position) {\r\n            tradePositionStore.storePositionList(rpcPositionListRtn.position)\r\n        }\r\n    }\r\n\r\n    public onAccountListRtn = (rpcAccountListRtn: xyz.redtorch.pb.IRpcAccountListRtn) => {\r\n        if (rpcAccountListRtn.account) {\r\n            tradeAccountStore.storeAccountList(rpcAccountListRtn.account)\r\n        }\r\n    }\r\n\r\n    public onTickListRtn = (rpcTickListRtn: xyz.redtorch.pb.RpcTickListRtn) => {\r\n        if (rpcTickListRtn.tick) {\r\n            tradeTickStore.storeTick(rpcTickListRtn.tick)\r\n        }\r\n    }\r\n\r\n    public onNoticeRtn = (rpcNoticeRtn: xyz.redtorch.pb.RpcNoticeRtn) => {\r\n        // 检查notice,以免编译器报错\r\n        if (rpcNoticeRtn.notice) {\r\n            const commonStatus = rpcNoticeRtn.notice.status\r\n            let timestamp: any = 0;\r\n            if (rpcNoticeRtn.notice.timestamp) {\r\n                timestamp = rpcNoticeRtn.notice.timestamp\r\n            }\r\n            if (commonStatus === CommonStatusEnum.COMS_INFO) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: 8000, type: \"success\" })\r\n                console.log(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            } else if (commonStatus === CommonStatusEnum.COMS_WARN) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: false, type: \"warning\" })\r\n                console.warn(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            } else if (commonStatus === CommonStatusEnum.COMS_ERROR) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: false, type: \"error\" })\r\n                console.error(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            } else if (commonStatus === CommonStatusEnum.COMS_SUCCESS) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: 5000, type: \"success\" })\r\n                console.log(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            }\r\n        }\r\n    }\r\n}\r\nconst rpcClientRtnHandler = RpcClientRtnHandler.getInstance()\r\n\r\nexport { rpcClientRtnHandler };","import { xyz } from \"../../pb/pb\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { tradeAccountStore, tradeContractStore, tradeOrderStore, tradePositionStore, tradeTradeStore, tradeTickStore } from \"../../../stores/storesIndex\";\r\n\r\nclass RpcClientRspHandler {\r\n\r\n    public static getInstance = (): RpcClientRspHandler => {\r\n        if (!RpcClientRspHandler.instance) {\r\n            RpcClientRspHandler.instance = new RpcClientRspHandler();\r\n        }\r\n        return RpcClientRspHandler.instance;\r\n    }\r\n\r\n    private static instance: RpcClientRspHandler;\r\n    private constructor() {\r\n    }\r\n\r\n\r\n    public onSubscribeRsp = (rpcSubscribeRsp: xyz.redtorch.pb.IRpcSubscribeRsp) => {\r\n        const commonRsp = rpcSubscribeRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`订阅完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onUnsubscribeRsp = (rpcUnsubscribeRsp: xyz.redtorch.pb.IRpcUnsubscribeRsp) => {\r\n        const commonRsp = rpcUnsubscribeRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`取消订阅完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`取消订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`取消订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onSubmitOrderRsp = (rpcSubmitOrderRsp: xyz.redtorch.pb.IRpcSubmitOrderRsp) => {\r\n        const commonRsp = rpcSubmitOrderRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`提交定单完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`提交定单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`提交订单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public onCancelOrderRsp = (rpcCancelOrderRsp: xyz.redtorch.pb.IRpcCancelOrderRsp) => {\r\n        const commonRsp = rpcCancelOrderRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`撤销定单完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`撤销定单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`撤销定单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onSearchContractRsp = (rpcSearchContractRsp: xyz.redtorch.pb.IRpcSearchContractRsp) => {\r\n        const commonRsp = rpcSearchContractRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`搜寻合约完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`搜寻合约错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`搜寻合约错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onGetAccountListRsp = (rpcGetAccountListRsp: xyz.redtorch.pb.RpcGetAccountListRsp) => {\r\n        const commonRsp = rpcGetAccountListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                const accountListlength = rpcGetAccountListRsp.account.length\r\n                console.log(`获取账户列表完成,业务ID:${rpcTransactionId},共计${accountListlength}条数据`);\r\n                tradeAccountStore.clearAndStoreAccountList(rpcGetAccountListRsp.account);\r\n            } else {\r\n                console.error(`获取账户列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取账户列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onGetMixContractListRsp = (rpcGetMixContractListRsp: xyz.redtorch.pb.RpcGetMixContractListRsp) => {\r\n        const commonRsp = rpcGetMixContractListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取混合合约列表完成,业务ID:${rpcTransactionId},共计${rpcGetMixContractListRsp.contract.length}条数据`);\r\n                // const mixContractList: any[] = []\r\n                // for (let i = 0; i < rpcGetMixContractListRsp.contract.length; i++) {\r\n                //     const contract = rpcGetMixContractListRsp.contract[i];\r\n                //     mixContractList.push(ContractField.toObject(contract as xyz.redtorch.pb.ContractField, {\r\n                //         enums: String,\r\n                //         longs: String,\r\n                //         defaults: true,\r\n                //         arrays: true,\r\n                //         objects: true\r\n                //     }))\r\n                // }\r\n                tradeContractStore.clearAndStoreContractList(rpcGetMixContractListRsp.contract);\r\n            } else {\r\n                console.error(`获取混合列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取混合列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onGetPositionListRsp = (rpcGetPositionListRsp: xyz.redtorch.pb.RpcGetPositionListRsp) => {\r\n        const commonRsp = rpcGetPositionListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取持仓列表完成,业务ID:${rpcTransactionId},共计${rpcGetPositionListRsp.position.length}条数据`);\r\n                tradePositionStore.clearAndStorePositionList(rpcGetPositionListRsp.position);\r\n            } else {\r\n                console.error(`获取持仓列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取持仓列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onGetOrderListRsp = (rpcGetOrderListRsp: xyz.redtorch.pb.RpcGetOrderListRsp) => {\r\n        const commonRsp = rpcGetOrderListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取委托列表完成,业务ID:${rpcTransactionId},共计${rpcGetOrderListRsp.order.length}条数据`);\r\n                tradeOrderStore.clearAndStoreOrderList(rpcGetOrderListRsp.order);\r\n            } else {\r\n                console.error(`获取委托列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取委托列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onGetTradeListRsp = (rpcGetTradeListRsp: xyz.redtorch.pb.RpcGetTradeListRsp) => {\r\n        const commonRsp = rpcGetTradeListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取成交列表完成,业务ID:${rpcTransactionId},共计${rpcGetTradeListRsp.trade.length}条数据`);\r\n                tradeTradeStore.clearAndStoreTradeList(rpcGetTradeListRsp.trade);\r\n            } else {\r\n                console.error(`获取成交列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取成交列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onGetTickListRsp = (rpcGetTickListRsp: xyz.redtorch.pb.RpcGetTickListRsp) => {\r\n        const commonRsp = rpcGetTickListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取Tick列表完成,业务ID:${rpcTransactionId},共计${rpcGetTickListRsp.tick.length}条数据`);\r\n                tradeTickStore.clearAndStoreTickList(rpcGetTickListRsp.tick);\r\n            } else {\r\n                console.error(`获取Tick列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取Tick列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onExceptionRsp = (rpcExceptionRsp: xyz.redtorch.pb.IRpcExceptionRsp) => {\r\n        toast(`接收到异常回报,异常信息:${rpcExceptionRsp.info}`, { type: \"error\" });\r\n        if (rpcExceptionRsp.originalTransactionId && rpcExceptionRsp.originalTransactionId !== \"\") {\r\n            const transactionId = rpcExceptionRsp.originalTransactionId;\r\n            console.error(`接收到异常回报,业务ID:${transactionId},异常信息:${rpcExceptionRsp.info}`);\r\n            toast(`接收到异常回报,业务ID:${transactionId},异常信息:${rpcExceptionRsp.info}`, { type: \"error\", autoClose: false })\r\n        } else {\r\n            console.error(`接收到未知业务ID的异常回报,异常信息:${rpcExceptionRsp.info}`);\r\n            toast(`接收到异常回报,异常信息:${rpcExceptionRsp.info}`, { type: \"error\", autoClose: false })\r\n        }\r\n    }\r\n}\r\n\r\nconst rpcClientRspHandler = RpcClientRspHandler.getInstance()\r\n\r\nexport { rpcClientRspHandler };","\r\nimport { IDatePickerStrings } from '@fluentui/react/lib/DatePicker';\r\nimport { xyz } from './node/pb/pb'\r\n\r\nconst hostNamePattern = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/\r\n\r\nconst ipv4PattenPattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\r\n\r\nconst portPattern = /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/\r\n\r\nconst normalIntegerPattern = /^\\+?(0|[1-9]\\d*)$/\r\n\r\n\r\nconst numberFormat = (value: number, decimals: number, comma?: boolean) => {\r\n\r\n    try {\r\n        if (value === undefined) {\r\n            return \"undefined\";\r\n        } else if (Number.isNaN(value)) {\r\n            return \"NA\";\r\n        } else {\r\n            if (Math.abs(value) > 10000000000) {\r\n                return value.toExponential(decimals)\r\n            }\r\n        }\r\n        const result = value.toFixed(decimals);\r\n        if (comma) {\r\n            const reg = result.indexOf(\".\") > -1 ? /(\\d)(?=(\\d{3})+\\.)/g : /(\\d)(?=(?:\\d{3})+$)/g;\r\n            return result.replace(reg, \"$1,\")\r\n        } else {\r\n            return result\r\n        }\r\n    } catch (error) {\r\n        console.log(\"格式化数字发生错误\", error)\r\n        return \"ERROR\"\r\n    }\r\n\r\n}\r\n\r\nconst leftZeroPad = (val: any, minLength: number) => {\r\n    try {\r\n        let newValue = val;\r\n        if (typeof (newValue) !== \"string\") {\r\n            newValue = String(val);\r\n        }\r\n        if (minLength <= newValue.length) {\r\n            return newValue\r\n        }\r\n        return (\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\".substring(0, minLength - newValue.length)) + newValue;\r\n    } catch (error) {\r\n        console.error(\"补齐长度发生错误\", error)\r\n        throw error\r\n    }\r\n}\r\n\r\nconst formatDate = (date: Date, fmt: string) => {\r\n    if (!date) {\r\n        return ''\r\n    }\r\n\r\n    let result = fmt;\r\n    try {\r\n        if (/(y+)/.test(result)) {\r\n            result = result.replace(RegExp.$1, (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\r\n        }\r\n        const o = {\r\n            'M+': date.getMonth() + 1,\r\n            'd+': date.getDate(),\r\n            'H+': date.getHours(),\r\n            'm+': date.getMinutes(),\r\n            's+': date.getSeconds(),\r\n            'S+': date.getMilliseconds()\r\n        }\r\n\r\n        const keyList = Object.keys(o)\r\n        for (let i = 0; i < keyList.length; i++) {\r\n            const k = keyList[i]\r\n            if (new RegExp(`(${k})`).test(result)) {\r\n                const str = `${o[k]}`;\r\n                if (k === 'S+') {\r\n                    result = result.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : leftZeroPad(str, 3));\r\n                } else {\r\n                    result = result.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : leftZeroPad(str, 2));\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(\"格式化时间发生错误\", error)\r\n        result = date.toISOString()\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n\r\nconst timestampFormat = (timestamp?: number | null, formatStr?: string) => {\r\n    if (!timestamp) {\r\n        return ''\r\n    }\r\n    try {\r\n        const date = new Date(timestamp);\r\n        if (formatStr) {\r\n            return formatDate(date, formatStr)\r\n        }\r\n        return formatDate(date, \"yyyy-MM-dd HH:mm:ss.SSS\")\r\n    } catch (error) {\r\n        console.error(\"时间转换错误\", error)\r\n        return 'ERROR'\r\n    }\r\n};\r\n\r\n\r\nconst roundWithStep = (value: number, step: number) => {\r\n    try {\r\n        let tmpStep = step;\r\n        if (!step) {\r\n            tmpStep = 1.0\r\n        }\r\n        const inv = 1.0 / tmpStep;\r\n        return Math.round(value * inv) / inv;\r\n    } catch (error) {\r\n        console.error(\"格式化到最小变动价位发生错误\", error)\r\n        return 0\r\n    }\r\n\r\n}\r\n\r\nconst deepCopy = (o: any): any => {\r\n    if (o instanceof Array) {  // 先判断Array\r\n        const n = [];\r\n        for (let i = 0; i < o.length; ++i) {\r\n            n[i] = deepCopy(o[i]);\r\n        }\r\n        return n;\r\n\r\n    } else if (o instanceof Object) {\r\n        const n = {}\r\n        for (const i in o) {\r\n            if (i) {\r\n                n[i] = deepCopy(o[i]);\r\n            }\r\n        }\r\n        return n;\r\n    } else {\r\n        return o;\r\n    }\r\n}\r\n\r\nconst getNumberOfDecimalDigits = (value: number) => {\r\n    try {\r\n\r\n        let x = String(value).indexOf('.');\r\n        if (x === -1) {\r\n            return 0\r\n        } else {\r\n            x = x + 1\r\n        }\r\n        const y = String(value).length - x; // 小数的位数\r\n        if (y > 0) {\r\n            return y\r\n        } else {\r\n            return 0\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取小数位数发生错误\")\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nconst checkEffectiveNumber = (value: any): boolean => {\r\n    if (value === 0 || (value && value !== Number.MAX_VALUE)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n// const isDevEnv = process.env.NODE_ENV === \"development\"\r\nconst isDevEnv = false\r\n\r\n\r\nconst dayPickerStrings: IDatePickerStrings = {\r\n    months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\r\n\r\n    shortMonths: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],\r\n\r\n    days: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],\r\n\r\n    shortDays: ['日', '一', '二', '三', '四', '五', '六'],\r\n\r\n    goToToday: '今日',\r\n    prevMonthAriaLabel: '上个月',\r\n    nextMonthAriaLabel: '下个月',\r\n    prevYearAriaLabel: '上一年',\r\n    nextYearAriaLabel: '下一年',\r\n    closeButtonAriaLabel: '关闭'\r\n};\r\n\r\nconst { ExchangeEnum, CurrencyEnum, ProductClassEnum } = xyz.redtorch.pb\r\n\r\nconst exchangeOptions: any[] = []\r\nexchangeOptions.push({\r\n    key: 9999,\r\n    text: '全部'\r\n})\r\nObject.keys(ExchangeEnum).forEach(\r\n    (element: any) => {\r\n        exchangeOptions.push({\r\n            key: ExchangeEnum[element],\r\n            text: element\r\n        })\r\n    }\r\n)\r\n\r\nconst currencyOptions: any[] = []\r\ncurrencyOptions.push({\r\n    key: 9999,\r\n    text: '全部'\r\n})\r\nObject.keys(CurrencyEnum).forEach(\r\n    (element: any) => {\r\n        currencyOptions.push({\r\n            key: CurrencyEnum[element],\r\n            text: element\r\n        })\r\n    }\r\n)\r\n\r\nconst productClassOptions: any[] = []\r\nproductClassOptions.push({\r\n    key: 9999,\r\n    text: '全部'\r\n})\r\nObject.keys(ProductClassEnum).forEach(\r\n    (element: any) => {\r\n        productClassOptions.push({\r\n            key: ProductClassEnum[element],\r\n            text: element\r\n        })\r\n    }\r\n)\r\n\r\nexport {\r\n    hostNamePattern,\r\n    ipv4PattenPattern,\r\n    portPattern,\r\n    normalIntegerPattern,\r\n    numberFormat,\r\n    leftZeroPad,\r\n    timestampFormat,\r\n    roundWithStep,\r\n    deepCopy,\r\n    isDevEnv,\r\n    dayPickerStrings,\r\n    getNumberOfDecimalDigits,\r\n    checkEffectiveNumber,\r\n    productClassOptions,\r\n    currencyOptions,\r\n    exchangeOptions\r\n}","import { rpcClientProcess } from '../service/rpcClientProcess'\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nclass WebSocketClientHandler {\r\n\r\n    public static STATUS_DISCONNECTED = 0;\r\n    public static STATUS_CONNECTED = 1;\r\n    public static STATUS_CONNECTING = 2;\r\n    public static STATUS_DISCONNECTING = 3;\r\n\r\n    public static getInstance(): WebSocketClientHandler {\r\n        if (!WebSocketClientHandler.instance) {\r\n            WebSocketClientHandler.instance = new WebSocketClientHandler();\r\n        }\r\n        return WebSocketClientHandler.instance;\r\n    }\r\n\r\n    private static instance: WebSocketClientHandler;\r\n    private authFailedState: boolean = false;\r\n    private connectRetry: boolean = false;\r\n    private connectRetryTimes: number = 0;\r\n    private connectStatus: number = 0;\r\n    private closeCode: number = 0;\r\n    private closeReason: string = \"\";\r\n    private authToken: string = \"\";\r\n    private ws: WebSocket | null = null;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    public setAuthToken = (authToken: string) => {\r\n        this.authToken = authToken\r\n    }\r\n\r\n    public getStatus = () => {\r\n        return {\r\n            'authFailedState': this.authFailedState,\r\n            'connectStatus': this.connectStatus,\r\n            'closeCode': this.closeCode,\r\n            'closeReason': this.closeReason,\r\n            'connectRetryTimes': this.connectRetryTimes\r\n        }\r\n    }\r\n\r\n    public checkConnected = () => {\r\n        return this.connectStatus === WebSocketClientHandler.STATUS_CONNECTED\r\n    }\r\n\r\n    public connect = () => {\r\n        if (this.authToken) {\r\n            if (this.connectStatus === WebSocketClientHandler.STATUS_DISCONNECTED) {\r\n                this.connectRetry = true;\r\n                this.connectStatus = WebSocketClientHandler.STATUS_CONNECTING;\r\n                this.authFailedState = false;\r\n\r\n                this.ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/websocket`)\r\n                this.ws.binaryType = \"arraybuffer\"\r\n                this.ws.addEventListener(\"open\", this.onopen)\r\n                this.ws.addEventListener(\"close\", this.onclose)\r\n                this.ws.addEventListener(\"error\", this.onerror)\r\n                this.ws.addEventListener(\"message\", this.onmessage)\r\n            } else {\r\n                console.log(\"连接已建立或正在连接,请勿重复连接\");\r\n            }\r\n        } else {\r\n            console.error(\"拒绝开始连接,授权令牌不存在\");\r\n        }\r\n    }\r\n\r\n    public disconnect = () => {\r\n        this.connectRetry = false;\r\n        this.connectRetryTimes = 0;\r\n        if (this.connectStatus === WebSocketClientHandler.STATUS_CONNECTED && this.ws) {\r\n            this.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTING;\r\n            try {\r\n                this.ws.close()\r\n            } catch (error) {\r\n                console.log(\"尝试关闭WS客户端发生错误\", error)\r\n            }\r\n        } else {\r\n            console.log(\"无需断开连接,连接尚未建立\")\r\n        }\r\n    }\r\n\r\n    private onopen = () => {\r\n        console.log(`WebSocket连接已建立,发送授权令牌`)\r\n        if (this.ws) {\r\n            this.ws.send(`{\"Auth-Token\":\"${this.authToken}\"}`)\r\n        }\r\n    }\r\n\r\n    private onmessage = (e: MessageEvent) => {\r\n        if (typeof (e.data) === \"string\") {\r\n            const jsonData = JSON.parse(e.data)\r\n            if (jsonData.verified) {\r\n                this.connectRetryTimes = 0;\r\n                this.connectStatus = WebSocketClientHandler.STATUS_CONNECTED;\r\n                toast.success(\"WebSocket连接授权成功\")\r\n                rpcClientProcess.onConnectd()\r\n            }\r\n        } else {\r\n            const bytes = new Uint8Array(e.data)\r\n            rpcClientProcess.processData(bytes)\r\n        }\r\n    }\r\n\r\n    private onclose = (e: CloseEvent) => {\r\n        this.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTED;\r\n        toast.error(`WebSocket连接已关闭,代码:${e.code},原因:${e.reason}`)\r\n        if (this.ws) {\r\n            try {\r\n                this.ws.close()\r\n            } catch (error) {\r\n                console.log(\"尝试关闭WS客户端发生错误\", e)\r\n            }\r\n            try {\r\n                this.ws.removeEventListener(\"open\", this.onopen)\r\n                this.ws.removeEventListener(\"close\", this.onclose)\r\n                this.ws.removeEventListener(\"error\", this.onerror)\r\n                this.ws.removeEventListener(\"message\", this.onmessage)\r\n            } catch (error) {\r\n                console.log(\"移除监听函数错误\", e)\r\n            }\r\n        }\r\n        this.closeCode = e.code;\r\n        this.closeReason = e.reason;\r\n        const that = this;\r\n        if (e.code === 1000 && e.reason === \"节点冲突!\") {\r\n            console.log(\"WebSocket连接已关闭,节点冲突!不再重连!\")\r\n            toast.error(\"WebSocket连接已关闭,节点冲突!不再重连!\")\r\n            this.authFailedState = true;\r\n        } else if (e.code === 1003 && e.reason === \"登录失败!\") {\r\n            console.log(\"WebSocket连接已关闭,登录失败!不再重连!\")\r\n            toast.error(\"WebSocket连接已关闭,登录失败!不再重连!\")\r\n            this.authFailedState = true;\r\n        } else {\r\n            if (this.connectRetry) {\r\n                console.log(`连接已关闭,等待3s后重连`)\r\n                this.connectStatus = WebSocketClientHandler.STATUS_CONNECTING;\r\n                this.connectRetryTimes++;\r\n                setTimeout(() => {\r\n                    that.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTED;\r\n                    if (that.connectRetry) {\r\n                        toast.warn(`WebSocket第${that.connectRetryTimes}次尝试重连`)\r\n                        that.connect();\r\n                    }\r\n                }, 3000);\r\n            } else {\r\n                console.log(`连接已关闭,不再重连`)\r\n            }\r\n        }\r\n    }\r\n    private onerror = (e: Event) => {\r\n        this.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTED;\r\n        console.error(`连接错误`, e)\r\n    }\r\n\r\n    public sendData = (data: ArrayBufferLike): boolean => {\r\n        if (!this.ws || !(this.ws.readyState === 1)) {\r\n            console.error(\"发送二进制数据错误，连接不存在或已经断开\");\r\n            toast.error(`WebSocket发送二进制数据错误，连接不存在或已经断开`)\r\n            return false;\r\n        } else {\r\n            try {\r\n                this.ws.send(data);\r\n            } catch (error) {\r\n                console.error(\"发送二进制数据错误\", error);\r\n                toast.error(`WebSocket发送二进制数据错误`)\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nconst webSocketClientHandler = WebSocketClientHandler.getInstance()\r\n\r\nexport { webSocketClientHandler };"],"sourceRoot":""}